declare const MAX_LINE_LENGTH = 16;
declare function test(message: string, testFunction: () => void): void;
declare const __user_code_string__: string;
declare const __secret_log_box: string;
declare const __secret_warn_box: string[];
declare const __secret_error_box: string[];
declare const __secret_info_box: string[];
declare const get: (selector: string) => HTMLElement;
declare const getAll: (selector: string) => any;
declare const getStyle: (el: HTMLElement, cssProp: string, pseudoSelector?: string) => string;
declare const getText: (selector: string) => string;
declare type Maybe<T> = T | null;
declare const css: (propName: string, value: string | number) => string;
declare const cssColor: (value: string) => string;
declare const assert: (condition: boolean, message?: string) => boolean;
declare const assertEqual: (a: any, b: any) => boolean;
declare const methodNegationProxyHandler: {
    get: (obj: Expectation, prop: string) => any;
};
declare type Path = Array<string | number>;
declare const hasIn: ([k, ...nextPath]: Path, obj: any) => boolean;
declare const getIn: ([k, ...nextPath]: Path, obj: any, notSetValue?: any) => any;
declare const stringify: (x: any) => string;
declare const truncateMiddle: (x: string) => string;
declare const isObject: (value: any) => boolean;
declare const deepEqual: (a: any, b: any) => boolean;
declare const jsonDiff: (a: any, b: any) => string;
declare const parseLogBox: (box: string[]) => string[];
declare const inBox: (box: string[], message: string) => boolean;
declare const fail: () => void;
declare const pass: () => void;
declare const __id: () => string;
declare const __randomInRange: (min: any, max: any) => number;
declare class Expectation {
    value: any;
    not: Expectation;
    constructor(value: any);
    toBe(expected: any): void;
    toEqual(expected: any): void;
    toBeGreaterThan(n: number): void;
    toBeGreaterThanOrEqual(n: number): void;
    toBeLessThan(n: number): void;
    toBeLessThanOrEqual(n: number): void;
    toMatch(strOrReg: string | RegExp): void;
    toHaveProperty(keyPath: Path | string, optionalTestValue?: any): void;
    toBeTruthy(): void;
    toBeFalsy(): void;
    toBeDefined(): void;
    toContain(val: any): void;
    toThrow(optionalFailureMessage?: string): void;
}
declare const expect: (x: any) => Expectation;
