{
  "id": "fpvPtfu7s",
  "title": "Fullstack TypeScript Course",
  "description": "Learn how to build web and mobile apps using TypeScript, React, and NodeJS.",
  "free": false,
  "price": 5000,
  "modules": [
    {
      "free": true,
      "id": "mKcs4ySy",
      "title": "Welcome to Pairwise",
      "challenges": [
        {
          "id": "iSF4BNIl",
          "type": "markup",
          "title": "Hello, Pairwise!",
          "instructions": "There is an HTML `h1` tag in the code editor below which contains a greeting message for you. This HTML is rendered in a live preview to the right \\- take a look\\! Your job is to change the text to say `Hello Pairwise!`. Once you finish, click the \"Run\" button in the editor. If you run into any problems, check out the [video](#{\"component\":\"VideoPlayButton\"}) explanation below\\!",
          "testCode": "test(\"The `h1` tag should contain the text: `Hello Pairwise!`\", () => {\n  const contents = getAll(\"h1\").map((x) => x.innerHTML.trim());\n  expect(contents).toContain(\"Hello Pairwise!\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/qXxUGntJ11I",
          "starterCode": "<h1>\n  Welcome to Pairwise Workspace.\n</h1>\n",
          "solutionCode": "<h1>Hello Pairwise!</h1>\n",
          "content": "## A Quick Note About the Videos\n\nMany \\(but not all\\) challenges will have these videos lessons to walk through solving the challenge. The videos are intended as supplementary material to go in addition to the challenge. We recommend trying to solve the challenge on your own first and if you get totally stuck or lost, then using the video to see a full explanation.\n\nThe videos are intended to help you avoid ever getting lost and not knowing how to proceed.\n\nHaving said that, feel free to move on to the next challenge\\!"
        },
        {
          "id": "Oqha$qtc",
          "type": "markup",
          "title": "Style HTML with CSS",
          "instructions": "HTML provides the content, CSS provides the _style_. Take a look at the code in the editor and the preview on the right. That white title feels out of place... See if you can turn the `h1` title from `white` to `gold` color\\! Remember, there is a [video](#{\"component\":\"VideoPlayButton\"}) below to help guide you if you get stuck\\!\n\n> ++NOTE:++ Don't worry if you don't know what some of these terms are yet. These are some short intro challenges to help familiarize you with the Pairwise workspace. All of these topics are explained in detail later on.\n",
          "testCode": "test(\"The `h1` title should have a `gold` CSS `color` property.\", () => {\n  const title = get(\"h1\");\n  const style = getStyle(title, \"color\");\n  expect(style).toBe(cssColor(\"gold\"));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/RwNvQZuVdSs",
          "starterCode": "<html>\n  <header>\n    <style>\n      body {\n        background: #204678;\n        padding-left: 12px;\n        padding-right: 12px;\n      }\n      h1 {\n        /* Here! Look Here! */\n        color: white;\n      }\n      p {\n        color: tomato;\n      }\n    </style>\n  </header>\n  <body>\n    <div>\n      <h1>Welcome to Pairwise!</h1>\n      <p>\n        CSS let's you change the color and shape of HTML!\n      </p>\n    </div>\n  </body>\n</html>\n",
          "solutionCode": "<html>\n  <header>\n    <style>\n      body {\n        background: #1a4a2e;\n        padding-left: 12px;\n        padding-right: 12px;\n      }\n      h1 {\n        /* Here! Look Here! */\n        color: gold;\n      }\n      p {\n        color: tomato;\n      }\n    </style>\n  </header>\n  <body>\n    <div>\n      <h1>Welcome to Pairwise!</h1>\n      <p>\n        CSS let's you change the color and shape of HTML!\n      </p>\n    </div>\n  </body>\n</html>\n",
          "content": ""
        },
        {
          "id": "Sbb4Nf76s",
          "type": "typescript",
          "title": "Start Programming",
          "instructions": "Let's start with something very simple. Take a look at the code editor below. There you will find two functions, the `addTwoNumbers` function \\(which is complete\\) and the `subtractTwoNumbers` function \\(which is incomplete\\). This challenge is a little harder than the previous two \\- if you feel lost, check out the [video](#{\"component\":\"VideoPlayButton\"}) for some help\\!\n\nTake a look at the code and the comments \\(green colored text\\). Try to complete the `subtractTwoNumbers` function\\! When you are finished, press the \"Run\" button to run your code against the tests\\!",
          "testCode": "const tests = [\n  [3234, 435],\n  [32134, 46645],\n  [31234, 2342231],\n  [321341, 4234],\n  [3234, 2342],\n  [92342, 437],\n  [2343, 432324],\n  [233, 235],\n  [36579, 444],\n  [3, 12],\n];\n\ntest(\"The `addTwoNumbers` function should add the arguments together and return the result.\", () => {\n  for (const testCase of tests) {\n    expect(addTwoNumbers(...testCase)).toBe(testCase[0] + testCase[1]);\n  }\n});\n\ntest(\"The `subtractTwoNumbers` function should accept two arguments and return the result of subtracting the second from the first.\", () => {\n  for (const testCase of tests) {\n    expect(subtractTwoNumbers(...testCase)).toBe(testCase[0] - testCase[1]);\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/uLwyU-vfY0c",
          "starterCode": "/**\n * A function which takes two numbers and adds them\n * together.\n */\nfunction addTwoNumbers(a: number, b: number) {\n  return a + b;\n}\n\n/**\n * A function which takes two numbers and subtracts\n * the second from the first.\n */\nfunction subtractTwoNumbers(a: number, b: number) {\n  // Hello!!! Write your solution on the next line here:\n}\n",
          "solutionCode": "/**\n * A function which takes two numbers and adds them\n * together.\n */\nfunction addTwoNumbers(a: number, b: number) {\n  return a + b;\n}\n\n/**\n * A function which takes two numbers and subtracts\n * the second from the first.\n */\nfunction subtractTwoNumbers(a: number, b: number) {\n  // Your code here\n  return a - b;\n}\n",
          "content": ""
        },
        {
          "id": "yxZjmD0o",
          "type": "media",
          "title": "Welcome to Pairwise! 🎉",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/Fy-RZm2jSJI",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now that you've solved your first few challenges and seen how easy it is to get started, we want to take a moment to introduce you to how Pairwise works and help you get started working through the \ncourse\\.\n\n## The Course\n\nThe Pairwise curriculum is composed of 13 modules. Together, they give you a complete education in full\\-stack software development. Pairwise can give you all the skills to start a new career in software development. Our curriculum focuses on teaching **TypeScript, React, **and** NodeJS**. If you are curious more about why we chose these technologies, feel free to [read our rationale here](https://www.pairwise.tech/curriculum) or [watch this video](/workspace/7j8@a2tVR).\n\nYou can access the course navigation by clicking the menu icon in the top left. This is always available for you to navigate to any challenge or module.\n\nThe first two modules introduce HTML/CSS and TypeScript, so they cover many of the basics of web development and programming. These two modules are completely free and no signup is required\\! However, you can create an account at any time \\(also free\\!\\) to track your progress \\(don't worry, we will track your progress even if you don't have an account yet\\).\n\nIf you do decide to continue and complete the entire course, there will be a one\\-time payment which will give you lifetime access to the course. You can make this payment with a credit card at anytime after signing up.\n\nThe primary mode of learning is through short, interactive coding challenges like the one you just solved. If you persist through the entire course, you will also build up a portfolio of projects you build and deploy on your own\\! You can use this portfolio as a showcase of your skills to future employers.\n\n## Getting Started\n\nEnough talking\\! To start learning you just need to start on the next challenge. Each challenge should just take 5\\-10 minutes to complete and will be simple and interactive just like the last. We know you're eager to click that **Next Challenge** button, but before you do we encourage you to watch this short video tutorial of how to use the _Pairwise Workspace_. It will give you some helpful tips which will help you get started, and after that we'll get out of your way\\! Good luck and welcome\\!\n\n> If you want to stay up to date with changes and additions to the Pairwise course, feel free to [follow us on Twitter](https://twitter.com/PairwiseTech) where we will post frequent product updates.\n"
        }
      ]
    },
    {
      "free": true,
      "id": "fpvPtNWkC",
      "title": "HTML & CSS",
      "challenges": [
        {
          "id": "IEC6FcKI",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/Lfh4fPzrCyk",
          "starterCode": "",
          "solutionCode": "",
          "content": "Welcome to the first Module\\! We'll be using HTML and CSS to lay a foundation for programming and get some practice writing real code.\n# What you will do in this module\n\n* Write a bunch of real code\n* Build your own web page\n* Put a website online\n\n\nThe challenges in this module will move fast and include a lot of video content. These are your first steps into the world of programming, and if you continue along this path you'll look back some day and remember where it all started: Right here\\!\n# Why are we learning this?\n\nWe _love_ the question \"why\" and we'll answer that in the [introductory lesson on HTML](/workspace/5ziJI35f#h-why-are-we-learning-html).\n\nOnward\\!"
        },
        {
          "id": "5ziJI35f",
          "type": "section",
          "title": "HTML, the Language of the Web",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "HTML is the reason there is anything online to look at. It's ubiquitous online because without it there would be nothing. When you visit Facebook or Google or Reddit you're reading HTML. You're reading HTML right now.\n# What is HTML?\n\nHTML is a language for putting content into web browsers and telling browsers what content means what. Consider the following items:\n\n* Some plain text\n* Some _bold italic_ text\n* Some `code` text\n\n\nIt's easy to tell the difference and that's the point. Different parts of a webpage mean different things, and as programmers we need a way of telling a web browser what's what.\n\nLet's take another example. Consider the list above. Howe does the browser know that its' a list? How does it know to include a small dot in front of the text? The answer is HTML. \n\nConsider what that three\\-item list looks like to you, the reader, and also consider what it looks like in code:\n\n```html\n<ul>\n  <li>Some plain text</li>\n  <li>\n    Some <strong><em>bold italic</em></strong> text\n  </li>\n  <li>Some <code>code</code> text</li>\n</ul>\n\n```\n\nIt looks quite different\\! The code above is what the browser sees. A `ul` with some `li`s inside tell the browser we want a list. Putting some text inside a `strong` and an `em` will make the text **bold** and _italic_ respectively\\. \n# Why are we learning HTML?\n\nA few reasons: \n\n* It's visual\n* It gives you real skills, quickly\n* It's foundational\n\n\nHere's what this in more detail.\n\n## 1\\. It's visual\n\nWhat you write in code will appear on screen. This is hugely important when you're first learning. Programmers specialize in telling computers what to do, and computers don't always give you visual feedback to let you know that your commands are achieving the desired result.\n\nThink about the clock on your phone. Seem simple right? It shows the time. It also adjusts for daylight savings time, or if you physically enter a different timezone. It can display the time in 24\\-hour format or AM\\-PM format. Consider this:\n\n* How does your phone know the time? \n* How does the clock update when daylight savings time shifts or when you step off of a plan? \n\n\nThis functionality, which we all take for granted, was programmed by someone. Imagine you are that person. If you program the phone to update its time based on your GPS location, how do you know it worked? There's no immediate visual feedback to tell you whether your code worked or not.\n\nIf you're writing HTML there is visual feedback, so you will know immediately if your code is doing what you want it to.\n\n## 2\\. It gives you real skills, quickly\n\nIf you learn the basics of HTML, guess what? You can make your own website. In fact, in this course we'll walk you through creating a website from scratch and getting it online for free. \n\nAt the end of this module you will be able to build something real, that you can see online and show to other people. In fact, using just the skills in this first module you can even build websites for other people and **get paid to do it**. There are many people around the world who make a living this way. \n\nOf course our goal is to give you the skills to be a full software engineer so we will go well beyond HTML. Which brings us to the final point...\n\n## 3\\. It's foundational\n\nHTML is everywhere, and not just on the web.\n\nConsider Facebook, Twitter, Reddit, Google, Amazon, Netflix, etc. These massive companies all rely on HTML. They all have mobile apps too, but the web component is a significant part of their business.\n\nConsider also that the principles you learn while building HTML can translate into mobile app development as well. We will touch on this significantly in later parts of the course. For now, let's focus on HTML and dive in.\n# HTML Syntax\n\n\n## Tags\n\nAll those things you saw in the code at the beginning of the lesson, `<ul>`, `<li>`, `<strong>`, etc. are called tags. Don't worry, you don't have to remember this yet, but you will over time because this is how programmers talk about HTML and how we walk about it in our videos. \n\n### Anatomy of an HTML tag\n\nTags usually have two parts:\n\n* The opening tag\n* The closing tag\n\nOpening tags include a `<` symbol, followed by the name of the tag, followed by the `>` symbol\\. Closing tags are almost exactly the same. The only difference is that closing tags have a `/` symbol right after the `<`. Example:\n\n* `<p>I'm a paragraph</p>`\n\n\nReading through one character at a time, the opening \"P tag\" is `<` \\+ `p` \\+ `>`. The closing P tag is `<` \\+ `/` \\+ `p` \\+ `>`. You can use this rule for every tag you write. \n\nHere are a few more examples. Try to see the pattern of opening `<` \\+ tag name \\+ `>` and closing `</` \\+ tag name \\+ `>`.\n\n* `<a>Link</a>`\n* `<button>Click me</button>`\n* `<h1>Heading text</h1>`\n\n\n### Self\\-closing tags\n\nNot all tags have to correspond to a closing tags. Sometimes it wouldn't make sense to have any text inside the tag. For example, a `<p>` means a paragraph so you would expect some text inside. However, an `<img>` tag means an image and a `<video>` means a video. When you see one of these tags the browser knows to show the actual image or the actual video that the tag corresponds to, so there is no need to write additional text inside the tag. This is also true of input fields, where you can type things in to a webpage. Ever logged in to a site? Yeah, like that.\n\nHere are some common tags that are self\\-closing. \n\n* `<img />`\n* `<video />`\n* `<input />`\n\n\nNotice the syntax here. It's like the opening tag and closing tag got smushed together because there's nothing in between:\n\n* `<img></img>` becomes `<img />`\n* `<video></video>` becomes `<video />`\n* `<input></input>` becomes `<input />`\n\n\n## Properties\n\nThe final piece before we dive in to some code\\! Properties tell the browser things about the tag itself. This will become more clear with examples. Consider the `<img />` tag mentioned above. That points to an image, but how does the browser now what image? With a property.\n\n```markup\n<img src=\"https://placekitten.com/g/200/200\" />\n\n```\n\nThe key above is the `src` property\\. The syntax for properties looks like: property name \\+ `=` \\+ `\"` \\+ property value \\+ `\"`. All of this goes inside the opening tag, which is the only tag if it's self\\-closing like the `<img />` above\\.\n\nNow consider another example, perhaps the single most important property in all of HTML. The `href`:\n\n```markup\n<a href=\"https://www.reddit.com/r/ProgrammerHumor/\">Don't click me if you value your time...</a>\n\n```\n\nThe `a` tag is the \"link\" on the web. It's what you click when after searching for something, or when shopping, or when doing research. It's a fundamental part of the web. Web pages include `a` tags which link to other pages. Without links the internet would just be a bunch of disperate web pages that you had to visit directly by typing the address into your browser. OK, back on topic.\n\nThe `href` property of the `a` tag tells the browser where to send someone when they click the link. \n\nThese examples are just meant to be an overview, in the coming challenges you'll use all these tags directly. There's no substitute for hands\\-on practice. Onward\\!"
        },
        {
          "id": "9scykDold",
          "type": "markup",
          "title": "The h1 Tag",
          "instructions": "Right below the existing `p` tag add an `h1` tag with the text \"Hello\\!\" inside it. If you don't know where to start, watch the [video](#{\"component\":\"VideoPlayButton\"}) for some hints.",
          "starterCode": "<p>This is an HTML file. Add your code below this line</p>",
          "solutionCode": "<p>This is an HTML file. Add your code below this line</p>\n<h1>\n    Hello!\n</h1>",
          "testCode": "test(\"There should be an `h1` tag with the text 'Hello!'\", () => {\n  expect(get(\"h1\").innerHTML.trim()).toBe(\"Hello!\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/o7G8vNxD4M0",
          "content": "We're starting off with some simple text text tags. The web is full of text so these are some of the most common tags you will find. For now the webpages we create may not look like much, just some different text here an there, but soon we will learn about how to make things look much more interesting."
        },
        {
          "id": "9scykdziW",
          "type": "markup",
          "title": "HTML Heading Tags",
          "instructions": "In the last challenge you added an `h1` tag, which represents a \"heading 1\" tag in HTML. In total, there are six tags like this. As you might guess, the second heading tag looks like this: `<h2>`. \n\nIn the editor below, add one of each heading tag. Each tag should contain some text, feel free to add any text you feel like inside the tags\\! When you are finished, take a look at the preview to the right to see the results\\! \n\nCheck out the [video](#{\"component\":\"VideoPlayButton\"}) below for more help. ",
          "starterCode": "<h1>This is a heading 1 tag</h1>\n",
          "solutionCode": "<h1>This is a heading 1 tag</h1>\n<h2>This is a heading 1 tag</h2>\n<h3>This is a heading 1 tag</h3>\n<h4>This is a heading 1 tag</h4>\n<h5>This is a heading 1 tag</h5>\n<h6>This is a heading 1 tag</h6>",
          "testCode": "['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(tag => {\n    test(`There should be an \\`${tag}\\` with text inside`, () => {\n        expect(typeof get(tag).innerHTML).toBe(\"string\")\n    })\n})\n",
          "videoUrl": "https://www.youtube.com/embed/DNkEvucHKlM",
          "content": ""
        },
        {
          "id": "9scykuYtf",
          "type": "markup",
          "title": "Nesting Tags",
          "instructions": "So far we have learned how to add some HTML tags to a document. HTML is pretty flexible, and you can also nest tags inside one another. Another tag we have not seen yet is the `<b>` tag, which makes text... bold\\! In the editor below, create a `<p>` tag with some text inside. Then, choose some part of the text and enclose it in a `<b>` tag to make it bold.",
          "starterCode": "",
          "solutionCode": "<p>This is a paragraph tag, <b>this is bold text inside it!</b></p>\n",
          "testCode": "test(\"There should be a `p` tag with text inside.\", () => {\n  const element = get(\"p\");\n  return typeof element.innerHTML === \"string\";\n});\n\ntest(\"There should be a `b` tag with text inside.\", () => {\n  const element = get(\"b\");\n  return typeof element.innerHTML === \"string\";\n});\n\ntest(\"The `p` tag should contain a `b` tag with text inside.\", () => {\n  expect(typeof get(\"p b\").innerHTML).toBe(\"string\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/hfdVfk4wZMo",
          "content": ""
        },
        {
          "id": "ab37hKKmv",
          "type": "markup",
          "title": "Opening and Closing Tags",
          "instructions": "Here we have two tags: `h1` and `p`. One of them doesn't have a closing tag. Make sure both tags are properly closed. ",
          "testCode": "test(\"There should be a `h1` tag\", () => {\n  expect(get(\"h1\")).toBeTruthy();\n});\n\ntest(\"There should be a `p` tag\", () => {\n  expect(get(\"p\")).toBeTruthy();\n});\n\ntest(\"The `h1` should have a closing tag\", () => {\n  expect(__user_code_string__).toMatch(/<h1/); // Make sure there's also an opening tag. Otherwise the test will pass for _just_ a closing tag\n  expect(__user_code_string__).toMatch(/\\/h1>/);\n});\n\ntest(\"The `p` should have a closing tag\", () => {\n  expect(__user_code_string__).toMatch(/<p/);\n  expect(__user_code_string__).toMatch(/\\/p>/);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/x25o4tOLRYM",
          "starterCode": "<!-- Something is wrong with the code below... -->\n<h1>Jello!</h1>\n<p>An amazing food",
          "solutionCode": "<h1>Jello!</h1>\n<p>An amazing food</p>",
          "content": ""
        },
        {
          "id": "8XbaRXK0$",
          "type": "markup",
          "title": "Empty Tags and Content",
          "instructions": "Add some content to the `h1` tag and the `p` tag so that something shows up in the preview.\n**Hint:** You can add any text you want inside the text. Try `hey` if you're not sure what to write. Check out the [video](#{\"component\":\"VideoPlayButton\"}) if you're stuck.",
          "testCode": "['h1', 'p'].forEach(tagName => {\n  test(\"The `\" + tagName + \"` tag should not be empty\", () => {\n    expect(get(tagName).innerHTML.trim()).not.toBe('');\n  });\n});\n",
          "videoUrl": "https://www.youtube.com/embed/9zOjFIKZc9Y",
          "starterCode": "<!-- These tags are empty. Add some content in order to pass the tests -->\n<h1></h1>\n<p></p>",
          "solutionCode": "<h1>hey</h1>\n<p>there</p>",
          "content": ""
        },
        {
          "id": "MNNx8m4XV",
          "type": "markup",
          "title": "The Span Tag",
          "instructions": "We've seen heading, paragraph, and bold tags now. Another very common HTML tag is the `span`. The span is a generic tag which can be used to wrap some content. It is used to select inline content purely for stylistic purposes \\(we will learn more about styles and CSS later\\).\n\nFor now, let's try out something simple with the `span` tag\\. In the code editor is some text and a `style` tag\\. Don't worry about the details of the style tag just yet: this is just a preview of what it can do\\! Change the `b` tag in the paragraph to a `span`. Watch the results in the preview on the right\\! The text remains bold because we are targeting and styling the `span` to be bold. Cool\\!",
          "testCode": "test(\"There should be a `p` tag with text inside.\", () => {\n  const element = get(\"p\");\n  return typeof element.innerHTML === \"string\";\n});\n\ntest(\"There should be a `span` tag with text inside.\", () => {\n  const element = get(\"span\");\n  return typeof element.innerHTML === \"string\";\n});\n\ntest(\"The `p` tag should contain a `span` tag with text inside.\", () => {\n  expect(typeof get(\"p span\").innerHTML).toBe(\"string\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/UCp3Y3cYtG0",
          "starterCode": "<style>\n  span {\n    font-weight: bold;\n  }\n</style>\n\n<!-- Only change code here: -->\n<p>This is a paragraph, with some <b>bold text</b>.</p>\n",
          "solutionCode": "<style>\n  span {\n    font-weight: bold;\n  }\n</style>\n\n<!-- Only change code here: -->\n<p>This is a paragraph, with some <span>bold text</span>.</p>\n",
          "content": ""
        },
        {
          "id": "rOuaLSaYV",
          "type": "markup",
          "title": "Divs!",
          "instructions": "A fundamental HTML tag is the `div`. \"div\" is short for division, and you can think of divs like a block or container which you can use to organize, structure, and style HTML content. A div does not do anything on it's own, but it can be used to organize other HTML content and then specifically target it for styling and layout.\n\nIn the HTML document below is some content. There are two divs present, one in the top and one at the end of the document. Take a look at how they are organized, and how other content is included _inside_ the div. There is additional content in the middle of the document, three paragraph tags, but it is just sitting there. Add another div element to group these three paragraph tags.",
          "testCode": "test(\"There should be 3 divs in the document.\", () => {\n  const divs = getAll(\"div\");\n  expect(divs.length).toBe(3);\n});\n\ntest(\"The middle div should contain 3 paragraph tags.\", () => {\n  const divs = getAll(\"div\");\n  for (const child of divs[1].children) {\n    expect(child.tagName).toBe(\"P\");\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/4ZVeHykqBqo",
          "starterCode": "<div>\n  <h1>Welcome to my website</h1>\n</div>\n\n<p>We are glad you can join us</p>\n<p>It's great you are here!</p>\n<p>Welcome!</p>\n\n<div>\n  <h3>Footer section...</h3>\n</div>\n",
          "solutionCode": "<div>\n  <h1>Welcome to my website</h1>\n</div>\n\n<div>\n  <p>We are glad you can join us</p>\n  <p>It's great you are here!</p>\n  <p>Welcome!</p>\n</div>\n\n<div>\n  <h3>Footer section...</h3>\n</div>\n",
          "content": ""
        },
        {
          "id": "SB9wO2H4z",
          "type": "markup",
          "title": "Divs, Divs, Divs!",
          "instructions": "To give you a sense of how divs are like \"containers\" take a look at the preview on the right. We are adding some styles to the 3 divs in the HTML document so they all have a width and height and background color, so you can see them. Again, don't worry about the styles yet, we will focus on these soon. For now just look at the three boxes\\! These are all divs. You can add text or other HTML content inside of them.\n\nFor this challenge, continue adding divs to the document until there are 20 total divs\\! ",
          "testCode": "test(\"The HTML document should contain 20 divs.\", () => {\n  expect(getAll(\"div\").length).toBe(20);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/jatY1j9xaJg",
          "starterCode": "<style>\n  body {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  div {\n    margin: 2px;\n    width: 150px;\n    height: 150px;\n    background: teal;\n  }\n</style>\n\n<!-- Add divs here -->\n<div></div>\n<div></div>\n<div></div>\n",
          "solutionCode": "<style>\n  body {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  div {\n    margin: 2px;\n    width: 150px;\n    height: 150px;\n    background: teal;\n  }\n</style>\n\n<!-- Add divs here -->\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n\n",
          "content": ""
        },
        {
          "id": "C76VHWFEt",
          "type": "markup",
          "title": "Links",
          "instructions": "One fundamental property of the internet is that webpages link to other webpages. How can we \"link\" to another webpage in an HTML document? HTML provides an `a` hyperlink tag for just this purpose. The `a` tag behaves a little differently than the tags we have seen so far. If you want to link to a webpage, you need to specify the target link. How do we do that in HTML?\n\n```markup\n<a href=\"https://app.pairwise.tech/\">Visit Pairwise!</a>\n\n```\n\nJust like that\\! The `href` _attribute_ is used to specify the url the `a` tag should link to. Another helpful attribute is the `target` attribute, which can be used to specify where the browser should open the link. If you provide `target=\"_blank\"` this will indicate to the browser to open the link in a new tab \\(rather than the current tab\\).\n\nThere is a blank canvas below\\! Add an `a` link to any url you would like to visit\\! Click the link in the preview window to try it out \\(add the `target` attribute if you don't want to be navigated away from the Pairwise workspace\\).",
          "testCode": "test(\"An `a` tag should exist.\", () => {\n  const a = get(\"a\");\n  expect(a !== null).toBe(true);\n});\n\ntest(\"The `a` tag should contain some text.\", () => {\n  const a = get(\"a\");\n  expect(typeof a.innerHTML === \"string\").toBe(true);\n  expect(a.innerHTML.length > 0).toBe(true);\n});\n\ntest(\"The `a` tag should link to a url.\", () => {\n  const a = get(\"a\");\n  expect(typeof a.href === \"string\").toBe(true);\n  expect(a.href.length > 0).toBe(true);\n  // Ok ~\n  expect(a.href.includes(\"http\") || a.href.includes(\"https\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/k2LyR-Z60SU",
          "starterCode": "",
          "solutionCode": "<a href=\"https://app.pairwise.tech/\" target=\"_blank\">Visit Pairwise!</a>\n",
          "content": ""
        },
        {
          "id": "TaV@i63z8",
          "type": "markup",
          "title": "Entering Text with Input Tags",
          "instructions": "Webpages would not be very useful without the ability to enter information and support user interactions. In fact, submitting text to a webpage is one of the most common interactions. How do we enter text in an HTML document? We can use the `input` tag\\. It's very easy, actually. Try to add an `input` tag in the HTML document below. The input tag behaves very similarly to the tags we have already seen.\n\nOnce you figure it out, try typing in the input element in the preview\\! Great\\!",
          "testCode": "test(\"The HTML document should contain an `input` tag.\", () => {\n  expect(get(\"input\") !== null).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ZMVfhC-m7H8",
          "starterCode": "<div>\n  <h1>We want to enter some text</h1>\n  <p>Any text!</p>\n  <div>\n    <b>Let the user decide!</b>\n  </div>\n  <div>\n    <italic>Let's add an \"input\" tag here:</italic>\n  </div>\n</div>\n",
          "solutionCode": "<div>\n  <h1>We want to enter some text</h1>\n  <p>Any text!</p>\n  <div>\n    <b>Let the user decide!</b>\n  </div>\n  <div>\n    <italic>Let's add an \"input\" tag here:</italic>\n  </div>\n  <input />\n</div>\n",
          "content": ""
        },
        {
          "id": "Fnru9fJsk",
          "type": "markup",
          "title": "The Label Tag",
          "instructions": "There is one thing to note about inputs: they don't require a closing tag. This is because they don't really have content... Instead, the input manages its own content internally as the user types. Therefore, you can render an input like this: `<input>`, or this: `<input />`. However, browsers are very forgiving so `<input></input>` also works 😏.\n\nInputs are often associated with `<label>` tags, which specify a \"label\" for the input \\(this is useful for screen readers: more on that later\\). In the HTML document below, you will see a `form` tag, which encloses several `input` elements\\.\n\nTake a look at the preview on the right to see the result\\! The last three inputs are missing a `label`. Add their labels, following the pattern in the labels for the first three inputs.\n\n**Note:** The `id` attribute you see on the `input` elements must match the `label` `for` attribute, to associate the label with the input.",
          "testCode": "test(\"The HTML document should contain 6 `input` tags.\", () => {\n  const inputs = getAll(\"input\");\n  expect(inputs.length).toBe(6);\n});\n\ntest(\"The HTML document should contain 6 `lable` tags.\", () => {\n  const labels = getAll(\"label\");\n  expect(labels.length).toBe(6);\n});\n\ntest(\"The 4th label should contain the text \\\"Age\\\".\", () => {\n  const labels = getAll(\"label\");\n  const label = labels[3];\n  expect(label.innerHTML).toBe(\"Age\");\n});\n\ntest(\"The 5th label should contain the text \\\"Email\\\".\", () => {\n  const labels = getAll(\"label\");\n  const label = labels[4];\n  expect(label.innerHTML).toBe(\"Email\");\n});\n\ntest(\"The 6th label should contain the text \\\"Profession\\\".\", () => {\n  const labels = getAll(\"label\");\n  const label = labels[5];\n  expect(label.innerHTML).toBe(\"Profession\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/aiJgxYldddc",
          "starterCode": "<form>\n  <label for=\"first_name\">First Name</label>\n  <input\n    name=\"first_name\"\n    id=\"first_name\"\n    type=\"text\"\n    placeholder=\"Enter your first name\"\n  /><br />\n  <label for=\"middle_name\">Middle Name</label>\n  <input\n    name=\"middle_name\"\n    id=\"middle_name\"\n    type=\"text\"\n    placeholder=\"Enter your middle name\"\n  /><br />\n  <label for=\"last_name\">Last Name</label>\n  <input\n    name=\"last_name\"\n    id=\"last_name\"\n    type=\"text\"\n    placeholder=\"Enter your last name\"\n  /><br />\n\n  <!-- Add your code here: -->\n  <input name=\"age\" type=\"text\" placeholder=\"Enter your age\" /><br />\n  <input name=\"email\" type=\"text\" placeholder=\"Enter your email\" /><br />\n  <input\n    name=\"profession\"\n    type=\"text\"\n    placeholder=\"Enter your profession\"\n  /><br />\n</form>\n",
          "solutionCode": "<form>\n  <label for=\"first_name\">First Name</label>\n  <input\n    id=\"first_name\"\n    name=\"first_name\"\n    type=\"text\"\n    placeholder=\"Enter your first name\"\n  /><br />\n  <label for=\"middle_name\">Middle Name</label>\n  <input\n    id=\"middle_name\"\n    name=\"middle_name\"\n    type=\"text\"\n    placeholder=\"Enter your middle name\"\n  /><br />\n  <label for=\"last_name\">Last Name</label>\n  <input\n    id=\"last_name\"\n    name=\"last_name\"\n    type=\"text\"\n    placeholder=\"Enter your last name\"\n  /><br />\n\n  <!-- Add your code here: -->\n  <label for=\"age\">Age</label>\n  <input id=\"age name=\"age\" type=\"text\" placeholder=\"Enter your age\" /><br />\n  <label for=\"email\">Email</label>\n  <input\n    id=\"email\"\n    name=\"email\"\n    type=\"text\"\n    placeholder=\"Enter your email\"\n  /><br />\n  <label for=\"profession\">Profession</label>\n  <input\n    id=\"profession\"\n    name=\"profession\"\n    type=\"text\"\n    placeholder=\"Enter your profession\"\n  /><br />\n</form>\n",
          "content": ""
        },
        {
          "id": "6hRkTDrSu",
          "type": "markup",
          "title": "Forms",
          "instructions": "In HTML, traditionally, information is submitted using a `form`. A form is a special tag which is intended to enclose several other tags which allow the user to enter text and other information. The \"form\" captures all of this and then provides a \"submit\" function which can be used to submit the form data to a server.\n\nFor now, we won't worry about how form submission works. We will cover this later in the course. At the stage, let's just become familiar with what a `form` is\\.\n\nTake a look at the HTML document below and the preview on the right. There are some more inputs and labels again, but now the results are very different. Here, we have radio buttons and checkboxes, new types of input element. As you can see, these can be specified using the `type` attribute\\. The radio button allows only one selection out of several, and the checkbox can be checked on or off.\n\nAll of these elements constitute the contents of a form. To complete the challenge, wrap them all in a `form` tag\\.",
          "testCode": "test(\"A `form` should exist in the HTML document.\", () => {\n  expect(get(\"form\") !== null).toBe(true);\n});\n\ntest(\"The `form` tag should contain the 6 input tags.\", () => {\n  const inputs = getAll(\"form input\");\n  expect(inputs.length).toBe(6);\n});\n\ntest(\"The `form` tag should contain the 6 label tags.\", () => {\n  const lables = getAll(\"form label\");\n  expect(lables.length).toBe(6);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/wuVdQTNiaF8",
          "starterCode": "<p><b>Personal Information:</b></p>\n<label for=\"name\">Name</label>\n<input type=\"text\" id=\"name\" name=\"name\" /><br />\n<label for=\"email\">Email</label>\n<input type=\"text\" id=\"email\" name=\"email\" /><br />\n\n<p><b>Gender:</b></p>\n<label for=\"male\">Male</label>\n<input type=\"radio\" id=\"gender\" name=\"gender\" /><br />\n<label for=\"female\">Female</label>\n<input type=\"radio\" id=\"gender\" name=\"gender\" /><br />\n<label for=\"other\">Other</label>\n<input type=\"radio\" id=\"gender\" name=\"gender\" /><br /><br />\n<label for=\"updates\">I want to receieve email updates:</label>\n<input type=\"checkbox\" id=\"updates\" name=\"updates\" /><br /><br />\n",
          "solutionCode": "<form>\n  <p><b>Personal Information:</b></p>\n  <label for=\"name\">Name</label>\n  <input type=\"text\" id=\"name\" name=\"name\" /><br />\n  <label for=\"email\">Email</label>\n  <input type=\"text\" id=\"email\" name=\"email\" /><br />\n\n  <p><b>Gender:</b></p>\n  <label for=\"male\">Male</label>\n  <input type=\"radio\" id=\"gender\" name=\"gender\" /><br />\n  <label for=\"female\">Female</label>\n  <input type=\"radio\" id=\"gender\" name=\"gender\" /><br />\n  <label for=\"other\">Other</label>\n  <input type=\"radio\" id=\"gender\" name=\"gender\" /><br /><br />\n  <label for=\"updates\">I want to receieve email updates:</label>\n  <input type=\"checkbox\" id=\"updates\" name=\"updates\" /><br /><br />\n</form>\n",
          "content": ""
        },
        {
          "id": "e@rWfBJRk",
          "type": "markup",
          "title": "Textarea",
          "instructions": "Sometimes, you have more to say than can fit in a simple `input` tag\\. For these cases of prolific creativity, there is the `textarea`\\! The `textarea` tag provides a more flexible input space for writing more lengthy text. It behaves just like the `input` tag, but renders differently. On the blank canvas below, try rendering a `textarea` tag\\.",
          "testCode": "test(\"The HTML document should contain a `textarea` tag.\", () => {\n  expect(get(\"textarea\") !== null).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/uqXdEuEHCps",
          "starterCode": "",
          "solutionCode": "<div><label for=\"prose\">Write to your heart's content:</label></div>\n<textarea id=\"prose\" />\n",
          "content": ""
        },
        {
          "id": "kp3HVbx$L",
          "type": "markup",
          "title": "The Select Tag",
          "instructions": "Another common input element tag which you have most likely used before is the `select`tag\\. The `select` tag creates a dropdown to provide you with several options you can choose between. The options are created using the... `option` tag\\! Take a look at the HTML below, and the preview on the right.\n\nIt's a select element to chose a fruit\\! Your job is to add 3 more fruit options\\!",
          "testCode": "test(\"A `select` tag should exist.\", () => {\n  expect(get(\"select\") !== null).toBe(true);\n});\n\ntest(\"The `select` tag should contain 7 `option` tags.\", () => {\n  const options = getAll(\"select option\");\n  expect(options.length).toBe(7);\n});\n\ntest(\"There should be 7 unique fruit options.\", () => {\n  const options = getAll(\"select option\");\n  const fruits = new Set();\n  for (const opt of options) {\n    fruits.add(opt.innerHTML);\n  }\n  expect(fruits.size).toBe(7);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/EqTf6kjzH0s",
          "starterCode": "<label for=\"fruits\">Choose a fruit:</label>\n\n<select id=\"fruits\">\n  <option value=\"apples\">Apples</option>\n  <option value=\"oranges\">Oranges</option>\n  <option value=\"bananas\">Bananas</option>\n  <option value=\"plums\">Plums</option>\n</select>\n",
          "solutionCode": "<label for=\"fruits\">Choose a fruit:</label>\n\n<select id=\"fruits\">\n  <option value=\"apples\">Apples</option>\n  <option value=\"oranges\">Oranges</option>\n  <option value=\"bananas\">Bananas</option>\n  <option value=\"plums\">Plums</option>\n  <option value=\"blueberries\">Blueberries</option>\n  <option value=\"strawberries\">Strawberries</option>\n  <option value=\"grapes\">Grapes</option>\n</select>\n",
          "content": ""
        },
        {
          "id": "f4zGLmWO2",
          "type": "markup",
          "title": "Buttons",
          "instructions": "One of the most important HTML tags is the `button`. Buttons allow you to capture user interactions and create functional web applications.\n\nThe `button` tag is like most other HTML tags, there is an opening and closing tag and some inner content which is the button's text. There is an empty button in the HTML document below. Add some text content, and then click the button in the HTML preview\\!",
          "testCode": "test(\"The HTML document should contain a `button`.\", () => {\n  expect(get(\"button\") !== null).toBe(true);\n});\n\ntest(\"The `button` should contain some text.\", () => {\n  const text = get(\"button\").innerHTML.replace(/ /g, \"\").replace(/\\n/, \"\").trim();  \n  expect(text.length > 0).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ZqXR1GpHbbE",
          "starterCode": "<h1>Buttons</h1>\n<p>Buttons bring HTML to life.</p>\n<button type=\"button\" onclick=\"alert('Alert!!! You clicked the button!')\">\n\n</button>\n",
          "solutionCode": "<h1>Buttons</h1>\n<p>Buttons bring HTML to life.</p>\n<button type=\"button\" onclick=\"alert('Alert!!! You clicked the button!')\">\n    Alert!\n</button>\n",
          "content": ""
        },
        {
          "id": "Ba5aAVqP",
          "type": "markup",
          "title": "An HTML Portfolio",
          "instructions": "Every webpage you see on the internet is composed of HTML, which stands for \"Hypertext Markup Language\". It's a fancy term, but it's just a way to describe the content you see on a webpage. The first module in the Pairwise curriculum will teach you all about HTML. If you continue to work through the entire course, you will build a portfolio of projects you can showcase to future employers. This challenge is all about imaging that portfolio\\!\n\nIn this challenge, there is a simple HTML document which shows a portfolio of 3 projects. Take a look at the preview on the right. Try to update the project information with 3 project ideas you would like to build. Change the `h2` title to a title for the project or app, and change the `p` \"Description\" to a short description of the project idea. Try to think of projects you would like to build\\! If you can't think of anything, feel free to just put something easy like \"note\\-taking app\" or \"snapchat for cats\".\n\nDon't forget there is a [video](#{\"component\":\"VideoPlayButton\"}) lesson to help guide you if you're lost\\!",
          "testCode": "// Test helper\nconst checkProjectHTML = (projectIndex) => {\n  // Get the project HTML\n  const projects = getAll(\".project\");\n  const project = projects[projectIndex - 1];\n\n  // Get the h2 and p text\n  const title = project.querySelector(\"h2\").innerHTML;\n  const description = project.querySelector(\"p\").innerHTML;\n\n  // Check that it has changed\n  const titleValid = title !== `Project ${projectIndex}`;\n  const descriptionValid = description !== \"Description\";\n  return titleValid && descriptionValid;\n};\n\ntest(\"The title `h2` tag and description `p` tag for Project 1 should be changed to your own idea.\", () => {\n  expect(checkProjectHTML(1)).toBe(true);\n});\n\ntest(\"The title `h2` tag and description `p` tag for Project 2 should be changed to your own idea.\", () => {\n  expect(checkProjectHTML(2)).toBe(true);\n});\n\ntest(\"The title `h2` tag and description `p` tag for Project 3 should be changed to your own idea.\", () => {\n  expect(checkProjectHTML(3)).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Q1ctFnLiEI8",
          "starterCode": "<html>\n  <header>\n    <title>My Programming Portfolio</title>\n    <style>\n      body {\n        background: #fffabf;\n        font-family: Avenir;\n      }\n      h3 {\n        margin-bottom: 0;\n      }\n      .project {\n        padding: 6px;\n        margin-top: 8px;\n        border-radius: 10px;\n        border: 3px solid #ffa699;\n      }\n    </style>\n  </header>\n  <body>\n    <h1>My Programming Portfolio</h1>\n    <h3>\n      Here are the projects and apps I built when learning to code. All of the\n      source code is open source and available on GitHub.\n    </h3>\n    <!-- Update the project information below here -->\n    <div class=\"project\">\n      <h2>Project 1</h2>\n      <p>Description</p>\n    </div>\n    <div class=\"project\">\n      <h2>Project 2</h2>\n      <p>Description</p>\n    </div>\n    <div class=\"project\">\n      <h2>Project 3</h2>\n      <p>Description</p>\n    </div>\n    <!-- Update the project information above here -->\n  </body>\n</html>\n",
          "solutionCode": "<html>\n  <header>\n    <title>My Programming Portfolio</title>\n    <style>\n      body {\n        background: #fffabf;\n        font-family: Avenir;\n      }\n      h3 {\n        margin-bottom: 0;\n      }\n      .project {\n        padding: 6px;\n        margin-top: 8px;\n        border-radius: 10px;\n        border: 3px solid #ffa699;\n      }\n    </style>\n  </header>\n  <body>\n    <h1>My Programming Portfolio</h1>\n    <h3>\n      Here are the projects and apps I built when learning to code. All of the\n      source code is open source and available on GitHub.\n    </h3>\n    <!-- Update the project information below here -->\n    <div class=\"project\">\n      <h2>Social Media For Cats</h2>\n      <p>A social network for cats to associate and interact.</p>\n    </div>\n    <div class=\"project\">\n      <h2>Code Cafe</h2>\n      <p>An app to find the best cafes for coding or coworking.</p>\n    </div>\n    <div class=\"project\">\n      <h2>Remind Me</h2>\n      <p>\n        An app which lets you easily schedule reminders which will be sent to\n        you as a message a future date, time, or place.\n      </p>\n    </div>\n    <!-- Update the project information above here -->\n  </body>\n</html>\n",
          "content": ""
        },
        {
          "id": "Uf6xcgQtW",
          "type": "media",
          "title": "Checkpoint",
          "instructions": "",
          "testCode": "test(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/xL7gwZmtDik",
          "starterCode": "",
          "solutionCode": "",
          "content": "### HTML Conclusion\n\nWe have just touched the surface of HTML. We have covered headings and paragraphs for rendering text, inputs, forms, and buttons for capturing user input and creating interactions, and spans and divs for adding structure and layout to your HTML pages.\n\nThe tags you have learned constitute the most commonly used HTML tags and a knowledge of them will get you very far. If you are interested, take a look at the [MDN HTML reference page](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) for a more exhaustive list of all of the HTML tags which exist. There's no need to memorize all of these, but a brief overview should help paint a picture of all of the different elements HTML has to offer.\n\n### Styles with CSS\n\nThe next section will introduce CSS, which will build upon your current HTML skills to start adding life and color to your HTML document. CSS allows you to color and shape HTML elements to create custom appearances and layouts for your webpages.\n\nWith HTML and CSS, you can create beautiful webpages but to really transform them into functional web applications you need a programming language.\n\n### JavaScript\n\nJavaScript is the programming language of the web. All web browsers can run JavaScript programs, and any functionality you use on websites is typically built using JavaScript. Once you complete the CSS section, the next course module will be a deep dive into programming with a special dialect of JavaScript, _TypeScript\\._\n\nTypeScript is a typed superset of JavaScript which compiles to JavaScript. Don't worry about the details here yet: we will cover them in depth once we get to the TypeScript section. This programming section will lay the foundation for everything which comes later.\n\n### Moving Forward\n\nAfter the TypeScript module, we will have covered the foundations of HTML/CSS and programming. You will understand the basics of how webpages are made and you will have a thorough grasp of a modern programming language.\n\nFrom there, the course will get into the modern skills, tools, and workflows software engineers use to build complex applications, servers, and mobile apps. There's a lot to learn, but as you will see all of this is built on the basic foundation you are learning now\\!\n\nLet's continue\\!"
        },
        {
          "id": "CuwykKRM",
          "type": "section",
          "title": "Enter CSS",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "CSS stands for Cascading Style Sheets, but that's unimportant. What matters here is that CSS is how you change the way things _look_ on the web.\n\nHTML is the \"stuff\", the actual content on a webpage, and CSS is how all that stuff looks. For example: \n\n* Is the background dark with light text \\(like what you're reading right now\\)? \n* Is there a menu bar near the top? \n* How does the form on screen try to grab your attention with color and positioning? \n\n\nThese are all questions CSS can answer. To be specific, CSS tells the browser two things:\n\n* What elements on the page to style.\n* How those elements should look.\n\n# Selectors\n\nSelectors tell the browser what you want to style.\n\nFor example, you might say to yourself \"I want all the paragraphs on my site to be red\\!\" A very elegant design decision. In order to communicate this to the browser we can use CSS:\n\n```css\np {\n  color: red;\n}\n\n```\n\nRemember the `<p>` tag from earlier lessons? Using the tag name, `p`, we were able to \"select\" every paragraph on the page and make them all red. In this example `p` is the selector. Now let's talk about what's inside those brackets.\n# Properties\n\nCSS properties tell the browser how you want something to look. Let's say you're tired of drab white\\-background websites and want to mix it up with a `teal` background\\.\n\n```css\nbody {\n  background: teal;\n}\n\n```\n\n`body` will select the entire visible area of the web page, but we will touch on that more later. Focus on `background: teal;`. Here we have another CSS property `background` with a value of `teal`.\n\n> CSS properties take the form: property name \\+ `:` \\+ property value \\+ `;`.\n\n`background` and `color` are just two examples. There are quite a few CSS properties you can use, and the combination of them is responsible for styling every site you use on the internet.\n\nIf you're curious you can skim through [the full list of CSS properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference), but we don't recommend it. It's a very dry read and by itself won't tell you what you really want to know which is what each property does. Furthermore, some CSS properties are so obscure that you can go your entire career without learning them on the job because they are just not useful in most context.\n# Blocks\n\nA \"block\" of CSS is simply the combination of selectors and properties. All the examples above are CSS blocks.\n\n> CSS blocks take the form: Selectors \\+ `{` \\+ properties \\+ `}`\n\nThese terms are not important for their own sake, but so that you aren't lost when you're working outside of this course. \n# The <style\\> tag connects HTML and CSS\n\nYou can't just write CSS anywhere in an HTML document and expect it to work. You have to write it **within a \\*\\***`style`**\\*\\* tag**. Like this:\n\n```html\n<style>\n  p { color: red; }\n</style>\n<p>Red text!</p>\n\n```\n\nIf you write that without the `style` tag the browser will literally put `p { color: red; }` on the page for everyone to see. By putting that CSS code within a `style` tag you are telling the browser to treat it as CSS rather than HTML.\n# Specificity and the HTML class and id props\n\nImagine you have two paragraphs, and you want one to be `red` and the other to be `blue`. How would you select just one? Here's the HTML:\n\n```html\n<p>I want a blue background</p>\n<p>I want a red background</p>\n\n```\n\nYou might try the following CSS:\n\n```\np { background: red; }\np { background: blue; }\n\n```\n\nHowever, both paragraphs will be `blue`\\! Why? Two things are happening here:\n\n1. `p` selects every `<p>` tag, not just the first or the second.\n1. When you have two identical selectors \\(`p` and `p` above\\) and two identical property names \\(`background` and `background` above\\) whichever one comes last wins.\n\nPoint 1 can be addressed with IDs and classes, which we will discuss shortly.\n\nPoint 2, how conflicting styles get applied by the browser, is called \"specificity\". As in, the second CSS block is considered more _specific_ than the first, and therefore it wins and gets applied.\n\n## IDs\n\nAn ID is a unique identifier in the browser and it can be used as a selector. \n\n* There should only be 1 of any ID on a web page.\n* IDs are very specific, meaning if you select an ID in your CSS that CSS will most likely win over other styles\n* HTML uses the `id` property, CSS uses the `#` selector\\.\n\n\n```html\n<style>\n  #my-paragraph { color: red; }\n  p { color: blue; }\n</style>\n<p id=\"my-paragraph\">Red text!</p>\n\n```\n\nEven though the `p` styles come last, the `#my-paragraph` styles get applied because they are more specific.\n\n> In general don't use IDs, use classes.\n\n## Classes\n\n* A class can be applied to as many things as you want.\n* Classes are more specific than tag names\n* HTML uses the `class` property, CSS uses the `.` selector\\.\n\n\n```markup\n<style>\n  .red-text { color: red; }\n  p { color: blue; }\n</style>\n<p class=\"red-text\">Red text!</p>\n\n```\n\nThe text is again red because classes are more specific than tag names.\n\n> Classes are extremely useful and flexible. Use them a lot.\n# More to come...\n\nThat's a lot of information, and mostly meaningless without practice. There's more to CSS which we will dive into later, but for now let's practice everything we just talked about. "
        },
        {
          "id": "ny51KoEI",
          "type": "markup",
          "title": "Style Some Text",
          "instructions": "* Change the color of the `<p>` tag to `red`\n* Change its text to `Exciting red text`\n\n\nIf you're unsure how to style things, that's fine\\! Check out the supplemental content for help.",
          "starterCode": "<style>\n  /* Your code here */\n</style>\n<p>Just plain text</p>\n",
          "solutionCode": "<!DOCTYPE html>\n<style>\n  p {\n    color: red;\n  }\n</style>\n<p>Exciting red text</p>\n",
          "testCode": "test(\"There should be a `p` tag with red text\", () => {\n  const el = get(\"p\");\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"red\"));\n});\n\ntest(\"There should be a `<p>` tag with the text 'Exciting red text'\", () => {\n  const el = get(\"p\");\n  expect(el.innerHTML).toBe(\"Exciting red text\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/MsaKKxVTsEk",
          "content": "This is a quick intro to CSS before we really dive in. If you're thinking to yourself \"You haven't explained this yet\" then you're right. It's intentional\\!\n\nWe'll go more in depth about what's going on shortly."
        },
        {
          "id": "KlxN3f11",
          "type": "markup",
          "title": "Changing Colors",
          "instructions": "* Change the background color so that it is `black`.\n* Change the text color of the `<p>` tags and the `<h1>` tag so that it is `white`.\n\nYour challenge is to invert the colors of the page. Instead of having black text on a white background let's have some white text on a black background. You will find the `background-color` and `color` CSS properties useful.",
          "testCode": "// test(\"The page background should be black.\", () => {\n//   const el = get(\"body\");\n//   expect(getStyle(el, \"background-color\")).toBe(cssColor(\"black\"));\n// });\n\ntest(\"The `<h1>` tag should be white.\", () => {\n  const el = get(\"h1\");\n  expect(el).toBeTruthy();\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"white\"));\n});\n\ntest(\"The `<p>` tag should be white.\", () => {\n  const els = getAll(\"p\");\n  els.forEach((el) => expect(getStyle(el, \"color\")).toBe(cssColor(\"white\")));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7Xl0Acybsq8",
          "starterCode": "<!-- Put your code up here, above everything else. You will need a <style> tag -->\n<h1>Welcome to some text!</h1>\n<p>\n  Now we start the paragraphs! As you do more and more development you will\n  discover that there is a surprising amount of Latin online.\n</p>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nunc erat,\n  aliquet sed pellentesque ut, feugiat non orci. Nam consectetur egestas odio,\n  sed rutrum diam condimentum et. Nulla at cursus ante. Proin mollis lorem mi,\n  sit amet malesuada sem convallis sed. Nullam at lacus eget arcu facilisis\n  tempus vel viverra mauris. Nulla facilisi. Proin hendrerit ante a diam\n  sagittis, quis tristique sem facilisis. Sed sed viverra ante, in dignissim\n  neque.\n</p>\n\n<p>\n  Nullam id eros nec nunc euismod condimentum. Pellentesque habitant morbi\n  tristique senectus et netus et malesuada fames ac turpis egestas. Praesent sit\n  amet nulla libero. Pellentesque diam augue, condimentum eu convallis eu,\n  porttitor nec neque. Sed fringilla ipsum felis, ut rutrum lacus vehicula vel.\n  Nam et porta mauris. Suspendisse gravida ligula nec elit faucibus, et\n  ultricies lorem fermentum. Aliquam in erat a orci maximus aliquet vel id\n  risus. In tincidunt diam non lectus consequat, eu cursus nunc molestie. Duis\n  euismod turpis urna, a volutpat lorem condimentum ac. Suspendisse nec orci\n  dolor. Mauris eget pretium nulla. Donec convallis, elit a pellentesque\n  convallis, elit elit efficitur est, ut molestie justo sapien sed ligula.\n</p>\n",
          "solutionCode": "<style>\n    body {\n        background: #000000;\n    }\n    h1, p {\n        color: white;\n    }\n</style>\n<h1>Welcome to some text!</h1>\n<p>\n  Now we start the paragraphs! As you do more and more development you will\n  discover that there is a surprising amount of Latin online.\n</p>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nunc erat,\n  aliquet sed pellentesque ut, feugiat non orci. Nam consectetur egestas odio,\n  sed rutrum diam condimentum et. Nulla at cursus ante. Proin mollis lorem mi,\n  sit amet malesuada sem convallis sed. Nullam at lacus eget arcu facilisis\n  tempus vel viverra mauris. Nulla facilisi. Proin hendrerit ante a diam\n  sagittis, quis tristique sem facilisis. Sed sed viverra ante, in dignissim\n  neque.\n</p>\n\n<p>\n  Nullam id eros nec nunc euismod condimentum. Pellentesque habitant morbi\n  tristique senectus et netus et malesuada fames ac turpis egestas. Praesent sit\n  amet nulla libero. Pellentesque diam augue, condimentum eu convallis eu,\n  porttitor nec neque. Sed fringilla ipsum felis, ut rutrum lacus vehicula vel.\n  Nam et porta mauris. Suspendisse gravida ligula nec elit faucibus, et\n  ultricies lorem fermentum. Aliquam in erat a orci maximus aliquet vel id\n  risus. In tincidunt diam non lectus consequat, eu cursus nunc molestie. Duis\n  euismod turpis urna, a volutpat lorem condimentum ac. Suspendisse nec orci\n  dolor. Mauris eget pretium nulla. Donec convallis, elit a pellentesque\n  convallis, elit elit efficitur est, ut molestie justo sapien sed ligula.\n</p>\n",
          "content": "# The <body\\> tag\n\nI this lesson we touched on the `<body>` tag, which the browser will insert into the document for you if you don't do it yourself.\n# HTML colors\n\nIn HTML there are several ways to define colors. The most simple is what we've been doing so far, which is using colors that have names like `blue`, `red`, `black`, `green`, etc. However, if you had to rely on colors that have names you would be quite limited. HTML let's you define any custom color you want using some different syntax, namely HEX codes. For example, the color `white` can also be written `#ffffff`. Likewise `black` is `#000000` and `blue` is `#0000ff`. \n\nIn the meantime you can use named colors. There are quite a few, and often if you guess a color it will exist. You can see the full list here: <https://www.w3schools.com/colors/colors\\_names.asp\\>"
        },
        {
          "id": "wCrQh1f4",
          "type": "markup",
          "title": "Highlighting Text",
          "instructions": "Use the `<span>` tag to highlight some text within the paragraph.\n\nSometimes you want to style parts of text _inside_ a paragraph or a heading. You can accomplish this with the span tag.",
          "starterCode": "<style>\n  span {\n    /* hm... need some styling in here */\n  }\n</style>\n<p>\n  What a paragraph this is! Let's highlight something.\n</p>",
          "solutionCode": "<style>\n  span {\n    background: yellow;\n  }\n</style>\n<p>What a paragraph this is! Let's <span>highlight</span> something.</p>",
          "testCode": "test(\"There should be a `<span>` tag with a yellow background wrapping some text\", function() {\n  const el = get(\"span\");\n  expect(el).toBeTruthy();\n  expect(el.innerHTML).not.toBe(\"\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"yellow\"));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Q7TK9OFPKTQ",
          "content": ""
        },
        {
          "id": "pUf7$Qi2y",
          "type": "markup",
          "title": "Styling the whole page",
          "instructions": "* Give the `h1` a `palegreen` color\n* Give the whole page a background color of `black`\n* Make the rest of the text white \\(the `p` tags\\)\n\n**Hint:** To style the \"whole page\" you will need the `body` tag\\. More details in the [video](#{\"component\":\"VideoPlayButton\"}) below\\.\n",
          "testCode": "// Write your tests here:\ntest(\"`body` should have a black background\", () => {\n  const el = get(\"body\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"black\"));\n});\n\ntest(\"`h1` should have a `palegreen` color\", () => {\n  const el = get(\"h1\");\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"palegreen\"));\n});\n\ntest(\"`p` tags should be white\", () => {\n  const els = getAll(\"p\");\n  els.forEach((el) => {\n    expect(getStyle(el, \"color\")).toBe(cssColor(\"white\"));\n  });\n});\n",
          "videoUrl": "https://www.youtube.com/embed/uXRCwMID-HA",
          "starterCode": "<style>\n  /* Your code here */\n</style>\n<h1>Quotes</h1>\n<p>\n  Because a thing seems difficult for you, do not think it impossible for anyone\n  to accomplish.\n</p>\n<p>\n  Accept whatever comes to you woven in the pattern of your destiny, for what\n  could more aptly fit your needs?\n</p>\n<p>\n  Observe always that everything is the result of change, and get used to\n  thinking that there is nothing Nature loves so well as to change existing\n  forms and make new ones like them.\n</p>\n",
          "solutionCode": "<style>\n  /* Your code here */\n  body {\n    background: black;\n    color: white;\n  }\n  h1 {\n    color: palegreen;\n  }\n\n  /* \n   * NOTE: This is already done in the body tag. \n   * Our automated tests throw a fit if not styled directly though.\n   */\n  p { color: white; }\n</style>\n<h1>Quotes</h1>\n<p>\n  Because a thing seems difficult for you, do not think it impossible for anyone\n  to accomplish.\n</p>\n<p>\n  Accept whatever comes to you woven in the pattern of your destiny, for what\n  could more aptly fit your needs?\n</p>\n<p>\n  Observe always that everything is the result of change, and get used to\n  thinking that there is nothing Nature loves so well as to change existing\n  forms and make new ones like them.\n</p>\n",
          "content": "The browser has many secrets. Today we're talking about two secret tags: `body` and `html`. Where do these tags come from? From the browser itself. \n\n> Implicit** Tags**\n> These tags aren't really \"secret,\" they're implicit. What that means is that they are _implied_ simply by the fact that this is a webpage. There are many situations in which browser will make decisions for you if you're not explicit. It's something to be aware of.\n# Making it explicit\n\nYou can include these tags yourself if you're worried about the browser creating them for you:\n\n```markup\n<html>\n  <body>\n    <p>Body content in here</p>\n  </body>\n</html>\n\n```\n\nIn this code we've included the `html` and `body` tags _explicitly_, which will prevent the browser from adding them in automatically.\n# Why this matters\n\nThe big reason the `body` tag is important in CSS is it's how you control the styling of the page itself. Look at Pairwise. You're reading white text on a dark background. You can this type of look by styling the `body` tag:\n\n```css\nbody {\n  background: #1E1E1E;\n  color: white;\n}\n\n```\n\nAside from that it's just good to know. You want to know what's happening with your application. The more you know the easier it is to avoid bugs and debug them when they arise.\n"
        },
        {
          "id": "5oqm6GmH",
          "type": "markup",
          "title": "The div Tag — Putting Things in Boxes",
          "instructions": "* Give the whole page an `orange` background\n* Wrap the existing `h1` and `p` tags in a `div`\n* Style the div to have a `teal` background\n\n**Hint:** To style the whole page you will need the `body` tag\\. See the [video](#{\"component\":\"VideoPlayButton\"}) for more details.",
          "testCode": "test(\"There should be a `div`\", () => {\n  expect(get(\"div\")).toBeTruthy();\n});\n\ntest(\"The `h1` and `p` tags are within the div\", () => {\n  expect(get(\"div h1\")).toBeTruthy();\n  expect(get(\"div p\")).toBeTruthy();\n});\n\ntest(\"`body` should have orange background\", () => {\n  const body = get(\"body\");\n  const bg = getStyle(body, \"background-color\");\n  expect(bg).toBe(cssColor('orange'));\n});\n\ntest(\"`div` should have a teal background\", () => {\n  const el = get(\"div\");\n  const bg = getStyle(el, \"background-color\");\n  expect(bg).toBe(cssColor('teal'));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/1pvUY83Wnuk",
          "starterCode": "<h1>Oh what a day</h1>\n<p>\n  A wonderful day to start wrapping some divs!\n</p>\n",
          "solutionCode": "<style>\n  body {\n    background: orange;\n  }\n  div {\n    background: teal;\n  }\n</style>\n<div>\n  <h1>Oh what a day</h1>\n  <p>\n    A wonderful day to start wrapping some divs!\n  </p>\n</div>\n",
          "content": ""
        },
        {
          "id": "2kQ6adnb",
          "type": "markup",
          "title": "CSS Classes",
          "instructions": "* Create a `highlight` class to style and apply it to one of the span tags\n* Create a `highlight-blue` class and apply it to one of the span tags\n* Style the `highlight` so that it has a `yellow` background\n* Style the `highlight-blue` tag so that it has a `skyblue` background\n\nThis lesson is all about CSS class names and how they can be used to style different things. Check out the [video](#{\"component\":\"VideoPlayButton\"}) below for more help.",
          "testCode": "test(\"At least one `span` should have the `highlight` class\", () => {\n  const spans = getAll(\"span\");\n  const hasClass = spans.some((x) => x.classList.contains(\"highlight\"));\n  expect(hasClass).toBe(true);\n});\ntest(\"At least one `span` should have the `highlight-blue` class\", () => {\n  const spans = getAll(\"span\");\n  const hasClass = spans.some((x) => x.classList.contains(\"highlight-blue\"));\n  expect(hasClass).toBe(true);\n});\ntest(\"The `.highlight` class should have a `yellow` background\", () => {\n  const el = get(\".highlight\");\n  const bg = getStyle(el, \"background-color\");\n  expect(bg).toBe(cssColor('yellow'));\n});\ntest(\"The `.highlight-blue` class should have a `skyblue` background\", () => {\n  const el = get(\".highlight-blue\");\n  const bg = getStyle(el, \"background-color\");\n  expect(bg).toBe(cssColor('skyblue'));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/SH2p_8X_WOI",
          "starterCode": "<style>\n  span {\n    background: pink;\n  }\n  /* Your code here */\n</style>\n<p>\n  What if <span>we</span> wanted to <span>highlight</span> different text with\n  different <span>colors</span>?\n</p>\n",
          "solutionCode": "<style>\n  span {\n    background: pink;\n  }\n  .highlight {\n    background: yellow;\n  }\n  .highlight-blue {\n    background: skyblue;\n  }\n</style>\n<p>\n  What if <span>we</span> wanted to\n  <span class=\"highlight\">highlight</span> different text with different\n  <span class=\"highlight-blue\">colors</span>?\n</p>\n",
          "content": "This is where CSS gets real. Classes are what professional programmers use all the time to style websites. Classes give you flexibility. When you style an html tag like `p` or `div` you are styling _all_ tags of that type. Usually, that's not actually what you want. \n\nMore often than not we have \"elements\" of the UI, like a nav bar, a submit button, a video embed, etc. CSS classes let you do that.\n\n> Classes let you name your HTML elements and style _anyth_ing with that name\n\n# To style many things\n\nCSS classes give you a ton of flexibility when styling your HTML. You can utilize classes to style one type of tag in many different ways. You can also utilize CSS classes to overwrite default styles since they have greater specificity.\n\nAlso check out the [CSS lesson](/workspace/CuwykKRM) for more information."
        },
        {
          "id": "za5KHMo7",
          "type": "markup",
          "title": "Styles Within Styles",
          "instructions": "* Style the `<a>` tags _within_ the `.menu` div so that they appear vertically\n",
          "testCode": "test(\"The `<a>` tags _within_ `.menu` should have display block\", () => {\n  const els = getAll(\".menu a\");\n  expect(els.every((x) => getStyle(x, \"display\") === \"block\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/LcayPfQGrwM",
          "starterCode": "<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"content\">\n  <p>\n    Welcome to my blog! If you ever want to get in touch I'd love to hear from\n    you. You can contact me using the <a href=\"#\">Contact Page</a>. Cheers!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .menu a {\n    display: block;\n  }\n</style>\n<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"content\">\n  <p>\n    Welcome to my blog! If you ever want to get in touch I'd love to hear from\n    you. You can contact me using the <a href=\"#\">Contact Page</a>. Cheers!\n  </p>\n</div>\n",
          "content": ""
        },
        {
          "id": "3g8czfBn",
          "type": "markup",
          "title": "Multiple Selectors — Styling Many Things",
          "instructions": "* Give both the `h1` and `p` tags a `background` of `green`\n* Give both the `h1` and `p` tags a `color` of `red`\n\n\n**NOTE:** This challenge is all about using multiple selectors so that you don't have to repeat yourself when writing CSS. You should only have to write the `background` and `color` properties once to make the tests pass.",
          "testCode": "test(\"The `h1` should have a green background and a red color\", () => {\n  const el = get(\"h1\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"green\"));\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"red\"));\n});\n\ntest(\"The `p` should have a green background and a red color\", () => {\n  const el = get(\"p\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"green\"));\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"red\"));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/f9IxFfP80vQ",
          "starterCode": "<h1>Welcome</h1>\n<p>This is a paragraph</p>",
          "solutionCode": "<style>\n  h1,\n  p {\n    color: red;\n    background: green;\n  }\n</style>\n<h1>Welcome</h1>\n<p>This is a paragraph</p>\n",
          "content": ""
        },
        {
          "id": "0CUYA6z5m",
          "type": "media",
          "title": "Debugging CSS",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/uS0V31yDK3o",
          "starterCode": "",
          "solutionCode": "",
          "content": "Let's talk about tools. \n\nEvery professional has their tools: gardeners have trowels, instagram celebrities have cameras and programers have computers. We have more than just computers though—we have developer tools.\n# The Dev Tools\n\nDid you know you already have the tool we'll use installed on .your computer? We'll be using what's already built in to the browser in order to debug our layouts. I'm going to be using Google Chrome, but you can use other browsers if you prefer.\n\n**You don't have to use Chrome**\n\nGoogle Chrome has the most widely used developer tools, so I'm going to show you how to use that specific set of tools. However, other browser have dev tools as well.\n\n* Chrome \\(what we'll use\\)\n* Firefox\n* Safari \\(you can even debug apps on an iPhone\\)\n* Edge\n\n\nThese four cover the largest browser in the world, but if you use another browser it probably has dev tools too. \n\nUsing the dev tools is fairly visual so the video will be the focus of this lesson. "
        },
        {
          "id": "B1LBriGU",
          "type": "media",
          "title": "The Box Model",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/3Df7c6R00T8",
          "starterCode": "",
          "solutionCode": "",
          "content": "I'm no fan of jargon, but sometimes you just gotta learn it. The \"box model\" is one such case. It's vital to being fluent in CSS.\n# What is the box model?\n\nThe official [CSS documentation](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model) gives a nice overview:\n\n> Everything in CSS has a box around it, and understanding these boxes is key to being able to create layouts with CSS, or to align items with other items.\n\nTo put this another way, **the box model is how elements are visually arranged on a web page.** \n\nNow let's get a bit more concrete. There are a number of CSS properties that fall under the banner of the box model:\n\n* `width` and `height`: How wide or tall an element is.\n* `margin`: Visual space between elements.\n* `padding`: Visual space between an element's edge and its content.\n* `border`: Space around an element between its `margin` and `padding`. \n* `display`: How an element interacts with other elements on the page. \n\n\nLet's look at each property in a bit more detail.\n\n## Width and height\n\nThese properties are pretty straight forward. You can make can control how wide an element is using the `width` property\\. You can control how tall an element is using the `height` property\\. Simple... mostly.\n\nWhat can be confusing is that elements in a webpage all have _defaults_, meaning they will have a certain width or height even if you don't assign any. This is a good thing.\n\nHere's an image of a cat:\n\n\n![The standard width and height of the cat image.](/assets/B1LBriGU/3c36a842b67ee20197dc4611dd5e1cfa_cat.png)\n\nI didn't give it a `width` or a `height` yet, so what is it doing? By default an image in HTML will automatically have the width of the image. Every photo has a width and the browser will use that width by default. Same for the height.\n\nNow let's completely ignore that width and set our own.\n\n![Width is about double, while height is unchanged.](/assets/B1LBriGU/003a902631059ac5fb26f9d406930b91_cat-wide.png)\n\nAs you can see, this is not at all what you want, but it shows what using the width property can do. Height works in the same way.\n\n## Margin\n\nMargins are space between things. A common example is the space between paragraphs. Imagine the page you're reading right now if there was no visual separation between paragraphs. It would not be very readable.\n\n### Margins Collapse\n\nIf you have two margins next to each other they will collapse into each other. In other words the total visual space created will **not** be the sum of the margins but actually just the larger of the two. Let's say we have two elements with two classes and they are right next to each other in our HTML:\n\n```markup\n<style>\n    .a { margin-bottom: 10px }\n    .b { margin-top: 20px; }\n</style>\n<div class=\"a\">Div A</div>\n<div class=\"b\">Div B</div>\n\n```\n\nHow much space will there be between `.a` and `.b` on the page? **20px**\\! Not 30px, which would be the total of margins from both elements.\n\n## Padding\n\nPadding is space within an element. You can also think of this like space around its content. Let's look at an example. Here's Google's search UI at the time of writing:\n\n\n![](/assets/B1LBriGU/ca1f80839c0c0d88ee0da11ddd682fa4_goog.png)\nLet's focus specifically on those buttons. They have padding. Look at the amount of space _within_ each button. The text doesn't push up against the edge of the gray button background. \n\nHere's the same UI, but I've removed the padding from the buttons:\n\n![](/assets/B1LBriGU/19d43f243d639489d98bd3dd99630381_goog-no-adding.png)\nYou can barely tell the buttons have a gray background now\\! There is no space between the text of the buttons—the button content—and the edge of the button background.\n\nPadding does not collapse. If you have two elements with padding next to each other the visual space will be the total. Here's the same example from the margin section, but using padding.\n\n```markup\n<style>\n    .a { padding-bottom: 10px }\n    .b { padding-top: 20px; }\n</style>\n<div class=\"a\">Div A</div>\n<div class=\"b\">Div B</div>\n\n```\n\nHow much space will there be between `.a` and `.b` on the page? 30px.\n\n## Border\n\nBorder is pretty simple. It lets you add borders to elements. To be more specific, it lets you create space between an element's `margin` and `padding`. Let's keep on going with the example above. I'm going to remove the border around the Google search bar.\n\n![The Google search bar. The padding around the lower buttons is still removed.](/assets/B1LBriGU/19d43f243d639489d98bd3dd99630381_goog-no-adding.png)\n\n![The same google search bar, with one-line of CSS changed. What a difference!](/assets/B1LBriGU/2d7734fe0547fabff03f478dca4dcafb_goog-no-border.png)\n\nLook at the difference\\! With just a single border you can go from a search bar to a few disparate items on a page.\n\n## The display property\n\nThe `display` property determines how an element is displayed with relation to other elements. I know—not a very helpful description. This property makes the most sense once we've solidified your knowledge of the other box model properties so we will revisit it in [another challenge](/workspace/s8be1H0U). \n# Box Sizing\n\nCSS is tricky. The good news is developers used to have it _much worse_ than we do. Let me explain.\n\nWhen you set a `width` or a `height` in CSS you probably expect the selected element to have that exact width or height. This is a reasonable assumption—but it's wrong. _By default_ the visual size of an element—how large it looks to your eyes on screen—would be calculated as: `width` or `height` \\+ `margin` \\+ `border` \\+ `padding`. \n\nDoes that make sense? When you say `width: 300px` you generally expect the element to be `300px` wide, rather than `300px` \\+ padding, border and margins. \n\nDevelopers in the past had to be constantly doing math in their heads to figure out how much padding, border and margin to apply to get the width they wanted. ++No more\\!++ As I've been alluding to, these days there's a better way.\n\n```css\n* { box-sizing: border-box; }\n\n```\n\n## The first line of all your CSS\n\nThis bit of CSS is so useful i'm just going to repeated it again:\n\n```css\n* { box-sizing: border-box; }\n\n```\n\nWhat is this line doing?\n\n* `*` is selecting **everything** on the page. Every element. It's a special selector for exactly this purpose.\n* `box-sizing: border-box` Tells the browser that we want the `width` and `height` properties to determine the _visual_ width and _visual_ height of elements on the page.\n\n\nIn other words, when you say `width: 300px` you get 300 pixels of visual width. The thing to keep in mind is that if you do this your content might grow or shrink.\n\n## A concrete example\n\nWe're going to look at this again in the [box\\-sizing challenge](/workspace/nel5ggJ1), so don't worry. There's a hands\\-on exercise coming up.\n\nBox sizing is fairly abstract, so here's some code to help. You can drop this into the Sandbox and compare the visual difference between the two `div` elements\\. If you run this code in the sandbox you will notice that the content of the first `div` has the exact same width as the entire second `div`. \n\n```markup\n<style>\n  strong {\n    display: block;\n    text-align: center;\n  }\n  div {\n    background: white;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n  .outer {\n    background: lightblue;\n    width: 300px;\n    padding: 20px;\n    border: 5px solid tomato;\n  }\n  .border-box {\n    box-sizing: border-box;\n  }\n</style>\n<div class=\"outer\">\n  <div>\n    <h3>Standard Box Model</h3>\n    <p>\n      This div shows how the box model works by default. The border, padding and\n      width are all added together to get the visual width of the element.\n    </p>\n  </div>\n</div>\n<div class=\"outer border-box\">\n  <div>\n    <h3>Border Box</h3>\n    <p>\n      This div uses the super fun and interesting\n      <code>box-sizing: border-box;</code> property. You can control it's visual\n      <code>width</code> and <code>height</code> directly without calculation.\n    </p>\n  </div>\n</div>\n<script>\n  // This code just calculates the visual width and displays it in each div\n  for (let el of document.querySelectorAll('.outer')) {\n      const rect = el.getBoundingClientRect();\n      const label = document.createElement('strong');\n      label.textContent = 'Visual Width: ' + rect.width + 'px';\n      el.insertAdjacentElement('afterend', label);\n  }\n</script>\n\n```\n# Resources\n\n* [The CSS box model docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model)\n\n"
        },
        {
          "id": "nel5ggJ1",
          "type": "markup",
          "title": "Box Sizing Border Box",
          "instructions": "Update the `box-sizing` property of the div so that it's visual width is the same as it's `width` property\\.\n\nThe div already has a `width` property set, but the visual width of the element is still wider as you can see. Using the `box-model` property we can tell the browser to use the `width` to control the visual width.\n\n**Hint**: The simplest way to do this is with the `*` selector, which is covered in the [video](#{\"component\":\"VideoPlayButton\"}) below\\.",
          "testCode": "test(\"Should make use of border-box\", () => {\n  const el = get(\"div\");\n  expect(getStyle(el, \"box-sizing\")).toBe(\"border-box\");\n});\n\n// NOTE The aux div is created so that we're consistent across envs, including JSDOM env\ntest(\"Should have a visual width equal to the `width` property\", () => {\n  const el = get(\"div\");\n  const widthStyle = getStyle(el, \"width\");\n  const box = el.getBoundingClientRect();\n  const aux = document.createElement(\"div\");\n  aux.style.boxSizing = \"border-box\";\n  aux.style.width = widthStyle;\n  document.body.appendChild(aux);\n  const auxBox = aux.getBoundingClientRect();\n  expect(auxBox.width).toBe(box.width);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/qpjw2NxqMcU",
          "starterCode": "<style>\n  /* Your code here ... */\n  \n  /* You can ignore the styles below here */\n  strong {\n    display: block;\n    text-align: center;\n  }\n  div {\n    background: white;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n  .outer {\n    background: lightblue;\n    width: 300px;\n    padding: 18px;\n    border: 5px solid tomato;\n  }\n</style>\n<div class=\"outer\">\n  <div>\n    <h3>Border Box</h3>\n    <p>\n      The content within this inner area is white to show the difference between\n      the content area and the div's padding, which is blue.\n    </p>\n  </div>\n</div>\n<script>\n  // This code just calculates the visual width and displays it in the div\n  for (let el of document.querySelectorAll('.outer')) {\n      const rect = el.getBoundingClientRect();\n      const label = document.createElement('strong');\n      label.textContent = 'Visual Width: ' + rect.width.toFixed() + 'px';\n      el.insertAdjacentElement('afterend', label);\n  }\n</script>\n",
          "solutionCode": "<style>\n  div {\n    box-sizing: border-box;\n  }\n  \n  /* You can ignore the styles below here */\n  strong {\n    display: block;\n    text-align: center;\n  }\n  div {\n    background: white;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n  .outer {\n    background: lightblue;\n    width: 300px;\n    padding: 18px;\n    border: 5px solid tomato;\n  }\n</style>\n<div class=\"outer\">\n  <div>\n    <h3>Border Box</h3>\n    <p>\n      The content within this inner area is white to show the difference between\n      the content area and the div's padding, which is blue.\n    </p>\n  </div>\n</div>\n<script>\n  // This code just calculates the visual width and displays it in the div\n  for (let el of document.querySelectorAll('.outer')) {\n      const rect = el.getBoundingClientRect();\n      const label = document.createElement('strong');\n      label.textContent = 'Visual Width: ' + rect.width.toFixed(0) + 'px';\n      el.insertAdjacentElement('afterend', label);\n  }\n</script>\n",
          "content": "The purpose of `box-sizing: border-box;` is to change how the browser uses the `width` property\\. Although it may not be clear now, this simple property will make your journey as developer _much_ easier\\.  \n\nThis is why you will often find some CSS like the following at the very top of many CSS files:\n\n```css\n* { box-sizing: border-box; }\n\n```\n# Visual Width\n\nWe're talking about how wide something appears on screen. This is _not necessarily_ the same as the `width` property, which is what this lesson is about."
        },
        {
          "id": "WqwXPsOO",
          "type": "markup",
          "title": "Margins and Centering Things on the Page",
          "instructions": "* Push the rest of the content away from `.menu` with a bottom margin of `40px`\n* Put `20px` of space between the `<a>` tags in the `.menu` using margins\n* Center `.centered` on the page using margins\n\n\n**Hint:** Check out the [content](#{\"component\":\"ContentScrollButton\"}) below for more explanation of how this works.\n",
          "testCode": "test(\"The menu should have a bottom margin of 40px\", () => {\n  const el = get(\".menu\");\n  expect(getStyle(el, \"margin-bottom\")).toBe(\"40px\");\n});\n\ntest(\"The `<a>` tags in the `.menu` should have a right margin of 20px\", () => {\n  const els = getAll(\".menu a\");\n  expect(els.length).toBeTruthy(); // Ensure there aren't zero\n  expect(els.every((x) => getStyle(x, \"margin-right\") === \"20px\")).toBe(true);\n});\n\n// NOTE: The browser will translate margin: auto into a pixel value,\n// so we can't test directly for 'auto'\ntest(\"The `.centered` div should be centered on the page\", () => {\n  const el = get(\".centered\");\n  const right = getStyle(el, \"margin-right\");\n  const left = getStyle(el, \"margin-left\");\n  expect(right).not.toBe(\"0px\");\n  expect(right).toBe(left);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/TijOX9nW_-Q",
          "starterCode": "<style>\n  /* \n   * We've added a gray background so that it's easier to see if the div is \n   * centered or not \n   */\n  .centered {\n    width: 300px;\n    background: #dadada; /* Light gray */\n  }\n\n  /* Your code here */\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .menu {\n    margin-bottom: 40px;\n  }\n  .menu a {\n    margin-right: 20px;\n  }\n  .centered {\n      width: 300px;\n      background: #dadada; /* Light gray */\n      margin: 0 auto;\n  }\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "content": "# What are margins?\n\n> A margin is the visual space between one HTML element and another.\n\nUsing margins you can move elements away from each other to create visual space. However, you can also do this with `padding` and `border` so let's look at the differences between the three concepts. \n\n## How is this difference with padding ?\n\n* Padding is the visual space between an elements _content_ and it's edges\n* In other words, `padding` is visual space within an element while `margin` is visual space around \\(outside\\) an element.\n\n\n## How does margin relate to border ?\n\n* The `border` is between an elements `margin` and `padding` , and it usually has a color applied to it.\n\n# Beware, margins will \"collapse\"\n\nThere's a trick margins do that might confuse you when you first come across it: Margins will _collapse\\. _\n\nWhat this means is:\n\n> If two margins touch each other, they will _not combine_ but instead will collapse in to each other. This means the visual margin will only be as big as the larger of the two, not the combination of the two.\n\nFor now it's enough to know that this quirk exists. There's no good way to learn about this quirk other than to have it bite you while building an application. \n# When should I use margins?\n\nGenerally, when you want to move one element away from another element. Some examples:\n\n* You have a navigation menu of links and you want space between them\n* You want space between paragraphs in a blog post\n   * Consider the space between the paragraphs you're reading right now. You could do that with margins.\n* When you want to center something on the page \\(see below\\)\n\n\nUsing margins for centering is a special use case, which might not be obvious but is extremely common.\n# Margin auto\n\nThere's a special value you can use for margins called `auto`. For example:\n\n```css\n.centered {\n    margin-left: auto;\n    margin-right: auto;\n}\n\n```\n\nWhat `auto` does is it tells the browser to \\_auto\\_matically use as much space as possible given all other margins. So, what the code above does is it moves anything with the `.centered` class to the center of the page.\n\nAs with most CSS properties, `margin` has a shorthand syntax that is commonly used for centering something on the page:\n\n```css\n.centered {\n    margin: 0 auto;\n}\n\n```\n\nThis example is equivalent to the long\\-hand version:\n\n```css\n.centered {\n    margin-top: 0;\n    margin-bottom: 0;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n```\n"
        },
        {
          "id": "Ojsg01Bi",
          "type": "markup",
          "title": "Padding and inline-blocks",
          "instructions": "* Style the `<a>` tags with the `inline-block` display property. This will make the `<a>` tags use `padding` like a block element \\(See the [video](#{\"component\":\"VideoPlayButton\"}) for details\\).\n* Add padding of 20px to the `<a>` tags\\.\n* Change the background of the `<p>` tag\\. This will make the padding more obvious.\n* Give the `<p>` tag 20px of padding.\n\n",
          "testCode": "test(\"The `<a>` tags should use the inline-block display property\", () => {\n  const els = getAll(\".menu a\");\n  expect(els.every((x) => getStyle(x, \"display\") === \"inline-block\")).toBe(\n    true\n  );\n});\n\ntest(\"The `<a>` tags should have 20px of padding\", () => {\n    const els = getAll(\".menu a\");\n    expect(els.every((x) => getStyle(x, \"padding\") === \"20px\")).toBe(\n        true\n    );\n})\n\ntest(\"The `<p>` tag should have a different background than the rest of the page\", () => {\n  const el = get('p');\n  const bodyBg = getStyle(get('body'), 'background-color');\n  expect(getStyle(el, 'background-color')).not.toBe(bodyBg);\n})\n\ntest(\"The `<p>` tag should have padding of 20px\", () => {\n  expect(getStyle(get('p'), 'padding')).toBe('20px');\n})",
          "videoUrl": "https://www.youtube.com/embed/3ZZ3XE7YVWg",
          "starterCode": "<style>\n  .centered {\n    width: 300px;\n    background: #dadada; /* Light gray */\n  }\n\n  /* Your code here */\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .centered {\n    width: 300px;\n    background: #dadada;\n  }\n  .menu a {\n    display: inline-block;\n    padding: 20px;\n  }\n  .menu a:hover {\n    background: tomato;\n    color: white;\n  }\n  p {\n    background: skyblue;\n    margin: 0;\n    padding: 20px;\n  }\n\n  /* Your code here */\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "content": "# Padding\n\nPadding means \"space inside\" of something. This is why we had you change some background colors in this challenge. Without a background color it's hard to tell where the padding is. Of course you don't always want to show how wide or slim something is, so it's up to you whether or not you use padding with a background or without.\n\nPadding without a background color can be used just like margin to separate things, however, visual space created by padding is only visual space. The element with padding itself becomes wider. This can be very useful for things like menus and buttons, where you want something to have a large clickable area even if the element itself isn't very large on screen.\n# The Display Property\n\nThe `display` property is very important in CSS. It determines how HTML elements interact with each other on the page. For example, `<a>` tags have a default display property of `inline`, which means other components can ignore their vertical padding. However, `inline-block` means their padding cannot be ignored, and you will get the results you see in this challenge.\n\nSome important display properties:\n\n* `display: block;` This is the default for most elements \\(`div`, `p`, `h1`, etc\\) and puts things on their own line.\n* `display: inline-block;` This is useful when you want things to line up horizontally \\(`a` tags in a horizontal menu for example\\) and you also want to add margins or padding.\n* `display: flex;` This is useful when you want child elements to expand or contract to fit available space. This display property is super flexible, and you might find yourself using it all the time once you know it.\n\n\nThese display properties will make up most of your UI. The web app you're using right now was built with only these display properties."
        },
        {
          "id": "0fCd6MkU",
          "type": "markup",
          "title": "Borders",
          "instructions": "* Add `20px` of margin and padding on right of the `a` tags in the `.menu`.\n* Give the `a` tags a 1px border on the right.\n* Give the `.content` div some padding. This will make adding a border look much better.\n* Add a 1px border to the content div.\n* Give the `p` tags a margin of `0px`. By default `p` tags have margin so the challenge here is to remove it.\n* Add a `1px` border bottom to the span tag, so that it appears underlined.\n\n",
          "testCode": "const as = getAll('.menu a');\nconst content = get('.content');\nconst ps = getAll('.content p');\nconst spans = getAll('.content span');\n\ntest(\"`a` tags have `20px` of margin and padding on the right\", () => {\n    expect(as.every(x => getStyle(x, 'margin-right') === '20px')).toBe(true);\n    expect(as.every(x => getStyle(x, 'padding-right') === '20px')).toBe(true);\n});\n\ntest(\"`a` tags have a right border of `1px`\", () => {\n    expect(as.every(x => getStyle(x, 'border-right-width') === '1px')).toBe(true);\n});\n\ntest('`.content` has some padding', () => {\n    expect(getStyle(content, 'padding')).not.toBe('0px');\n});\n\ntest('`.content` has a `1px` border', () => {\n    expect(getStyle(content, 'border-width')).toBe('1px');\n});\n\ntest('`p` tags have no margin', () => {\n    expect(ps.every(x => getStyle(x, 'margin') === \"0px\")).toBe(true);\n})\n\ntest(\"`span` tags are underlined using a 1px border-bottom\", () => {\n    expect(spans.every(x => getStyle(x, 'border-bottom-width') === '1px')).toBe(true);\n})",
          "videoUrl": "https://www.youtube.com/embed/bvlPPQZqwxY",
          "starterCode": "<style>\n  /* Your code here */\n</style>\n<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n<div class=\"content\">\n  <p>\n    Here's some <span>glorious</span> page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .menu a {\n    margin-right: 20px;\n    padding-right: 20px;\n    border-right: 1px solid;\n  }\n  .content {\n    border: 1px solid black;\n    padding: 10px;\n    margin-top: 20px;\n  }\n  .content p {\n    margin: 0;\n  }\n  .content span {\n    border-bottom: 1px solid black;\n  }\n</style>\n<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n<div class=\"content\">\n  <p>\n    Here's some <span>glorious</span> page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "content": ""
        },
        {
          "id": "s8be1H0U",
          "type": "markup",
          "title": "Columns and Rows — The Display Property",
          "instructions": "* Make the `.horizontal-nav` links \\(the `a` tags\\) have a bottom margin of `20px`.\n* Make the `.vertical-nav` links stack one on top of another using the `display` property\\. I.e. make it into a vertical nav.\n\n\nBy default `<a>` tags have `display: inline`, however you can change this.\n* If you need a **row**, try `display: inline-block`.\n* If you need a **column**, try `display: block`.\n\n",
          "testCode": "test(\"`.horizontal-nav` should have a bottom margin of 20px\", () => {\n  const els = getAll(\".horizontal-nav a\");\n  const result = els.every(\n    (x) =>\n      getStyle(x, \"margin-bottom\") === \"20px\" &&\n      getStyle(x, \"display\") !== \"inline\"\n  );\n  expect(result).toBe(true);\n});\n\ntest(\"`.vertical-nav` links should be vertical\", () => {\n  const els = getAll(\".vertical-nav a\");\n  const result = els.every((x) => getStyle(x, \"display\") === \"block\");\n  expect(result).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/BTaza1rh2og",
          "starterCode": "<style>\n  /* Code here... */\n</style>\n\n<div class=\"horizontal-nav\">\n  <p>A horizontal nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"vertical-nav\">\n  <p>A vertical-nav nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "solutionCode": "<style>\n  .horizontal-nav a {\n    display: inline-block;\n    margin-bottom: 20px;\n  }\n  .vertical-nav a {\n    display: block;\n  }\n</style>\n\n<div class=\"horizontal-nav\">\n  <p>A horizontal nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"vertical-nav\">\n  <p>A vertical-nav nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "content": "Every HTML element has a default `display` property. This can be confusing since it's easy to forget what the default is for a given tag. But there's a trick: \n\n**Don't worry about what the default is**. \n\nRather than try to remember what the default display property for an element is just look at it and adjust accordingly. If you want something to line up in a row you can set `display: inline-block` and if you want things to stack on top of each other use `display: block`.\n\nThere are other display values besides `block` and `inline-block` but you won't use most of them very often. There is however one more very important display property called `flex`, which we will cover in another challenge."
        },
        {
          "id": "iFvzasqW",
          "type": "markup",
          "title": "Flexbox — Creating an Evenly-Spaced nav Menu",
          "instructions": "* Use the `display` property and `justify-content` property to evenly space the links in `.mobile-nav`",
          "testCode": "test('.mobile-nav should use flexbox', () => {\n    expect(getStyle(get('.mobile-nav'), 'display')).toBe('flex')\n})\n\ntest('.mobile-nav should use the justify-content property', () => {\n    expect(getStyle(get('.mobile-nav'), 'justify-content')).toBe('space-between')\n})",
          "videoUrl": "https://www.youtube.com/embed/hyuv9yoSREs",
          "starterCode": "<style>\n  /* Your code here... */\n\n  /* You can ignore these styles. This is just to make the link placement more obvious */\n  .mobile-nav a {\n    padding: 10px;\n    background: tomato;\n  }\n</style>\n<div class=\"mobile-nav\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "solutionCode": "<style>\n  .mobile-nav {\n    display: flex;\n    justify-content: space-between;\n  }\n  .mobile-nav a {\n    padding: 10px;\n    background: tomato;\n  }\n</style>\n<div class=\"mobile-nav\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "content": "Ever notice how mobile nav menus on a phone are often spaced perfectly so that the icons fill the space on screen? \n\nThis effect is quite simple to accomplish with CSS and Flexbox. \n\nFlexbox is the general term for CSS that utilizes the `display: flex` property\\. Display `flex` lets you do a lot of things that used to be very difficult in web browsers. Things like:\n\n* Create equal spacing between elements \\(this challenge\\!\\)\n* Create equal space around elements\n* Vertically or horizontally center elements\n\n\nThere are other uses for Flexbox but these are some of the most common."
        },
        {
          "id": "iZ6nlkiQ",
          "type": "markup",
          "title": "The Hover State",
          "instructions": "Invert the appearance of the links when hovered. In other words when you hover a link make its background `blue` and its color `tomato`.\n**NOTE**: You will need the `:hover` selector\\. See the [video](#{\"component\":\"VideoPlayButton\"}) for more details.",
          "testCode": "test(\"The color and background of the `a` tags should be inverted on hover\", () => {\n  const code = __user_code_string__;\n  const regex = /a:hover\\s+{([\\s\\S]+?)}/i; // All text inside brackets after a:hover. a:hover { <HERE> }\n  const hoverStyles = code.match(regex)[1];\n  expect(hoverStyles).toBeTruthy();\n  expect(hoverStyles.match(/background(-color)?:\\s+blue/)).toBeTruthy();\n  expect(hoverStyles.match(/color:\\s+tomato/)).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/X1zE0HTL2Lw",
          "starterCode": "<style>\n  /* Your code here */\n\n  /* You can ignore these styles. This is just to make the link placement more obvious */\n  .nav a {\n    padding: 10px;\n    background: tomato;\n    text-decoration: none; /* This removes teh link underline */\n  }\n</style>\n<div class=\"nav\">\n  <p>Hover the mouse to see the effect</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "solutionCode": "<style>\n  .nav a:hover {\n    background: blue;\n    color: tomato;\n  }\n  /* You can ignore these styles. This is just to make the link placement more obvious */\n  .nav a {\n    background: tomato;\n    color: blue;\n    padding: 10px;\n    text-decoration: none; /* This removes teh link underline */\n  }\n</style>\n<div class=\"nav\">\n  <p>Hover the mouse to see the effect</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "content": "Here's a GIF of the end result of this challenge. This should give you a clear idea about what a hover state does.\n\n![](/assets/iZ6nlkiQ/9d080a45671f5e4e63d62090ab24a779_hov.gif)\n# General Concepts\n\nYou've probably noticed that when you hover over a link in a browser it will change somehow. You can customize this\\!\n\nThis is called a hover state, and you can style a hover state just like you can style any other CSS. The main difference is the selector.\n\n```css\n/* Style the hover state for all links on the site */\na:hover {\n  text-decoration: underline;\n}\n\n/* Style just the nav links */\n.nav a:hover {\n  color: tomato;\n}\n\n/* Style the entire nav div when it's hovered */\n.nav:hover {\n  background: gray;\n}\n\n```\n\nTo style how something looks when the mouse hovers over it you use `:hover`. Specifically, you just put `:hover` after the selector you want to style. It's important not to put a space in front of `:hover`."
        },
        {
          "id": "fAGpsa4L",
          "type": "media",
          "title": "CSS is not Always Intuitive",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "CSS is a bit of a mixed bag. Not to detract from it—it's amazing what you can accomplish with HTML and CSS alone, let alone HTML, CSS and JavaScript. However there are certain aspects of CSS that are not intuitive. \n\nYou may be thinking \"None of this is intuitive\\! 😤\" and that's fair, but it gets better \\(worse?\\). In the next few challenges we'll dive into some of the more confusing _and_ useful CSS properties. You already saw some of this when we [talked about `box-sizing`](/workspace/nel5ggJ1), but there's yet more to cover. \n\nFun topics to come include:\n\n* Positioning \\(including the interesting `content` property\\)\n* More `display` property\n* Transforms\n\n# Why?\n\nSome of this stuff is bound to be fairly confusing at first and we take our content selection very seriously. So is it really that important? \n\n++Yes\\.++\n\nThe techniques we'll cover are extremely potent for creating _layouts_, which is the most confounding aspect of CSS. Almost everyone who has complained about any aspect of CSS ran into issues with their layout and spent entirely too long figuring out how to fix it. I would know, I've been that person—Everyone on the Pairwise team has in fact. \n\n> **Layouts vs Styling**\n> Layouts can be time consuming and frustrating to create when you don't know what you're doing. Styling, on the other hand, is quite straightforward. Things like `border` , `padding`, `font-size`, etc. To generalize:\n> \n> \n> \n> \n>    * Styling refers to CSS that doesn't really care about _position_ on the page.\n>    * Layout is entirely concerned with position on the page. This includes vertical, horizontal, _and_ z\\-axis positioning—Layering things on top of  or behind one another.\n\nSo to bring it back to the question: Why are we learning these things? So that you can build any UI you want.\n\nWith a bit of practice ++you will be able to code up the CSS for Instagram, Twitter, Amazon, Etsy or your cat's blog++ \\(this last one sounds easy but you'd probably spend more time on it than any of the others. Try building anything for yourself as opposed to an employer or client and you will see why\\).\n\nSo let's move forward and learn some CSS\\!"
        },
        {
          "id": "zt2RAhbC",
          "type": "markup",
          "title": "CSS Positioning ",
          "instructions": "* Use the `position` property to style the `.rel` `div` so that has relative positioning.\n* Use the `top` property to move the div down the screen by `100px`.\n\nCheck out the [content](#{\"component\":\"ContentScrollButton\"})and the[video](#{\"component\":\"VideoPlayButton\"})below for help with this. It's not intuitive\\!",
          "testCode": "const el = get('.rel')\n\ntest('`.rel` `div` should have relative positioning', () => {\nconst position = getStyle(el, 'position');\n\n    expect(position).toBe('relative');\n});\n\ntest('`.rel` `div` should be moved down by `100px`', () => {\n    const position = getStyle(el, 'top');\n    expect(position).toBe('100px');\n})",
          "videoUrl": "https://www.youtube.com/embed/0Z5YmFgEjTA",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  .container {\n    width: 300px;\n    height: 500px;\n    background: aquamarine;\n    padding: 10px;\n  }\n  .rel {\n    background: gold;\n    padding: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"rel\">\n    Relative Div\n  </div>\n  <p>\n    This lesson domonstrates <code>relative</code> positioning in CSS. Using\n    position relative you are actually positioning something\n    <em>relative to itself</em>.\n  </p>\n  <p>\n    So for example, if I give the Relative Div a <code>top: 20px</code>\n    property then it's going to overlap with the text.\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  .container {\n    width: 300px;\n    height: 500px;\n    background: aquamarine;\n    padding: 10px;\n  }\n  .rel {\n    background: gold;\n    padding: 10px;\n    position: relative;\n    top: 100px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"rel\">\n    Relative Div\n  </div>\n  <p>\n    This lesson domonstrates <code>relative</code> positioning in CSS. Using\n    position relative you are actually positioning something\n    <em>relative to itself</em>.\n  </p>\n  <p>\n    So for example, if I give the Relative Div a <code>top: 100px</code>\n    property then it's going to overlap with the text.\n  </p>\n</div>\n",
          "content": "# An introduction to positioning\n\nIn CSS the `position` property has a lot of power, but it's not necessarily clear how it works. There are three main positioning properties we're going to look at:\n\n* `position: relative;` That's what you were working with in this challenge.\n* `position: absolute;` More interesting than `relative` but you need them both together.\n* `position: fixed;` Very useful or annoying depending on your opinion. This is how websites \"fix\" a header or footer to the window as you scroll. If you've ever been on a cramped mobile site and the header would not leave you alone it's probably because of this CSS property.\n\n\nThere's also `position: static;`, which is the default for all elements. This means you won't see this property very often because it's always there unless you change it. Setting a `position` property on an element to **anything other than static** will make it \"positioned.\"\n# What does this property let me do?\n\nIt lets you pick up an element and move it wherever you want relative to some other element.\n\nOnce you are using a position property you gain access to four new properties which let you control the location of an element on the page: `top`, `left`, `bottom`, `right`.\n\nFor example:\n\n```css\n.rel {\n    position: relative;\n    top: 20px;\n}\n\n```\n\nThis will visually move an element down by `20px`.\n\nThere are other challenges for `absolute` and `fixed` so let's talk about position `relative` first\\.\n# Relative to what?\n\nThis is one of those unintuitive properties in CSS. Relative positioning moves an element ++relative to itself++. That means, in the example above, the `.rel` element would be moved `20px` lower on the page than its initial position.\n# What does this let me do?\n\n* By far the most common use case of `position: relative;` is to set an element as an anchor for another element using `position: absolute;` which we'll cover in the next challenge.\n* You can use relative positioning to \"nudge\" elements into the position you want.\n   * Sometimes your layout just won't cooperate. You can use relative positioning to cheat and force your element in a direction.\n   * I say \"nudge\" because if you're doing more significant repositioning you might want absolute positioning instead.\n\n# Relative and absolute\n\nI said we'd hold off on `position: absolute;` until another challenge but there's something we need to mention first: ++Absolute positioning and relative positioning need to work together to be effective++.\n\nWhen you use `positionn: absolute;` you are positioning an element _relative to the nearest parent element with_ `position: relative;`. \n\nIf that sounds confusing, don't worry—it is. It's best understood through examples and practice, so let's keep learning.\n# Resources\n\n* [Official documentation on relative positioning](https://developer.mozilla.org/en-US/docs/Web/CSS/position#Relative_positioning)\n\n"
        },
        {
          "id": "$TscTvcd",
          "type": "markup",
          "title": "CSS Positioning: Absolute",
          "instructions": "Use `absolute` positioning to position all the `.label` elements in the upper\\-right corner of the three boxes. The end result will look like this: \n![](/assets/$TscTvcd/8eb9f5659aae86ba37bb1f719817cd09_abs-pos.png)\n**Hint**: You don't have to modify the `.label` styling at all. Focus on the parent element. See the [content](#{\"component\":\"ContentScrollButton\"})and[video](#{\"component\":\"VideoPlayButton\"})below for more info.",
          "testCode": "test('`.labeledCard` should have position `relative`', () => {\n    const cards = getAll('.labeledCard');\n    expect(cards.length).not.toBe(0);\n    cards.forEach(el => {\n        expect(getStyle(el, 'position')).toBe('relative')\n    })\n})",
          "videoUrl": "https://www.youtube.com/embed/vKftL0n_VIo",
          "starterCode": "<style>\n  /* Your styles here... */\n\n  /*\n     ========================================================================\n     All the styles below are for setting up the example, feel free to modify them\n     but you don't have to in order to complete the challenge.\n     ========================================================================\n   */\n\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: system-ui;\n  }\n  .labeledCard {\n    width: 300px;\n    background: aquamarine;\n    padding: 10px;\n    margin-top: 50px;\n    margin-left: 50px;\n  }\n  .labeledCard.product {\n    background: thistle;\n    border-radius: 5px;\n  }\n  .labeledCard.messageApp {\n    background: royalblue;\n    color: white;\n    border-radius: 50px;\n  }\n  .label {\n    background: gold;\n    padding: 10px;\n    position: absolute;\n    top: -15px;\n    right: -15px;\n  }\n  .label.priceTag {\n    border-radius: 50px;\n    border: 2px solid black;\n  }\n  .label.unreadCount {\n    font-size: 11px;\n    font-weight: bold;\n    font-family: system-ui;\n    border-radius: 100px;\n    border: 5px solid white;\n    background: crimson;\n    color: white;\n  }\n</style>\n\n<div class=\"labeledCard\">\n  <div class=\"label\">\n    Absolute Div\n  </div>\n  <p>\n    Wouldn't it be nice if I had a label positioned in my upper-right corner?\n  </p>\n  <p>\n    An absolutely positioned element will be relative to the nearest parent with\n    a positon property.\n  </p>\n</div>\n<div class=\"labeledCard product\">\n  <div class=\"label priceTag\">\n    $12.00\n  </div>\n  <p>\n    Maybe this is some product page and I'm a product. Buy me!\n  </p>\n  <p>\n    (If only there was a price tag in my upper-right corner)\n  </p>\n</div>\n<div class=\"labeledCard messageApp\">\n  <div class=\"label unreadCount\">\n    102\n  </div>\n  <p>\n    Pretend I'm some app that needs an unread count.\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: system-ui;\n  }\n  .labeledCard {\n    width: 300px;\n    background: aquamarine;\n    padding: 10px;\n    margin-top: 50px;\n    margin-left: 50px;\n    position: relative;\n  }\n  .labeledCard.product {\n    background: thistle;\n    border-radius: 5px;\n  }\n  .labeledCard.messageApp {\n    background: royalblue;\n    color: white;\n    border-radius: 50px;\n  }\n  .label {\n    background: gold;\n    padding: 10px;\n    position: absolute;\n    top: -15px;\n    right: -15px;\n  }\n  .label.priceTag {\n    border-radius: 50px;\n    border: 2px solid black;\n  }\n  .label.unreadCount {\n    font-size: 11px;\n    font-weight: bold;\n    font-family: system-ui;\n    border-radius: 100px;\n    border: 5px solid white;\n    background: crimson;\n    color: white;\n  }\n</style>\n\n<div class=\"labeledCard\">\n  <div class=\"label\">\n    Absolute Div\n  </div>\n  <p>\n    Wouldn't it be nice if I had a label positioned in my upper-right corner?\n  </p>\n  <p>\n    An absolutely positioned element will be relative to the nearest parent with\n    a positon property.\n  </p>\n</div>\n<div class=\"labeledCard product\">\n  <div class=\"label priceTag\">\n    $12.00\n  </div>\n  <p>\n    Maybe this is some product page and I'm a product. Buy me!\n  </p>\n  <p>\n    (If only there was a price tag in my upper-right corner)\n  </p>\n</div>\n<div class=\"labeledCard messageApp\">\n  <div class=\"label unreadCount\">\n    102\n  </div>\n  <p>\n    Pretend I'm some app that needs an unread count.\n  </p>\n</div>\n",
          "content": "Hopefully you got the code above to look something like this:\n\n![Look at all those labels! 🏷](/assets/$TscTvcd/a988dc3acf3622a900b2e072b425fc8c_abs-positioning-1.png)\n\nThis is the power of absolute positioning: You can position one element relative to another. In this example we positioned the `.label` elements in the upper\\-right of their parent elements.\n\nThe key is, the parent element has to have a position. Usually, this position is `position: relative;` because we don't want the parent to reposition itself, just serve as an anchor for the child element.\n\n> \n> ### The DOM Family Tree\n> \n> \\(if you're wondering what the DOM is, [here's a link to our that challenge](/workspace/C$3mo2yQ)\\)\n> \n> Programmers needed words to talk about the relationships between elements in the DOM and they understood that the DOM is a tree—much like a family tree. So when we talk about the DOM we use words you've heard many times before, but in a different context.\n> \n> **Parents:** When talking about the DOM we use the words \"parent\" or \"ancestor\" to refer to any element higher up in the tree.\n> **Siblings:** Any element at the same level in the tree. If you have three `a` tags inside a `div` the links are all siblings to each other. The `div` is their parent.\n> **Children: **Any element lower in the tree. Children are easy to identify in code because they are within another element.\n# DOM relationships and position absolute\n\nThe short version is: `position: absolute;` will position an element _relative to its nearest ancestor_ ++with a position++. Remember, for an element to be \"positioned\" it must have the position property set to either `relative`, `absolute`, or `fixed`.\n\nIf the element has no positioned ancestors then it will be relative to the `body` tag\\. This is what is happening in this challenge when you first load it up. You will see the `.label` elements displaying in the upper\\-right of_ the _`body` as opposed to their parent element.\n# A simple recipe\n\nLet's say you have two divs, `div.a` and `div.b`. If you want to display `div.a` relative to `div.b` do this:\n\n* Make sure `div.a` is inside `div.b`, in other words `div.b` is the parent of `div.a`.\n* Set `position: relative;` on `div.b` \\(The parent div\\).\n* Set `position: absolute;` on `div.a` \\(The child div\\).\n\n\nThen you can use the `top`, `left`, `bottom`, `right` properties to move `div.a` anywhere you want relative to `div.b`.\n# When would you use this?\n\n* You want to display a badge of some sort, like an unread count on an email app.\n   * You can see an example of this in this challenge.\n* You want some sort of custom border or edge to your element.\n   * You can see an example of this in the Pairwise navigation menu. Whenever you hover one of the challenge names it gets a \"border\" which is actually an absolutely positioned element, not a the `border` property\\.\n* When you want something to stretch to fit inside another element.\n   * This is a result of combinations of the `top`, `left`, `bottom`, `right` properties\\. We'll revisit this later.\n\n# Resources\n\n* [Official Absolute Positioning Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/position#Absolute_positioning)\n   * Just in case you're curious there are more examples in the official docs.\n\n"
        },
        {
          "id": "kUhWPOkj",
          "type": "markup",
          "title": "Top, Left, Bottom, Right",
          "instructions": "Use `absolute` positioning together with `top`, `left`, `bottom`, and/or `right` to position the labels as described.\n* `.top-right-inside` should be in the upper\\-right corner of the screen\n* `.top-right-outside` should be dangling off the upper\\-right of .outer\n* `.bottom-left-inside` should be in the lower\\-left of .outer\n* `.stretch-center` should stretched to the width of .outer and moved down 50%\n\nCheck out the [video](#{\"component\":\"VideoPlayButton\"}) for help and to see what the end result should look like.",
          "testCode": "const labels = getAll(\".label\");\nconst body = get(\"body\");\nconst bbox = body.getBoundingClientRect();\nconst outerBox = get(\".outer\").getBoundingClientRect();\n\ntest(\"Labels should have absolute positioning\", () => {\n  expect(labels.length).not.toBe(0);\n  labels.forEach((x) => {\n    expect(getStyle(x, \"position\")).toBe(\"absolute\");\n  });\n});\n\ntest(\"`.top-right-inside` should be in the upper-right corner of the screen\", () => {\n  const el = get(\".top-right-inside\");\n  const box = el.getBoundingClientRect();\n  expect(box.top).toBe(0);\n  expect(box.right).toBeCloseTo(bbox.width);\n});\ntest(\"`.top-right-outside` should be dangling off the upper-right of `.outer`\", () => {\n  const el = get(\".top-right-outside\");\n  const box = el.getBoundingClientRect();\n  expect(box.top).toBeCloseTo(outerBox.top);\n  expect(box.left).toBeCloseTo(outerBox.right);\n});\n\ntest(\"`.bottom-left-inside` should be in the lower-left of `.outer`\", () => {\n  const el = get(\".bottom-left-inside\");\n  const box = el.getBoundingClientRect();\n  expect(box.bottom).toBeCloseTo(outerBox.bottom);\n  expect(box.left).toBeCloseTo(outerBox.left);\n});\n\ntest(\"`.stretch-center` should stretched to the width of `.outer` and moved down 50%\", () => {\n  const el = get(\".stretch-center\");\n  const box = el.getBoundingClientRect();\n  expect(box.right).toBeCloseTo(outerBox.right);\n  expect(box.left).toBeCloseTo(outerBox.left);\n  expect(box.top).toBeCloseTo(outerBox.height / 2 + outerBox.top);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/OIHvEMsNk2E",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n\n  /* We remove the default margins for this exercise */\n  body {\n    margin: 0;\n  }\n\n  .outer {\n    position: relative;\n    background: salmon;\n    width: 300px;\n    height: 400px;\n    margin-top: 40px;\n    margin-left: 60px;\n  }\n\n  /* Label padding and background are just for aesthetics and not part of the tests */\n  .label {\n    padding: 10px;\n    background: thistle;\n  }\n\n  /* You can ignore the styles ABOVE ☝ this line */\n  \n  /* Fill in the styles below */\n  .top-right-inside {\n  }\n\n  .top-right-outside {\n  }\n\n  .bottom-left-inside {\n  }\n\n  .stretch-center {\n  }\n</style>\n\n<div class=\"outer\">\n  <div class=\"inner\">\n    <div class=\"label top-right-outside\">Heyo! top-right-outside</div>\n    <div class=\"label bottom-left-inside\">Heyo! bottom-left-inside</div>\n    <div class=\"label stretch-center\">Heyo! stretch-center</div>\n  </div>\n</div>\n<div class=\"label top-right-inside\">Heyo! top-right-inside</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body { margin: 0; }\n\n  .outer {\n    position: relative;\n    background: salmon;\n    width: 300px;\n    height: 400px;\n    margin-top: 40px;\n    margin-left: 60px;\n  }\n\n  .label {\n    position: absolute;\n    padding: 10px;\n    background: thistle;\n  }\n\n  .top-right-inside {\n    top: 0;\n    right: 0;\n  }\n\n  .top-right-outside {\n    top: 0;\n    left: 100%;\n  }\n\n  .bottom-left-inside {\n    bottom: 0;\n    left: 0;\n  }\n\n  .stretch-center {\n    top: 50%;\n    left: 0;\n    right: 0;\n  }\n  \n</style>\n\n<div class=\"outer\">\n  <div class=\"inner\">\n    <div class=\"label top-right-outside\">Heyo! top-right-outside</div>\n    <div class=\"label bottom-left-inside\">Heyo! bottom-left-inside</div>\n    <div class=\"label stretch-center\">Heyo! stretch-center</div>\n  </div>\n</div>\n<div class=\"label top-right-inside\">Heyo! top-right-inside</div>\n\n",
          "content": "The end result will look something like this, depending on how wide your screen is:\n\n![](/assets/kUhWPOkj/1fe1b62dd189961971162f729bd2f74b_top-left-bottom-right.png)\n\n"
        },
        {
          "id": "BLEmRiRd",
          "type": "media",
          "title": "Revisiting the Display Property",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/fJgdblx6aFA",
          "starterCode": "",
          "solutionCode": "",
          "content": "Let's revisit the display property. There are several values you should be familiar with.\n\n```css\n.inline-block { display: inline-block; }\n.block { display: block; }\n.flex { display: flex; }\n.table { display: table; }\n\n```\n# Display Properties\n\nSetting `display` on an element let's you play around with how it interacts with other elements on the page. For example, `display: inline-block;` tells an element to flow \"in line\" with other inline elements but also to allow setting margins and padding. Setting `display: flex;` will tell an element reposition it's children in a row \\(or column\\).\n\nWe'll go through the key display properties one by one.\n\n## Inline Block\n\n```css\ndiv { display: inline-block; }\n\n```\n\nBy default many inline elements have unintuitive ways of handling margins and padding. It's often a good idea to apply  `display: inline-block;` to inline elements just so you don't bang your head against a wall for an hour trying to figure out why your `padding` isn't acting the way you expect.\n\n### Uses\n\n* You want to apply `margin` or `padding` to some inline element \\(`span` for example, or `a`\\).\n\n\n## Block\n\n```css\ndiv { display: block; }\n\n```\n\nThis is the default for most elements, so even if you want to make use of it you don't need to write it out explicitly. \n\n### Uses\n\n* Where display block can be more interesting is where you want an inline item to act like a block. Use `display: block;` on `a` tags to make a vertical nav menu.\n* Automatically size to take up all available width.\n\n\n## Flex\n\n```css\ndiv { display: flex; }\n\n```\n\n### Uses\n\n* Everything\\! \\(ok, not literally, but _almost_ everything\\).\n* Center items vertically, horizontally, or both.\n* Tell elements to take up \"Whatever space is left\" once other siblings are accounted for.\n* Space elements vertically or horizontally. You can justify them, clump them, put space between, etc.\n\n\nFlexbox is extremely \\_flex\\_ible, no pun intended \\(seriously\\). It's a workhorse for creating all sorts of layouts. If you're ever unsure how to get some layout you want, flexbox is often the answer.\n\nThat being said, there's a lot to learn and you won't use most of it very often. So focus on these properties:\n\n```css\ndisplay: flex; /* Of course */\n\n/* \n  You can control how elements grow or shrink to take advantage of space */\nflex: 1 100%;\n\n/* \n  Once you have a display: flex; on an element, use align-items and justify-content \n  to control how its children arrange themselves. */\nalign-items: center;\njustify-content: center; /* Also try: space-between, space-around, flex-end */\n\n```\n\n## Table\n\n```css\ndiv { display: table; }\n\n```\n\nIn all honesty you won't use this much. However, it does have one specific use case which you may find quite useful.\n\n### Uses\n\n* Tell an element to take up only as much spaces as needed, but otherwise behave like `block`.\n\n\nBy default any element with `display: block;` will stretch to be as wide as possible. You can assign a `width` property, `width: 500px;` for example, but that requires being specific about the width. What if you want to say \"Be as wide as you need to be, but no wider.\"? That's what display table lets you do."
        },
        {
          "id": "Ao8hbaiP",
          "type": "markup",
          "title": "CSS Transforms",
          "instructions": "* Use `absolute` positioning to move the three `.label` divs the their correct positions.\n* Use the `transform` property to correctly position the elements according to the photo below.\n\n\n![](/assets/Ao8hbaiP/250eb8cb0410e52bb171467a2541ad4f_transform-translate.png)\n\n",
          "testCode": "const labels = getAll(\".label\");\nconst bbox = get(\".box\").getBoundingClientRect();\nconst mid = { x: bbox.width / 2 + bbox.x , y: bbox.height / 2 + bbox.y };\n\ntest(\"Labels should be absolutely positioned\", () => {\n  expect(labels.length).toBeTruthy();\n  labels.forEach((el) => {\n    expect(getStyle(el, \"position\")).toBe(\"absolute\");\n  });\n});\n\ntest(\"`.top` should be centered over the top edge of `.box`\", () => {\n  const elbox = get(\".top\").getBoundingClientRect();\n  expect(elbox.left).toBeLessThan(mid.x);\n  expect(elbox.right).toBeGreaterThan(mid.x);\n  expect(elbox.top).toBeLessThan(bbox.top);\n  expect(elbox.bottom).toBeGreaterThan(bbox.top);\n});\n\ntest(\"`.center` should be centered over the visual center of `.box`\", () => {\n  const elbox = get(\".center\").getBoundingClientRect();\n  expect(elbox.left).toBeLessThan(mid.x);\n  expect(elbox.right).toBeGreaterThan(mid.x);\n  expect(elbox.top).toBeLessThan(mid.y);\n  expect(elbox.bottom).toBeGreaterThan(mid.y);\n});\n\ntest(\"`.bottom` should be centered over the bottom edge of `.box`\", () => {\n  const elbox = get(\".bottom\").getBoundingClientRect();\n  expect(elbox.left).toBeLessThan(mid.x);\n  expect(elbox.right).toBeGreaterThan(mid.x);\n  expect(elbox.top).toBeLessThan(bbox.bottom);\n  expect(elbox.bottom).toBeGreaterThan(bbox.bottom);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/OVq59KKPgzc",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: system-ui;\n  }\n  .box {\n    border: 5px solid black;\n    margin-top: 60px;\n    margin-left: 60px;\n    width: 300px;\n    height: 300px;\n    position: relative;\n    border-radius: 8px;\n  }\n\n  .label {\n    border: 3px solid black;\n    border-radius: 50px;\n    background: white;\n    padding: 10px 20px;\n    min-width: 100px;\n    text-align: center;\n  }\n\n  /* Feel free to ignore all styles above this if you want */\n  /* Your code below here (or wherever you want) */\n  .top {\n  }\n  .center {\n  }\n  .bottom {\n  }\n</style>\n\n<div class=\"box\">\n  <div class=\"label top\">TOP</div>\n  <div class=\"label center\">CENTER</div>\n  <div class=\"label bottom\">BOTTOM</div>\n</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n      font-family: system-ui;\n  }\n  .box {\n    border: 5px solid black;\n    margin-top: 60px;\n    margin-left: 60px;\n    width: 300px;\n    height: 300px;\n    position: relative;\n    border-radius: 8px;\n  }\n\n  .label {\n    position: absolute;\n    border: 3px solid black;\n    border-radius: 50px;\n    background: white;\n    padding: 10px 20px;\n    transform: translate(-50%, -50%);\n    left: 50%;\n    min-width: 100px;\n    text-align: center;\n  }\n\n  .top {\n    top: 0;\n  }\n  .center {\n      top: 50%;\n  }\n  .bottom {\n      top: 100%;\n  }\n</style>\n\n<div class=\"box\">\n  <div class=\"label top\">TOP</div>\n  <div class=\"label center\">CENTER</div>\n  <div class=\"label bottom\">BOTTOM</div>\n</div>\n",
          "content": "The end result will look like this:\n\n![](/assets/Ao8hbaiP/250eb8cb0410e52bb171467a2541ad4f_transform-translate.png)\nCSS Transforms let you do a number of interesting things. Some of the most common are:\n\n* `translate`: Change the location of things on the page\n* `scale`: Change the size of things\n* `rotate`: Visually rotate an element\n\n\nThat's not all, those are just some of the most common ones. You can see what else is possible in the documentation linked below.\n# Resources\n\n* [CSS Transforms Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\n\n"
        },
        {
          "id": "kphKEurPG",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Welcome to the first projects section\\! This is where you get to really stretch your brain and learn. It's the second piece of the learning puzzle. Here's what I mean:\n\n* Challenges give you extremely valuable practice with concepts.\n* However, projects are where you get to apply those concepts on your own. \n\n\nYou won't really know something until you've been stuck without an answer wondering how to write some code. The key is you already know some, so you're not helpless. \n\nThe Pairwise projects will all be real world projects for you to complete. The projects will always be paired with \"Guided Projects\", which are walkthrough examples of how to complete the projects. The goal is for you to try to complete the project fully on your own, but if you struggle \\(or succeed\\) to use the guided project as an example tutorial of how to complete the projects. Later in the course, the guided projects will not directly mirror the actual project \\- they will just be an example which requires a similar application of the required skills.\n\nFor this module and the next module \\(TypeScript\\), the guided projects are actual solutions to the projects. This is to help you get off the ground in these early modules.\n\nEven if you feel these projects are well within your wheelhouse we'd still recommend skimming the videos as we cover some new topics that didn't warrant their own section.\n\n> The projects are **not** ordered\\. You can complete them in whatever order works best for you.\n# How to use these projects\n\n1. Choose a project.\n1. Read through the instructions.\n1. Try to complete the project on your own \\(even if you just give it 20 minutes, try on your own\\).\n1. Build the project using the Pairwise Sandbox \\(link in the top right of the header\\).\n1. Once you have completed the project, download the project file \\(you will need this later to deploy the project\\).\n1. Feel free to review the guided project walkthrough \\(next section\\) which provides a full video tutorial for how to complete these projects.\n\n\nThese projects put your HTML & CSS skills to the test in the real world building webpages and actual UIs. For now, these do not have a lot of functionality, but they provide the foundation for bringing your own project ideas to life. As you will see, some of the later course projects will build on these to create full, working applications.\n\nLater in the course \\(in the Developer Workflow module\\), we will teach you how to develop websites on your own computer, manage your code with version control and GitHub, and deploy your websites for the world to see. At that stage, you can deploy all of the projects you build here \\(and add them to your portfolio\\).\n# What's to Come\n\nThe next module after this is the TypeScript module, where we provide a deep dive straight into programming. That module will provide the groundwork for developing software applications. After that, the real course begins: we will teach you the workflow and tools for a software engineer and then start to introduce the libraries, frameworks, and practices teams use to build and deploy real world apps. In those modules, you will build many projects which are real, practical applications."
        },
        {
          "id": "GiZqL4Jpk",
          "type": "media",
          "title": "Create a Webpage",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Today we're going to creating a full webpage which you can put online and stake out your own corner of the web \\(if you haven't already\\). \n# The Task\n\nCreate a single webpage and style it so it doesn't look terrible to you. The styling part is subjective—no wrong answers here. The goal is just to make something you would be happy to put online, perhaps at `YOUR-NAME.com` or some similar domain.\n# What's the point?\n\nThere are more than one aspects to this challenge, but above all remember that challenges are here to help you get _practice_. ++The more repetitions complete with a given task the better you will be.++ If you write 1000 webpages and put them online you will be pretty good at creating websites, considerably better than someone who's only created one or two.\n\nWith that being said, there is an additional point to this exercise:\n\n* **Create something real**. A website is something real and tangible which you can show to the world.\n\n# Resources\n\n* The [System Fonts Guide in Butterick's Practical Typography](https://practicaltypography.com/system-fonts.html)\n   * If you're wondering about fonts and how to know what fonts work by default without adding any external resources.\n   * Author's note: That site is an amazing resource for all things related to typography. Highly recommended.\n\n"
        },
        {
          "id": "CtxaGAJoJ",
          "type": "media",
          "title": "Create a Mobile UI",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Project Highlights\n\n* Create a real UI using HTML and CSS\n* Utilize the power of flexbox and absolute positioning\n\n# Why?\n\n* Many UIs these days are expected to be mobile. This project demonstrates coding a UI that works well in that context.\n* Building layouts based on _constraints_ is a key skill and it's better to learn through doing.\n* If you can build a an interface like the one in this challenge you've reached a professional level. There is _much_ more covered in the course but even at this point if you've mastered this module you know enough that someone would pay you to create websites.\n\n\n## Why not build a mobile app?\n\nYou absolute _can_ build a mobile app if that suits your needs, and we'll be diving deep into mobile in the Mobile module. For now, the purpose of this challenge is to get you more experience using the CSS concepts covered in this module and to show you what it's like to build a more full UI rather than just a bit of challenge code.\n\nBuilding mobile apps is significantly move involved than building for the web, and will involve many concepts we haven't touched on yet at this point in the course including:\n\n* TypeScript\n* React\n* CLIs\n* Build Pipelines\n\n\nThe good news is that almost all of what you're learning now is transferrable to building mobile apps in some way. This introductory coursework will put you on a good footing for learning mobile development if that's your interest.\n# Optional Starting Code\n\n```markup\n<style>\n  * {\n    box-sizing: border-box;\n  }\n  i {\n    font-style: normal;\n  }\n  button {\n    outline: none;\n    border: none;\n  }\n\n  /* This phone frame is just to give the impression of a mobile site. */\n  /* Feel free to delete it and style however you want. */\n  .phone {\n    min-width: 300px;\n    margin: 0 auto;\n    height: 700px;\n    border: 10px solid #333;\n    border-radius: 10px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);\n  }\n</style>\n<div class=\"phone\">\n  <div class=\"titleBar horizontalNav\">\n    <button>\n      <i>⟨</i>\n      Back\n    </button>\n  </div>\n  <div class=\"content\"></div>\n  <div class=\"footerNav\">\n    <button>\n      <i>👜</i>\n      Browse\n    </button>\n    <button>\n      <i>🛒</i>\n      Cart\n    </button>\n    <button>\n      <i>🔍</i>\n      Search\n    </button>\n    <button>\n      <i>🎛</i>\n      Account\n    </button>\n  </div>\n</div>\n\n```\n"
        },
        {
          "id": "nVAILxovd",
          "type": "media",
          "title": "Create a Tic Tac Toe Board",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here's what we'll cover in this challenge:\n\n* Pseudo selectors and the `content` property\n* [Flexbox](/workspace/iFvzasqW)\n* Using various `display` properties, including the somewhat obscure `display: table` property\n* Using utility classes\n\n# The Task\n\nCreate a Tic Tac Toe board using HTML and CSS. It should look something like this:\n\n![A 3x3 tic tac toe board.](/assets/sfxItMSR/d476572f879076a3e659d2ac3081ef95_tic-tac-toe.png)\nIt doesn't matter which squares are blank, which have X and which have O. Just make sure that you style at least one square with an X and one with an O.\n# Why?\n\nThis challenge starts to touch on generalized UI programming rather than just text documents with the occasional image. Don't get me wrong—_most of the web_ is just text documents with the occasional image, but it's important to generalize the concepts your learning to more abstract ideas like a Tic Tac Toe board.\n\nFurthermore, we can use the tic tac toe board again later in the course to make it into a fully functional game that you can play with others or against the computer.\n\nAnd of course as always just by programming, getting more repetitions, you're building the neural pathways that will make all this stuff come as second nature to you over time.\n\n---\n\n\n> **There's almost always more than one solution**\n> \n> This challenge can be accomplished with `flex-wrap` and a fixed `width` or with a more conventional approach of three \"row\" divs and three `div`s inside them to serve as squares on the board.\n> \n> In fact there are many ways you could complete this challenge that I wouldn't even think of. That's part of the beauty of programming—there's always more than one way to get something done. It can also be a curse at times because other programmers will often do things in different ways than you would, but that's beside the point.\n"
        },
        {
          "id": "kbllMGDEL3",
          "type": "media",
          "title": "Create a Calculator",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# The Task\n\nCreate a calculator based on the following image.\n\n![A trusty calculator application.](/assets/Fpw0qzGv/6b4ea75bda893632217dda54b9c13e4f_calculator.png)\n\nWe won't be making it work, not yet anyway. We haven't learned enough TypeScript for that yet, so this challenge is all about HTML and CSS.\n\nYou can complete this challenge in the [Sandbox](/workspace/sandbox?type=markup). Once you're satisfied with the result export it to an HTML file. \n# Why?\n\nThere are two particularly important aspects to this project:\n\n* Get familiar with building applications, not just webpages.\n* Turn a graphic design into a real interface you can use.\n\n\n\n## Applications not web pages\n\nMany people think of HTML and CSS as tools to build web _pages_. That's certainly true, but that's not all you can do with HTML and CSS. You can also build web _applications_.\n\n> **Web applications vs web pages**\n> Possibly a silly distinction, but you will hear these terms in the wild so let's touch on this briefly. \n> \n>    * A web page is just something you read. A news site, a product page, etc.\n>    * A web application is something you interact with. It's software. Web apps also include web pages. For example, Pairwise is a web _application_ \\(you can interact with it\\) but there are many parts of app that you just read, like this page here.\n\n## From design to product\n\nTaking a graphic design and turning it into a finished product is a very important skill because:\n\n* If you work for a company or a client they might give you designs that need to turn into apps.\n* If you want to build your own product you will have to design it and then create it, even if \"designing\" it just means visualizing it in your mind before coding.\n\n# Tips and hints\n\n* You can code in whatever order works best for you, but if you're not sure then start by writing some basic HTML then give it some basic styling. Maybe create the outline of the calculator and get the size and background color right. Then move on to the inner details and repeat.\n* If you're feeling stuck try starting over from the beginning.\n   * This may seem counterintuitive but sometimes you need a blank slate to get new ideas flowing, and there's not actually that much code to write in this challenge so actually typing things out won't take too long. _Thinking about what to write_ is where you will spend most of your time.\n* If you really get stuck or you feel this challenge needs some work let us know\\! There is a feedback button in the header.\n* If you're not sure how to type a `±` symbol or a `÷` symbol just copy and paste from here.\n   * These are Unicode symbols, so it's possible to type them on your computer. It's often a pain though so when in doubt just try Googling around for the relevant symbol. \n\n"
        },
        {
          "id": "DDOHTQQC",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "This section will provided guided project walkthroughs for the previous projects. The objective is for you to attempt the projects independently on your own and try to complete them to the best of your ability. However, if you are truly lost, we don't want you to be left in the dark. These guided projects are meant to be full guided examples of how to complete the projects. If you have completed the projects, these should also be useful to see an example of a full working solution. All of the Pairwise course modules will include projects and guided projects walkthroughs."
        },
        {
          "id": "LROl5K9R",
          "type": "guided-project",
          "title": "Create a Webpage Guided Project",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/mgRbBNsdoBA",
          "starterCode": "",
          "solutionCode": "<!-- \n    Create something \"real\"\n    Start from scratch\n-->\n<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: \"Iowan Old Style\";\n  }\n  h1,\n  h2,\n  h3 {\n    font-family: \"Helvetica Neue\";\n    font-weight: 100;\n    letter-spacing: 2px;\n  }\n  div.image {\n    width: 50px;\n    height: 50px;\n    border-radius: 50px;\n    overflow: hidden;\n    margin-right: 20px;\n    border: 2px solid white;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.35);\n  }\n  .page {\n      max-width: 600px;\n      margin: 0 auto; /* Center it */\n  }\n  .meta {\n    display: flex;\n  }\n  .meta p {\n    margin: 0;\n  }\n  .meta .date {\n    font-weight: bold;\n    font-size: 12px;\n    color: #999;\n  }\n  .metaInfo {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n  .subscribe {\n    padding: 20px;\n    border: 1px solid #999;\n    margin-top: 20px;\n    border-radius: 5px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.35);\n    background: #444;\n    color: white;\n  }\n  .subscribe h3 {\n    margin-top: 0;\n  }\n  .content {\n    line-height: 1.5;\n  }\n</style>\n<div class=\"page\">\n  <h1>\n    An overly verbose corner of the web\n  </h1>\n\n  <div class=\"meta\">\n    <div class=\"image\">\n      <img src=\"https://placekitten.com/50/50\" />\n    </div>\n    <div class=\"metaInfo\">\n      <p style=\"margin-bottom: 5px;\">Ian</p>\n      <p class=\"date\">2020-03-18</p>\n    </div>\n  </div>\n\n  <div class=\"subscribe\">\n    <h3>Subscribe NOW!</h3>\n    <p>\n      We'll never spam you, because it's not spam if you want to read it\n      amirite??\n    </p>\n    <form>\n      <input type=\"email\" />\n      <button type=\"submit\">Take my email!</button>\n    </form>\n  </div>\n\n  <div class=\"content\">\n    <p>\n      Content content. Content. I don't always write paragraphs but when I do\n      they are severely lacking in meaning.Content content. Content. I don't\n      always write paragraphs but when I do they are severely lacking in\n      meaning.Content content. Content. I don't always write paragraphs but when\n      I do they are severely lacking in meaning.\n    </p>\n    <p>\n      Content content. Content. I don't always write paragraphs but when I do\n      they are severely lacking in meaning.Content content. Content. I don't\n      always write paragraphs but when I do they are severely lacking in\n      meaning.Content content. Content. I don't always write paragraphs but when\n      I do they are severely lacking in meaning.Content content. Content. I\n      don't always write paragraphs but when I do they are severely lacking in\n      meaning.\n    </p>\n    <p>\n      Content content. Content. I don't always write paragraphs but when I do\n      they are severely lacking in meaning.Content content. Content. I don't\n      always write paragraphs but when I do they are severely lacking in\n      meaning.Content content. Content. I don't always write paragraphs but when\n      I do they are severely lacking in meaning.Content content. Content. I\n      don't always write paragraphs but when I do they are severely lacking in\n      meaning.Content content. Content. I don't always write paragraphs but when\n      I do they are severely lacking in meaning.\n    </p>\n  </div>\n</div>\n",
          "content": "This is the guided project walkthrough for the **Create a Webpage** project\\."
        },
        {
          "id": "iwszDGGy",
          "type": "guided-project",
          "title": "Create a Mobile UI Guided Project",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/hm1XzN3fues",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  i {\n    font-style: normal;\n  }\n  button {\n    outline: none;\n    border: none;\n  }\n\n  /* This phone frame is just to give the impression of a mobile site. */\n  /* Feel free to delete it and style however you want. */\n  .phone {\n    min-width: 300px;\n    margin: 0 auto;\n    height: 700px;\n    border: 10px solid #333;\n    border-radius: 10px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);\n  }\n</style>\n<div class=\"phone\">\n  <div class=\"titleBar horizontalNav\">\n    <button>\n      <i>⟨</i>\n      Back\n    </button>\n  </div>\n  <div class=\"content\"></div>\n  <div class=\"footerNav\">\n    <button>\n      <i>👜</i>\n      Browse\n    </button>\n    <button>\n      <i>🛒</i>\n      Cart\n    </button>\n    <button>\n      <i>🔍</i>\n      Search\n    </button>\n    <button>\n      <i>🎛</i>\n      Account\n    </button>\n  </div>\n</div>\n",
          "solutionCode": "<!-- Include Font Awesome for access to icons -->\n<script\n  src=\"https://kit.fontawesome.com/ebf2b8b290.js\"\n  crossorigin=\"anonymous\"\n></script>\n<style>\n  * {\n    box-sizing: border-box;\n  }\n  i { font-style: normal; }\n  body {\n    font-family: system-ui;\n  }\n  button {\n    outline: none;\n    border: none;\n  }\n  button:hover,\n  .active {\n    color: coral;\n    cursor: pointer;\n  }\n\n  .horizontalNav {\n    display: flex;\n    height: 80px;\n    align-items: center;\n    justify-content: space-around;\n    flex-shrink: 0;\n  }\n  .horizontalNav button {\n    height: 100%;\n    text-transform: uppercase;\n    font-weight: bold;\n    letter-spacing: 1.6px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .horizontalNav i {\n    font-size: 20px;\n  }\n\n  .phone {\n    min-width: 300px;\n    margin: 0 auto;\n    height: 700px;\n    border: 10px solid #333;\n    border-radius: 10px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);\n\n    display: flex;\n    flex-direction: column;\n  }\n\n  .titleBar {\n    position: relative;\n    justify-content: flex-start;\n    border-bottom: 1px solid gray;\n  }\n  .titleBar i {\n    margin-right: 10px;\n  }\n  .titleBar button {\n    justify-content: flex-start;\n    padding-left: 20px;\n  }\n  .titleBar .title {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    text-align: center;\n    text-transform: uppercase;\n    font-weight: bold;\n    letter-spacing: 1.6px;\n    font-family: system-ui;\n  }\n\n  .content {\n    flex: 1 100%;\n    padding: 20px;\n    overflow: auto;\n  }\n  .cardImage {\n    position: relative;\n    background: whitesmoke;\n    height: 300px;\n    border-radius: 10px;\n    border: 1px solid #ddd;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n    background: url(\"https://placekitten.com/400/300\");\n    background-size: cover;\n    background-repeat: no-repeat;\n  }\n  .cardImage .price {\n    background: crimson;\n    font-family: system-ui;\n    color: white;\n    padding: 5px 10px;\n    border-radius: 20px;\n    position: absolute;\n    right: 0;\n    top: 0;\n    transform: translate(20%, 50%);\n  }\n  .callToAction {\n    /* border: 1px solid teal; */\n    width: 100%;\n    line-height: 30px;\n    text-transform: uppercase;\n    font-weight: bold;\n    color: white;\n    background: coral;\n    border-radius: 5px;\n  }\n  .callToAction:hover {\n    filter: brightness(1.2);\n    color: white;\n  }\n\n  .footerNav {\n    border-top: 1px solid gray;\n  }\n  .footerNav button {\n    flex-direction: column;\n  }\n  .footerNav i {\n    margin-bottom: 10px;\n  }\n</style>\n<div class=\"phone\">\n  <div class=\"titleBar horizontalNav\">\n    <button>\n      <i class=\"fa fa-angle-left\"></i>\n      Back\n    </button>\n    <span class=\"title\">\n      Cool Product\n    </span>\n  </div>\n  <div class=\"content\">\n    <div class=\"card\">\n      <div class=\"cardImage\">\n        <div class=\"price\">$12</div>\n      </div>\n      <h3>Cool Product</h3>\n      <button class=\"callToAction\">Buy Now</button>\n      <p>\n        Description of som amazing product. This thing is great. You should buy\n        it! Buy buy buy!\n      </p>\n      <p>\n        Hey hey hey, this is just more content. I'm writing it here to make more\n        vertical space so that we can check out scrolling.\n      </p>\n      <p>\n        Here's one more paragraph just to add a bit more vertical space. How\n        great is placekitten by the way? What a visionary site. I don't know\n        anything about their story but I first came across that site many years\n        ago so I have to assume they've been around for a while.\n      </p>\n      <p>\n        Still not ready to buy? <strong>BUY ANYWAYS!</strong>\n      </p>\n    </div>\n  </div>\n  <div class=\"footerNav horizontalNav\">\n    <button class=\"active\">\n      <i class=\"fa fa-shopping-bag\"></i>\n      Browse\n    </button>\n    <button>\n      <i class=\"fa fa-shopping-cart\"></i>\n      Cart\n    </button>\n    <button>\n      <i class=\"fa fa-thumbs-up\"></i>\n      Search\n    </button>\n    <button>\n      <i class=\"fa fa-cog\"></i>\n      Account\n    </button>\n  </div>\n</div>\n",
          "content": "This is the guided project walkthrough for the **Create a Mobile UI** project\\."
        },
        {
          "id": "sfxItMSR",
          "type": "guided-project",
          "title": "Create a Tic Tac Toe Board Guided Project",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/m8PksyesJvo",
          "starterCode": "",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  .board {\n    display: table; /* Only take up as much space as needed */\n    margin: 0 auto; /* Center on the page (requres display:table above) */\n  }\n  .row {\n    display: flex; /* Display horizontally */\n    flex-wrap: wrap;\n  }\n  .square {\n    width: 50px;\n    height: 50px;\n    border: 1px solid black;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-family: monospace;\n    font-weight: 100;\n    font-size: 40px;\n  }\n  .square:after {\n    display: block;\n  }\n  .has-x:after {\n    content: \"x\";\n    color: forestgreen;\n  }\n  .has-o:after {\n    content: \"o\";\n    color: tomato;\n  }\n</style>\n<div class=\"board\">\n  <div class=\"row\">\n    <div class=\"square has-x\"></div>\n    <div class=\"square\"></div>\n    <div class=\"square\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"square\"></div>\n    <div class=\"square has-o\"></div>\n    <div class=\"square\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"square\"></div>\n    <div class=\"square\"></div>\n    <div class=\"square\"></div>\n  </div>\n</div>\n",
          "content": "This is the guided project walkthrough for the **Create a Tic Tac Toe** Board project."
        },
        {
          "id": "Fpw0qzGv",
          "type": "guided-project",
          "title": "Create a Calculator Guided Project",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/nkA2mQOTqHY",
          "starterCode": "",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    background: #222; /* Totally unecessary, just nice for coding at night */\n    font-family: system-ui;\n  }\n  .calculator {\n    color: white;\n    width: 210px;\n    margin: 0 auto;\n    margin-top: 40px;\n    border-radius: 5px;\n    background: #323232;\n    border: 1px solid rgba(0,0,0,0.2);\n    overflow: hidden;\n    position: relative;\n    box-shadow: 0 2px 15px rgba(0,0,0,0.5);\n  }\n  .calculator:after {\n    content: '';\n    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.2);\n    z-index: 2;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: block;\n    border-radius: 5px;\n    pointer-events: none;\n  }\n  .display {\n    display: flex;\n    height: 70px;\n    padding: 10px;\n    align-items: flex-end;\n    justify-content: flex-end;\n  }\n  .display span {\n    font-size: 42px;\n    font-weight: 200;\n    display: block;\n    line-height: 35px;\n  }\n  .row {\n    width: 100%;\n    display: flex;\n  }\n  .key {\n    background: #646464;\n    flex: 1 25%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 40px;\n    border-bottom: 1px solid #323232;\n    border-left: 1px solid #323232;\n  }\n  .key:hover {\n    filter: brightness(1.2);\n  }\n  .row:last-child .key {\n    border-bottom: none;\n  }\n  .key:first-child {\n    border-left: none;\n  }\n  .key.span-2 {\n    flex: 2 50%;\n  }\n  .meta-key {\n    background: #464646;\n  }\n  .operator-key {\n    background: orange;\n  }\n</style>\n\n<div class=\"calculator\">\n  <div class=\"display\">\n    <span>47</span>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"key meta-key\">C</div>\n    <div class=\"key meta-key\">±</div>\n    <div class=\"key meta-key\">%</div>\n    <div class=\"key operator-key\">÷</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"key\">7</div>\n    <div class=\"key\">8</div>\n    <div class=\"key\">9</div>\n    <div class=\"key operator-key\">×</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"key\">4</div>\n    <div class=\"key\">5</div>\n    <div class=\"key\">6</div>\n    <div class=\"key operator-key\">-</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"key\">1</div>\n    <div class=\"key\">2</div>\n    <div class=\"key\">3</div>\n    <div class=\"key operator-key\">+</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"key span-2\">0</div>\n    <div class=\"key\">.</div>\n    <div class=\"key operator-key\">=</div>\n  </div>\n</div>\n",
          "content": "This is the guided project walkthrough for the **Create a Calculator** project\\."
        },
        {
          "id": "4rq4ezCu",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Welcome to the first special topics section\\! \n# What can I find here?\n\nSpecial topics encompass everything that we think is useful but still optional for the current module. These topics might be revisited in more depth later or moved into the core challenge section.\n\nAs with all the of the course we'd love your feedback on these special topics. Was anything particularly useful? Do you think anything here needs more explanation? There's a feedback button in the upper right marked with a question mark.\n\nNow let's jump in 😎."
        },
        {
          "id": "8YMC6xUd",
          "type": "media",
          "title": "Getting Your Site Online",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/nwSrWD0U8OY",
          "starterCode": "",
          "solutionCode": "",
          "content": "Also known as **deploying** your first static site.\n\n> \n> ### Jargon Time\n> \n> **Deploy**: Taking whatever code you wrote and uploading it to a server where it can be accessed. For example, no one else can see the code you wrote during this module but if you _deploy_ your code then anyone can access it with the URL. This is very important for websites.\n> **Static**: As opposed to \"dynamic.\" In this context static means that your code is just a bunch of files that can be used directly without any additional software.\n# Deployment\n\nThis is the general term for \"putting something online.\" In fact it's even more general than that. Deployment can also mean putting your mobile app on an app store. It really just means putting your code where it needs to be.\n\n## Deploying a website\n\nIn the case of a website your code needs to be on a server where anyone can access it.\n\n**NOTE:** Even if you're creating a private website with a login page and a password it's still accessible to \"anyone\" in that anyone can visit your login page, even if they can't access the content locked inside.\n\n\n## Deploying a server\n\nLater in the course we'll be deploying more than just websites and the process will be different than what you saw in the video. Deploying servers is a bit more complicated than deploying static websites because:\n\n* Deploying a website just requires moving some files to a remote computer.\n* Deploying a server requires moving some files and then _running those files_ on a remote computer.\n\n\nThe latter is what \"Cloud computing\" often refers to, but it's just a buzz word. Every \"cloud\" and every \"server\" is just someone else's computer that you rent. \n\n![This fridge sticker speaks the truth!](/assets/8YMC6xUd/5ee6958730a2bfb33dab02cf62857115_someone-elses-computer.png)\n\n## Why is hosting free sometimes?\n\nThe short answer is it's extremely cheap \\(on a marginal basis\\) to provide static hosting. It's so cheap in fact that business can make good money by providing free hosting to many, many people and charging just a small percentage of them for more advanced features. The thing is, hosting providers can treat all static sites the same way. This means they can write software to host a static site and reuse it for every customer they have. Moreover, static sites run code in web browser but not on servers. This means you can't use static sites to do nefarious things like mining bitcoin or attacking other people's websites.\n\nHowever, hosting for _servers_ is usually not free. This is because your server code is real software that has to run on a computer. However, the hosting provider does not control the software. In fact, they have no idea what software you're running. Your software could be tremendously resource intensive, requiring large amounts of computing power and electricity to run.\n\nAs a result the price of hosting servers usually ranges from extremely cheap to extremely expensive. It just depends on what your servers do and how much traffic they serve.\n\n> \n> ### Web Traffic \\(This is an aside, feel free to skip\\)\n> \n> It may not be obvious from the outside, but hosting a lot of traffic is no mean feat. Generally websites load pretty fast assuming you have a decent internet connection. For a small amount of traffic this is very easy to accomplish. If you have, say, 100 visitors every month that's no problem. The cheapest server you can rent can host that traffic with ease. You could even host that traffic from your own computer \\(although you shouldn't\\).\n> \n> Now, consider the extreme opposite: Facebook. A quick Google search told me they had 2.4 _billion_ users per month in 2018. That's roughly 1000 users _per second_ \\(nonstop, for every second of the year\\!\\). Having that many users connect to your servers every single second is decidedly **not easy, **and very expensive.\n> \n> Now consider less extreme example: Stripe, one of the most widely used payment platforms online. Stripe has many users but they deal in _transactions_. When their servers get a hit it's because someone is spending money, which happens considerably less frequently than people posting status updates and selfies to a social network. Their server costs are likely _much_ smaller than those of Facebook. \n> \n> The point is, the amount of money you might spend on a server depends entirely on the users you serve and the software you are running.\n> \n> Generally, hosting is very cheap and if you ever manage to get to 2.4 million users per month you'll have investors breaking down your door to throw money at you, so you can afford it.\n# Resources\n\n* That sweet sweet website deployed in the video: [https://meditative\\-tic\\-tac\\-toe.netlify.com/](https://meditative-tic-tac-toe.netlify.com/)\n* [Netlify](https://www.netlify.com/)\n   * This is the hosting provider we used in the video. They have an online interface for managing your sites, which make them much more user friendly if you're just starting out your technical journey.\n* [Surge\\.sh](https://surge.sh/)\n   * Similar to Netlify in that they provide free hosting.\n   * You will need to use a command line interface to use Surge \\(at least last time I checked\\). This makes it much harder to use before you're familiar with a terminal.\n* [Github Pages](https://pages.github.com/)\n   * Totally free. The others listed here have paid plans but as far as I know Github Pages doesn't even let you pay. There are probably some limits associated with that but I've never run into them.\n   * Github Pages is the hardest to get set up of all the options here, which doesn't mean it's necessarily difficult it just requires familiarity with two things we haven't covered yet \\(but we will later\\): The command line and Git.\n\n"
        },
        {
          "id": "C$3mo2yQ",
          "type": "media",
          "title": "The Document Object Model",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The DOM \\(that's what everyone calls it\\). A big tree—in the browser.\n# What in the world is this DOM?\n\nThat explanation above not doing it for ya? Fair enough, it's a pretty bad explanation. Let's try to make things clearer. Check out this nifty code:\n\n```markup\n<body>\n  <div class=\"container\">\n    <div class=\"divly\">\n      One nifty div\n    </div>\n    <p>\n      This is the same code from the lesson on <code>relative</code> positioning\n      in CSS. We're going to use it to talk about <strong>THE DOM!</strong>.\n    </p>\n  </div>\n</body>\n\n```\n\nLooking at this code you can see that at the top we have the `body`. Within that we have a `div.container`. Within that we have our nifty `div.divly` as well as a `p` tag\\. Within the `p` tag we have some other tags... etc etc.\n\nThe code above has a hierarchical structure. \n\n> The DOM is the general term we use for the tree, or hierarchy, of elements on a web page.\n\nIt's one of those industry terms that you simply never need to know until you start working web programming. So even if this seems obscure or irrelevant just bear with me. For now you'll have to take my word that having terms to talk about \"the elements of a webpage\" is useful.\n# The DOM defines relationships\n\nOnce again, the DOM is a hierarchy or a tree. Here are some examples if you're unfamiliar with the abstract idea of a tree.\n\n## Real\\-world Trees\n\nThink of a family tree. There are parents, siblings and children. If you think of your own lineage you can think of your parents, and their parents, and their parents...  all the way back to the dawn of the human race. This hierarchical relationship \\(parents, siblings, children\\) is a tree, which is why your family tree is called that.\n\nThink of a large company. At the top their's the CEO, then there are other C\\-level executives, below them there might be department heads, then regional or project managers, then employees \\(i.e. people who don't manage other people\\). This is also a tree, although the relationships might have different names: boss, peers, direct reports.\n\nYou can of course also think of a literal tree \\(trunk, branches, leaves\\) but the DOM is a bit more abstract so the former examples might be more useful.\n\n## DOM Relationships\n\nLet's take the example from above and define some relationships. \n\n* Starting with the `body` we would say it has one child: `.container` and is the document \"root\" meaning it has no parents—no other elements above it.\n* Moving on to the `.container` div we would say its parent is `body`, it has zero siblings and two children: `.divly` and a `p` tag\\.\n* `.divly` has `.container` as its parent, has one sibling \\(`p`\\) and no children.\n   * **NOTE**: There is text within the div, but for the purposes of this explanation we're focusing solely on HTML tags.\n\n\nGiven these examples you can probably work out how we would describe the `p` tag and its children.\n"
        },
        {
          "id": "DUVDDO97",
          "type": "markup",
          "title": "Inline Styles",
          "instructions": "Use **inline styles** to apply the following CSS to the `div`.\n\n```\npadding: 10px;\nbackground: azure;\nborder: 1px solid blue;\n\n```\n",
          "testCode": "const el = get('div');\n\ntest(\"Add 10px of padding using inline styles\", () => {\n  expect(el.style.padding).toBe(\"10px\");\n});\ntest(\"Add an `azure` background using inline styles\", () => {\n  expect(el.style.background.toLowerCase()).toBe(\"azure\");\n});\ntest(\"Add a border using inline styles\", () => {\n  expect(el.style.border).toBe(\"1px solid blue\");\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n</style>\n<div>Hey there I'm a div that should have inline styles</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n</style>\n<div style=\"padding:10px;background: azure; border: 1px solid blue;\">Hey there I'm a div with inline styles</div>\n",
          "content": "There is another way to apply CSS other than a `<style>` tag: **Inline Styles**.\n# The Syntax\n\nInline styles look just like CSS if you remove the selectors and brackets and put everything on the same line. Check it out:\n\n```markup\n<style>\n  * {\n    box-sizing: border-box;\n  }\n  .label {\n    position: absolute;\n    background: teal;\n    padding: 10px;\n  }\n</style>\n<div class=\"label\">\n  Heyo!\n</div>\n<div style=\"position: absolute; background: teal; padding: 10px;\">\n  Heyo!\n</div>\n\n\n```\n\nThe two `div`s will have the _exact same style_ applied, just in two different ways. \n# What's the difference\n\n* Inline styles are more specific. If you have inline styles that contradict your regular CSS styles the inline styles take precedence and will be applied.\n* You cannot reuse inline styles. You can certainly copy and paste your inline styles anywhere you want, but you can't reuse styles the way you can with CSS classes. \n   * If you decide you want to change some inline styles for your whole site you will have to make the change everywhere, rather than just in one place. \n* Inline styles are usually harder to read. If you just have one or two CSS properties it's no problem, but it quickly starts becoming difficult to read inline styles as they expand.\n\n# When is this useful?\n\nGiven the downsides mentioned above, why use this at all?\n\n* You really just want some styles on one element. This happens, and inline styles are great for it.\n\n\nThat's pretty much it. However, if you're using a UI framework \\(React, for example\\) rather than plain HTML inline styles can actually be very powerful, because the framework will give you other ways to write them. We'll revisit this in UI programming.\n"
        },
        {
          "id": "e3mgVBucq",
          "type": "media",
          "title": "Web Accessibility",
          "instructions": "",
          "testCode": "test(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Did you know that most software applications are designed designed for people who can see? True fact. Web applications are no exception. This section will take a brief look at what means for users without the usual set of senses and how we can build applications in ways that can be more accessible to those users.\n# User interfaces rely on user senses\n\nThe two big sense we care about in terms of software usability are:\n\n* Vision\n* Hearing\n\n# Software without hearing\n\nIt's likely quite easy to imagine using software without audio: You probably use software all the time without audio \n\nHowever, consider video. Imagine opening up YouTube and not being able to turn the sound on. Even if you're a master of lip reading you'd still be hard pressed to get full enjoyment out of YouTube because not all videos feature a human face speaking.\n\n## Subtitles\n\nThe obvious way to handle this is to add text for all dialogue to the video and ideally to add text descriptions for any important audio information. \n\nSubtitles are used all the time for people who can hear just fine, but in terms of accessibility subtitles try to go even further by describing significant audio events, such as a specific type of music starts playing or an abrupt sound that's meant to signal something to the viewer.\n\n## Don't make your software inaccessible\n\nWeb apps are usually pretty accessible without audio, so be aware of making them inaccessible by accident.\n\nFor example, a notification system that uses sound, rather than visuals.\n\n* Email and messaging apps use sound all the time, but it's in addition to visual indicators. Don't play a sound for a new message and forget to add a badge count or something similar. \n\n# Software without vision\n\nThis one is a bit more tricky, since most software uses vision as the key form of interaction for copying information from the computer into your head.\n\n> **A touch of empathy**\n> If you're reading this, as I suspect you are, then try shutting your eyes and reading the next paragraph after this box... it's a bit troublesome unless you're already set up for it. Now imagine if you had to use all your software that way.\n\nIf you want to impart information and vision isn't an option, what can you do? Embrace the other senses. In the physical world this is done with Braille. However, computers aren't currently well\\-suited to programmatically manipulating matter, so Braille that changed based on what's on screen would be tough to implement.\n\nHowever, computers are _very_ good at programmatically creating sound waves.\n\n## Embracing audio\n\nAudio is the path most often chosen for making visual information accessible. A whole category of software exists to read whats on screen.\n\nLet's see how we can make visual information more accessible to screen readers. Consider this image:\n\n```markup\n<img src=\"cat.jpg\" />\n\n```\n\nNot so bad right? A screen reader could parse this HTML and read the `src` aloud which would give some indication of what the photo is. Now consider this image:\n\n```markup\n<img src=\"IMG-3f4e7747-2620-44c8-94d0-bd07e2dd211d.jpg\" />\n\n```\n\nHm\\... it's not very clear from the `src` what this image is, and this type of image `src` is pretty common online. Let's update that to make it more accessible:\n\n```markup\n<img src=\"IMG-3f4e7747-2620-44c8-94d0-bd07e2dd211d.jpg\" alt=\"Cat\" />\n\n```\n\nUsing the `alt` attribute we can add text data to an image. This text data doesn't show up visually unless the user hovers the mouse over it, but it can be a big help to the visually impaired because it helps screen reader software guess what might be in the image.\n# Conclusion\n\nThis has just been a _very_ brief overview of accessibility on the web. It's a deep topic, but to start off it's enough to know that it exists and know that there may well be users of your software without access to either vision or hearing.\n\n**Key Takeaways**\n\n* Screen reader software can parse HTML and read it aloud to a user.\n* \"Accessibility\" is a broad term, but on the web it almost always means \"making it easer for screen readers to read our content.\"\n\n\nCheck out this article for a more in\\-depth treatment of web accessibility: [https://developer.mozilla.org/en\\-US/docs/Web/Accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility)"
        },
        {
          "id": "wsATIwe9M",
          "type": "markup",
          "title": "CSS Units",
          "instructions": "Use percent units to make the `width` of `.main` 65% and the width of `.sidebar` 35%. \n**NOTE:** This can be tricky. If your'e running into bugs check out the video below.",
          "testCode": "// Write your tests here:\ntest(\"`.main` and `.sidebar` should be horizontally aligned\", () => {\n  const aBox = get(\".main\").getBoundingClientRect();\n  const bBox = get(\".sidebar\").getBoundingClientRect();\n  expect(aBox.top).toBeCloseTo(bBox.top);\n});\n\ntest(\"`.main` should have a `width` of 65%\", () => {\n  expect(__user_code_string__).toMatch(/\\.main\\s+{[\\s\\S]*width:\\s*65%/);\n});\ntest(\"`.sidebar` should have a `width` of 35%\", () => {\n  expect(__user_code_string__).toMatch(/\\.sidebar\\s+{[\\s\\S]*width:\\s*35%/);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/LpoDctGBxbg",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  .main,\n  .sidebar {\n    display: inline-block;\n  }\n  .main {\n    background: lime;\n  }\n  .sidebar {\n    background: tomato;\n  }\n</style>\n<div>\n  <div class=\"half-cols\">\n    <div class=\"main\">\n      <p>Here we have some content</p>\n      <p>Here we have some content</p>\n    </div>\n    <div class=\"sidebar\">\n      <p>Here we have some content</p>\n      <p>Here we have some content</p>\n    </div>\n  </div>\n</div>\n",
          "solutionCode": "<style>\n\t* {\n\t\tbox-sizing: border-box;\n\t}\n\n\t.main,\n\t.sidebar {\n\t\tdisplay: inline-block;\n\t}\n\n\t.main {\n\t\twidth: 65%;\n\t\tbackground: lime;\n\t}\n\n\t.sidebar {\n\t\twidth: 35%;\n\t\tbackground: tomato;\n\t}\n</style>\n<div>\n\t<div class=\"half-cols\">\n\t\t<div class=\"main\">\n\t\t\t<p>Here we have some content</p>\n\t\t\t<p>Here we have some content</p>\n\t\t</div><div class=\"sidebar\">\n\t\t\t<p>Here we have some content</p>\n\t\t\t<p>Here we have some content</p>\n\t\t</div>\n\t</div>\n</div>",
          "content": "We've been intentionally just glossing over things like `px` in `300px`. If you've wondered about this—good. If you're curious about something before we explain it you'll remember it better.\n# Units\n\nUnits are all about space. In the physical world you have centimeters, meters, kilometers, etc. Or maybe you use inches, feet and miles \\(5280 feet in a mile, how intuitive is that\\!\\). Either way it's a measure of physical space.\n\nCSS units measure space on screen. We've used pixels a lot because they are simple to understand. You screen has pixels so we can define space in terms of that. However, there's a lot more you can do with CSS. \n\nLet's look at the most common units.\n\n## Pixels\n\n* CSS syntax: `px`\n* Measured in screen pixels. Easy to understand but inflexible.\n* Use any numeric value.\n\n\n```css\ndiv {\n    width: 200px;\n}\n\n```\n\n## Percentages\n\n* CSS syntax: `%`\n* Measured as percentage of the parent element.\n* Use any numeric value between 0 and 100.\n\n\nPercentages are extremely useful. \n\n**Small screens**\n\nConsider that you don't know how wide you're users screen is. I don't know how wide _your_ screen is. I'm writing this on a desktop monitor but you might be reading this on an 11\\-inch laptop or you might just be using a small browser window.\n\nThe point is, you often want CSS that will look good no matter the width of the screen. Percentages are super useful for this.\n\n**Multi Columns**\n\nAnother use case is when you want some child elements to be relative to their parents.\n\n```css\n.main-content {\n    width: 65%;\n}\n.sidebar {\n    width: 35%;\n}\n\n```\n\n## Vertical Height\n\n* CSS syntax: `vh`\n* Measured as a percentage of the browser window's height\n\n\nIf you create a website you want to put your most important content at the top of the page. On the Pairwise website for instance we put a link to this workspace front and center, because we want users to see it immediately. \n\nIn web design we have a phrase for this: Above the fold. Any content that is visible without any scrolling is above the fold. You can use `vh` to style part of your site so that it is exactly the height of the \"fold\", which in this case is the browser window.\n\n> **Unnecessary Backstory**\n> As with many terms in web design, this one came from the world of print. Physical, paper newspapers are sold folded up and the most eye\\-catching headlines and content placed above that fold in order to grab the readers attention. The idea translates directly into web design though. Not everyone visiting your site will scroll at all. It's important to capture someone's interest _before_ they scroll otherwise they may just leave.\n\nThe only trick with vertical height is that it's sort of like a fixed number that's different on every browser. It doesn't care about margins or padding on the body element. You might end up with a bit of a scroll happening if you use `100vh`, which probably not what you want. \n\nI discuss this in the video and it's much easier to explain visually. \n# Font Sizes\n\nUp until now I've only been talking about widths and heights. Font\\-size is another unit of measure in CSS. Usually, you will use one of these three:\n\n* `px`: Font size in pixels. Example: `font-size: 16px;`\n* `em`: Font size relative to the parent's font\\-size. Example: `font-size: 1.2em;`\n* `rem`: Font size relative to the root element's font\\-size. Example: `font-size: 16px;`\n\n\nPixels are fairly straightforward so let's focus on the other two: `em` and `rem`. They are actually almost identical, only differing by what they are relative to.\n\n`em` is relative to the parent element. If the parent element has no font size then it's relative to the next parent up, and so on, until it gets to the root element. This means it's _exactly_ the same as `rem` if you don't use font\\-sizes except on the root element \\(the `body` tag\\).\n\n`rem` is relative to the root element—the `body` tag\\.\n\n## Usage\n\n`em` and `rem` are relative, much like `%`. Use `1em` or `1rem` to mean \"normal size text.\" `p` tags for instance are often `1em` in size, while `h1` tags could be `2em`, `3em` or any number. The point is it will likely be a higher `em` value than the `p` tag since it's meant to be larger.\n\n## Why do relative font sizes matter?\n\nYou can actually just use pixels everywhere. That's totally fine. However, you will see `em` and `rem` used a lot online because there are so many devices these days, especially mobile devices. Using `rem` and `em` lets you style text that changes its visual size to adapt to different screens nicely. \n\nOne other benefit is that you can make bits of HTML and CSS that you can copy and paste into different parts of your codebase and have them automatically size themselves. For example, you can have some styles like this:\n\n```css\n.card h3 {\n    font-size: 1.4em;\n}\n\n```\n\nIf you have a `<div class=\"card\"> ... </div>` element and you place it inside another one then it's `h3` tag will size itself according to the parent. So you can use it in different parts of your site where the font size is different, without rewriting styles.\n\n## Recommendation\n\nJust use `px` values initially. If you want to need to use `em` the need will arise naturally. The intricacies of font sizes is not the most interesting topic to spend time on.\n"
        }
      ]
    },
    {
      "free": true,
      "id": "lzTzpPcS",
      "title": "TypeScript",
      "challenges": [
        {
          "id": "2qKcNab8",
          "type": "section",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/dy3es6j7lsQ",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module, you will learn all of the basic fundamentals of computer programming using a popular language: TypeScript. You may not have heard of TypeScript before, but you have probably heard of JavaScript. TypeScript is simply JavaScript with a type system \\- don't worry if you won't know what that means yet\\!\n\nHere we will walk through the basic mechanics of how TypeScript works. This is like learning some of the basic grammar rules for a human language. With this foundation, you will be well equipped for starting your journey to become a programmer\\!"
        },
        {
          "id": "AvOR6cM4o",
          "type": "media",
          "title": "The TypeScript Language",
          "instructions": "",
          "testCode": "test(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "To explain what TypeScript is we first need to introduce JavaScript.\n\n### JavaScript\n\nJavaScript is the language of the web. It is a programming language invented in 1995 which runs in all web browsers. Traditionally, JavaScript _only_ ran in web browsers. More recently, it can run in non\\-browsers environments like servers, using NodeJS.\n\nJavaScript is a flexible, interpreted language with dynamic typing. Any modern web application you use \\(think Google drive/documents/slides, Netflix, YouTube, Facebook, etc.\\) is built primarily in JavaScript. JavaScript is a great programming language, but it was written in a short amount of time in the early days of the internet and it does leave many things to be desired.\n\n### TypeScript\n\nTypeScript is a \"typed superset\" of JavaScript, which means it includes all of the features of JavaScript but adds some additional features on top. TypeScript is being developed by Microsoft and has existed since 2012. TypeScript is becoming widely adopted in the web development world, and is largely becoming the chosen language to write JavaScript applications. TypeScript is a \"compile to JavaScript\" language, meaning it \"compiles\" to JavaScript, which can then be run anywhere JavaScript can be run.\n\nWe have chosen to teach this introduction to software engineering course in TypeScript, rather than JavaScript. If you are interested in more of our rationale for this decision, feel free to [read it here](https://www.pairwise.tech/curriculum/).\n\n### Types\n\nThe primary distinguishing feature of TypeScript is the presence of \"types\" \\(hence the name\\). What this means is that any value in a TypeScript program has an associated \"type\" which the language compiler is aware of. This allows the compiler to understand, before the program can be run, whether or not some operations are \"safe\".\n\nConsider this valid JavaScript code which defines a function to say hello. You are probably expecting the function to receive a `name` variable which is a person's name like \"Sam\" or \"Sara\". But what if you give the function a number? This isn't a problem in JavaScript. It will just say \"Hello, 100\".\n\n```\nfunction sayHello(name) {\n    return \"Hello, \" + name;\n}\n\nsayHello(100);\n\n```\n\nBut in TypeScript results in the following an error:\n\n```typescript\n// We can give the function a type annotation to indicate\n// it only accepts string arguments.\nfunction sayHello(name: string): string {\n    return \"Hello, \" + name;\n}\n\n// This line results in the following error message:\n// Argument of type '100' is not assignable to parameter\n// of type 'string'.\nsayHello(100);\n\n```\n\nThe TypeScript compiler can tell you there is an error before you run the program, in fact, if you use a code editor with TypeScript support it can even tell you as you are writing the code\\!\n\nIn short, a typed language provides safeguards around defining programs which help you avoid bugs, errors, and mistakes as a program. TypeScript provides other useful features, which we will learn, but by and large the most powerful feature is the addition of type information.\n\nThe lack of types has plagued plain JavaScript programs with bugs for decades\\!\n\n### What This Means For You\n\nWe will be focusing on discussing TypeScript moving forward. However, it is helpful to remember that TypeScript includes all of the features that JavaScript does. We will discuss troubleshooting problems and searching for help online later, but for now suffice it to say if you are stuck or are interested in learning more about a topic it is perfectly valid to ask Google questions about JavaScript. The answers will be equally valid in TypeScript, and you may find more useful answers because JavaScript has existed for longer. For instance, consider these questions:\n\n* How do I define an array of items in JavaScript?\n* How do I define a function in JavaScript?\n* How do I iterate over all the keys and values in an object in JavaScript?\n\n\nThe solutions to these questions in JavaScript will apply in TypeScript as well. But remember, TypeScript includes some features JavaScript does not have, such as types. Therefore, if you are trying to find help for solving a TypeScript specific problem, you may want to include that in your search. For example:\n\n* How do I define an array type in TypeScript?\n* How do I define  a function which can accept generic type parameters in TypeScript?\n* How do I combine interface types in TypeScript?\n\n"
        },
        {
          "id": "OM9Y1SvnG",
          "type": "typescript",
          "title": "TypeScript in Action",
          "instructions": "The function from the last challenge is in the code editor below. The code is still trying to pass in the number `100` into the `sayHello` function\\. Change this to some string value name, like `\"Sam\"`. Note that strings, in TypeScript, are defined using `\"` quotes\\. Single or double quotes are valid for strings.\n\n**Hint: **The code editor can understand the TypeScript language. Observe the red squiggle beneath the `100` and hover your mouse over this to see a helpful error message from the TypeScript compiler.",
          "testCode": "test(\"The `sayHello` invocation on line 5 should use a string value, rather than a number.\", () => {\n  expect(__user_code_string__.includes(\"sayHello(\\\"\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/_-KnLmYGwoY",
          "starterCode": "function sayHello(name: string): string {\n    return \"Hello, \" + name;\n}\n\nsayHello(100);",
          "solutionCode": "function sayHello(name: string): string {\n    return \"Hello, \" + name;\n}\n\nsayHello(\"Sam\");",
          "content": ""
        },
        {
          "id": "UZG$5V862",
          "type": "media",
          "title": "Compilation",
          "instructions": "",
          "testCode": "test(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Before we continue we go any further, we want to mention a few more details about TypeScript, and how TypeScript actually turns into code which can be run by a computer.\n\nTypeScript, and other \"compile to JavaScript\" languages, are compiled to JavaScript which can be run by web browsers or servers running NodeJS. This means that the source and production versions of the code can in fact be very different. The source code includes features, syntax, and additional comments in the source language which may not be present in the compiled version which is actually run by the computer.\n\n### Source vs. Production Code\n\nIn general, you can think about programs in two forms: \"source\" code which is what software engineers read and write, and \"production\" code which is what computers read and execute. Typically, source code is formatted nicely and includes things like comments to describe the code organization or context. Production code often goes through many transformation steps before it is run by a computer. \n\nTypeScript, for instance, is compiled to JavaScript. Other languages may be compiled to machine code \\(binary\\). In additional, there may be other transformation steps, such as minification, stripping of dead code or comments, obfuscation/uglification and so on.\n\n### Production JS Bundle\n\nFor instance, take a look at this snippet from the production JavaScript bundle which is rendering the Pairwise platform you are looking at right now:\n\n```\n(this.deriveChallengeContextFromId = function(e) {\n  if (!n.challengeIdIsValid(e)) return null;\n  var t = Array.from(n.courseIdSet.values()).find(function(t) {\n      return n.challengeIdInCourseIsValid(t, e);\n    }),\n    r = n.courses.find(function(e) {\n      return e.id === t;\n    }),\n    o = !0,\n    i = !1,\n    a = void 0;\n  try {\n    for (\n      var s, l = r.modules[Symbol.iterator]();\n      !(o = (s = l.next()).done);\n      o = !0\n    ) {\n      var c = s.value,\n        d = !0,\n        p = !1,\n        u = void 0;\n      try {\n        for (\n          var h, g = c.challenges[Symbol.iterator]();\n          !(d = (h = g.next()).done);\n          d = !0\n        ) {\n          var m = h.value;\n          if (m.id === e)\n            return {\n              challenge: m,\n              module: { title: c.title, id: c.id, free: c.free },\n              course: { title: r.title, id: r.id }\n            };\n        }\n      } catch (y) {\n        (p = !0), (u = y);\n      } finally {\n        try {\n          d || null == g.return || g.return();\n        } finally {\n          if (p) throw u;\n        }\n      }\n    }\n  } catch (y) {\n    (i = !0), (a = y);\n  } finally {\n    try {\n      o || null == l.return || l.return();\n    } finally {\n      if (i) throw a;\n    }\n  }\n}),\n\n```\n\nThis is not very readable\\! There are a lot of obscure, single\\-letter variable names and other bad practices. In addition, in the original form this is just one long string of text \\(it's nicely formatted above so you can read it more easily\\).\n\n### Original Source Code\n\nIn contrast, here is the original piece of code:\n\n```typescript\n// Provide the course context for a challenge, given its id\nderiveChallengeContextFromId = (challengeId: string) => {\n  // Short circuit if the challenge id is invalid\n  if (!this.challengeIdIsValid(challengeId)) {\n    return null;\n  }\n\n  // Find the associated course id\n  const courseId = Array.from(this.courseIdSet.values()).find(id =>\n    this.challengeIdInCourseIsValid(id, challengeId),\n  );\n\n  // Find the associated course\n  const course = this.courses.find(({ id }) => id === courseId);\n\n  // Construct the challenge context from the course\n  for (const module of course.modules) {\n    for (const challenge of module.challenges) {\n      if (challenge.id === challengeId) {\n        return {\n          challenge,\n          module: {\n            title: module.title,\n            id: module.id,\n            free: module.free,\n          },\n          course: {\n            title: course.title,\n            id: course.id,\n          },\n        };\n      }\n    }\n  }\n};\n\n```\n\nThis is a lot more readable and clear\\!\n\nThe important thing to note is that a lot of transformation steps exist between the code that you write and the code that the computer executes.\n\n### An Interpreted Language\n\nJavaScript is an interpreted language, which means it is not compiled and is instead executed by an interpreter which runs JavaScript and interprets it into machine instructions as it runs. A compiled language like C or Rust is compiled into machine code which a computer can directly understand and run. Don't worry too much about this distinction right now, we will cover it more in depth in a Special Topics video lesson later.\n\nFor now, just be aware that the overall flow you should be familiar with is:\n\n* Source code is written in TypeScript, which includes types, comments, and special formatting.\n* TypeScript is compiled to JavaScript, and production code undergoes many transformation steps.\n* JavaScript engines execute JavaScript by interpreting it into executable instructions.\n\n"
        },
        {
          "id": "vf8UoQalQ",
          "type": "media",
          "title": "Keywords",
          "instructions": "",
          "testCode": "test(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In programming languages some words are reserved for special usage by the language. These are called \"keywords\". Take a look at the following code snippet to see some examples of some keywords:\n\n```typescript\n// \"let\" is a keyword, used to defined a variable\nlet age = 15;\n\n// \"const\" is a keyword, used to define a constant\nconst name = \"Sam\";\n\n// \"function\" is a keyword used to define a function\nfunction greeting(personName: string) {\n\n    // \"if\" is a keyword, used to define an if statement\n    if (personName === \"Sam\") {\n        console.log(\"Hi, this is Sam!\");\n    }\n\n    // \"return\" is a keyword used to \"return\" a value from a functinon\n    return \"done\";\n}\n\ngreeting(name);\n\n```\n\nThat's just a few a some of the most commonly used keywords in TypeScript. These words are \"reserved\", meaning you cannot use them for other purposes. For instance, you cannot name a variable \"return\" or \"function\", since these words are keywords reserved for use by the language.\n\nHere is a longer \\(but not exhaustive\\) list of keywords:\n\n* `await`: used to \"await\" a promise value in the async/await construction\n* `break`: used to \"break\" from control statement blocks\n* `case`: used to define switch statement cases\n* `catch`: used for the try/catch construction\n* `const`: used to define constants\n* `continue`: used to \"continue\" in a control statement\n* `debugger`: used to pause program execution and call the debugger function\n* `else`: used in if/else conditional statements\n* `eval`: used to arbitrarily execute a string as code\n* `false`: a boolean keyword representing \"false\"\n* `finally`: used in the try/catch/finally construction\n* `function`: used to define functions\n* `if`: used for if/else conditional statements\n* `in`: used to evaluate if a key exists in an object\n* `new`: used to instantiate a new instance of a class\n* `null`: used to represent the \"null\" empty value\n* `return`: used to \"return\" a value from a function\n* `switch`: used in a switch statement construction\n* `throw`: used to throw an error from some block of code\n* `true`: a boolean keyword representing \"true\"\n* `try`: used in the try/catch construction\n* `typeof`: used to get the type of a value\n* `var`: used to define a variable\n* `while`: used to define a while loop construction\n* `yield`: used in generator constructions\n\n\nThis does not represent all of the language keywords, but just highlights many of the most common ones. It is also worth noting that there are some keywords which are reserved for future use in the language, but which currently do not have any actual usage.\n\nDo not worry about memorizing these\\! For now just understand the concept of keywords. You will get familiar with these as you write code in the upcoming challenges."
        },
        {
          "id": "k3ljxZpDx",
          "type": "typescript",
          "title": "Practice with Keywords",
          "instructions": "Let's have some very simple practice with keywords. The `let` and `const` keywords are used to define variables. `let` is typically used to define variables which can change, or be reassigned, while `const` is used to define variables which are \"constant\" and should not change. We will learn more about these in a later section\\! For now, change the variables in the code editor from `let` to `const` declarations\\.",
          "testCode": "const code = __user_code_string__;\n\ntest(\"`myName` should be defined with `const`.\", () => {\n  expect(code.includes(\"const myName =\")).toBe(true);\n});\n\ntest(\"`myFunction` should be defined with `const`.\", () => {\n  expect(code.includes(\"const myFunction =\")).toBe(true);\n});\n\ntest(\"`myList` should be defined with `const`.\", () => {\n  expect(code.includes(\"const myList =\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/9xc248PGNzs",
          "starterCode": "let myName = \"Sam\";\n\nlet myFunction = function() {\n  return \"Hello \" + myName;\n};\n\nlet myList = [1, 2, 3, 4, 5];\n\n// Print out the values (look at the console on the right of the screen)\nconsole.log(myName);\nconsole.log(myFunction());\nconsole.log(myList);\n",
          "solutionCode": "const myName = \"Sam\";\n\nconst myFunction = function() {\n  return \"Hello \" + myName;\n};\n\nconst myList = [1, 2, 3, 4, 5];\n\n// Print out the values (look at the console on the right of the screen)\nconsole.log(myName);\nconsole.log(myFunction());\nconsole.log(myList);\n",
          "content": ""
        },
        {
          "id": "2EnIHyp9S",
          "type": "media",
          "title": "Whitespace and Semicolons",
          "instructions": "",
          "testCode": "test(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Languages tend to have specific rules concerning whitespace and the placement of semicolons. Whitespace is just the empty space between blocks of code, values, or keywords. Semicolons, `;`, are identifiers which indicate the end of a line.\n\n### An Example\n\nConsider the following code:\n\n```typescript\n\n\nconst name     = \"Sam\"   ;\n\n  function sayHello (person) {\n    // This is my function\n\n        if (person ) {\n          console.log(\"Hello \", person);\n        }   else    { return;\n\n        }\n  }\n\n\n\n  // Say hello!\nsayHello(   name) ;\n\n```\n\nThis code doesn't look that great... but it is actually valid and works fine\\!\n\nCompare that to the following:\n\n```\nconst name = \"Sam\";\n\nfunction sayHello(person) {\n  // This is my function\n\n  if (person) {\n    console.log(\"Hello \", person);\n  } else {\n    return;\n  }\n}\n\n// Say hello!\nsayHello(name);\n\n```\n\nThis is a much better formatted version of the above code snippet. The first code snippet has a lot of unnecessary whitespace and weird indentations.\n\n### Code Style and Formatting\n\nMany modern programming languages include specific code style conventions and formatting tools which are used to format code in a specific way. This is very powerful, because it allows code style conventions to be consistent across teams and it doesn't require the programmer to ever spend any time formatting code manually.\n\nThe Pairwise workspace \\(and the developer workflow we will teach you later in the course\\) provide and use such formatting tools. We will see them in action in the next challenge\\!\n\n### Semicolons\n\nA short note about semicolons... Semicolons are used to mark the \"end\" of many statements in TypeScript, however they are not always strictly necessary. Without getting into the weird rules regarding semicolons, we would recommend trying to end statements using `;` and otherwise relying on the automatic formatting rules if you are in doubt."
        },
        {
          "id": "YUeIPBR0M",
          "type": "typescript",
          "title": "Format the Code!",
          "instructions": "In the editor below is some badly formatted code. Click the double star icon in the editor controls menu to format it properly\\! You can use this built\\-in Pairwise functionality to auto\\-format your code at anytime.\n\n**Note: **Pairwise uses the [Prettier library](https://prettier.io/) to apply the auto\\-formatting rules.",
          "testCode": "const formattedCode = `// Computers are good at following rules...\n\n// Therefore... we should use them to\n// do manual and repetitive tasks for us like code formatting.\n\n// Trust us, you will thank us later.\n\nconst aParagraph =\n  \"Each visitor performed the ceremony of greeting this old aunt\" +\n  \"whom not one of them knew, not one of them wanted to know, and not\" +\n  \"one of them cared about; Anna Pávlovna observed these greetings with mournful\" +\n  \"and solemn interest and silent approval. The aunt spoke to each of them\" +\n  \"in the same words, about their health and her own, and the\" +\n  \"health of Her Majesty, “who, thank God, was better today.” And each visitor,\" +\n  \"though politeness prevented his showing impatience, left the\" +\n  \"old woman with a sense of relief at having performed a vexatious duty and did\" +\n  \"not return to her the whole evening.\";\n\n// A function to render paragraphes\nfunction renderParagraph(paragraphText: string) {\n  console.log(paragraphText);\n}\n\n// Render the paragraph...\nrenderParagraph(aParagraph);\n`;\n\ntest(\"The code in the code editor should be formatted with the built-in Pairwise code formatting tool.\", () => {\n  const code = __user_code_string__;\n  expect(code).toBe(formattedCode);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/EYiA_entIE4",
          "starterCode": "    // Computers are good at following rules...\n\n            // Therefore... we should use them to\n        // do manual and repetitive tasks for us like code formatting.\n    \n    // Trust us, you will thank us later.\n\nconst aParagraph = \"Each visitor performed the ceremony of greeting this old aunt\" +\n        \"whom not one of them knew, not one of them wanted to know, and not\" +\n\"one of them cared about; Anna Pávlovna observed these greetings with mournful\" +\n        \"and solemn interest and silent approval. The aunt spoke to each of them\" +\n        \"in the same words, about their health and her own, and the\" +\n            \"health of Her Majesty, “who, thank God, was better today.” And each visitor,\" +\n            \"though politeness prevented his showing impatience, left the\" +\n            \"old woman with a sense of relief at having performed a vexatious duty and did\" +\n    \"not return to her the whole evening.\";\n\n// A function to render paragraphes\n    function renderParagraph( paragraphText:         string)   {\n            console.log(paragraphText);\n\n    }\n\n// Render the paragraph...\n renderParagraph(aParagraph);",
          "solutionCode": "// Computers are good at following rules...\n\n// Therefore... we should use them to\n// do manual and repetitive tasks for us like code formatting.\n\n// Trust us, you will thank us later.\n\nconst aParagraph =\n  \"Each visitor performed the ceremony of greeting this old aunt\" +\n  \"whom not one of them knew, not one of them wanted to know, and not\" +\n  \"one of them cared about; Anna Pávlovna observed these greetings with mournful\" +\n  \"and solemn interest and silent approval. The aunt spoke to each of them\" +\n  \"in the same words, about their health and her own, and the\" +\n  \"health of Her Majesty, “who, thank God, was better today.” And each visitor,\" +\n  \"though politeness prevented his showing impatience, left the\" +\n  \"old woman with a sense of relief at having performed a vexatious duty and did\" +\n  \"not return to her the whole evening.\";\n\n// A function to render paragraphes\nfunction renderParagraph(paragraphText: string) {\n  console.log(paragraphText);\n}\n\n// Render the paragraph...\nrenderParagraph(aParagraph);\n",
          "content": ""
        },
        {
          "id": "s9RpoVOt2",
          "type": "media",
          "title": "Comments",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Writing comments is an important part of writing computer software. Comments are code which is ignored by the computer. They serve as messages left for yourself or some other future programmer.\n\nTake a look at the following code snippet and see if you can recognize which parts are comments:\n\n```\n/**\n * Handle fetching a user profile.\n */\nfunction fetchUserProfile() {\n    // TODO: Fetch the user from the server instead\n    // of using a hard-coded user.\n    return { name: \"Sam\", age: 26 };\n}\n\n/**\n * Handle log in. Try to fetch the user but return\n * an error if the user could not be found.\n */\nfunction logIn() {\n    const user = fetchUserProfile();\n    // The user may not exist, handle this case\n    if (user) {\n        return user;\n    } else {\n        return new Error(\"Could not log in!\");\n    }\n}\n\n```\n\nNow let's get some practice writing comments\\!"
        },
        {
          "id": "bf1g0r$bL",
          "type": "typescript",
          "title": "Comment the Code!",
          "instructions": "Here we will get some practice writing your first comments. There are two syntax choices for adding comments in TypeScript: `//` and `/* ... */`. The double slash `//` can be used to create single line comments and the `/* ... */` can be used to create single\\-line or multi\\-line comments.\n\nThe code editor is empty\\! Get some practice writing your own comments by adding at least one comment using either comment syntax.",
          "testCode": "test(\"A comment should exist using the `//` or `/* ... */` comment syntax.\", () => {\n  const code = __user_code_string__;\n  const includesCommentSyntax = code.includes(\"//\") || (code.includes(\"/*\") && code.includes(\"*/\"));\n  expect(includesCommentSyntax).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/JaCTQcsulOA",
          "starterCode": "",
          "solutionCode": "// This is a single line comment!\n\n/* This is also a single line comment! */\n\n/**\n * This is a multie-line comment!\n */",
          "content": ""
        },
        {
          "id": "aMuPir571",
          "type": "typescript",
          "title": "Comment a Function",
          "instructions": "There is a function called `generateUniqueStringId` in the editor below. The function generates a random string id composed of letters. Then, there is some code to generate several ids and print out their values to the console on the right of the screen. The function `generateUniqueStringId` doesn't have any comment to describe what it does though... This could be confusing to someone reading this code in the future\\! Complete the challenge by giving the function a multi\\-line comment \\(remember: `/* ... */` \\) and write a message about what the function does \\(generate a unique string id of letters\\). You can do it\\!",
          "testCode": "test(\"A multi-line comment should exist using the `/* ... */` comment syntax to describe the `generateUniqueStringId` function.\", () => {\n  const code = __user_code_string__;\n  const includesCommentSyntax = code.includes(\"/*\") && code.includes(\"*/\");\n  expect(includesCommentSyntax).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/B4jG97JPnpc",
          "starterCode": "function generateUniqueStringId() {\n  return (\n    Math.random()\n      .toString(36)\n      .substring(2, 15) +\n    Math.random()\n      .toString(36)\n      .substring(2, 15)\n  );\n}\n\n// Create an array and fill it with random ids\nconst ids = new Array(10).fill(\"\").map(generateUniqueStringId);\n\n// Log the random ids\nconsole.log(\"Here are the ids:\");\nfor (const id of ids) {\n  console.log(id);\n}\n",
          "solutionCode": "/**\n * Generate a unique string id of 21 letters.\n */\nfunction generateUniqueStringId() {\n  return (\n    Math.random()\n      .toString(36)\n      .substring(2, 15) +\n    Math.random()\n      .toString(36)\n      .substring(2, 15)\n  );\n}\n\n// Create an array and fill it with random ids\nconst ids = new Array(10).fill(\"\").map(generateUniqueStringId);\n\n// Log the random ids\nconsole.log(\"Here are the ids:\");\nfor (const id of ids) {\n  console.log(id);\n}\n",
          "content": ""
        },
        {
          "id": "DFlhdsLoO",
          "type": "media",
          "title": "Well Written Code",
          "instructions": "",
          "testCode": "test(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "When you are writing code, it's important to remember that your code will always be read and maintained by other developers in the future. Even you may return to the same piece of code and need to remember what you were thinking when you first wrote it \\(trust us, one day this will happen and you will say to yourself: \"What was I thinking when I wrote this? Did I _even_ write this?\"\\)\\!\n\nSoftware products have constantly changing requirements and assumptions, and you will find often yourself revisiting code you thought \"could never change\". The important thing is to write code in the first place in a way which makes it easy to change in the future, when you find that requirements or assumptions have changed.\n\nWhen you are writing code here are just a few important rules to keep in mind:\n\n* **Readability:** how easy is it to read and follow the logic in a piece of code \\(it's usually better to be straightforward than to write a clever piece of code that is harder to understand\\).\n* **Comments:** provide additional context or intention which is not clear from the code itself.\n* **Organization:** avoid complex structures, clever one\\-liners, and very nested if statements.\n* **Consistency:** use consistent style and formatting conventions.\n\n\nYou want to strive for code which is easy to read and understand by someone who is less familiar with the codebase, and easier to refactor and change in the future. This typically means code organized into many relatively small, single\\-purpose classes/functions which are easy to read and well documented/commented.\n\nStrong code design will be a theme throughout the course, so don't worry if this is not that clear yet. The main takeaway is that good software is not just about whether the code \"works\" or not. Well\\-written code not only works, but is easy to understand and refactor in the future.\n\nCongratulations\\! You've now learned many important basic concepts for writing software. We can now dive in with some more practical skills."
        },
        {
          "id": "8p4BZqPl",
          "type": "section",
          "title": "Logging and Debugging",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "One of the first things to learn when learning programming is how to print out values from your program\\! This allows you to get information and feedback from your program to determine if it is working properly and also to fix bugs and problems which may develop in your program over time.\n\nFor example, maybe one day your server will show you some error message like:\n\n```typescript\nUncaught ReferenceError: users is not defined\n    at UserService (UserService.tsx:194)\n    at renderWithHooks (react-dom.development.js:16260)\n    at updateFunctionComponent (react-dom.development.js:18347)\n    at beginWork$1 (react-dom.development.js:20176)\n    at HTMLUnknownElement.callCallback (react-dom.development.js:336)\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:385)\n    at invokeGuardedCallback (react-dom.development.js:440)\n    at beginWork$$1 (react-dom.development.js:25780)\n    at performUnitOfWork (react-dom.development.js:24695)\n    at workLoopSync (react-dom.development.js:24671)\n    at performSyncWorkOnRoot (react-dom.development.js:24270)\n    at react-dom.development.js:12199\n\n```\n\n😰😰😰\n\nThis scary message is telling you some value your program thought existed did not exist. The first thing you might want to do is print out the value of `users` or the data `users` is coming from to help you see what it is and how it can become `undefined`.\n\nIn this section we will learn how to do this\\!"
        },
        {
          "id": "5mpYgBmX",
          "type": "typescript",
          "title": "Logging Values",
          "instructions": "TypeScript has a built\\-in utility to print values called `console`. The `console` object provides several methods to help you log values, the most commonly used of which is `console.log`. Go ahead and log some values and take a look at the panel to the right to see the results\\!",
          "testCode": "test(\"The three variables `logMe`, `alsoLogMe`, and `logMeAsWell` should be logged to the console using the `console` `log` method.\", () => {\n  expect(__user_code_string__.includes(\"console.log(logMe)\")).toBeTruthy();\n  expect(__user_code_string__.includes(\"console.log(alsoLogMe)\")).toBeTruthy();\n  expect(__user_code_string__.includes(\"console.log(logMeAsWell)\")).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/9DYatxPbPl4",
          "starterCode": "const logMe = \"Hi, it's me!\";\n\nconst alsoLogMe = [1,2,3,4,5];\n\nconst logMeAsWell = {\n    users: [\n        \"Sam\",\n        \"Jerry\",\n        \"Lisa\",\n    ]\n};\n",
          "solutionCode": "const logMe = \"Hi, it's me!\";\n\nconst alsoLogMe = [1,2,3,4,5];\n\nconst logMeAsWell = {\n    users: [\n        \"Sam\",\n        \"Jerry\",\n        \"Lisa\",\n    ]\n};\n\nconsole.log(logMe);\nconsole.log(alsoLogMe);\nconsole.log(logMeAsWell);",
          "content": ""
        },
        {
          "id": "RL6JBhYL",
          "type": "typescript",
          "title": "Console Warn and Error",
          "instructions": "The `console` provides other methods as well which you can use to call attention to the values you are printing. There's some code in the editor below. Don't worry if you don't understand all of it. Take a look at lines 7 and 11. Line 7 uses the `console.warn` method to print a warning statement. In line 11, we want to use the `console.error` method to print the error which occurs\\! Go ahead and give it a try\\!",
          "testCode": "test(\"The `console` `error` method is used to print the error `message` thrown by the `doSomethingDangerous` function.\", () => {\n  expect(__user_code_string__.includes(\"console.error(message)\")).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/yVGkA702i0Q",
          "starterCode": "const doSomethingDangerous = () => {\n    throw new Error(\"Danger, danger!!!\");\n}\n\nconst doSomethingSafely = () => {\n    // Print a warning here before we do something dangerous\n    console.warn(\"We are about to do something dangerous!\");\n    try {\n        doSomethingDangerous();\n    } catch (error) {\n        const message = error.message;\n        // Log the error here!\n    }\n}\n\ndoSomethingSafely();\n",
          "solutionCode": "const doSomethingDangerous = () => {\n    throw new Error(\"Danger, danger!!!\");\n}\n\nconst doSomethingSafely = () => {\n    // Print a warning here before we do something dangerous\n    console.warn(\"We are about to do something dangerous!\");\n    try {\n        doSomethingDangerous();\n    } catch (error) {\n        const message = error.message;\n        // Log the error here!\n        console.error(message);\n    }\n}\n\ndoSomethingSafely();",
          "content": ""
        },
        {
          "id": "pqwU3tyw",
          "type": "typescript",
          "title": "Console Info",
          "instructions": "There is another useful `console` method, `info`. Take a look at the editor and give it a try\\!",
          "testCode": "test(\"The `info` method should use the `console` `info` method to log out the `message` argument.\", () => {\n  expect(__user_code_string__.includes(\"console.info(message)\")).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ePPbVCv-XG8",
          "starterCode": "// Log a message\nconst log = (message: string) => {\n    console.log(message);\n}\n\n// Show a warning\nconst warn = (message: string) => {\n    console.warn(message);\n}\n\n// Show an error\nconst error = (message: string) => {\n    console.error(message);\n}\n\n// Show an info message\nconst info = (message: string) => {\n    // Write your code here!\n}\n\nlog(\".log display general data\");\nwarn(\".warn shows a warning\");\nerror(\".error displays error information!\");\ninfo(\".info what does .info do???\");",
          "solutionCode": "// Log a message\nconst log = (message: string) => {\n    console.log(message);\n}\n\n// Show a warning\nconst warn = (message: string) => {\n    console.warn(message);\n}\n\n// Show an error\nconst error = (message: string) => {\n    console.error(message);\n}\n\n// Show an info message\nconst info = (message: string) => {\n    // Write your code here!\n    console.info(message);\n}\n\nlog(\".log display general data\");\nwarn(\".warn shows a warning\");\nerror(\".error displays error information!\");\ninfo(\".info what does .info do???\");",
          "content": ""
        },
        {
          "id": "Y$6fSREp",
          "type": "typescript",
          "title": "Debugging",
          "instructions": "Debugging is the process of finding the cause of an error or problem in a program and then re\\-writing or changing the code to avoid the error. This is a critical aspect of a programmer's job and one best learned through trial by fire. Good luck\\!",
          "testCode": "test(\"There should be 10 students in the `studentList`.\", () => {\n  expect(studentList.length).toBe(10);\n});\n\ntest(\"The `logStudentName` function should be called with all 10 of the students in the `studentList` and introduce them by name, e.g. `\\\"This is: Lewis\\\"`.\", () => {\n  let totalIntroductions = 0;\n  for (const log of __secret_log_box) {\n    if (log.includes(\"This is:\")) {\n      totalIntroductions++;\n    }\n  }\n  expect(totalIntroductions).toBe(10);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/M2Q-bVrgsbg",
          "starterCode": "// The type of a person\ninterface Student {\n    name: string;\n}\n\n// A list of people\nconst studentList: Student[] = [\n    { name: \"Sam\" },\n    { name: \"Lee\" },\n    { name: \"Jerry\" },\n    { name: \"Ben\" },\n    { name: \"Ryan\" },\n    { name: \"Joe\" },\n    { name: \"Steve\" },\n    { name: \"Lewis\" },\n    { name: \"Bryan\" },\n    { name: \"Mary\" },\n];\n\n// A method to introduce a person by their name\nconst logStudentName = (person: Student) => {\n    const name = person.name;\n    console.log(`This is: ${name}`);\n}\n\n// Introduce everyone!\nconst introduceEveryone = () => {\n    for (let i = 1; i < 11; i++) {\n        const person = studentList[i];\n        logStudentName(person);\n    }\n}\n\n// Try to introduce everyone\ntry {\n    introduceEveryone();\n} catch (err) {\n    console.warn(\"introduceEveryone threw an error!\");\n    console.error(err.message);\n}\n",
          "solutionCode": "// The type of a person\ninterface Student {\n    name: string;\n}\n\n// A list of people\nconst studentList: Student[] = [\n    { name: \"Sam\" },\n    { name: \"Lee\" },\n    { name: \"Jerry\" },\n    { name: \"Ben\" },\n    { name: \"Ryan\" },\n    { name: \"Joe\" },\n    { name: \"Steve\" },\n    { name: \"Lewis\" },\n    { name: \"Bryan\" },\n    { name: \"Mary\" },\n];\n\n// A method to introduce a person by their name\nconst logStudentName = (person: Student) => {\n    const name = person.name;\n    console.log(`This is: ${name}`);\n}\n\n// Introduce everyone!\nconst introduceEveryone = () => {\n    for (let i = 0; i < 10; i++) {\n        const person = studentList[i];\n        logStudentName(person);\n    }\n}\n\n// Try to introduce everyone\ntry {\n    introduceEveryone();\n} catch (err) {\n    console.warn(\"introduceEveryone threw an error!\");\n    console.error(err.message);\n}\n",
          "content": "If you've solved the challenge above correctly you are now familiar with one of the classic programming errors \\(and [one of the most difficult problems in computer science](https://twitter.com/codinghorror/status/506010907021828096?lang=en) 😉\\): _off by one errors._\n\nOff by one errors are errors where a program is _off by one..._ For example, accessing a value just outside the start or end of a list.\n\nThis is a classic error and a common pitfall of writing for loops to perform manual iteration\\!\n\n```typescript\nfor (let i = 0; i < limit; i++) {\n    const item = list[i];\n    // Do something with the item.\n    const contents = item.getContents();\n    // ...\n    // But what if there is nothing at inside list[i] !?!?!?\n}\n\n```\n\nWatch out for this type of error whenever you are writing for loops by hand\\!"
        },
        {
          "id": "jaZYVeNS",
          "type": "media",
          "title": "Debugging Skills",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Debugging is much more than just logging values in a program.\n\nAs you learn more you will find that it encompasses everything from how you write the program in the first place to the detective\\-like skillset required to investigate and debug cryptic errors in production systems.\n\nSometimes the \"error\" is a user saying \"I tried to log in and it didn't work\".\n\nOr the error is a stack\\-trace in the logs for a production server which says some value was `undefined` which you did not thing could ever be `undefined`.\n\nHow do you get to the bottom of the problem\\!?\nHow do you find the causes\\!?\nHow do you recreate the conditions which caused the error\\!?\nHow do you do this quickly and efficiently when you have live users who cannot use your product because of the bug\\!?\nHow do you fix the bug in a sound way instead just adding some quick workaround\\!?\n\nAll of this comprises the art of debugging\\! Learning how to use the `console` in TypeScript is just the starting point. We encourage you to make use of the `console` logging utilities as you work through the Pairwise curriculum and work on your own projects to start getting familiar with printing out values to inspect and debug your programs.\n\nSuccessful debugging is a difficult skill which takes time to become experienced with. Over time we will introduce additional tools and approaches for you to use.\n\n---\n\nIn the next section we will learn about errors: what they are and how to handle them. This is an important next step in the learning process of debugging."
        },
        {
          "id": "7llHMoYzK",
          "type": "section",
          "title": "Errors and Error Handling",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Sometimes programs fail. Your software must tell the computer exactly what to do in ever state your program may reach. If the computer doesn't know what to do, the program will crash and throw an error. For instance, consider this code:\n\n```typescript\nconst name = user.name;\n\n```\n\nWhat if `user` is `null` or `undefined`? Well, you cannot read the `name` property then\\! If you try to write the above code, you will get an error like this:\n\n```\nUncaught ReferenceError: user is not defined\n    at <anonymous>:1:1\n\n```\n\nThe `ReferenceError` is telling you that `user` is not defined. There are many ways a program can fail like this. When the program fails, it will throw an error and usually the program will crash and stop running. The error message will contain some information about how and why the program failed, which you can use to try to debug and fix the issue.\n\n---\n\nIt is critical to understand errors and how to handle them as a programmer. You will spend a lot of time debugging errors, and excellent programmers write code which handles potential errors states gracefully. In this module, we will learn all about errors and tools you can use to handle errors."
        },
        {
          "id": "58fZQwoQA",
          "type": "typescript",
          "title": "The Throw Keyword",
          "instructions": "Unsafe operations may \"throw\" errors. In TypeScript there is also a `throw` keyword which allows you to explicitly throw an error from a block of code. This escalates the error to the calling code, which then must handle the error or the program will crash.\n\nTo throw a new error, you can use the TypeScript `Error` object constructor, e.g. to throw an error you can write `throw new Error(\"An error occurred!\")`.",
          "testCode": "test(\"The `thisFunctionShowThrow` function should throw an error.\", () => {\n  expect(thisFunctionShowThrow).toThrow();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/s_KvK_TGyU4",
          "starterCode": "// This function should throw an error\nconst thisFunctionShowThrow = () => {\n    // Write your code here!\n}\n",
          "solutionCode": "// This function should throw an error\nconst thisFunctionShowThrow = () => {\n    // Write your code here!\n    throw new Error(\"An error happened!\");\n}\n",
          "content": ""
        },
        {
          "id": "CoUCabHwR",
          "type": "typescript",
          "title": "The Catch Keyword",
          "instructions": "Thrown errors can be \"caught\" using the `catch` keyword\\. An example of this is as follows:\n\n```typescript\ntry {\n    throw new Error(\"An error!\");\n} catch (err) {\n    // Caught the error!\n    console.error(\"The error is caught! Error message: \", err.message);\n}\n\n```\n\nThere is a function which throws an error in the editor below. The function throws an error when it is _called_. Wrap the calling function in `try/catch` to handle the error.",
          "testCode": "test(\"The `aFunctionWhichThrows` should throw an error when called.\", () => {\n  expect(aFunctionWhichThrows).toThrow(\n    \"aFunctionWhichThrows should throw an error.\"\n  );\n});\n\ntest(\"The call of `aFunctionWhichThrows` should be wrapped in `try/catch` to catch the thrown error.\", () => {\n  // At least catches that function is wrapped with try and that try block is followed by a catch:\n  const tryCatchExistsHeuristicRe = /try\\s*\\{\\s*aFunctionWhichThrows\\(\\);?\\s*\\}\\s*catch/;\n  expect(tryCatchExistsHeuristicRe.test(__user_code_string__)).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/kI8qZWOaGbw",
          "starterCode": "// This function throws an error\nconst aFunctionWhichThrows = () => {\n  throw new Error(\"Dangerous!\");\n};\n\n// This needs to be wrapped in try/catch to\n// catch the thrown error:\naFunctionWhichThrows();\n",
          "solutionCode": "// This function throws an error\nconst aFunctionWhichThrows = () => {\n  throw new Error(\"Dangerous!\");\n};\n\n// This needs to be wrapped:\ntry {\n  aFunctionWhichThrows();\n} catch (err) {\n  console.log(\"aFunctionWhichThrows threw an error!\");\n}\n",
          "content": ""
        },
        {
          "id": "TiacxGwtm",
          "type": "typescript",
          "title": "Catching Errors",
          "instructions": "There a two functions in the editor below. One function `validateNumber`performs validation and can throw errors, the other function calls `validateNumber` and handles the errors if they occur. Currently the error is _re\\-thrown_ from `processInputValue`. This causes the code to stop running at soon as the error occurs\\!\n\nInstead of throwing the error \\(line 22\\), simply log the `message` property of the error, e.g. you can write `console.error(err.message)`.",
          "testCode": "// Write your tests here:\ntest(\"The `processInputValue` function should log the error message using the console `error` method.\", () => {\n  processInputValue(-5);\n  processInputValue(500);\n  processInputValue(\"some string\");\n  processInputValue(5);\n  processInputValue(92);\n\n  const logs = parseLogBox(__secret_log_box);\n  const errors = parseLogBox(__secret_error_box);\n\n  expect(inBox(logs, \"Input 5 is valid!\")).toBe(true);\n  expect(inBox(logs, \"Input 92 is valid!\")).toBe(true);\n  expect(inBox(errors, \"Input must be a number!\")).toBe(true);\n  expect(inBox(errors, \"Input cannot be less than zero!\")).toBe(true);\n  expect(inBox(errors, \"Input cannot be greater than 100!\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/YEqpLm6gNag",
          "starterCode": "// A function which applies validation rules to a number input\n// and throws errors if the number is invalid\nconst validateNumber = (input: any) => {\n  if (typeof input !== \"number\") {\n    throw new Error(\"Input must be a number!\");\n  } else if (input < 0) {\n    throw new Error(\"Input cannot be less than zero!\");\n  } else if (input > 100) {\n    throw new Error(\"Input cannot be greater than 100!\");\n  }\n\n  return true;\n};\n\n// A function which accepts a number and handles validating it\nconst processInputValue = (value: any) => {\n  try {\n    const result = validateNumber(value);\n    console.log(`Input ${value} is valid!`);\n  } catch (err) {\n    // Only change code here!\n    throw err;\n  }\n};\n\n// Pass some correct and incorrect values to the processInputValue\n// function\nprocessInputValue(-5);\nprocessInputValue(500);\nprocessInputValue(\"some string\");\nprocessInputValue(5);\nprocessInputValue(92);\n",
          "solutionCode": "// A function which applies validation rules to a number input\n// and throws errors if the number is invalid\nconst validateNumber = (input: any) => {\n  if (typeof input !== \"number\") {\n    throw new Error(\"Input must be a number!\");\n  } else if (input < 0) {\n    throw new Error(\"Input cannot be less than zero!\");\n  } else if (input > 100) {\n    throw new Error(\"Input cannot be greater than 100!\");\n  }\n\n  return true;\n};\n\n// A function which accepts a number and handles validating it\nconst processInputValue = (value: any) => {\n  try {\n    const result = validateNumber(value);\n    console.log(`Input ${value} is valid!`);\n  } catch (err) {\n    // Only change code here!\n    console.error(err.message);\n  }\n};\n\n// Pass some correct and incorrect values to the processInputValue\n// function\nprocessInputValue(-5);\nprocessInputValue(500);\nprocessInputValue(\"some string\");\nprocessInputValue(5);\nprocessInputValue(92);\n",
          "content": ""
        },
        {
          "id": "C8I5vca4a",
          "type": "typescript",
          "title": "Try/Catch",
          "instructions": "The syntax you saw in the last challenge is known as `try/catch`. It's a very common structure found in many programming languages. It allows you to \"try\" some operation which may fail and \"catch\" the error if it does occur. This allows you to safely write code to deal with operations which may fail, such as network requests, user interactions, asynchronous logic, functions which call external APIs or libraries, and so on.\n\nIn the editor below is some simple code to simulate playing a lottery in a casino. The function `handleLotteryAttempt` throws an error about 95% of the time to indicate a failed lottery attempt. The `simulateCasino` calls this method 100 times to simulate a user playing in the casino.\n\nCurrently the program crashes because the error is not handled. Your job is to update the code to handle the thrown error condition\\! Can the player beat the casino\\!?",
          "testCode": "test(\"`handleLotteryAttempt` should throw an error around 95% of the time.\", () => {\n  expect(() => {\n    for (let i = 0; i < 100; i++) {\n      handleLotteryAttempt();\n    }\n  }).toThrow();\n});\n\ntest(\"`simulateCasino` should run the simulation and return the final user wallet balance.\", () => {\n  const result = simulateCasino();\n  expect(result).toBeDefined();\n  expect(typeof result).toBe(\"number\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/HxqdsFQjMng",
          "starterCode": "// Fixed amounts for lottery wins and losses\nconst LOTTERY_SIZE = 1000;\nconst ROUND_SIZE = 100;\n\n// Simulate a lottery which only wins 5% of the time\nconst handleLotteryAttempt = () => {\n  const n = Math.round(Math.random() * 100);\n  if (n < 5) {\n    return true;\n  } else {\n    throw new Error(\"Did not win the lottery!\");\n  }\n};\n\n// Simulate playing in a casino\nconst simulateCasino = () => {\n  let userWallet = 500;\n  for (let i = 0; i < 100; i++) {\n    // Refactor the following code to use try/catch instead of if/else\n    // The logic should remain the same!\n\n    // Change code below this line\n    const didWin = handleLotteryAttempt();\n    if (didWin) {\n      userWallet += LOTTERY_SIZE;\n    } else {\n      userWallet -= ROUND_SIZE;\n    }\n    // Change code above this line\n  }\n\n  // Return the result\n  return userWallet;\n};\n\n// Run the simulation\nconst finalUserBalance = simulateCasino();\n\n// Print out the lottery results\nconsole.log(\"Lottery finished!\");\n\n// Show the user a message depending on the results\nif (finalUserBalance > 500) {\n  console.log(\"Congratulations! You should play more often!\");\n} else {\n  console.log(\n    `You lost a lot of money! Your ending balance is: ${finalUserBalance}`\n  );\n}\n",
          "solutionCode": "// Fixed amounts for lottery wins and losses\nconst LOTTERY_SIZE = 1000;\nconst ROUND_SIZE = 100;\n\n// Simulate a lottery which only wins 5% of the time\nconst handleLotteryAttempt = () => {\n  const n = Math.round(Math.random() * 100);\n  if (n < 5) {\n    return true;\n  } else {\n    throw new Error(\"Did not win the lottery!\");\n  }\n};\n\n// Simulate playing in a casino\nconst simulateCasino = () => {\n  let userWallet = 500;\n  for (let i = 0; i < 100; i++) {\n    // Refactor the following code to use try/catch\n    // The logic should remain the same!\n    // Change code below this line\n    try {\n      const didWin = handleLotteryAttempt();\n      userWallet += LOTTERY_SIZE;\n    } catch (err) {\n      userWallet -= ROUND_SIZE;\n    }\n    // Change code above this line\n  }\n\n  // Return the result\n  return userWallet;\n};\n\n// Run the simulation\nconst finalUserBalance = simulateCasino();\n\n// Print out the lottery results\nconsole.log(\"Lottery finished!\");\n\n// Show the user a message depending on the results\nif (finalUserBalance > 500) {\n  console.log(\"Congratulations! You should play more often!\");\n} else {\n  console.log(\n    `You lost a lot of money! Your ending balance is: ${finalUserBalance}`\n  );\n}\n",
          "content": ""
        },
        {
          "id": "wesvb7Sd1",
          "type": "media",
          "title": "Error Handling and Clean Code",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "### Embrace Errors\n\nErrors are an unavoidable part of programming software.\n\nLearning how to handle failure conditions gracefully is one of the indispensable skills of a software developer.\n\nThis section should give you a basic idea about what errors are, what they mean for a computer program, and how to handle them. The `try/catch` construct is the basic paradigm for handling unsafe operations and is common to many programming languages.\n---\n\n### Errors and Stack Traces\n\nOne more thing to mention about errors is that they often provide a specific _message_ and _stack\\-trace_. The message is meant to tell you exactly what failed, e.g. `Uncaught TypeError: Cannot read property 'address' of null`.\n\nThe stack\\-trace shows you some information about \"where the program came from\" before it failed. It's like a trail of breadcrumbs, which show you how the program ended up at the place where it crashed. For instance, here is a full error message and stack trace for a real error:\n\n```typescript\nUncaught TypeError: Cannot read property 'address' of null\n at ApplicationContainer (ApplicationContainer.tsx:123)\n    at renderWithHooks (react-dom.development.js:16260)\n    at mountIndeterminateComponent (react-dom.development.js:18794)\n    at beginWork$1 (react-dom.development.js:20162)\n    at HTMLUnknownElement.callCallback (react-dom.development.js:336)\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:385)\n    at invokeGuardedCallback (react-dom.development.js:440)\n    at beginWork$$1 (react-dom.development.js:25780)\n    at performUnitOfWork (react-dom.development.js:24695)\n    at workLoopSync (react-dom.development.js:24671)\n    at performSyncWorkOnRoot (react-dom.development.js:24270)\n    at scheduleUpdateOnFiber (react-dom.development.js:23698)\n    at updateContainer (react-dom.development.js:27103)\n    at react-dom.development.js:27528\n    at unbatchedUpdates (react-dom.development.js:24433)\n    at legacyRenderSubtreeIntoContainer (react-dom.development.js:27527)\n    at Object.render (react-dom.development.js:27608)\n    at Module../src/index.tsx (index.tsx:27)\n    at __webpack_require__ (bootstrap:790)\n    at fn (bootstrap:150)\n    at Object.1 (utils.ts:523)\n    at __webpack_require__ (bootstrap:790)\n    at checkDeferredModules (bootstrap:45)\n    at Array.webpackJsonpCallback [as push] (bootstrap:32)\n    at main.chunk.js:1\n\n```\n\nThe numbers at the end of each line are line numbers in the original source code. Specifically, the list of lines are a list of function calls. The function calls of a program are piled up in a stack as a program executes, and resources allocated for handling function execution are only removed once the function _returns\\._ A stack trace is just a trace of all the function calls which led to the present place where the program failed.\n\nThe purpose of a stack\\-trace is to help the programmer track down exactly where the program got into a failure state, so it is easier to fix.\n\nStack\\-traces are scary, but they are meant to help you\\!\n---\n\n### Conclusion\n\nIdeally, you want your programs to be error\\-free. However, you will find that is almost impossible. You will always be surprised at the strange ways computer programs can fail. What you should strive for is to write code in which it is easy and fast to understand how and why errors occurred, when they do, and to make it easy to refactor your code to fix errors when you need to. Instead of trying to write perfect code you should try to write and think about code which can be very easy to adapt to handle errors when errors occur.\n\nNow that you know about how to log information from your program with the `console`, handle, throw, and catch errors, and read stack\\-traces, you are well on your way to dealing with errors which will occur as you write your first programs\\!"
        },
        {
          "id": "0gih2c1M",
          "type": "section",
          "title": "Types and Type Primitives",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/tcnl9t1ukD8",
          "starterCode": "",
          "solutionCode": "",
          "content": "Central to every TypeScript program is the data that it concerns, operates on, and manipulates. But what exactly is that data? How can it be described, and what are its properties?\n\nWell, TypeScript, like every programming language, has different _types_ of data. The number of types that can be created by a programming language’s users is infinite, however all languages, including TypeScript, have a set of built\\-in types, the lowest level of which are called **primitives**. These types can be operated on and manipulated by themselves, or be composed with other types to form more complex types, but this is a topic we’ll cover in more detail later. For now, let’s focus on TypeScript's most common **primitive data types**.\n\nFirst, though, let’s clear something up. \n\n## What exactly is a type?\n\nAt its most basic, a type describes a particular piece of data. A piece of data’s type lets us \\(and more importantly, the TypeScript compiler\\!\\) know how this particular piece of data can be used and what kind of operations can be performed on it. For example, something with the type `number`, should be able to be added, subtracted, divided, and multiplied with other pieces of data that also have the type `number`. Makes sense, right\\!?\n\nIn fact, you just learned your first type: `number`\\! As you might have guessed, this is one of TypeScript's primitive data types; one of the basic building blocks of the data found within a TypeScript program.\n\n> **Tip**\n> A compiler is responsible for translating code written in one programming language into another language. In many cases, compilers are responsible for translating human\\-readable source code into something called machine\\-code, which is highly optimized and only intended to be interpreted by computers. In the case of TypeScript, the compiler is responsible for translating TypeScript into JavaScript that can be executed anywhere JavaScript can be.\n\n## TypeScript Primitive Types\n\nTypeScript supports several primitive data types, including:\n\n* `number`\n* `string`\n* `boolean`\n* `null`\n* `undefined`\n\n\nWhile this list is not exhaustive, for the purpose of the next several lessons, these are the types you'll need to know. Let's take a closer look at each one in the next few challenges."
        },
        {
          "id": "w3bc0PeO",
          "type": "typescript",
          "title": "Numbers",
          "instructions": "Modify the code below so that `whole` is equal to `1` and `half` is equal to `.5`.\n",
          "testCode": "test('`whole` should be equal to `1`', () => expect(whole).toBe(1));\ntest('`half` should be equal to `.5`', () => expect(half).toBe(.5));",
          "videoUrl": "https://www.youtube.com/embed/AVoUdgDVTVk",
          "starterCode": "const whole = 0;\nconst half = 0;",
          "solutionCode": "const whole = 1;\nconst half = .5;",
          "content": "In TypeScript, numbers are expressed literally, and are given the type `number` \\(not to be confused with `Number`, with a capital \"N\"\\). As you might expect, numbers can be operated on mathematically, and are used for representing numeric values in our programs.\n\nIn TypeScript, numbers can be whole, or fractional \\(i.e. have one or more decimal places\\).\n\n## number not Number\n\nThis is an important distinction. In TypeScript, _`number`_ refers to the data type, while `Number` refers to the  __global__, and more concrete, `Number` object, a concept that goes beyond the scope of this lesson. For now, it's just important that you understand the distinction, and that TypeScript is a case\\-sensitive programming language. While this may seem like a small difference, remember: in the case of `number` vs\\. `Number`, case matters\\!\n\n## Just one number\n\nIn the challenge above, we discussed that data with the type `number` in TypeScript can represent both whole and fractional values. While it is not important in the context of this course, you might find it interesting to know that commonly, in other program languages, fractional values, or _floating point_ values, are represented by another data type. TypeScript is unique in that all numbers are considered floating point values."
        },
        {
          "id": "UnMCiU0Z",
          "type": "typescript",
          "title": "Strings",
          "instructions": "Modify `greeting` below so that it says \"Hello, my name is \" followed by your name\n",
          "testCode": "test('`greeting` should equal the string `\"Hello, my name is {your name here}\"`', () => {\n  expect(/hello, my name is \\w+/i.test(greeting)).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/w4kz27N3p60",
          "starterCode": "const greeting = \"\";",
          "solutionCode": "const greeting = \"Hello, my name is Pete\";",
          "content": "In TypeScript, strings are used to represent text, or data that can be represented by text, and are given the type `string` \\(not to be confused with `String` – noticing a pattern here?\\). Strings are expressed as a string of characters surrounded by single or double quotes, `\"like this\"`.\n\n## string not String\n\nOk, last warning\\! Like `number` and `Number`, `string` and `String` is an important distinction. What `String` refers to is outside the scope of this discussion, and we don't want you to get bogged down in that; the important takeaway: TypeScript is a **case\\-sensitive** language, and it is _not_ safe to assume that `something` and `SomeThing` are the same, whatever that something is.\n\n> **Tip**\n> TypeScript is a case sensitive language, and primitive types are always referred to in all lowercase, e.g. `string`, `number`, `boolean`, etc.\n"
        },
        {
          "id": "qNF6Faom",
          "type": "typescript",
          "title": "Booleans",
          "instructions": "* Look at the following example, and change `false` to `true`.\n* Notice what happens\\!\n\n\nDon't worry, there's a lot going on here that we haven't covered yet. For now, just focus on the challenge at hand.",
          "testCode": "test('`str` should be equal to `\"Hello, TypeScript!\"`', () =>\n  expect(str).toBe(\"Hello, TypeScript!\"));\ntest(\"`isTrue` should be of type `boolean`\", () =>\n  expect(typeof isTrue).toBe(\"boolean\"));\ntest(\"`isTrue` should be `true`\", () =>\n  expect(isTrue).toBe(true));\n",
          "videoUrl": "https://www.youtube.com/embed/URyS2Te2JaY",
          "starterCode": "let str = \"\";\nconst isTrue = false;\n\nif (isTrue) {\n    str = \"Hello, TypeScript!\";\n}\n\nconsole.log(str);",
          "solutionCode": "let str = \"\";\nconst isTrue = true;\n\nif (isTrue) {\n    str = \"Hello, TypeScript!\";\n}\n\nconsole.log(str);",
          "content": "Booleans, are perhaps the simplest of the primitive data types, and in TypeScript,  can be expressed as either `true` or `false`. They are given the type `boolean`. Booleans are the primary way that we handle \"logical\" decision making, and, in fact, many expressions can be _evaluated_ as booleans, but we'll get into this more later.\n\n```\nconst isTrue = true;\nconst isFalse = false;\n\nif (isTrue) {\n  // do something cool!\n}\n\n```\n"
        },
        {
          "id": "p2Iu3bYN",
          "type": "media",
          "title": "Null and Undefined",
          "instructions": "",
          "testCode": "",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "`null` and `undefined` are similar in that they both represent the absence of value. They are both expressed literally, and in TypeScript are given the types `null` and `undefined` \\(i.e. the values and the types are the same, but are used in different contexts\\).\n\n`null` differs from `undefined` in that it is typically _intentionally_ used to represent the absence of value, while `undefined` is assigned to variables that have not yet been assigned a value.\n\n```typescript\nlet n; // n's value is currently undefined\nconst x = null; // x has been assigned a value of null\n\n```\n\nThis is not to say that `undefined` cannot be explicitly assigned to a variable, it is just less common, and almost certainly a mistake.\n\n```typescript\nconst dontDoThis = undefined;\n\n```\n\nMuch more commonly, we're checking if something _is_ `undefined`, rather than _making something_ `undefined`."
        },
        {
          "id": "7CDlUIz9",
          "type": "media",
          "title": "Type Inference",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "By now, you know that all data in a TypeScript program has a type. But how does the compiler know what types of data it's dealing with? Well, TypeScript is a pretty smart language, and in many cases, it can effectively use _type inference_ to determine type information about a piece of data. For example, when a variable is initialized with a string of text surrounded by quotes, TypeScript can _infer_ that that variable is of the type `string`.\n\n```typescript\nconst foo = \"this is a string\";\n// TypeScript infers that foo is a string\n\n```\n\nTypeScript can easily accomplish this with primitive data types:\n\n```typescript\nconst bar = true; // inferred to be boolean\nconst baz = 100; // inferred to be number\nconst qux = null; // inferred to be null\nconst qaz = undefined; // inferred to be undefined\n\n```\n\nLet's see this in action in the next challenge\\!"
        },
        {
          "id": "Q2hgPS5P",
          "type": "typescript",
          "title": "Inference in Action",
          "instructions": "Consider the code snippet from the last challenge. Don't just take our word for it, hover over the variable names and notice what you see.\n\nWithout being explicit, TypeScript's type engine can successfully infer the types of data that we've assigned to our rather arbitrary variables.",
          "testCode": "\ntest('`bar` should be of type `boolean`', () => expect(typeof bar).toBe(\"boolean\"))\ntest('`baz` should be of type `number`', () => expect(typeof baz).toBe(\"number\"))\ntest('`qux` should be `null`', () => expect(qux).toBe(null))\ntest('`qaz` should be `undefined`', () => expect(qaz).toBe(undefined))",
          "videoUrl": "",
          "starterCode": "const bar = true; // inferred to be boolean\nconst baz = 100; // inferred to be number\nconst qux = null; // inferred to be null\nconst qaz = undefined; // inferred to be undefined",
          "solutionCode": "const bar = true; // inferred to be boolean\nconst baz = 100; // inferred to be number\nconst qux = null; // inferred to be null\nconst qaz = undefined; // inferred to be undefined",
          "content": "## TypeScript Configuration\nA topic that we won't be covering here, but is worth mentioning, is TypeScript configuration. Some of the behavior we see in these challenges depends on how the TypeScript compiler is configured in the Pairwise workspace.\n\nWe only mention this so that you're aware that it's possible you'll see slightly different behavior in your own workspace should the configuration options you choose differ. This is something you won't have to deal with while working in the Pairwise workspace, but you should be aware of it all the same.\n\nIf you're setting up you're own project in the future, see TypeScript's \"Project Configuration\" documentation for additional information on this topic."
        },
        {
          "id": "qYQ8GOYvW",
          "type": "typescript",
          "title": "What Type is This?",
          "instructions": "Use `typeof` to find the types of the variables defined in the code below.",
          "testCode": "// Write your tests here:\ntest(\"`sType` should be string\", () => {\n  expect(sType).toBe(\"string\");\n});\ntest(\"`nType` should be number\", () => {\n  expect(nType).toBe(\"number\");\n});\ntest(\"`bType` should be boolean\", () => {\n  expect(bType).toBe(\"boolean\");\n});\ntest(\"The `typeof` keyword should be used\", () => {\n  expect(__user_code_string__).toMatch(/typeof .+/)\n})",
          "videoUrl": "https://www.youtube.com/embed/ADi01CUzCEY",
          "starterCode": "const s = \"hey there\";\nconst n = 256;\nconst b = true;\n\nconst sType = undefined;\nconst nType = undefined;\nconst bType = undefined;",
          "solutionCode": "const s = \"hey there\";\nconst n = 256;\nconst b = true;\n\nconst sType = typeof s;\nconst nType = typeof n;\nconst bType = typeof b;",
          "content": "# The typeof keyword\n\nYou can use `typeof` to find out what type something is. It will return the type as a string such as `\"string\"`, `\"number\"`, `\"boolean\"`, etc. Let's just jump into some examples:\n\n```typescript\ntypeof 'hey'; // => \"string\"\ntypeof 256; // => \"number\"\ntypeof true; // => \"boolean\"\n\nconst catName = \"Jarbles\";\n\nif (typeof catName !== \"string\") {\n  console.log(\"Cat's should have string names!\");\n}\n\n```\n# Why is this useful?\n\nWhen you program with variables you wont' always know what type the variable is. `typeof` allows you to check. In practice this is often used in functions to make sure the variables passed in are the correct time. \n\nWe will make use of `typeof` throughout the course, so it will be become more clear in time what it can be used for. \n# A tool with a catch\n\nUsing `typeof` keyword is both very powerful and fraught with issues. The long and short of it is that it doesn't act how you expect unless you are only using it with strings, numbers and booleans.\n\nI'll show you some examples, but first, consider the following rule of thumb:\n\n> If you only trust `typeof` to work on strings, numbers and booleans it will work great for you.\n\nIf you keep that in mind you don't need to actually know the oddities below, but if you're curious read on. I'm going to say it again for emphasis: ++You don't need to memorize any of this.++ Just consider it a reference.  \n\nConsider the following. What do you expect the types to be?\n\n```typescript\ntypeof []; // => ???\ntypeof {}; // => ???\ntypeof null; // => ???\n\n```\n\nIf you're uncertain let me ask you this: Would you expect the types of `[]`, `{}`, and `null` to all the the same? Probably not, but they are:\n\n```typescript\ntypeof []; // => \"object\"\ntypeof {}; // => \"object\"\ntypeof null; // => \"object\"\n\n```\n\nThe `typeof {}` makes sense since it is indeed an object, however, `typoef null` is completely unintuitive and even worse it's not helpful. "
        },
        {
          "id": "VppIs2a7",
          "type": "media",
          "title": "Being Explicit with Type Annotations",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "We've seen that TypeScript can infer type information from our code contextually. However, as data types become more complex, or potentially ambiguous, it is sometimes useful to be more _explicit_, and tell the compiler exactly what type of data it's dealing with. In order to do this, TypeScript provides us with **type annotations**. Type annotations are a way to tell the compiler what type of data to expect, and how to treat that data. \n\nThe syntax `:` \\+ `type name` is used to annotate variables and other parts of our programs. They look like this:\n\n```typescript\nconst name: string = \"Finn\"; \n// use a colon followed by a type to explicitly type something\n\n```\n\nThis is not always necessary, since TypeScript does have very powerful type inference, which goes far beyond inferring primitive data types. However, it sometimes _is necessary_, and is often helpful to other developers reading your code to allow them to quickly and easily understand how something is intended to work and/or be used.\n\n> **Tip**\n> Hover over variable names and other parts of your code in the Pairwise workspace to see their type annotations.\n\nUsing explicit types can also act as a safeguard for catching type\\-errors before your code is even compiled \\(if you're using something called a linter, which the Pairwise workspace uses, as you'll soon see\\). For example:\n\n```typescript\nconst theMeaningOfLife: string = 42; \n// Error! TypeScript will complain about this\n\n```\n\nSince we've told TypeScript that `theMeaningOfLife` should be a `string`, it will warn us that we've tried to assign it a number to \\(denoted by a squiggly red line, just like a spellchecker\\). This is called **type error**, and is something we want to avoid.\n\nLet's try this out."
        },
        {
          "id": "AB2T4DCt",
          "type": "typescript",
          "title": "Fix Me!",
          "instructions": "Hover over `theMeaningOfLife` to see a helpful linter error, and then fix the problem.",
          "testCode": "test('`theMeaningOfLife` should be of type `string`', () => expect(typeof theMeaningOfLife).toBe(\"string\"))",
          "videoUrl": "https://www.youtube.com/embed/J1UHcKpw7xA",
          "starterCode": "const theMeaningOfLife: string = 42;",
          "solutionCode": "const theMeaningOfLife: string = \"42\";",
          "content": ""
        },
        {
          "id": "VpxIs2a9",
          "type": "media",
          "title": "Type Inference vs. Explicit Types",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "TypeScript's type system is a large part of what makes it such a powerful language. While type inference can be very powerful, reach for explicit typing in more complex cases, or if the inferred type  is inconsistent with how you intend something to be used. In any case, being rigorous around types in your programs and using TypeScript's type engine to its fullest potential can help you avoid painful run\\-time errors in your code.\n\nIf these topics seem confusing right now, don't worry\\! Type inference and type annotations are both in\\-depth topics that we'll learn more about in an organic way throughout this course, but it's essential that you're introduced to the concepts and syntax early on. \n\nFor now, the main takeaway is that you learn the difference between type inference and explicit typing with type annotations, and learn to recognize the type annotation syntax.\n\nTo review:\n\n```typescript\nconst foo = \"foo is inferred to be a string\";\nconst bar: string = \"bar is explicitly typed as a string\";\n\n```\n\nWhile these examples are simple, and purposefully contrived for this introduction to types, as we begin learning about more complex data types and structures, we'll see less trivial examples and put these concepts into action. "
        },
        {
          "id": "xLJj8XiU",
          "type": "media",
          "title": "The Any Type",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In TypeScript, there's a basic type we have not explored yet called the `any` type\\. This is the only type we've learned about so far which is not a valid type in TypeScript's subset language, JavaScript. This is because `any` is _just a type_,\\_ \\_and JavaScript is not a statically typed language like its superset, TypeScript.\n\nIn other words, `any` cannot be expressed literally. It is not a primitive type, and has no actual value that corresponds to it, the way that integer literals can be assigned to the `number` type, and string literals can be assigned to `string`. Rather, _all values_ can be assigned to `any`. \n\n```typescript\nconst quux: any = \"foo bar baz\";\nconst quuz: any = 70000;\nconst corg: any = true;\nconst flob: any = undefined;\nconst glob: any = null;\n\n```\n\n`any` is sort of like a type check escape hatch. It basically lets TypeScript know _not_ to **type check** something at compile\\-time \\(before the code is executed, i.e. statically\\).\n\n> **Tip**\n> Type checking is the process of validating and enforcing the type constraints in our code. Static type checking \\(such as in TypeScript\\), happens at compile\\-time, and helps to greatly reduce the occurrence of run\\-time errors in our code.\n\nUsing `any` can be extremely useful when we simply don't know the type of data something will be until run\\-time \\(when the code is actually executed\\). This might be because the data is coming from some external source that we don't have knowledge of beforehand, such as a program's end\\-user, or an external library. \n\nThat said, it is generally considered best practice to avoid using `any` wherever possible. This is because `any` makes our code less _type safe_: anything labeled as `any` will be type checked only at run\\-time \\(i.e. dynamically\\) and if there's a type mismatch, an error will be thrown, and your users' experience may impacted. \n\n> If `any` is overused, many of the benefits of using a statically typed language will be lost, and the incidence of run\\-time errors \\(something we always want to avoid\\!\\) is likely to increase. \n\nThe takeaway: use `any` sparingly, only when it is absolutely necessary."
        },
        {
          "id": "KbkT6v8g",
          "type": "typescript",
          "title": "Any in Action",
          "instructions": "Change the values below to match their variable names. This is a simple challenge just to demonstrate that any type can be assigned to something annotated as `any`.",
          "testCode": "test('`iAmAString` should be of type `string`', () => expect(typeof iAmAString).toBe(\"string\"))\ntest('`iAmANumber` should be of type `number`', () => expect(typeof iAmANumber).toBe(\"number\"))\ntest('`iAmNull` should be `null`', () => expect(iAmNull).toBe(null))\ntest('`iAmUndefined` should be `undefined`', () => expect(iAmUndefined).toBe(undefined))\n",
          "videoUrl": "https://www.youtube.com/embed/BWdiuK_6vog",
          "starterCode": "const iAmAString: any = undefined;\nconst iAmANumber: any = null;\nconst iAmNull: any = 71919;\nconst iAmUndefined: any = \"not undefined yet!\";",
          "solutionCode": "const iAmAString: any = \"undefined\";\nconst iAmANumber: any = 123;\nconst iAmNull: any = null;\nconst iAmUndefined: any = undefined;",
          "content": ""
        },
        {
          "id": "UNWwhyHW",
          "type": "section",
          "title": "Variables & Assignment",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In our previous lessons, we've seen a lot of code that looks something like this:\n\n```typescript\nconst foo = 100;\n\n```\n\nLet's finally take a closer look at what's going on here.  \n\n## What is a Variable?\n\nIn this example, `foo`  is what's known as a variable. Variables store _references_ to data, or _values_, which we can use in our programs. Here, `foo`  is of the type `number` and has a value of `100`.  `100` is stored in memory, but the variable `foo` holds a reference to that memory, so it can be called up again and again, and used throughout the program. This is an important concept:\n\n> Variables store references to values stored in memory, and do not store the values themselves.\n\nIn TypeScript, to give meaning to a variable, it must be _declared_, _initialized_, and _assigned_ a value. Let's break this down.\n\n## Declaration & Initialization\n\nThroughout the next several lessons, we'll primarily be using they keywords `let`  and `const` to declare our variables. Each of these keywords has a slightly different behavior, which we'll explore in more detail later.\n\nThe syntax for variable declaration requires one of these keywords and an identifier, or name, to act as the variable's unique identifier.  When we declare a variable, it is automatically _initialized_, and memory is allocated for it. Once initialized, a variable will be `undefined` until we assign a value to it. \n\n```typescript\nlet baz; // baz is undefined\n\n```\n\n## Assignment\n\nThat's where the `=` operator comes in. Assignment is pretty intuitive: to the left of the `=` is the variable that we're assigning a value to \\(the left operand\\), and to the right of it is the value that we're assigning \\(the right operand\\).  In other words, the assignment operator gives the value of its right operand to its left operand. That's it\\!\n\nA variable can be declared and initialized first, and assigned a value later in the program. \n\n```typescript\nlet baz; // baz has been declared and intialized, and is undefined\n// do something...\nbaz = \"a string\"; // baz has been assigned a value\n\n```\n\nAlternatively, a variable can be declared, initialized, and given a value in a single statement.\n\n```typescript\nconst bar = \"cool!\"; // bar has been declared, initialized, and assigned a value\n\n```\n\nA quick note here: the process of assigning a variable a value for the first time \\(as in the above example\\) is also sometimes referred to as \"initialization\", since we're \"initializing\" the variable with a value. However, from a theoretical standpoint, true \"initialization\" happens when the variable is declared and the JavaScript engine \\(which ultimately runs all of our TypeScript code, since TypeScript is compiled to JavaScript before execution\\) allocates memory for it.\n\nWe're going to dive deeper into variables and assignment in the next few lessons.\n\nLet's go\\!"
        },
        {
          "id": "JALDb575",
          "type": "typescript",
          "title": "Declare a Variable",
          "instructions": "Ok, this challenge is pretty simple, but it's very important. Your first variable\\! \n\n* In the editor below, _declare_ a variable named `first`. Do not assign a value to it. Look back at the previous lesson if you get stuck.\n* Once the fist test has passed, repeat this a couple of times on the second and third lines with variables named `second` and `third` to help you get used to the syntax.\n* Remember to terminate each line with a semicolon, `;` \n\n\n> **Hint**\n> For this challenge, you need to use the keyword `let` \n",
          "testCode": "test('A variable named `first` should be declared (and assigned no value).', () => expect(first).toBe(undefined));\ntest('A variable named `second` should be declared (and assigned no value).', () => expect(second).toBe(undefined));\ntest('A variable named `third` should be declared (and assigned no value).', () => expect(third).toBe(undefined))",
          "videoUrl": "https://www.youtube.com/embed/hlRCuVxi3F8",
          "starterCode": "",
          "solutionCode": "let first;\nlet second;\nlet third;",
          "content": ""
        },
        {
          "id": "LyQWstvV",
          "type": "typescript",
          "title": "Declaring Typed Variables",
          "instructions": "In the previous lesson, we declared a few variables, as seen in the editor below.\n\nThis is perfectly valid, but it would be better if we gave these variables some types. As\\-is, each of these variables will be inferred as `any`. Especially when declaring variables without initial assignments, it is good practice to give your variables type annotations, even when you really intend their type to be `any` \\(which is generally discouraged, since we lose many of the benefits of a statically typed language when we use the `any` type\\).\n\n* Using type annotations, give `first` the type `string`, `second` the type `boolean`, and `third` the type `number`.\n\n\n> **Hint**\n> Type annotations follow the syntax `: <type>`, e.g. `let str: string;` \n",
          "testCode": "test(\"`first` should be given the type `string`\", () =>\n  expect(/let\\sfirst\\s?:\\s?string/.test(__user_code_string__)).toBe(true));\n\ntest(\"`second` should be given the type `boolean`\", () =>\n  expect(/let\\ssecond\\s?:\\s?boolean/.test(__user_code_string__)).toBe(\n    true\n  ));\n\ntest(\"`third` should be given the type `number`\", () =>\n  expect(/let\\sthird\\s?:\\s?number/.test(__user_code_string__)).toBe(true));\n",
          "videoUrl": "https://www.youtube.com/embed/X-XVN1YLo3s",
          "starterCode": "let first;\nlet second;\nlet third;",
          "solutionCode": "let first: string;\nlet second: boolean;\nlet third: number;",
          "content": ""
        },
        {
          "id": "bhxwOAx9",
          "type": "typescript",
          "title": "Your First Assignment",
          "instructions": "Now that we've practiced variable declaration a bit, let's get into a something a bit more exciting: giving our variables some values.\n\n* In the editor below, the variable `myName` is declared, but is not assigned a value. \n* `myName` is annotated with the type `string`, so we can only assign it a string value.\n* Remember, in TypeScript, strings are represented as literal text, wrapped with single or double quotes.\n* Assign your name to the variable to complete the challenge.\n\n",
          "testCode": "test('`myName` should be of type `string`', () => expect(typeof myName).toBe(\"string\"))",
          "videoUrl": "https://www.youtube.com/embed/URN4aCrVE14",
          "starterCode": "let myName: string;",
          "solutionCode": "let myName: string = \"Asher\";",
          "content": ""
        },
        {
          "id": "VppIs2a9",
          "type": "typescript",
          "title": "Reassignment with \"let\"",
          "instructions": "In the editor below, assign the new values `\"learn to code!\"`, `false` , and `100` to the appropriate variables. See [below](/scrollTarget/supplementary-content-container) for an example if you get stuck.\n",
          "testCode": "test(\"`foo` should be assigned a new value according to the challenge instructions\", () =>\n  expect(foo).toBe(100));\n\ntest(\"`baz` should be assigned a new value according to the challenge instructions\", () =>\n  expect(baz).toBe(\"learn to code!\"));\n\ntest(\"`iCanBeReassigned` should be assigned a new value according to the challenge instructions\", () =>\n  expect(iCanBeReassigned).toBe(false));\n",
          "videoUrl": "https://www.youtube.com/embed/4iprI4tDBfA",
          "starterCode": "let foo: any = \"give me a new value!\";\nlet baz: string = \"me too!\";\nlet iCanBeReassigned = true;\n\n// write your code below!\n",
          "solutionCode": "let foo: any = \"give me a new value!\";\nlet baz: string = \"me too!\";\nlet iCanBeReassigned = true;\n\n// write your code below!\nfoo = 100;\nbaz = \"learn to code!\";\niCanBeReassigned = false;",
          "content": "Variables declared using the `let` keyword can be reassigned. In other words, a variable declared with `let`  can be assigned a new value any time after its been declared, initialized, and assigned an initial value:\n\n```\nlet x = \"I'm not constant.\";\nx = \"see!\";\n\n```\n\nIn TypeScript, however, unless a variable declared with `let` is given the type `any`, subsequent assignments must respect the variable's initial type, whether it was explicitly annotated or not.\n\nFor example:\n\n```typescript\nlet str = \"my string\";\nstr = \"another string\"; // ok\n\nlet num = 42;\nnum = \"the meaning of life\"; // not ok!\n\nlet iCanBeAnything: any = true;\niCanBeAnything = \"now I'm a string\"; // ok, but discouraged!\n\n```\n\n`any` tends to make our programs less safe, so try to avoid code like in this last example."
        },
        {
          "id": "g2CWrS2M",
          "type": "typescript",
          "title": "\"let\" vs. \"const\"",
          "instructions": "* Uncomment the code in the editor below, hover over `pairwise`, and note the error.\n* Fix the problem by assigning `pairwise` the string `\"pairwise\"`.\n* On line 2, try to assign `pairwise` a new value and see what happens.\n\n",
          "testCode": "test('`pairwise` should be equal to the string `\"pairwise\"`', () =>\n  expect(pairwise).toBe(\"pairwise\"));\n",
          "videoUrl": "https://www.youtube.com/embed/JNLjopdrSUw",
          "starterCode": "// const pairwise: string;",
          "solutionCode": "const pairwise: string = \"pairwise\";",
          "content": "In addition to the `let` keyword, we've also seen variables declared with `const` throughout this section. `const` is short for \"constant\", and unlike variables declared with `let`, variables declared with `const` cannot be reassigned. Otherwise, they behave very similarly.\n\n> **Tip**\n> In general, when writing TypeScript, `const` is preferred over `let` unless your variable is going to be declared without an initial value, or will be reassigned later in the program. \n\n## Constant does not mean immutable\n\nWhile it is true that variables declared with `const` cannot be reassigned, this _does not_ mean that values assigned to them cannot change, or _mutate_ over time.\n\nFor primitive data types like the ones we've learned about so far, this nuance does not apply. In other words, if you assign the string `\"immutable\"` to a variable declared with `const`, you can always count on that variable being equal to the string `\"immutable\"`. Likewise, if you assign it a number, a boolean, null, or undefined. These types are immutable by nature, and values of these types cannot change over time \\(if a string or number appears to change over time, it is really a new instance of a string or number\\).\n\nFor more complex data types, though, `const` can trip you up if you're not careful. Check out the following examples using arrays:\n\n```\nconst arr = [1, 2, 3];\narr = [1, 2, 3, 4]; // error! arr cannot be reassigned\n\n```\n\nLike you would expect, you cannot assign `arr` a new array \\(or any other value\\). However:\n\n```\nconst arr = [1, 2, 3];\narr.push(4);\n// here, .push(4) adds the number 4 to the end of the list\n// the list now equals [1, 2, 3, 4]\n\n```\n\nAlthough we didn't assign `arr` a new value, its current value is different than the value we originally assigned to it. More precisely, the array that `arr` references has been _mutated_.\n\nWe will explore the concept of immutability more in future lessons, but for now, you should be aware that `const` only ensures that a variable cannot be reassigned, _not_ that the value it references is immutable."
        },
        {
          "id": "fvvYrahy",
          "type": "section",
          "title": "Arithmetic Operators",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Arithmetic operators in TypeScript are one of the primary ways in which we deal with numerical data. In programming in general, being able to perform simple and complex calculations on numbers is essential in many programs.\n\nThe operators we'll cover in this section give us the basic building blocks to be able to work with numbers in our code. We'll look at how to add, subtract, divide, and multiply numbers, as well as a few other operations that are incredibly useful.\n\nGo ahead to the next challenge and lets get started\\! "
        },
        {
          "id": "-jkgXsag",
          "type": "typescript",
          "title": "The Addition Operator",
          "instructions": "* Give `num1` and `num2` values so that their sum equals `100`.\n* On an empty line, declare a variable named `sum` and use the `+` operator to assign it `num1` plus `num2` .\n\n",
          "testCode": "test(\"A variable named `sum` should be declared and be of the type `number`.\", () =>\n  expect(typeof sum).toBe(\"number\"));\n\ntest(\"`sum` should equal `100`.\", () => expect(sum).toBe(100));\n",
          "videoUrl": "",
          "starterCode": "let num1: number;\nlet num2: number;\n\n",
          "solutionCode": "let num1: number = 30;\nlet num2: number = 70;\n\nconst sum = num1 + num2;",
          "content": "In TypeScript, the `+`, or addition operator, behaves much like you think it will. It operates on two numbers, or operands \\(which can be number literals, or variables that represent numbers\\), and adds the two operands together:\n\n```typescript\nconst num = 1 + 1; // num = 2\n\n```\n"
        },
        {
          "id": "H0MjLq1p",
          "type": "typescript",
          "title": "The Subtraction Operator",
          "instructions": "* On an empty line, declare a variable named `difference` and assign it an expression which subtracts a number from `twentyThree` so that `difference` equals `10`.\n* Feel free to subtract a number literal, or declare a new variable to subtract from `twentyThree`.\n\n",
          "testCode": "test(\"A variable named `difference` should be declared and be of the type `number`.\", () =>\n    expect(typeof difference).toBe(\"number\"));\n\ntest(\"`difference` should equal `10`.\", () => expect(difference).toBe(10));",
          "videoUrl": "",
          "starterCode": "const twentyThree = 23;",
          "solutionCode": "const twentyThree = 23;\n\nconst difference = twentyThree - 13;\n",
          "content": "Opposite to the addition operator, is the `-`, or subtraction operator. The subtraction operator takes two numbers as operands and subtracts them:\n\n```typescript\nconst num = 14 - 5; // 9\n\n```\n\nLike the addition operator \\(and all the arithmetic operators\\), the subtraction operator's operands can be number literals \\(like in the above example\\), or variables that represent numbers:\n\n```\nconst x = 92.42;\nconst y = 14.83;\nconst diff = y - x; // -77.59\n\n```\n"
        },
        {
          "id": "_gO2lskh",
          "type": "typescript",
          "title": "The Multiplication Operator",
          "instructions": "* Declare two variables named `factor1` and `factor2` and assign them numbers whose product equals `63`.\n* Declare a variable named `product` and, using the `*` operator, assign it `factor1` multiplied by `factor2`.\n\n",
          "testCode": "test(\"A variable named `product` should be declared and be of the type `number`.\", () =>\n    expect(typeof product).toBe(\"number\"));\n\ntest(\"`product` should equal `63`.\", () => expect(product).toBe(63));",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "const factor1 = 9;\nconst factor2 = 7;\n\nconst product = factor1 * factor2;",
          "content": "For multiplication, we have the `*` operator\\. This binary operator \\(takes two operands\\) is straightforward, just like the addition and subtraction operator: it multiplies its two numeric operands.\n\n```\nconst x = 534;\nconst product = x * 23.24; // 12410.16\n\n```\n"
        },
        {
          "id": "fuZBwqNC",
          "type": "typescript",
          "title": "The Division Operator",
          "instructions": "In the editor below, declare a variable named `quotient` and use the `/` operator to assign it an expression which equals `243`.\n",
          "testCode": "test(\"A variable named `quotient` should be declared and be of the type `number`.\", () =>\n    expect(typeof quotient).toBe(\"number\"));\n\ntest(\"`quotient` should equal `243`.\", () => expect(quotient).toBe(243));",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "const quotient = 486 / 2;",
          "content": "Opposite the multiplication operator, is the division operator, or `/`. Like all of the basic arithmetic operators \\(`+`, `-`, `*`, `/`\\), the division operator is binary, and as you would expect, it divides its two operands:\n\n```typescript\nconst quotient = 98230 / 232; // 423.4051724137931\n\n```\n"
        },
        {
          "id": "Av840s7X",
          "type": "typescript",
          "title": "The Increment Operator",
          "instructions": "Uncomment line 2 and hover over `notCool`. This is very useful\\! See [below](/scrollTarget/supplementary-content-container) for an explanation.",
          "testCode": "test('`notCool` should be of type number', () => expect(typeof notCool).toBe(\"number\"));",
          "videoUrl": "",
          "starterCode": "const notCool = 3;\n// notCool++;",
          "solutionCode": "const notCool = 3;",
          "content": "The increment operator does exactly what its name promises it will do. It increments its operand\\! Unlike the operators we've seen so far, the `++` operator is a unary operator, meaning it only takes one operand:\n\n```\nlet x = 3;\nx++; // x = 4\n\n```\n\nSince variables declared with `const` cannot be reassigned, and incrementing a variable after its been assigned a value is tantamount to reassignment, only variables declared with `let` can be incremented in this way. \n\nThis is where TypeScript's type system shines\\! In a JavaScript program, the code in the example [above](/scrollTarget/root) would result in a run\\-time `TypeError`, meaning the error would occur during the program's execution, and users of the application would likely notice the problem. Not good\\! However, TypeScript _prevents_ this error at compile\\-time, and its linter warns us as we're coding."
        },
        {
          "id": "Ib5T7-Ll",
          "type": "typescript",
          "title": "The Increment and Decrement Operators",
          "instructions": "Ok, we took a little detour to drive home the point of why we write TypeScript instead of JavaScript in the first place. But now let's see the `++` operator in action.\n\n* Assign `b` an expression where `a` is incremented with the `++` operator _postfix_\n* Assign `c` an expression where `b`  is incremented with the `++` operator _prefix_\n\n",
          "testCode": "test('`a` should be of type `number`', () => expect(typeof a).toBe(\"number\"));\ntest('`b` should be of type `number`', () => expect(typeof b).toBe(\"number\"));\ntest('`c` should be of type `number`', () => expect(typeof c).toBe(\"number\"));\ntest('`a` should equal `101`', () => expect(a).toBe(101));\ntest('`b` should equal `101`', () => expect(a).toBe(101));\ntest('`c` should equal `101`', () => expect(a).toBe(101));\n",
          "videoUrl": "",
          "starterCode": "let a = 100;\nlet b: number;\nlet c: number;",
          "solutionCode": "let a = 100;\nlet b: number = a++;\nlet c: number = ++b;",
          "content": "## The Increment Operator\n\nThere are a couple of nuances to note about the increment operator. The increment operator can be used either _prefix_ or _postfix_, meaning either _before_, or _after_, its operand.\n\n```typescript\nlet a = 3;\nlet b = 3;\nlet c = ++a; // prefix usage\nlet d = b++; // postfix usage\n\n```\n\nWhile these expression look similar, their behavior is slightly different. The prefix operator increments its operand and returns its value _after being incremented_, while the postfix operator increments its operand and returns its value _before being incremented_. Let's take a look again with some results:\n\n```typescript\nlet a = 3;\nlet b = 3;\nlet c = ++a; // c = 4 prefix returned a after being incremented\nlet d = b++; // d = 3 postfix returned b before being incremented\n// a = 4, b = 4 both a and b were incremented\n\n```\n\n\n## The Decrement Operator\n\nSimilar to the increment operator, is the decrement, or `--` operator\\. It's a unary operator that behaves much the same way as the `++` operator, except that it decrements its numeric operand, rather than increments it. \n\n```\nlet x = 100;\nx--; // x = 99\n\n```\n\nLike the increment operator, `--` can only be used on variables declared with `let`. It also has identical prefix and postfix behaviors \\(if used prefix, it returns the value of its operand after being decremented, and vice versa if used postfix\\).\n\n```\nlet x = 100;\nlet q = 100;\nlet y = --x; // y = 99, x = 99\nlet z = q--; // z = 100, q = 99\n\n```\n\nWe're not going to cover this operator in a separate lesson, because its behavior is so similar to what we've covered here. But it can be a useful operator, so be aware of it\\!"
        },
        {
          "id": "ArSBMKtk",
          "type": "typescript",
          "title": "The Remainder Operator",
          "instructions": "A very common use\\-case for the `%` operator is to test whether or not a number is even or odd. We can accomplish this by comparing the result of `num % 2` with `0` , e.g. `num % 2 === 0`  \\(the `===` operator determines if two operands are equal, which we'll learn more about in a later section\\). If the remainder is `0` we know the number is even, if its not, we know its odd. Pretty handy\\! \n\n* Assign a number to `num` so that `isEven` evaluates to `true`.\n\n",
          "testCode": "test(\"`num` should be of type `number`\", () =>\n  expect(typeof num).toBe(\"number\"));\ntest(\"`isEven` should be of type `boolean`\", () =>\n  expect(typeof isEven).toBe(\"boolean\"));\ntest(\"`isEven` should be `true`\", () => expect(isEven).toBe(true));\n",
          "videoUrl": "",
          "starterCode": "const num = 5;\nconst isEven = num % 2 === 0;\n",
          "solutionCode": "const num = 6;\nconst isEven = num % 2 === 0;\n",
          "content": "The remainder, or `%`, operator \\(also known as the modulus or modulo operator\\) returns the remainder of its two operands' division:\n\n```\nconst remainder = 20 % 3; // 2\n\n```\n\nThe expression `20 % 3` can be thought of as \"the remainder of 20 divided by 3.\"  \n\nOne important note about the modulus operator is that the return value always takes on the sign of the dividend, or the left\\-hand operand \\(the right\\-hand operand is the divisor\\):\n\n```\nconst dividend = -17;\nconst divisor = 2;\ndividend % divisor; // -1\n\n```\n"
        },
        {
          "id": "WYcydtZx",
          "type": "media",
          "title": "Other Arithmetic Operators",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "There are a few other arithmetic operators to be aware of. Let's take a quick look.\n\n## The Exponentiation Operator\n\nThe exponentiation or, `**`, operator raises the left\\-hand operand to the power of the right hand operand:\n\n```\nconst fourCubed = 4 ** 3; // 64\n\n```\n\n## The Unary Plus Operator\n\nThe unary plus, or `+`, operator, as its name suggests, only takes a single operand, and is used _prefix_, or immediately before its operand. Its only purpose is to convert its operand to a number \\(if it isn't one already\\) and return the result. Note that the operand itself _is not_ affected\\.\n\n```\nconst fiveAsString = \"5\";\nconst fiveAsNumber = +fiveAsString;\n// fiveAsString = \"5\", fiveAsNumber = 5\n\n```\n\nTry this out in the [sandbox](/workspace/sandbox) on more complex string representations of numbers \\(e.g. `\"-23543.0274\"`\\), and on values other than strings and see what you get\\! For instance, what do you expect the result to be when you use the unary plus operator on booleans or on `null`?\n\n```\nconst isTrue = true;\n+isTrue // ??\n\n```\n\nExperimentation and fun aside, It should be noted here, however, that there are other, more preferred ways to convert values to numbers in TypeScript. The unary plus operator is borderline esoteric, but will work just fine for simple use\\-cases. For more complex cases, other methods are preferred:\n\n```\nconst notReallyPi = \"3.14IsPie...err...ImeanPi\";\nconst definitelyNotPi = +notReallyPi; // NaN (not a number)\nconst pi = parseFloat(notReallyPi); // 3.14\n\n```\n\nThis example is obviously contrived, but you get the picture.\n\n## The Unary Negation Operator\n\nThe unary negation, or `-`, operator negates the value of its operand. If its operand is not a number, it also converts it to a number before negating it.\n\n```\nconst threeAsNumber = 3;\nconst threeAsString = \"3\";\n-threeAsString; // -3\n-threeAsNumber; // -3\n\n```\n"
        },
        {
          "id": "u5nA6qc6",
          "type": "section",
          "title": "Equality",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/KWPNjURVYw4",
          "starterCode": "",
          "solutionCode": "",
          "content": "In programming, it is often helpful to compare two different values and determine if they are equal or not. You may think this is simple, and it usually is. However, there are some interesting nuances which are helpful to learn as well.\n\nIn this section you will learn the basics for how to determine equality between different values in TypeScript, and you will learn a few edge cases which can easily trip you up as well.\n\nComparing primitive values like strings or numbers is very straightforward, but comparing more complex data structures like arrays or objects is a little more tricky."
        },
        {
          "id": "mIj2Sy2B",
          "type": "typescript",
          "title": "Comparing String Values",
          "instructions": "The best way to compare two string values in TypeScript is to use the triple equals operator,\n`===`. The triple equal operator determines if two values are the same and can be applied directly to strings. Go ahead, take a look at the code in the editor and try it out\\!",
          "testCode": "test(\"The two fruit variables `fruit` and `otherFruit` should both be strings and they should be equal\", () => {\n    expect(fruit).toBe(otherFruit);\n    expect(typeof fruit).toBe(\"string\");\n    expect(typeof otherFruit).toBe(\"string\");\n});",
          "videoUrl": "https://www.youtube.com/embed/H4w2Qcq9qTk",
          "starterCode": "const fruit: string = \"apple\";\nconst otherFruit: string = \"grape\";\n\nconst areFruitsEqual = fruit === otherFruit;\n\nif (areFruitsEqual) {\n    console.log(\"The fruits are equal!\");\n}",
          "solutionCode": "\nconst fruit: string = \"apple\";\nconst otherFruit: string = \"apple\";\n\nconst areFruitsEqual = fruit === otherFruit;\n\nif (areFruitsEqual) {\n    console.log(\"The fruits are equal!\");\n}",
          "content": ""
        },
        {
          "id": "9yEpUrhb",
          "type": "typescript",
          "title": "Comparing Number Values",
          "instructions": "Comparing strings is just like comparing numbers. Strings and numbers are primitive values in TypeScript, and can be compared directly against one another. Take a look at the code in the editor and give it a try\\!",
          "testCode": "test(\"The two values `someNumber` and `someCalculatedValue` should both be numbers and they should be equal\", () => {\n    expect(someNumber).toBe(someCalculatedValue);\n    expect(typeof someNumber).toBe(\"number\");\n    expect(typeof someCalculatedValue).toBe(\"number\");\n});",
          "videoUrl": "https://www.youtube.com/embed/vW_uBSQleBk",
          "starterCode": "const someNumber = 102;\nconst someCalculatedValue = (250 + 250) / 5;\n\nif (someNumber === someCalculatedValue) {\n    console.log(\"The numbers are equal!\");\n}",
          "solutionCode": "const someNumber = 100;\nconst someCalculatedValue = (250 + 250) / 5;\n\nif (someNumber === someCalculatedValue) {\n    console.log(\"The numbers are equal!\");\n}",
          "content": ""
        },
        {
          "id": "6l0NR0XE",
          "type": "typescript",
          "title": "Comparing Null and Undefined Equality",
          "instructions": "Special language primitives also exist for \"empty\" values. In TypeScript, such primitives are `null` and `undefined`. These are primitive values just like numbers and strings. Let's take a look at each:\n\n* `undefined`: a value which is simply not defined yet, e.g. an uninitialized variable.\n* `null`: an explicitly empty value, e.g. when you want to intentionally indicate the absence of any value.\n\n\nYou will encounter both of these primitive types quite often. It's useful to known that for boolean operations, like comparisons, both `undefined` and `null` are treated as falsy values.\n\nIn this challenge, let's take a look at creating and comparing `undefined` values:",
          "testCode": "test(\"Both variables `anUndefinedVariable` and `explicitlyUndefined` should be equal to `undefined`.\", () => {\n    expect(anUndefinedVariable).toBe(undefined);\n    expect(explicitlyUndefined).toBe(undefined);\n});",
          "videoUrl": "https://www.youtube.com/embed/VONkj9hWCjc",
          "starterCode": "let anUndefinedVariable;\nconst explicitlyUndefined = \"a real value\";\n\nif (anUndefinedVariable === explicitlyUndefined) {\n    console.log(\"Both values are equal to undefined!\");\n}",
          "solutionCode": "let anUndefinedVariable;\nconst explicitlyUndefined = undefined;\n\nif (anUndefinedVariable === explicitlyUndefined) {\n    console.log(\"Both values are equal to undefined!\");\n}",
          "content": ""
        },
        {
          "id": "RqsAIW6D",
          "type": "typescript",
          "title": "Equality with Boolean Values",
          "instructions": "The boolean values `true` and `false` can also be applied directly in equality assertions like other primitive values. To see what we mean, take a look at the code in the editor below.",
          "testCode": "test(\"The `ageLimit` variable should be 18.\", () => {\n    expect(ageLimit).toBe(18);\n});\n\ntest(\"The `age` variable should be greater than 18 so that `isOldEnough` evaluates to `true`.\", () => {\n    expect(age > 18).toBe(true);\n    expect(isOldEnough).toBe(true);\n});",
          "videoUrl": "https://www.youtube.com/embed/owqHZ2Tfkg8",
          "starterCode": "const age = 16;\nconst ageLimit = 18;\nconst isOldEnough = age >= ageLimit;\n\nif (isOldEnough === true) {\n    console.log(\"You are old enough!\");\n}",
          "solutionCode": "const age = 25;\nconst ageLimit = 18;\nconst isOldEnough = age >= ageLimit;\n\nif (isOldEnough === true) {\n    console.log(\"You are old enough!\");\n}",
          "content": ""
        },
        {
          "id": "yI82pwBw",
          "type": "typescript",
          "title": "Array Equality",
          "instructions": "Unlike primitive values, non\\-primitive values such as objects, arrays, and functions have different behavior when it comes to equality.\n\nFor example, in TypeScript `const list = [1,2,3]` creates a `list` variable which is a reference to an array of values in memory: `[1,2,3]` . The reference and the array itself are actually different. To see what we mean, dive into the code\\!",
          "testCode": "test(\"The two lists `oneList` and `anotherList` should reference the same value.\", () => {\n    expect(oneList).toBe(anotherList);\n});\n\ntest(\"`theListsAreTheSame` should evaluate to `true`.\", () => {\n    expect(theListsAreTheSame).toBe(true);\n});",
          "videoUrl": "https://www.youtube.com/embed/zJoXbU6AxuE",
          "starterCode": "const oneList = [1,2,3,4,5];\nconst anotherList = [1,2,3,4,5];\n\nconst theListsAreTheSame = oneList === anotherList;\n\nif (theListsAreTheSame) {\n    console.log(\"The lists are the same!\");\n}",
          "solutionCode": "const oneList = [1,2,3,4,5];\nconst anotherList = oneList;\n\nconst theListsAreTheSame = oneList === anotherList;\n\nif (theListsAreTheSame) {\n    console.log(\"The lists are the same!\");\n}",
          "content": "The triple equals operator when applied to objects or arrays compares the \\_references \\_not the object or array itself. Therefore, in the code above the `theListsAreTheSame` variable can become `true` if the two list variables reference the same list.\n\n**HINT: **You can define a new variable to reference another. In that case, they both share the same reference. For example:\n\n```typescript\nconst referenceOne = { a: true };\nconst referenceTwo = referenceOne;\n// referenceOne and referenceTwo are the same!\n\n```\n\nYou may be curious about how to compare two arrays to determine if the data they contain is actually the same. This is usually referred to as deep equality, rather than the referential equality we are discussing above.\n\nFor deep equality, the simplest answer is that you would need a function which actually iterates through both arrays/objects and compares that values at each level, ensuring they are equivalent. This can be complex, since arrays can be deeply nested, e.g. `[1, 2, 3, [4, [5, 6, [7]]], 8]`."
        },
        {
          "id": "wxWa6skK",
          "type": "typescript",
          "title": "Object Equality",
          "instructions": "Like arrays, comparing objects is more complicated than comparing primitive values like booleans, numbers, or strings. Objects behave just like arrays. For instance in the code:\n\n```typescript\nconst person = { name: \"Rob\", age: 23 }\n\n```\n\n`person` holds a _reference_ to the the object `{ name: \"Rob\", age: 23 }`. It is very important to understand that the _reference_ is different from the value itself. Variables hold references to values and using `===` on references just determines if the references point to the same value, not if two separate values _are equivalent_.\n\n> Note: An `interface` in TypeScript is basically just a type definition for a data structure, like an object.\n",
          "testCode": "test(\"The `comparePeople` function should accept two `Person`s and return `true` if they have the same `name` and `age`\", () => {\n    const x = {\n        name: \"Rob\",\n        age: 23,\n    }\n\n    const y = {\n        name: \"Rob\",\n        age: 23,\n    }\n    expect(comparePeople(x, y)).toBe(true);\n});\n\ntest(\"The `comparePeople` function should accept two `Person`s and return `false` if they have a different `name` or `age`\", () => {\n    const x = {\n        name: \"Rob\",\n        age: 24,\n    }\n\n    const y = {\n        name: \"Rob\",\n        age: 23,\n    }\n\n    const z = {\n        name: \"Robz\",\n        age: 23,\n    }\n\n    expect(comparePeople(x, y)).toBe(false);\n    expect(comparePeople(y, z)).toBe(false);\n});",
          "videoUrl": "https://www.youtube.com/embed/IQyyjf5kB4A",
          "starterCode": "interface Person {\n    name: string;\n    age: number;\n}\n\nconst comparePeopleReferences = (referenceOne: Person, referenceTwo: Person) => {\n    return referenceOne === referenceTwo;\n}\n\nconst comparePeople = (personOne: Person, personTwo: Person) => {\n    // TODO: Fix the implementation of this function.\n    // HINT: Two people are equal if they have the same name and age!\n    return null;\n}\n\nconst Rob: Person = {\n    name: \"Rob\",\n    age: 23,\n}\n\nconst RobTwin: Person = {\n    name: \"Rob\",\n    age: 23,\n}\n\nconst areRobsReferencesTheSame = comparePeopleReferences(Rob, RobTwin);\nconst areRobsTheSame = comparePeople(Rob, RobTwin);\n\nconsole.log(`Are Rob references the same? -> ${areRobsReferencesTheSame}`);\nconsole.log(`Are Robs the same? -> ${areRobsTheSame}`);",
          "solutionCode": "interface Person {\n    name: string;\n    age: number;\n}\n\nconst comparePeopleReferences = (referenceOne: Person, referenceTwo: Person) => {\n    return referenceOne === referenceTwo;\n}\n\nconst comparePeople = (personOne: Person, personTwo: Person) => {\n    const agesEqual = personOne.age === personTwo.age;\n    const namesEqual = personOne.name === personTwo.name;\n    return agesEqual && namesEqual;\n}\n\nconst Rob: Person = {\n    name: \"Rob\",\n    age: 23,\n}\n\nconst RobTwin: Person = {\n    name: \"Rob\",\n    age: 23,\n}\n\nconst areRobsReferencesTheSame = comparePeopleReferences(Rob, RobTwin);\nconst areRobsTheSame = comparePeople(Rob, RobTwin);\n\nconsole.log(`Are Rob references the same? -> ${areRobsReferencesTheSame}`);\nconsole.log(`Are Robs the same? -> ${areRobsTheSame}`);",
          "content": ""
        },
        {
          "id": "DgGiepNrm",
          "type": "section",
          "title": "Conditional Statements",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ujM7IcUZFuQ",
          "starterCode": "",
          "solutionCode": "",
          "content": "### Control Statements\n\nThere are two major types of control statements in programming: conditional statements and loops. We will cover conditional statements first, and then loops. Control statements are just statements that determine if other blocks of code will be execute or not. They are one of the fundamental building blocks for building software with more complex behavior.\n\n### Conditional Statements\n\nYou are definitely familiar with conditional statements from everyday life: they are basically statements which take the form:\n\n> _If_ it is raining, _then_ I should wear a coat and take an umbrella.\n\nConditional statements are just a way of making decisions based on conditions which can be true or false.\n\n### The if/else Construction\n\nConditional statements in TypeScript \\(and many other languages\\) are constructed using the keywords `if`, `else`, and `else if`. For instance:\n\n```\nif (isRaining) {\n    // Handle rainy weather\n} else if (isSunny) {\n    // Handle sunny weather\n} else {\n    // Handle other weather conditions\n}\n\n```\n\nTo construct a conditional statement you must start with the `if` keyword and then add a _condition_ in parentheses. The _condition_ will determine whether the statement in the `{ ... }` should run or not. If not, the program will proceed to evaluate the next condition, if one exists.\n\nIf/else statements can only result in the execution of a single statement. For example, in the above example, if `isRaining` is `false` but `isSunny` is `true`, then the code in the `isSunny` block will run and then the computer will continue outside of the if/else construction. It will never visit the `else` block, because it has already found a matching condition.\n\nIf/else statements are a very simple way to program decision making into software and probably the most common. If/else statements are not the only way to write conditional statements, however. Other options include switch statements and ternary expressions.\n\n### Ternary Expressions\n\nA ternary expression is a shorthand way for writing an if/else statement. Consider a value which can have two states, like `isLoggedIn` which can be `true|false`. The following code is equivalent:\n\n```\n// Using an if/else statement\nfunction getUserAccount(isLoggedIn: boolean) {\n    if (isLoggedIn) {\n        return UserAccount;\n    else {\n        return null;\n    }\n}\n\n// Using a ternary expression\nfunction getUserAccount(isLoggedIn: boolean) {\n    return isLoggedIn ? UserAccount : null;\n}\n\n```\n\nA ternary expression collapses an if/else statement into the `condition ? ... : ...` shorthand\\. This syntax may look a little strange, but it is just saying: _if_ the condition is true `?` then do this, _else_ `:` do that. The ternary is a common structure in many languages, and can be a useful way for writing if/else logic in a short and concise manner. \n\nHowever, a word of caution: be careful not to abuse using ternary expressions\\! It is easy to write complex if/else logic using ternaries which later becomes very hard to read or understand.\n\n### Switch Statements\n\nSwitch statements also allow you to write if/else logic, however, they are specifically useful for handling multiple states for a single value. For example, consider the weather example above and imagine we are building an app which shows a different display based on the current weather conditions. Our weather type is defined like this:\n\n```typescript\ntype WEATHER = \"SUNNY\" | \"RAINY\" | \"SNOWY\" | \"CLOUDY\";\n\n```\n\nWe can then write a switch statement to \"switch\" over the different options the weather can be in order to handle each \"case\" separately. Here is the code:\n\n```\nfunction handleWeatherConditions(weather: WEATHER) {\n    switch (weather) {\n        case \"SUNNY\":\n            // Handle sunny weather\n            break;\n        case \"RAINY\":\n            // Handle rainy weather\n            break;\n        case \"SNOWY\":\n            // Handle snowy weather\n            break;\n        case \"CLOUDY\":\n            // Handle cloudy weather\n            break;\n        default:\n            // Handle fall through case\n            break;\n    }\n}\n\n```\n\nYou can see this is a very structured way for handling different variations of a value. A few things to note about switch statements:\n\n* Switch statements are defined using the `switch` keyword, which then must specify the value to \"switch\" over in parentheses.\n* Each \"case\" in a switch statement is defined using the `case` statement and then the value it which should match that case.\n* You must `break` or `return`from a case once you handle a condition, unless you want the switch statement to continue checking other cases. This behavior differs from normal if/else statements.\n* You can use a `default` block to handle fall through values. This is like the finally `else` statement in an if/else construction.\n\n\n### Conditionals in Action\n\nThink about some software you commonly use and imagine the many decisions the software must make as you are using it. All of these decisions are encoded using if/else statements, switch statements, and ternary expressions. These are the basic building blocks for building complex software which can handle many different states and behaviors.\n\nThere are no pre\\-defined ways for you to mix and combine these conditional statements. You can nest them together, or combine them, in any way you want. You can have an if/else statement with a switch statement inside the `if` block, and some ternary expressions in there. The code might not be very readable, but there is nothing to prevent you from doing that\\!\n\nNow, let's get some practice working with conditional statements\\!"
        },
        {
          "id": "wOc6fHY3K",
          "type": "typescript",
          "title": "If/Else: Price the Fruit",
          "instructions": "There is a simple function in the editor below. Don't worry too much about the function yet, we will cover functions in depth in a section soon. The function just takes a `Fruit` and returns the prices, and it throws an error if it receives an unknown fruit, using an `if/else` construction\\.\n\nThe function already prices apples. Your job is to handle the other option a fruit can be: an `orange`. Add an `else if` condition in the `fruitPrices` function to handle `orange` fruits\\. This `else if` statement should return a positive number for the price of oranges: chose any number you want\\!",
          "testCode": "test(\"The `fruitPrices` function should return `1.5` for the price of `apple` fruit.\", () => {\n  expect(fruitPrices(\"apple\")).toBe(1.5);\n});\n\ntest(\"The `fruitPrices` function should return a positive number for the price of `orange` fruit.\", () => {\n  expect(fruitPrices(\"orange\") > 0).toBe(true);\n  expect(typeof fruitPrices(\"orange\") === \"number\").toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/q_DttVda0gs",
          "starterCode": "type Fruit = \"apple\" | \"orange\";\n\n// Return the price of fruits\nfunction fruitPrices(fruit: Fruit): number {\n  // An if/else statment: add you code inside here\n  if (fruit === \"apple\") {\n    return 1.5;\n  } else {\n    throw new Error(\"Unknown fruit received!\");\n  }\n}\n\n// Call the function to get the prices for apples and oranges\nconst applePrice = fruitPrices(\"apple\");\nconst orangePrice = fruitPrices(\"orange\");\n\n// Log the results\nconsole.log(`Apple Price: ${applePrice}`);\nconsole.log(`Orange Price: ${orangePrice}`);\n",
          "solutionCode": "type Fruit = \"apple\" | \"orange\";\n\n// Return the price of fruits\nfunction fruitPrices(fruit: Fruit): number {\n  // An if/else statment: add you code inside here\n  if (fruit === \"apple\") {\n    return 1.5;\n  } else if (fruit === \"orange\") {\n    return 5.25;\n  } else {\n    throw new Error(\"Unknown fruit received!\");\n  }\n}\n\n// Call the function to get the prices for apples and oranges\nconst applePrice = fruitPrices(\"apple\");\nconst orangePrice = fruitPrices(\"orange\");\n\n// Log the results\nconsole.log(`Apple Price: ${applePrice}`);\nconsole.log(`Orange Price: ${orangePrice}`);\n",
          "content": ""
        },
        {
          "id": "Qr8@weL2C",
          "type": "typescript",
          "title": "Fruit Stand Expansion",
          "instructions": "Our fruit stand was very successful and we've expanded our product selection. Now, we have a number of fruits and we need to revisit our cash register software. It doesn't handle our new inventory very well, and requires refactoring.\n\nFor the sake of practice, let's implement two variations: an `if/else if/else` statement \\(this challenge\\) and a `switch` statement \\(next challenge\\). Try to compare the tradeoffs of each approach as you write them, and see which one you like more.\n\nThe function should handle pricing each fruit in the `FRUIT_PRICES` constant and it should throw an error if it receives a fruit which is not present in the `Fruits` options\\.\n\n**Hint:** You can return the price of a fruit using the `FRUIT_PRICES` constant directly using the object syntax: `FRUIT_PRICES.apple`.",
          "testCode": "test(\"The `fruitPrices` function should return the price of an `apple` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"apple\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should return the price of an `orange` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"orange\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should return the price of an `banana` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"banana\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should return the price of an `blueberry` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"blueberry\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should return the price of an `strawberry` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"strawberry\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should throw an error if it receives a fruit not represented in the `FRUIT_PRICES` constant.\", () => {\n  expect(() => fruitPrices(\"blegh\")).toThrow(\n    \"fruitPrices should throw an error if passed an unrecognized fruit option.\"\n  );\n});\n",
          "videoUrl": "https://www.youtube.com/embed/zrEpXgzgK6U",
          "starterCode": "// Fixed fruit prices\nconst FRUIT_PRICES = {\n  apple: 2.25,\n  orange: 3.5,\n  banana: 0.8,\n  blueberry: 4,\n  strawberry: 2.5,\n};\n\n// A type representing all the options a fruit can be\ntype Fruits = keyof typeof FRUIT_PRICES;\n\n// Given a fruit, return its price\nfunction fruitPrices(fruit: Fruits): number {\n  // Implement the conditional logic for pricing the fruit\n  // using an if/else if/else statement:\n}\n\n// Get the price of apples\nconst applePrice = fruitPrices(\"apple\");\nconsole.log(`Apple Price: ${applePrice}`);\n\n// Add additional logging here to test out your function!\n",
          "solutionCode": "// Fixed fruit prices\nconst FRUIT_PRICES = {\n  apple: 2.25,\n  orange: 3.5,\n  banana: 0.8,\n  blueberry: 4,\n  strawberry: 2.5,\n};\n\n// A type representing all the options a fruit can be\ntype Fruits = keyof typeof FRUIT_PRICES;\n\n// Given a fruit, return its price\nfunction fruitPrices(fruit: Fruits): number {\n  if (fruit === \"apple\") {\n    return FRUIT_PRICES.apple;\n  } else if (fruit === \"orange\") {\n    return FRUIT_PRICES.orange;\n  } else if (fruit === \"banana\") {\n    return FRUIT_PRICES.banana;\n  } else if (fruit === \"blueberry\") {\n    return FRUIT_PRICES.blueberry;\n  } else if (fruit === \"strawberry\") {\n    return FRUIT_PRICES.strawberry;\n  } else {\n    throw new Error(`Unrecognized fruit received: ${fruit}`);\n  }\n}\n\n// Get the price of apples\nconst applePrice = fruitPrices(\"apple\");\nconsole.log(`Apple Price: ${applePrice}`);\n\n// Add additional logging here to test out your function!\n",
          "content": ""
        },
        {
          "id": "PBsVwYHzs",
          "type": "typescript",
          "title": "Fruit Stand Switch",
          "instructions": "Now we have the same code from before, but we want to implement the conditional logic using  a `switch` statement\\. Feel free to refer to the earlier challenge or the [official MDN switch statement documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) to refresh your memory on the exact syntax for writing a switch statement.\n\n**Note: **It is always okay to look up technical documentation when you need a refresher. In fact, programmers do this _all the time._ That's because technical documentation will always be a more accurate, up to date reference than our own memory. What this means is:\n\n* You don't have to memorize that many things to become a programmer.\n* It is perfectly okay to look up answers and references online when you need it.\n\n\nIn fact, this practice is highly recommended and we will cover it more in later sections. As you become more experienced writing software, you will become more practiced in navigating the documentation which exists for the different technical libraries, tools, and languages you are using.",
          "testCode": "test(\"The `fruitPrices` function should return the price of an `apple` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"apple\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should return the price of an `orange` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"orange\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should return the price of an `banana` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"banana\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should return the price of an `blueberry` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"blueberry\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should return the price of an `strawberry` specified in the `FRUIT_PRICES` constant.\", () => {\n  const fruit = \"strawberry\";\n  expect(fruitPrices(fruit)).toBe(FRUIT_PRICES[fruit]);\n});\n\ntest(\"The `fruitPrices` function should throw an error if it receives a fruit not represented in the `FRUIT_PRICES` constant.\", () => {\n  expect(() => fruitPrices(\"blegh\")).toThrow(\n    \"fruitPrices should throw an error if passed an unrecognized fruit option.\"\n  );\n});\n\ntest(\"The solution uses a switch statement.\", () => {\n  // Simple test...\n  expect(__user_code_string__.includes(\"switch\")).toBe(true);\n  expect(__user_code_string__.includes(\"case\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/O_QCHobyu8A",
          "starterCode": "// Fixed fruit prices\nconst FRUIT_PRICES = {\n  apple: 2.25,\n  orange: 3.5,\n  banana: 0.8,\n  blueberry: 4,\n  strawberry: 2.5,\n};\n\n// A type representing all the options a fruit can be\ntype Fruits = keyof typeof FRUIT_PRICES;\n\n// Given a fruit, return its price\nfunction fruitPrices(fruit: Fruits): number {\n  // Implement the conditional logic for pricing the fruit\n  // using a switch statement\n}\n\n// Get the price of apples\nconst applePrice = fruitPrices(\"apple\");\nconsole.log(`Apple Price: ${applePrice}`);\n\n// Add additional logging here to test out your function!\n",
          "solutionCode": "// Fixed fruit prices\nconst FRUIT_PRICES = {\n  apple: 2.25,\n  orange: 3.5,\n  banana: 0.8,\n  blueberry: 4,\n  strawberry: 2.5,\n};\n\n// A type representing all the options a fruit can be\ntype Fruits = keyof typeof FRUIT_PRICES;\n\n// Given a fruit, return its price\nfunction fruitPrices(fruit: Fruits): number {\n  switch (fruit) {\n    case \"apple\":\n      return FRUIT_PRICES.apple;\n    case \"orange\":\n      return FRUIT_PRICES.orange;\n    case \"banana\":\n      return FRUIT_PRICES.banana;\n    case \"blueberry\":\n      return FRUIT_PRICES.blueberry;\n    case \"strawberry\":\n      return FRUIT_PRICES.strawberry;\n    default:\n      throw new Error(`Unrecognized fruit received: ${fruit}!`);\n  }\n}\n\n// Get the price of apples\nconst applePrice = fruitPrices(\"apple\");\nconsole.log(`Apple Price: ${applePrice}`);\n\n// Add additional logging here to test out your function!\n",
          "content": ""
        },
        {
          "id": "l9L9F4wfS",
          "type": "typescript",
          "title": "Box or Bag?",
          "instructions": "Now our fruit stand is very popular. Some customers even buy a lot of fruit\\! We need better options for letting them carry their fruit away. To our fruit stand management software we add a function `getTakeawayContainer` which returns a takeaway container based on how many fruits the customer purchased. We only have two options for this container right now: `bag` or `box`. Implement this function using a [ternary expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator).",
          "testCode": "test(\"`getTakeawayContainer` should return a `bag` when provided less than 10 fruits purchased.\", () => {\n  expect(getTakeawayContainer(1)).toBe(\"bag\");\n  expect(getTakeawayContainer(2)).toBe(\"bag\");\n  expect(getTakeawayContainer(5)).toBe(\"bag\");\n  expect(getTakeawayContainer(6)).toBe(\"bag\");\n  expect(getTakeawayContainer(9)).toBe(\"bag\");\n  expect(getTakeawayContainer(10)).toBe(\"bag\");\n});\n\ntest(\"`getTakeawayContainer` should return a `box` when provided more than 10 fruits purchased.\", () => {\n  expect(getTakeawayContainer(11)).toBe(\"box\");\n  expect(getTakeawayContainer(20)).toBe(\"box\");\n  expect(getTakeawayContainer(50)).toBe(\"box\");\n  expect(getTakeawayContainer(61)).toBe(\"box\");\n  expect(getTakeawayContainer(92)).toBe(\"box\");\n});\n\ntest(\"The `getTakeawayContainer` should use a ternary expression, `condition ? ... : ...` to return the `Container`\", () => {\n  const code = __user_code_string__;\n  expect(code.includes(\" ? \")).toBe(true);\n  expect(code.includes(\" : \")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/m8tO-nxcdFY",
          "starterCode": "\ntype Container = \"bag\" | \"box\";\n\n/**\n * A function to return the takeaway container based on\n * how many fruits the cusomter purchased.\n * \n * If the customer purchased more than 10 fruits, give them\n * a box. Otherwise, a bag is fine!\n */\nfunction getTakeawayContainer(numberOfFruitPurchased: number): Container {\n  // Your code here\n};",
          "solutionCode": "\ntype Container = \"bag\" | \"box\";\n\n/**\n * A function to return the takeaway container based on\n * how many fruits the cusomter purchased.\n * \n * If the customer purchased more than 10 fruits, give them\n * a box. Otherwise, a bag is fine!\n */\nfunction getTakeawayContainer(numberOfFruitPurchased: number): Container {\n  return numberOfFruitPurchased > 10 ? \"box\" : \"bag\";\n};",
          "content": ""
        },
        {
          "id": "wzTlMB2D",
          "type": "section",
          "title": "Loops",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Ever had to do anything tedious? Folding clothes? Inviting a bunch of people to the same event? When you have to do the same thing, over and over again, it can feel really tedious. Well, if you've ever thought to yourself \"There must be a better way\\! 😫\" then you're already thinking like a programmer.\n\nUnfortunately, at the time of this writing there's not yet an affordable robot that can fold your clothes \\(if you know of one, please tell me\\!\\). However, there _is_ a way to quickly send event invites to people. It's called adding a bunch of recipients to the same email. Imagine if you had to actually send each email 1\\-by\\-1.\n\nThe point is, if it's digital ++you can find a way to make a computer do repetitive tasks for you++. That's what we're going to talk about in this section: Telling a computer to do the same thing over and over and over again... until it's done \\(or maybe even forever\\).\n\n> \n> ### Story Time \\(feel free to skip this completely\\)\n> \n> Back in college, before I knew how to program _at all_, I had a job working at our IT department. It was a pretty sweet gig: The hours were easy, the pay was decent \\(for an on\\-campus job\\), and my coworkers were great. It was even a job I could claim gave me technical skills on a resume \\(hah\\!\\). There was just one problem...\n> \n> **The job was extremely tedious.**\n> \n> One of my core responsibilities on the job was renaming and reorganizing video files uploaded through some obscure campus portal software. These videos would find their way into a shared network drive, where I could then access them using my super admin powers. \n> \n> This was very easy. I would open the upload folder for a professor and rename each file to include the current date, the uploader's user id, and the original name of the file. However, as I mentioned earlier, _this was _**super** tedious\\. So, like any future programmer I thought to myself \"There must be a better way\\! 😫\" and then proceeded to do nothing about it for a whole week.\n> \n> After a week though, I had had enough and I set out on a Google\\-searching mission that eventually lead me to loops\\! Well, loops and a bunch of cobbled together code that semi\\-sort\\-of automated some of my tedious task using shell scripts \\(a topic we'll cover another time\\). The point is my job became much more enjoyable because I learned about looping. \n> \n> I was doing _less_ work and getting _more_ done\\.\n# Looping\n\nLooping is conceptually simple—it's telling a computer to do the same thing repeatedly until some condition is met. Let's jump in with an example:\n\n```typescript\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n\n```\n\nWhat get's logged out? \n\n```none\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n```\n\nYup, every integer from 0 through 9. 10 won't be logged because our condition for looping was `i < 10`, or in english: When `i` is _less than_ 10\\. If we wanted 10 to be included we could use the `<=` operator instead.\n\nWhat you just saw is called a `for` loop\\. \n\n## For Loops\n\nWhen you want to run some code N number of times. For example, in the code above we wanted to `console.log` 10 times so we wrote a loop to do exactly that.\n\nThis is what a `for` loop is for—running some code over and over again until some condition is met.\n\n### Syntax\n\nLet's take a look at that code again: \n\n```typescript\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n\n```\n\nNow let's look at some fake code to explain the various parts of a for loop:\n\n```\nfor (SETUP; CONDITION; AFTER_EACH) { CODE_TO_RUN }\n\n```\n\nLet's look at each piece in turn:\n\n* `SETUP`: Here you can define variables you need for your loop. In our example we have `let i = 0`.\n* `CONDITION`: The loop will keep running as long as this condition is true. In the example it's `i < 10`, so the loop will run as long as `i` is less than 10.\n* `AFTER_EACH`: Code to run after each loop. In our example it's `i++`, so after each loop the variable `i` will be incremented. This is very important. Without `i++` in the example the code would run forever because `i` would _always_ be less than 10.\n* `CODE_TO_RUN`: This is where you write whatever code you want to run in the loop. In the example it's `console.log(i)`.\n\n\nNow that we've seen the syntax let's take a look at another type of loop.\n\n## While Loops\n\nHere's a `while` loop that does the exact same thing as our `for` loop example from above:\n\n```typescript\nlet i = 0; // SETUP\nwhile (i < 10) { // CONDITIOKN\n  console.log(i); // CODE_TO_RUN\n  i++; // AFTER_EACH\n}\n\n```\n\nI've gone ahead and labeled the various parts using comments. This does exactly the same thing as our `for` loop from before, but the syntax is slightly different.\n\n### Syntax\n\nLet's again look at some fake code.\n\n```\nSETUP\nwhile (CONDITION) {\n  CODE_TO_RUN\n  AFTER_EACH\n}\n\n```\n\nAll the parts are the same as with the `for` loop, but they've been rearranged a bit. \n\n### Uses\n\nWhy do we need both types of loops? They're good for different things.\n\n* `while` loops are more flexible, but harder to use.\n* `for` loops are less flexible, but easier to use.\n\n\nUsually when you know how many times you want to iterate you should use a for loop. We could log all the elements of an array like so:\n\n```typescript\nconst arr = [3, 5, 1, 6, 7];\nfor (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}\n\n```\n\nHere we know exactly how many times to iterate because we know the length of the array. We want to iterate 5 times \\(`arr.length`\\).\n\nNow with a `while` loop:\n\n```typescript\nconst arr = [3, 5, 1, 6, 7];\nlet i = 0;\nwhile (i < arr.length) {\n  console.log(arr[i]);\n  i++;\n}\n\n```\n\nIt takes a bit more code to write the `while` loop\\. It's also _super_ easy to forget to write `i++` at the end of the loop, causing an infinite loop\\!\n\n`while` loops are really useful when you don't know how many times you want to iterate. When does this happen? There are many data structures that you cannot access using an index like you can with an array. That's for later in the course. For now let's just pretend you cannot use indices to access elements of arrays. The only thing you can do is `pop`.\n\n```typescript\nconst arr = [3, 5, 1, 6, 7];\nlet next = arr.pop(); // Start off with the last element of the array\n\nwhile (next) {\n  console.log(\"Next:\", next);\n  next = arr.pop();\n}\n\n```\n\nThat code will log out:\n\n```none\nNext: 7\nNext: 6\nNext: 1\nNext: 5\nNext: 3\n\n```\n\nNotice that we didn't use indices at all\\! We just used `pop` and kept on popping from the array until there was nothing left.\n\nYou might be thinking this is silly, because we can clearly see there are only 5 elements in the array. True. However, in practice arrays often have more elements in them—hundreds or thousands.\n\nMore importantly, there are data structures that really don't give you indexes you can use to access the values. In those cases you might need the power of a `while` loop\\.\n\nJust be careful...\n\n## Infinite Loops\n\nThis is not a type of loop, it's just .a good way to freeze your computer.\n\n```typescript\nwhile (true) {\n  console.log(\"And... computer is frozen\");\n}\n\n```\n\nThis code will freeze your computer, or at least your browser tab. It's a loop that _never stops_\\! Take a moment to think about that. \n\nThe code above is saying while `true` is true, keep on looping. `true` will always be true, so there's no reason for the loop to stop. So it will keep running until you force quit .your browser or restart your computer.\n\nIt's actually fairly easy to write infinite loops by accident. You _will_ write some as you learn to program, and your browser might freeze. That's just part of learning though."
        },
        {
          "id": "Jy0Azabm",
          "type": "typescript",
          "title": "Get the Index Using a While Loop",
          "instructions": "Use a `while` loop to find the index of `\"broom\"` in the `randomThings` array\\.\n\n++NOTE:++ Be careful to avoid writing an infinite loop\\! Check out the [video](#{\"component\":\"VideoPlayButton\"}) for more details.",
          "testCode": "test(\"`result` should be defined\", () =>\n    expect(result).not.toBe(undefined));\ntest(\"`result` should be the index of \\\"broom\\\" in the `randomThings` array\", () =>\n    expect(result).toBe(randomThings.indexOf('broom')));\ntest('Solution should use a `while` loop', () => {\n    const reg = /while\\s+\\(.+\\)\\s+{/\n    expect(reg.test(__user_code_string__)).toBe(true);\n})",
          "videoUrl": "https://www.youtube.com/embed/oMcy3blfkZE",
          "starterCode": "const randomThings = [\"chair\", \"bench\", \"broom\", \"sphere\", \"couch\"];\nlet result = -1;\n",
          "solutionCode": "const randomThings = [\"chair\", \"bench\", \"broom\", \"sphere\", \"couch\"];\nlet result = -1;\nlet i = 0;\nwhile (i < randomThings.length) {\n    if (randomThings[i] === \"broom\") {\n        result = i;\n    }\n    i ++;\n}",
          "content": ""
        },
        {
          "id": "xAggDM8Y",
          "type": "typescript",
          "title": "Get the Index Using a for Loop",
          "instructions": "Use a `for` loop to find the index of `\"mango\"` in the `randomThings` array\\.",
          "testCode": "test(\"`result` should be defined\", () => expect(result).not.toBe(undefined));\ntest('`result` should be the index of \"mango\" in the `randomThings` array', () =>\n  expect(result).toBe(randomThings.indexOf(\"mango\")));\ntest(\"Solution should use a `for` loop\", () => {\n  const reg = /for\\s+\\(.+\\)\\s+{/;\n  expect(reg.test(__user_code_string__)).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/DcoRVvfoj44",
          "starterCode": "const randomThings = [\"pineapple\", \"apple\", \"pen\", \"mango\", \"smoothie\"];\nlet result = -1;\n",
          "solutionCode": "const randomThings = [\"pineapple\", \"apple\", \"pen\", \"mango\", \"smoothie\"];\nlet result = -1;\n\nfor (let i = 0; i < randomThings.length; i ++) {\n    if (randomThings[i] === \"mango\") {\n        result = i;\n    }\n}",
          "content": ""
        },
        {
          "id": "mcGgTSjJa",
          "type": "typescript",
          "title": "Building an Array With a Loop",
          "instructions": "Use a `while` loop or a `for` loop to build an array of the numbers 1, 2, 3, 4, 5, ... etc up to _and including_ 100\\.",
          "testCode": "test(\"The variable `result` should be an array.\", () => {\n  expect(Array.isArray(result)).toBe(true);\n});\n\ntest(\"The `result` array should have all integers from 1 to 100 in it.\", () => {\n  const expected = Array(100).fill(null).map((_, i) => i + 1);\n  expect(result).toEqual(expected);\n})",
          "videoUrl": "https://www.youtube.com/embed/1vjM3m0SPx4",
          "starterCode": "const result: number[] = [];\n\n// Write some code to add items to the array\n\nconsole.log(result);\n",
          "solutionCode": "const result = [];\n\nlet i = 1;\n\nwhile (i <= 100) {\n  result.push(i);\n  i++;\n}\n\nconsole.log(result);\n",
          "content": ""
        },
        {
          "id": "5gbtOWeTG",
          "type": "typescript",
          "title": "Breaking Out of a Loop",
          "instructions": "Use a `while` loop or a `for` loop to find the index in the `people` array of the person with the job `\"overriding the hard drive\"`. Once you find it `break` out of the loop to avoid doing more work.",
          "testCode": "// Write your tests here:\ntest(\"`people` should be an array\", () => {\n  expect(Array.isArray(people)).toBe(true);\n});\n\ntest(\"`index` should be a number\", () => expect(typeof index).toBe(\"number\"));\n\ntest('`index` should be be the index of the person with the job `\"overriding the hard drive\"`', () => {\n  expect(index).toBe(\n    people.findIndex((x) => x.job === \"overriding the hard drive\")\n  );\n});\n\ntest(\"Should use the `break` statement\", () => {\n  expect(__user_code_string__).toMatch(/break/g);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/T_D4i_nRssM",
          "starterCode": "const people = [\n  { name: \"Nichole Nienow\", job: \"transmitting the panel\" },\n  { name: \"Shanon Harris\", job: \"calculating the monitor\" },\n  { name: \"Lamar Heathcote\", job: \"navigating the transmitter\" },\n  { name: \"Alfred Jenkins\", job: \"compressing the microchip\" },\n  { name: \"Grayce Conroy\", job: \"indexing the hard drive\" },\n  { name: \"Garry Eichmann\", job: \"backing up the bandwidth\" },\n  { name: \"Colby Bradtke\", job: \"connecting the array\" },\n  { name: \"Kobe Carroll\", job: \"overriding the hard drive\" },\n  { name: \"Brian Miller\", job: \"connecting the transmitter\" },\n  { name: \"Alycia Schoen\", job: \"hacking the microchip\" },\n  { name: \"Wellington McCullough\", job: \"connecting the port\" },\n  { name: \"Jaylin Walsh\", job: \"indexing the microchip\" },\n];\n\n// This is the starting index to represent nothing found yet\nlet index = -1;\n\n// Your code here...",
          "solutionCode": "const people = [\n  { name: \"Nichole Nienow\", job: \"transmitting the panel\" },\n  { name: \"Shanon Harris\", job: \"calculating the monitor\" },\n  { name: \"Lamar Heathcote\", job: \"navigating the transmitter\" },\n  { name: \"Alfred Jenkins\", job: \"compressing the microchip\" },\n  { name: \"Grayce Conroy\", job: \"indexing the matrix\" },\n  { name: \"Garry Eichmann\", job: \"backing up the bandwidth\" },\n  { name: \"Colby Bradtke\", job: \"connecting the array\" },\n  { name: \"Kobe Carroll\", job: \"overriding the hard drive\" },\n  { name: \"Brian Miller\", job: \"connecting the transmitter\" },\n  { name: \"Alycia Schoen\", job: \"hacking the microchip\" },\n  { name: \"Wellington McCullough\", job: \"connecting the port\" },\n  { name: \"Jaylin Walsh\", job: \"indexing the microchip\" },\n];\n\n// This is the starting index to represent nothing found yet\nlet index = -1;\n\nfor (let i = 0; i < people.length; i ++) {\n  const person = people[i];\n  if (person.job === \"overriding the hard drive\") {\n    index = i;\n    break;\n  }\n}",
          "content": "Breaking out of a loop can be thought of as saying \"Stop iterating\\!\" It will completely stop looping.\n# Why is this useful?\n\nBreaking can be very useful to make your program run faster by avoiding doing additional iterations. Here's a real world example:\n\nYou're searching for you keys and you need to check a few places: Sock drawer, kitchen sink, balcony, couch cushions. If you first check your sock drawer and _find your keys_ would you keep on looking until you checked every place on your list? Of course not. The same can go for your code too.\n\n```typescript\nconst words = [\n  \"hey\",\n  \"some\",\n  \"of\",\n  \"these\",\n  \"words\",\n  \"have\",\n  \"the\",\n  \"wrong\",\n  \"length\",\n  \"right\",\n  \"?\",\n];\n\nlet foundIndex = -1;\nlet iterations = 0;\n\nfor (let i = 0; i < words.length; i++) {\n  // Record the number of iterations\n  iterations++;\n\n  if (words[i] === \"of\") {\n    foundIndex = i;\n    break; // Imporant! Without this break the loop will keep running until the end of the array\n  }\n}\n\nconsole.log(`Found \"of\" at index ${foundIndex}. Iterated ${iterations} times.`);\n\n```\n"
        },
        {
          "id": "3d0e8KsAI",
          "type": "typescript",
          "title": "Continuing a Loop",
          "instructions": "Use a `while` loop or a `for` loop to fill the `result` array with every person who's name starts with `\"G\"`.",
          "testCode": "// Write your tests here:\ntest(\"`people` should be an array\", () => {\n  expect(Array.isArray(people)).toBe(true);\n});\n\ntest(\"`result` should be an array\", () =>\n  expect(Array.isArray(result)).toBe(true));\n\ntest('`result` should contain all people whos name starts with \"G\"', () => {\n  const _result = people.filter((x) => x.name.startsWith(\"G\"));\n  expect(result).toEqual(_result);\n});\n\ntest(\"Should use the `continue` statement\", () => {\n  expect(__user_code_string__).toMatch(/continue/g);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/J_o7rL2b_Wg",
          "starterCode": "const people = [\n  { name: \"Nichole Nienow\", job: \"transmitting the panel\" },\n  { name: \"Shanon Harris\", job: \"calculating the monitor\" },\n  { name: \"Lamar Heathcote\", job: \"navigating the transmitter\" },\n  { name: \"Alfred Jenkins\", job: \"compressing the microchip\" },\n  { name: \"Grayce Conroy\", job: \"indexing the matrix\" },\n  { name: \"Garry Eichmann\", job: \"backing up the bandwidth\" },\n  { name: \"Colby Bradtke\", job: \"connecting the array\" },\n  { name: \"Kobe Carroll\", job: \"overriding the hard drive\" },\n  { name: \"Brian Miller\", job: \"connecting the transmitter\" },\n  { name: \"Alycia Schoen\", job: \"hacking the microchip\" },\n  { name: \"Wellington McCullough\", job: \"connecting the port\" },\n  { name: \"Jaylin Walsh\", job: \"indexing the microchip\" },\n];\n\nconst result = []\n\n// Your code here...",
          "solutionCode": "const people = [\n  { name: \"Nichole Nienow\", job: \"transmitting the panel\" },\n  { name: \"Shanon Harris\", job: \"calculating the monitor\" },\n  { name: \"Lamar Heathcote\", job: \"navigating the transmitter\" },\n  { name: \"Alfred Jenkins\", job: \"compressing the microchip\" },\n  { name: \"Grayce Conroy\", job: \"indexing the matrix\" },\n  { name: \"Garry Eichmann\", job: \"backing up the bandwidth\" },\n  { name: \"Colby Bradtke\", job: \"connecting the array\" },\n  { name: \"Kobe Carroll\", job: \"overriding the hard drive\" },\n  { name: \"Brian Miller\", job: \"connecting the transmitter\" },\n  { name: \"Alycia Schoen\", job: \"hacking the microchip\" },\n  { name: \"Wellington McCullough\", job: \"connecting the port\" },\n  { name: \"Jaylin Walsh\", job: \"indexing the microchip\" },\n];\n\nlet result = [];\n\nfor (let i = 0; i < people.length; i++) {\n  const person = people[i];\n  if (!person.name.startsWith(\"G\")) {\n    continue;\n  }\n  result.push(person);\n}\n",
          "content": "Continuing could also be thought of as skipping an iteration. Each time the code in your loop runs is one iteration. You can use `continue` to say \"Skip the rest of this iteration and start again at the top\".\n# Why is this useful?\n\nThe `continue` keyword is useful for avoiding doing some work. For example, if you want to `push` all the three\\-letter words on to a new array you could write a loop that pushes _all_ words and then add a `continue` keyword if the length is not what you want:\n\n```typescript\nconst words = [\n  \"hey\",\n  \"some\",\n  \"of\",\n  \"these\",\n  \"words\",\n  \"have\",\n  \"the\",\n  \"wrong\",\n  \"length\",\n  \"right\",\n  \"?\"\n];\n\nconst result = [];\n\nfor (let i = 0; i < words.length; i++) {\n  if (words[i].length !== 5) {\n    continue; // This is important! Skip the rest of the code in this loop\n  }\n  result.push(words[i]);\n}\n\nconsole.log(result); // => ['these', 'words', 'wrong', 'right']\n\n```\n"
        },
        {
          "id": "ZBvBJuip4",
          "type": "section",
          "title": "Functions",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/vPH6SoJ8sXs",
          "starterCode": "",
          "solutionCode": "",
          "content": "Functions are the basic building block of all software. A function is just a piece of code which is written to perform a specific task. Consider the following function:\n\n```typescript\nfunction addTwoNumbers(a: number, b: number) {\n    return a + b;\n}\n\n```\n\nThis function, `addTwoNumbers`, contains the instructions for adding two numbers together, and \"returns\" the result. The function can be used like this:\n\n```typescript\nconst FIVE = addTwoNumbers(2, 3);\nconst TEN = addTwoNumbers(2, 8);\nconst ONE_HUNDRED = addTwoNumbers(50, 50);\n\n```\n\nYou can use functions to write specific, reusable instructions in one place, and then use them throughout your entire program. This allows you to encapsulate code which serves a specific purpose in a single location. This is important for code reuse \\(DRY: \"don't repeat yourself\"\\), code organization, code readability, and code testability.\n\nAs you build more complex programs, you will write more complex functions which call other functions, or functions which are composed of a series of smaller functions. Functions are the fundamental building block for building software applications. Eventually, you can conceptualize an entire application or program just as a function, or collection of functions.\n\nAll software is just data and operations or transformations of that data. Functions are what allow you to perform these transformations.\n\nIn this section, we will get a lot of experience writing functions in TypeScript. Let's dive in\\!"
        },
        {
          "id": "Sbb4NJbCP",
          "type": "typescript",
          "title": "Your First Function",
          "instructions": "Let's start with something very simple. You will see the `addTwoNumbers` function we introduced in the section intro below. It just adds two numbers and returns the result. There is another function, `subtractTwoNumbers`, as well, but it is incomplete. Your job is to complete it\\!",
          "testCode": "const tests = [\n  [3234, 435],\n  [32134, 46645],\n  [31234, 2342231],\n  [321341, 4234],\n  [3234, 2342],\n  [92342, 437],\n  [2343, 432324],\n  [233, 235],\n  [36579, 444],\n  [3, 12],\n];\n\ntest(\"The `addTwoNumbers` function should add the arguments together and return the result.\", () => {\n  for (const testCase of tests) {\n    expect(addTwoNumbers(...testCase)).toBe(testCase[0] + testCase[1]);\n  }\n});\n\ntest(\"The `subtractTwoNumbers` function should accept two arguments and return the result of subtracting the second from the first.\", () => {\n  for (const testCase of tests) {\n    expect(subtractTwoNumbers(...testCase)).toBe(testCase[0] - testCase[1]);\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/zlXLZkIojv0",
          "starterCode": "/**\n * A function which takes two numbers and adds them\n * together.\n */\nfunction addTwoNumbers(a: number, b: number) {\n  return a + b;\n}\n\n/**\n * A function which takes two numbers and subtracts\n * the second from the first.\n */\nfunction subtractTwoNumbers(a: number, b: number) {\n  // Your code here\n}\n",
          "solutionCode": "/**\n * A function which takes two numbers and adds them\n * together.\n */\nfunction addTwoNumbers(a: number, b: number) {\n  return a + b;\n}\n\n/**\n * A function which takes two numbers and subtracts\n * the second from the first.\n */\nfunction subtractTwoNumbers(a: number, b: number) {\n  // Your code here\n  return a - b;\n}\n",
          "content": ""
        },
        {
          "id": "67nNTFXZT",
          "type": "typescript",
          "title": "Multiply and Divide",
          "instructions": "Great\\! Let's keep going with the math theme. There are two more incomplete functions in the editor below, `multiply` and `divide`. You know what to do\\!",
          "testCode": "const tests = [\n  [3234, 435],\n  [32134, 46645],\n  [31234, 2342231],\n  [321341, 4234],\n  [3234, 2342],\n  [92342, 437],\n  [2343, 432324],\n  [233, 235],\n  [36579, 444],\n  [3, 12],\n];\n\ntest(\"The `multiply` function should add the arguments together and return the result of multiplying them together.\", () => {\n  for (const testCase of tests) {\n    expect(multiply(...testCase)).toBe(testCase[0] * testCase[1]);\n  }\n});\n\ntest(\"The `divide` function should accept two arguments and return the result of dividing the first by the second.\", () => {\n  for (const testCase of tests) {\n    expect(divide(...testCase)).toBe(testCase[0] / testCase[1]);\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/fyC3EaajJCs",
          "starterCode": "/**\n * A function which takes two numbers and multiplies\n * them together.\n */\nfunction multiply(a: number, b: number) {\n  // Your code here\n}\n\n/**\n * A function which takes two numbers and divides\n * the first by the second.\n */\nfunction divide(a: number, b: number) {\n  // Your code here\n}\n",
          "solutionCode": "/**\n * A function which takes two numbers and adds them\n * together.\n */\nfunction multiply(a: number, b: number) {\n  // Your code here\n  return a * b;\n}\n\n/**\n * A function which takes two numbers and divides\n * the first by the second.\n */\nfunction divide(a: number, b: number) {\n  // Your code here\n  return a / b;\n}\n",
          "content": ""
        },
        {
          "id": "D1NAejvT@",
          "type": "typescript",
          "title": "How Functions Work",
          "instructions": "Now you should have some basic understanding of how functions work. Let's introduce some keywords to help you understand more. A function is defined using the `function` keyword \\(or another syntax which we will see next\\). Functions accepts _arguments_ and _return_ a result. To \"use\" the function, you _invoke_ it\\. This runs the function and returns the result, which you can assign to a variable. Invoking one of the math functions from the previous challenge looks like this:\n\n```typescript\nconst FIFTY = multiply(5, 10);\n\n```\n\nThe `()` _invoke_ the function. When you invoke a function, you have to \"pass in\" any arguments the function is expecting. Here, we passed in `5` and `10` as arguments. The variable `FIFTY` is then assigned the result of invoking the `multiply` function, which is `50`\\!\n\nIn the editor below is a function `greeting` which takes a `name` argument and returns a greeting for that person. There is a list of `names` and a loop which iterates over the list of names and it should greet everyone by name. Currently, the `greeting` in the loop is `undefined`. Change this to the result of invoking the `greeting` function with the `name` variable\\.",
          "testCode": "test(\"The `greeting` function should return a string to greet the provide `name` argument.\", () => {\n  expect(createGreeting(\"Sam\")).toBe(\"Hello, Sam!\");\n});\n\ntest(\"Greetings for all of the `names` should be logged to the console.\", () => {\n  const logs = new Set(parseLogBox(__secret_log_box));\n  for (const name of names) {\n    const result = `Hello, ${name}!`;\n    expect(logs.has(result)).toBe(true);\n  }\n});",
          "videoUrl": "https://www.youtube.com/embed/JX8UUHYRIXc",
          "starterCode": "/**\n * A function to return a string to greet a user\n * by name.\n */\nfunction createGreeting(name: string) {\n  return `Hello, ${name}!`;\n}\n\n// A list of names\nconst names = [\n  \"Sam\",\n  \"Isaac\",\n  \"Jerry\",\n  \"Ryan\",\n  \"Sarah\",\n  \"Mia\",\n];\n\n// Greet everyone:\nfor (const name of names) {\n  // Change the code here!\n  const greeting = undefined;\n  console.log(greeting);\n}",
          "solutionCode": "/**\n * A function to return a string to greet a user\n * by name.\n */\nfunction createGreeting(name: string) {\n  return `Hello, ${name}!`;\n}\n\n// A list of names\nconst names = [\n  \"Sam\",\n  \"Isaac\",\n  \"Jerry\",\n  \"Ryan\",\n  \"Sarah\",\n  \"Mia\",\n];\n\n// Greet everyone:\nfor (const name of names) {\n  // Change the code here!\n  const greeting = createGreeting(name);\n  console.log(greeting);\n}",
          "content": ""
        },
        {
          "id": "413uRTThb",
          "type": "typescript",
          "title": "Arrow Functions",
          "instructions": "The `function` keyword is one way to define a function in TypeScript. Another way is with the so\\-called [ES6 arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions). The syntax may look a little strange at first, but don't worry. It's a function nonetheless\\!\n\nThere are two functions in the editor below, a traditional `function` and an arrow function. Both functions should do the same thing, but the arrow function is incomplete. Try to write the code from the `addNumbersInList` in the empty body of the arrow function.\n\n**Challenge: **Try to implement the arrow function in a different way than `addNumbersInList` is written\\!",
          "testCode": "const list = [\n  234,\n  543,\n  345,\n  43,\n  234,\n  423,\n  2354,\n  543,\n  34,\n  6453,\n  34,\n  432,\n  123,\n  342,\n  234,\n];\n\nconst result = list.reduce((total, x) => total + x, 0);\n\ntest(\"The `addNumbersInList` function should add all the numbers in a list.\", () => {\n  expect(addNumbersInList(list)).toBe(result);\n});\n\ntest(\"The `addNumbersInListArrowfunction` function should add all the numbers in a list.\", () => {\n  expect(addNumbersInListArrowfunction(list)).toBe(result);\n});\n\ntest(\"The `addNumbersInListArrowFunction` function should be an arrow function.\", () => {\n  const code = __user_code_string__;\n  const isArrowFunction =\n    code.includes(\"const addNumbersInListArrowfunction = (\") ||\n    code.includes(\"let addNumbersInListArrowfunction = (\");\n  expect(isArrowFunction).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/bgSvTEu3Wqk",
          "starterCode": "/**\n * A normal function to add all the numbers\n * in a list.\n */\nfunction addNumbersInList(list: number[]) {\n  let result = 0;\n  for (const num of list) {\n    result += num;\n  }\n  return result;\n}\n\n/**\n * An arrow function to add all the numbers\n * in a list.\n */\nconst addNumbersInListArrowfunction = (list: number[]) => {\n  // Your code here!\n};\n",
          "solutionCode": "/**\n * A normal function to add all the numbers\n * in a list.\n */\nfunction addNumbersInList(list: number[]) {\n  let result = 0;\n  for (const num of list) {\n    result += num;\n  }\n  return result;\n}\n\n/**\n * An arrow function to add all the numbers\n * in a list.\n */\nconst addNumbersInListArrowfunction = (list: number[]) => {\n  // Your code here!\n  // We can use the reduce operator to reduce the list to a\n  // single value. At each entry, we add the current item\n  // to the total.\n  return list.reduce((total, x) => total + x, 0);\n};\n",
          "content": ""
        },
        {
          "id": "DdNdj6o6T",
          "type": "typescript",
          "title": "Why Arrow Functions?",
          "instructions": "Why are there two ways to write functions? Why should you use one of the other?\n\nWithout getting into too much detail now, we can just recommend using arrow functions for these reasons:\n\n* Concise syntax.\n* Widely adopted.\n* Using a single function syntax is helpful for consistency throughout a codebase.\n* Easy to write one\\-line functions with implicit return statements, this is useful for chaining functions together or for writing short one\\-line functions.\n* There are advantages for `this` binding\\. Don't worry about what \"this\" is yet\\! For now just know that arrow functions provide some benefits when it comes to the behavior of the `this` keyword\\.\n\n\nIn the majority of the Pairwise challenges, we will use the arrow function syntax to write functions. Feel free to choose whatever syntax you prefer, there is no strict language or industry requirement to use one or the other\\! But we are making the choice to consistently adopt and encourage the use of `() => { ... }` arrow functions.\n\nIn the editor below `whyShouldYouUseArrowFunctions` is a normal function. Convert it to an arrow function\\!",
          "testCode": "test(\"The function `whyShouldYouUseArrowFunctions` should be an arrow function.\", () => {\n  const code = __user_code_string__;\n  const isArrowFunction =\n    code.includes(\"let whyShouldYouUseArrowFunctions = (\") ||\n    code.includes(\"const whyShouldYouUseArrowFunctions = (\");\n  expect(isArrowFunction).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/HAXaw7dkMHY",
          "starterCode": "const reasonsToUseArrowFunctions = [\n  \"Short and sweet\",\n  \"Everyone loves a one-line function once in a while\",\n  \"Consistency, productivity!\",\n  \"Get along with colleagues\",\n  \"Never ask the question, What is 'this' again!?\",\n];\n\n// Enough said!\nfunction whyShouldYouUseArrowFunctions(reasons: string[]) {\n  // Look at this one-line arrow function!\n  reasons.forEach(x => console.log(x));\n}\n\nwhyShouldYouUseArrowFunctions(reasonsToUseArrowFunctions);",
          "solutionCode": "const reasonsToUseArrowFunctions = [\n  \"Short and sweet\",\n  \"Everyone loves a one-line function once in a while\",\n  \"Consistency, productivity!\",\n  \"Get along with colleagues\",\n  \"Never ask the question, What is 'this' again!?\",\n];\n\n// Enough said!\nconst whyShouldYouUseArrowFunctions = (reasons: string[]) => {\n  // Look at this one-line arrow function!\n  reasons.forEach(x => console.log(x));\n}\n\nwhyShouldYouUseArrowFunctions(reasonsToUseArrowFunctions);",
          "content": ""
        },
        {
          "id": "4GD8EBtjB",
          "type": "typescript",
          "title": "First Class Functions",
          "instructions": "In TypeScript, functions are first class entities. That means you can define functions using `const` or `let`, you can pass functions as arguments to other functions, you can return functions from functions \\- functions are very versatile and flexible primitives you can build complex programs with\\!\n\nIn the editor below is a function which accepts a `text` argument and a _function_ argument\\. The function argument, named `formatter`, is a function which applies custom formatting to the provided `text` argument\\. Your job is to implement the body of the function: format the `text` using the `formatter` function and return the result\\!",
          "testCode": "test(\"`applyCustomFormatting` should apply the `formatter` function to the provided `text` argument and return the result.\", () => {\n  let input = \"apple\";\n  let formatter = text => text.toUpperCase();\n  let result = applyCustomFormatting(input, formatter);\n  expect(result).toBe(\"APPLE\");\n\n  input = \"APPLE\";\n  formatter = text => text.toLowerCase();\n  result = applyCustomFormatting(input, formatter);\n  expect(result).toBe(\"apple\");\n\n  input = \"this is a sentence with cats\";\n  formatter = text => text.split(\" \").join(\"\");\n  result = applyCustomFormatting(input, formatter);\n  expect(result).toBe(\"thisisasentencewithcats\");\n\n  input = \"this is a sentence with cats\";\n  formatter = text => text.slice(0, 5);\n  result = applyCustomFormatting(input, formatter);\n  expect(result).toBe(\"this \");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7vK4Mf59o6U",
          "starterCode": "/**\n * A function which accepts two arguments: text and a formatter function. This\n * function should format the text argument with the formatter function and\n * return the result.\n */\nconst applyCustomFormatting = (\n  text: string,\n  formatter: (textString: string) => string\n): string => {\n  // Your code here\n};\n",
          "solutionCode": "/**\n * A function which accepts two arguments: text and a formatter function. This\n * function should format the text argument with the formatter function and\n * return the result.\n */\nconst applyCustomFormatting = (\n  text: string,\n  formatter: (textString: string) => string\n): string => {\n  return formatter(text);\n};\n",
          "content": ""
        },
        {
          "id": "acyr@oJWa",
          "type": "typescript",
          "title": "Return a Function From a Function",
          "instructions": "You can return functions from functions in order to create more versatile, reusable, and composable pieces of code. This is a harder to concept to wrap your mind around at first. Let's try to dive in with a simple example\\!\n\nThe `createCurrencyDisplayFunction` return the `displayCurrency` function\\. This `displayCurrency` function should return a string representing the provided `currency` and `amount`, e.g. a string like this: `Amount: 100 USD`.",
          "testCode": "test(\"Given `AUD`, `createCurrencyDisplayFunction` should a function which given an `amount` `1000` returns a string: `Amount: 1000 AUD`.\", () => {\n  let fn = createCurrencyDisplayFunction(\"AUD\");\n  let result = fn(1000);\n  let expected = \"Amount: 1000 AUD\";\n  expect(result).toBe(expected);\n});\n\ntest(\"`createCurrencyDisplayFunction` should return a function which returns a string showing the provided `amount` and `currency`.\", () => {\n  let fn = createCurrencyDisplayFunction(\"USD\");\n  let result = fn(500);\n  let expected = \"Amount: 500 USD\";\n  expect(result).toBe(expected);\n\n  fn = createCurrencyDisplayFunction(\"JPY\");\n  result = fn(5.1);\n  expected = \"Amount: 5.1 JPY\";\n  expect(result).toBe(expected);\n\n  result = fn(5000.12);\n  expected = \"Amount: 5000.12 JPY\";\n  expect(result).toBe(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/NDxb3FaGcUY",
          "starterCode": "type Currency = \"USD\" | \"EUR\" | \"JPY\" | \"AUD\" | \"NZD\";\n\n// Return a function to help displayig a value in different\n// currencies.\nconst createCurrencyDisplayFunction = (currency: Currency) => {\n  // Create a new function to render an amount with\n  // the provied currency.\n  const displayCurrency = (amount: number) => {\n    // Your code here!\n  };\n\n  // Return the new function!\n  return displayCurrency;\n};\n\n// Try it out:\nconst displayFunction = createCurrencyDisplayFunction(\"USD\");\nconst result = displayFunction(500);\nconsole.log(result);\n",
          "solutionCode": "type Currency = \"USD\" | \"EUR\" | \"JPY\" | \"AUD\" | \"NZD\";\n\n// Return a function to help displayig a value in different\n// currencies.\nconst createCurrencyDisplayFunction = (currency: Currency) => {\n  // Create a new function to render an amount with\n  // the provied currency.\n  const displayCurrency = (amount: number) => {\n    return `Amount: ${amount} ${currency}`;\n  };\n\n  // Return the new function!\n  return displayCurrency;\n};\n\n// Try it out:\nconst displayFunction = createCurrencyDisplayFunction(\"USD\");\nconst result = displayFunction(500);\nconsole.log(result);",
          "content": ""
        },
        {
          "id": "RReii2Dod",
          "type": "typescript",
          "title": "Create a Calculator with Functions",
          "instructions": "Functions can be combined in diverse ways to create more complex functionality. In the editor below are four simple math functions, `add`, `subtract`, `multiply`, and `divide`. Then, there is a calculator function, which should return a new `Calculator` object which includes all of these math functions. Give it a try\\!",
          "testCode": "test(\"The `createCalculator` should return a `Calculator` object with the provided math functions.\", () => {\n  const newTestCalculator = createCalculator();\n  expect(newTestCalculator.add(5, 10)).toBe(15);\n  expect(newTestCalculator.subtract(5, 10)).toBe(-5);\n  expect(newTestCalculator.multiply(5, 10)).toBe(50);\n  expect(newTestCalculator.divide(5, 10)).toBe(0.5);\n\n  expect(newTestCalculator.add(5, 100)).toBe(105);\n  expect(newTestCalculator.subtract(50, 10)).toBe(40);\n  expect(newTestCalculator.multiply(50, 10)).toBe(500);\n  expect(newTestCalculator.divide(5, 1)).toBe(5);\n\n  expect(newTestCalculator.add(500, 10)).toBe(510);\n  expect(newTestCalculator.subtract(500, 10)).toBe(490);\n  expect(newTestCalculator.multiply(10, 100)).toBe(1000);\n  expect(newTestCalculator.divide(400, 2)).toBe(200);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/thCzJYOHk8U",
          "starterCode": "type MathFunction = (a: number, b: number) => number;\n\nconst add = (a: number, b: number) => a + b;\nconst subtract = (a: number, b: number) => a - b;\nconst multiply = (a: number, b: number) => a * b;\nconst divide = (a: number, b: number) => a / b;\n\ninterface Calculator {\n  add: MathFunction;\n  subtract: MathFunction;\n  multiply: MathFunction;\n  divide: MathFunction;\n}\n\n/**\n * A function which uses the math functions defined\n * above to return a Calculator object.\n */\nconst createCalculator = (): Calculator => {\n  // Your code here!\n}\n\n// Create a calculator:\nconst calculator = createCalculator();\n\n// Try it out!\nconsole.log(calculator.add(5, 10));\nconsole.log(calculator.subtract(5, 10));\nconsole.log(calculator.multiply(5, 10));\nconsole.log(calculator.divide(5, 10));\n\n",
          "solutionCode": "type MathFunction = (a: number, b: number) => number;\n\nconst add = (a: number, b: number) => a + b;\nconst subtract = (a: number, b: number) => a - b;\nconst multiply = (a: number, b: number) => a * b;\nconst divide = (a: number, b: number) => a / b;\n\ninterface Calculator {\n  add: MathFunction;\n  subtract: MathFunction;\n  multiply: MathFunction;\n  divide: MathFunction;\n}\n\n/**\n * A function which uses the math functions defined\n * above to return a Calculator object.\n */\nconst createCalculator = (): Calculator => {\n  /**\n   * We can use the object shorthand proerty to\n   * easily return a new Calculator object since\n   * the field names match the math function names.\n   */\n  return {\n    add,\n    subtract,\n    multiply,\n    divide,\n  };\n}\n\n// Create a calculator:\nconst calculator = createCalculator();\n\n// Try it out!\nconsole.log(calculator.add(5, 10));\nconsole.log(calculator.subtract(5, 10));\nconsole.log(calculator.multiply(5, 10));\nconsole.log(calculator.divide(5, 10));\n\n",
          "content": ""
        },
        {
          "id": "YyC8P@YP$",
          "type": "typescript",
          "title": "Function Arguments",
          "instructions": "You can provide arguments \\(inputs\\) to functions in many different ways. The most direct way is to just provide the arguments in a list, e.g. `(argumentOne: string, argumentTwo: number)`. But you can also provide objects, or functions \\(as we saw earlier\\), or combinations of these. In this challenge, let's work with a function which accepts an object as an argument, and an additional argument.",
          "testCode": "test(\"The `canStudentEnter` function should return `true` given a student with an age equal to or greater than the provided `ageLimit` argument.\", () => {\n  const student = {\n    name: \"Sam\",\n    age: 18,\n    hobbies: [],\n  };\n  expect(canStudentEnter(student, 18)).toBe(true);\n  expect(canStudentEnter(student, 12)).toBe(true);\n  expect(canStudentEnter(student, 15)).toBe(true);\n});\n\ntest(\"The `canStudentEnter` function should return `false` given a student with an less than the provided `ageLimit` argument.\", () => {\n  const student = {\n    name: \"Sam\",\n    age: 25,\n    hobbies: [],\n  };\n  expect(canStudentEnter(student, 30)).toBe(false);\n  expect(canStudentEnter(student, 31)).toBe(false);\n  expect(canStudentEnter(student, 50)).toBe(false);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/a8QUbvDDu_c",
          "starterCode": "interface Student {\n  name: string;\n  age: number;\n  hobbies: string[];\n}\n\n/**\n * This function takes a Student and an ageLimit argument. It should\n * return true or false depending on if the student is older than\n * the provided ageLimit.\n */\nconst canStudentEnter = (student: Student, ageLimit: number): boolean => {\n  // Your code here!\n}\n",
          "solutionCode": "interface Student {\n  name: string;\n  age: number;\n  hobbies: string[];\n}\n\n/**\n * This function takes a Student and an ageLimit argument. It should\n * return true or false depending on if the student is older than\n * the provided ageLimit.\n */\nconst canStudentEnter = (student: Student, ageLimit: number): boolean => {\n  // We can solve this with a short ternary expression:\n  // return student.age >= ageLimit;\n\n  // Or, we can solve it with a longer, more readable if/else statement:\n  if (student.age >= ageLimit) {\n    return true;\n  } else {\n    return false;\n  }\n}\n",
          "content": ""
        },
        {
          "id": "WHA@DjaX4",
          "type": "typescript",
          "title": "Total Weight",
          "instructions": "Let's have one final practice with functions. This time, you will write a function from scratch\\! Write a function call `totalWeight` which accepts a list of items, `Item[]`, and return a single `number` representing the total weight of the items in the list. The `Item` interface is already defined for you below. Good luck\\!",
          "testCode": "test(\"`totalWeight` should exist and be a function.\", () => {\n  expect(typeof totalWeight === \"function\").toBe(true);\n});\n\ntest(\"`totalWeight` should accept a list of items and return their total weight.\", () => {\n  const items = [\n    {\n      type: \"thing\",\n      weight: 15023,\n    },\n    {\n      type: \"thing\",\n      weight: 100,\n    },\n    {\n      type: \"thing\",\n      weight: 203,\n    },\n    {\n      type: \"thing\",\n      weight: 202,\n    },\n    {\n      type: \"thing\",\n      weight: 200,\n    },\n    {\n      type: \"thing\",\n      weight: 1001,\n    },\n  ];\n\n  expect(totalWeight(items.slice(0))).toBe(16729);\n  expect(totalWeight(items.slice(0, 1))).toBe(15023);\n  expect(totalWeight(items.slice(0, 2))).toBe(15123);\n  expect(totalWeight(items.slice(0, 3))).toBe(15326);\n  expect(totalWeight(items.slice(0, 4))).toBe(15528);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/IaOWXCQwL-U",
          "starterCode": "interface Item {\n  type: string;\n  weight: number;\n}\n\n// Your code here!\n",
          "solutionCode": "interface Item {\n  type: string;\n  weight: number;\n}\n\nconst totalWeight = (items: Item[]): number => {\n  // Iterate through the list and add up the total\n  let total = 0;\n  for (const item of items) {\n    total += item.weight;\n  }\n  return total;\n};\n",
          "content": ""
        },
        {
          "id": "9alVlE$kL",
          "type": "typescript",
          "title": "Functions with Generic Type Arguments",
          "instructions": "A powerful feature of TypeScript is [Generics](https://www.typescriptlang.org/docs/handbook/generics.html). Generics allow you to create code which does not specify an exact type, but instead allows you to pass in type information at the point of consumption. One of the most useful ways generics can be used in TypeScript is with generics type arguments to functions. Generics are a very powerful way to create reusable code components and abstractions.\n\nThe function in the code editor `theReturnTypeIsGeneric` is a very simple illustration of how generics can be used in a function definition. The function invocation is where you supply the type information for the `T` type\\.\n\nTake a look at the examples, and then add two more following the same pattern: `booleanReturnType` and `nullReturnType`.",
          "testCode": "test(\"`booleanReturnType` should exist and be a `boolean` value.\", () => {\n  expect(typeof booleanReturnType === \"boolean\").toBe(true);\n});\n\ntest(\"`nullReturnType` should exist and be a `null` value.\", () => {\n  expect(nullReturnType === null).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/2uWG5HzeyXU",
          "starterCode": "/**\n * A function with a generic type argument. You supply the type T\n * when you call the function (see the examples below).\n */\nconst theReturnTypeIsGeneric = <T extends {}>(args: T): T => {\n  // Just return the provided arguments\n  return args;\n};\n\n// A number return type:\nconst numberReturnType = theReturnTypeIsGeneric<number>(500);\n\n// A string return type:\nconst stringReturnType = theReturnTypeIsGeneric<string>(\"a string!\");\n\n// A list return type:\nconst listReturnType = theReturnTypeIsGeneric<number[]>([1, 2, 3]);\n",
          "solutionCode": "/**\n * A function with a generic type argument. You supply the type T\n * when you call the function (see the examples below).\n */\nconst theReturnTypeIsGeneric = <T extends any>(args: T): T => {\n  // Just return the provided arguments\n  return args;\n};\n\n// A number return type:\nconst numberReturnType = theReturnTypeIsGeneric<number>(500);\n\n// A string return type:\nconst stringReturnType = theReturnTypeIsGeneric<string>(\"a string!\");\n\n// A list return type:\nconst listReturnType = theReturnTypeIsGeneric<number[]>([1, 2, 3]);\n\n// A boolean return type:\nconst booleanReturnType = theReturnTypeIsGeneric<boolean>(true);\n\n// A null return type:\nconst nullReturnType = theReturnTypeIsGeneric<null>(null);\n",
          "content": ""
        },
        {
          "id": "BHnwYHNkg",
          "type": "section",
          "title": "Recursion",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Introducing Recursion\n\nRecursion is the concept in computer science of solving a problem by solving smaller instances of the same problem. In practice, this typically is illustrated by a _function calling itself. _Recursion is a tricky concept to wrap your head around at first, but once you understand it it is pretty simple. Consider the following:\n\n```typescript\n// Add up all the numbers in an array\nfunction sumArray(list: number[], sum: number = 0, index: number = 0): number {\n    // Base Case:\n    if (index === list.length) {\n        return sum;\n    }\n    \n    // Recursive Case:\n    return sumArray(list, sum + list[index], index + 1);\n}\n\n```\n\nThis function `sumArray`, takes a list of values and two other arguments. The other arguments have _default values_ which means that if they are left `undefined` they will be defaulted to the value provided by `=`. So you can call `sumArray` directly with a list of values, like this: `sumArray([1,2,3])`. The function then has a \"base case\" and a \"recursive case\".\n# The Base Case\n\nThe \"base case\" is what ends the recursive call. Recursion is the practice of breaking a problem into smaller sub\\-problems, but eventually you must reach some \"base\" problem where the solution is known. This is the base case and it ends the recursion.\n# The Recursive Case\n\nThe \"recursive case\" is the logic of actual performing the recursion. In our above example of adding the contents in an array the recursive logic is to add the current sum to the current value at the given `index`. Then, we call the `sumArray` method _again_ with that sum and the next index.\n\n`sumArray` _calls itself_ for every index in the array, starting at `0`, until it reaches the index after the end of the array. Each call builds up a `sum` value which tracks the sum of elements visited in the array. The base case just returns this `sum`. The recursive cases _return_ the call to `sumArray`.\n# Unwinding the Stack\n\nJavaScript engines use a call stack to manage function execution. JavaScript engines, or \"interpreters\", execute JavaScript code by interrupting it and translating it into instructions your computer can directly execute. For every time a function is called, the JavaScript engine allocates memory and resources to handle the execution of that function in the form of a new frame it pushes onto the call stack. The call stack is just a \"stack\" of these such execution contexts.\n\nOnce an interpreter completes the execution of a function \\(reaches the `return` statement\\), the function is finished, the interpreter removes that function's execution context from the call stack and then returns to the execution of the previous function which should still be ongoing. In this way, the call stack \"unwinds\" as function executions are completed.\n\nImagine the execution of `sumArray` above\\. You can consider it like this:\n\n```\n// The initial call\nsumArray([1,2,3]);\n\n// 2nd call (recursive)\nsumArray[1,2,3], 1, 1);\n\n// 3nd call (recursive)\nsumArray[1,2,3], 3, 2);\n\n// 4th call (base case reached)\nsumArray[1,2,3], 6, 3);\n\n```\n\nBy the time the 4th call is reached, the call stack still contains the context for the previous 3 function calls. This is because each function call results in calling the same function again. It's not until the base case is reached that these function calls \"unwind\" backwards, which eventually leads to the final sum of `6` being returned at the original call site.\n\nDon't worry if this doesn't all make sense \\(we will cover this topic of program execution in more depth elsewhere\\). For now, there are two important takeaways:\n\n1\\) Interpreters allocate resources for function execution on a call stack.\n2\\) Function invocations push new frames onto the call stack.\n# Stack Overflows\n\nThe second point above is important to understand because computers have memory limits for operation. Usually programs do not reach memory limits, but it can and does happen \\(it will happen to you\\!\\). It is actually somewhat easy to encounter when writing recursive functions, because interpreters typically allocate a decent amount of memory for function invocations and impose limits on how many times a function can call itself. This is usually enough for recursive solutions to complete execution, but it is easy to write an infinitely recursive function, like this:\n\n```typescript\nfunction callMyselfInfinitely() {\n    return callMyselfInfinitely();\n}\n\n```\n\nIf you tried to run this code you will quickly get this result:\n\n```\nUncaught RangeError: Maximum call stack size exceeded\n    at callMyselfInfinitely (<anonymous>:1:30)\n    at callMyselfInfinitely (<anonymous>:2:12)\n    at callMyselfInfinitely (<anonymous>:2:12)\n    at callMyselfInfinitely (<anonymous>:2:12)\n    at callMyselfInfinitely (<anonymous>:2:12)\n    at callMyselfInfinitely (<anonymous>:2:12)\n    at callMyselfInfinitely (<anonymous>:2:12)\n    at callMyselfInfinitely (<anonymous>:2:12)\n    at callMyselfInfinitely (<anonymous>:2:12)\n    at callMyselfInfinitely (<anonymous>:2:12)\n\n```\n\nThis is a \"stack overflow\" \\(and the origin of the name of the popular programming question and answer site [StackOverflow](https://stackoverflow.com/)\\). It's important to remember the recursive functions are prone to this error, especially if you do not handle the base case effectively. It could also occur if you simply had a really large input size.\n# All Recursions Can Be Iterative\n\nOur `sumArray` function could easily be written in an iterative way, and in fact, as a rule any recursive solution can be implemented using iteration.\n\n```\n// Sum a list of numbers using iteration\nfunction sumArrayIterative(list: number[]): number[] {\n    let sum = 0;\n    // Iterate through the list and build up the sum\n    for (let i = 0; i < list.length; i++) {\n        sum += list[i];\n    }\n    return sum;\n}\n\n```\n\n> Any recursion solution can be implemented using iteration.\n\nThis point is helpful to keep in mind once you add recursion into your toolbox of problem\\-solving tools. But, it also raises the question: Why use recursion to solve a problem? Recursion is often a more mind\\-bending way to solve problems.\n# Why Recursion?\n\nIt turns out some problems are much more suited to being solved with recursion. Many data structures, like trees, are naturally recursive data structures. As a result, many tree algorithms are very simple as recursive algorithms and likewise very complex as iterative algorithms. Consider the [infamous tree inversion algorithm](https://news.ycombinator.com/item?id=15713801):\n\n```typescript\n// A tree node\ninterface Node {\n    left: Node;\n    right: Node;\n    value: any;\n}\n\n// Given a binary tree, invert it\nfunction invertTree(node: Node) {\n    // Handle the base case of reaching a leaf node\n    if (node === null) {\n        return;\n    }\n    \n    // Get the left and right sub trees\n    const leftTree = node.left;\n    const rightTree = node.right;\n    \n    // Switch them\n    node.left = rightTree;\n    node.right = leftTree;\n    \n    // Invert the left and right sub trees\n    invertTree(node.left);\n    invertTree(node.right);\n}\n\n```\n\nThe solution is a little more verbose for clarity, but you can write it in a more concise way in just a few lines of code. This is because the tree is a recursive structure. Therefore, the solution to \"inverting\" the tree is just to invert the given node, and then invert the node's left and right children by calling the inversion function again. Add the base case where you reach a left node and you're done\\! The solution is simple, short, and elegant. Try writing the same thing using iteration\\!\n\n> **Side note:** A tree structure is a data structure composed of nodes where a node has a \"parent\" and \"children\". A binary tree is one such structure where each parent has two children. Trees look just like real world trees: there is on root node which branches out with many children until the \"leaf\" nodes are reached. Leaf nodes are typically represented with a `null` value\\. Tree data structures are used in many places \\(not the least of which are software engineering interview questions\\).\n> \n> In fact, you are staring at a tree structure right now in your web browser: The DOM \\(document object model\\). The DOM is how web browsers represent HTML documents as webpages. These documents are represented as trees, where child HTML elements are all nested within their parents, and there is one common parent tag, the `body` tag\\.\n\nRecursion is a powerful concept to understand, and a very useful tool to have at your disposal. It is a little mind\\-bending, but once you wrap your head around it you'll gain a new useful tool. This section will cover some simple challenges which can be solved using recursion."
        },
        {
          "id": "@wxCAUbHc",
          "type": "typescript",
          "title": "Fibonacci",
          "instructions": "The fibonacci sequence is this sequence of numbers: `0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...` where a number is the sum of the previous two values, while the first two numbers in the sequence are set as `0` and `1`. Implement a function fibonacci which calculates the nth fibonacci number. In the above sequence, the 10th fibonacci number is 55.\n\n> **Note:** be careful trying out your fibonacci solution with large inputs \\- it may easily stack overflow or freeze your browser window\\!\n> \n> How could you solve the problem for larger numbers? If you solve the recursive problem, how could you solve this using iteration? \n> \n> See the video explanation below for more details\\!\n",
          "testCode": "test(\"`fibonacci` should be a function.\", () => {\n  expect(typeof fibonacci === \"function\").toBe(true);\n});\n\ntest(\"`fibonacci(0)` should return `0`.\", () => {\n  expect(fibonacci(0)).toBe(0);\n});\n\ntest(\"`fibonacci(1)` should return `1`.\", () => {\n  expect(fibonacci(1)).toBe(1);\n});\n\ntest(\"`fibonacci(2)` should return `1`.\", () => {\n  expect(fibonacci(2)).toBe(1);\n});\n\ntest(\"`fibonacci(3)` should return `2`.\", () => {\n  expect(fibonacci(3)).toBe(2);\n});\n\ntest(\"`fibonacci(4)` should return `3`.\", () => {\n  expect(fibonacci(4)).toBe(3);\n});\n\ntest(\"`fibonacci(5)` should return `5`.\", () => {\n  expect(fibonacci(5)).toBe(5);\n});\n\ntest(\"`fibonacci(10)` should return `55`.\", () => {\n  expect(fibonacci(10)).toBe(55);\n});\n\ntest(\"`fibonacci(25)` should return `75025`.\", () => {\n  expect(fibonacci(25)).toBe(75025);\n});",
          "videoUrl": "https://www.youtube.com/embed/jW0jjugU850",
          "starterCode": "type FibonacciFunction = (n: number) => number;\n\n// Your code here",
          "solutionCode": "type FibonacciFunction = (n: number) => number;\n\nconst fibonacci: FibonacciFunction = (n: number) => {\n  // Handle base case of 0:\n  if (n === 0) {\n    return 0;\n  }\n\n  // Handle base case of 1:\n  if (n === 1) {\n    return 1;\n  }\n\n  // Handle recursive case:\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n",
          "content": ""
        },
        {
          "id": "fMxrcyVzB",
          "type": "typescript",
          "title": "Find the Factorial",
          "instructions": "The second most classic recursion problem is using recursion to find the factorial of a number. The factorial of 5 is 120. Recall a factorial is represented using the `!` symbol, and expands like this:\n\n> 5\\! \\-\\> 5 \\* 4 \\* 3 \\* 2 \\* 1\n\nWrite a function `findFactorial` which accepts a number and returns the number's factorial using recursion. Think of the base case and the recursive case as you are trying to solve the problem.\n\n> Hint: The factorial of 0 is 1 and the factorial of 1 is also 1.\n",
          "testCode": "test(\"`findFactorial` should be a function\", () => {\n  expect(typeof findFactorial === \"function\").toBe(true);\n});\n\ntest(\"`findFactorial(0)` should be `1`.\", () => {\n  expect(findFactorial(0)).toBe(1);\n});\n\ntest(\"`findFactorial(1)` should be `1`.\", () => {\n  expect(findFactorial(1)).toBe(1);\n});\n\ntest(\"`findFactorial(2)` should be `2`.\", () => {\n  expect(findFactorial(2)).toBe(2);\n});\n\ntest(\"`findFactorial(3)` should be `6`.\", () => {\n  expect(findFactorial(3)).toBe(6);\n});\n\ntest(\"`findFactorial(4)` should be `24`.\", () => {\n  expect(findFactorial(4)).toBe(24);\n});\n\ntest(\"`findFactorial(5)` should be `120`.\", () => {\n  expect(findFactorial(5)).toBe(120);\n});\n\ntest(\"`findFactorial(15)` should be `1307674368000`.\", () => {\n  expect(findFactorial(15)).toBe(1307674368000);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/gmS_kIMmRE0",
          "starterCode": "// Your code here",
          "solutionCode": "const findFactorial = (n: number): number => {\n  // Handle base case of 0:\n  if (n === 0) {\n    return 1;\n  }\n\n  // Handle base case of 1:\n  if (n === 1) {\n    return n;\n  }\n\n  // Handle recursive case of n:\n  return n * findFactorial(n - 1);\n}\n",
          "content": ""
        },
        {
          "id": "3gu90L@JL",
          "type": "typescript",
          "title": "Find the Leaves",
          "instructions": "As mentioned previously a tree structure is one composed of nodes which have a recursive definition: a node has children which are more nodes. A `TreeNode` is defined for you in the editor below. This `TreeNode` belongs to a binary tree, in which every node only has two children. Write a function, `findTheLeaves`, which takes a root node to a binary tree and returns the values of all the leaf nodes in an array.\n\n> **Hint:** You can solve this using recursion. The base case is when you reach a leaf node. A leaf node is defined as a node with `null` for both children. Your function, `findTheLeaves`, can call another function which you write and provide some shared state array of `result` values which the recursive function can access. This is necessary because the tree recursion will \"branch out\" and reach many base cases. Each base case needs to record the result value. Give it a try and check the solution video below if you are stuck\\!\n",
          "testCode": "test(\"`findTheLeaves` should be a function.\", () => {\n  expect(typeof findTheLeaves === \"function\").toBe(true);\n});\n\ntest(\"`findTheLeaves` should return the root node value in an array if the root node has no children.\", () => {\n  const node = (value) => ({\n    value,\n    left: null,\n    right: null,\n  });\n  expect(findTheLeaves(node(100))).toEqual([100]);\n});\n\ntest(\"`findTheLeaves` should return `[2,3]` for a tree of three values: `1,2,3` where `1` is the root node.\", () => {\n  const node = (value) => ({\n    value,\n    left: null,\n    right: null,\n  });\n  const root = node(1);\n  root.left = node(2);\n  root.right = node(3);\n  expect(findTheLeaves(root).sort()).toEqual([2, 3].sort());\n});\n\ntest(\"`findTheLeaves` should return an array of the leaf node values for more complicated tree structures.\", () => {\n  const node = (value) => ({\n    value,\n    left: null,\n    right: null,\n  });\n  const root = node(1);\n  const two = (root.left = node(2));\n  const three = (root.right = node(3));\n  const four = (two.left = node(4));\n  four.left = node(200);\n  four.right = node(400);\n  three.left = node(500);\n  three.right = node(900);\n  expect(findTheLeaves(root).sort()).toEqual([200, 400, 500, 900].sort());\n});\n",
          "videoUrl": "https://www.youtube.com/embed/wDM2G90sL60",
          "starterCode": "interface TreeNode<T> {\n  value: T;\n  left: TreeNode<T>;\n  right: TreeNode<T>;\n}\n\n// Your code here",
          "solutionCode": "interface TreeNode<T> {\n  value: T;\n  left: TreeNode<T>;\n  right: TreeNode<T>;\n}\n\nconst findTheLeaves = (root: TreeNode<any>): any[] => {\n  // State variable to track the results\n  const result: any[] = [];\n\n  // Find the leaves of a given node\n  const findLeaf = (node: TreeNode<any>) => {\n    // Handle the base case\n    if (node.left === null && node.right === null) {\n      result.push(node.value);\n    }\n\n    // Find the leaves for the left node, if it exists\n    if (node.left) {\n      findLeaf(node.left);\n    }\n\n    // Find the leaves for the right node, if it exists\n    if (node.right) {\n      findLeaf(node.right);\n    }\n  };\n\n  // Run the recursive function\n  findLeaf(root);\n\n  return result;\n};\n",
          "content": ""
        },
        {
          "id": "TJdUIaSo",
          "type": "section",
          "title": "Scopes",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "By now you have probably seen a lot of `{` and `}` in the code you've been writing. These curly braces are an important part of understanding how a computer program works. In this section, we will dive into the curly braces in more depth and introduce an important concept: _scopes_.\n\nIn TypeScript, a _scope_ refers to which variables are accessible within a specific piece of code. Curly braces `{...}` are used to denote different scopes, which can be used to limit variable accessibility within different parts of code.\n\nA variable which is accessible in one scope may not be accessible in another. This can useful for establishing boundaries between different parts of your program, organizing your code, encapsulation, and for many other reasons.\n\nWith that said, let's dive into the challenges\\!"
        },
        {
          "id": "wkp3YMTk",
          "type": "typescript",
          "title": "Global Scope",
          "instructions": "Values declared with global scope can be accessed _anywhere_ in the program. Create a variable called `myGlobalValue` at the top of the program and assign it to the string: `I am global!`. Take a look at the console output\\!",
          "testCode": "test(\"`myGlobalValue` exists in the global scope of the program\", () => {\n    expect(myGlobalValue).toBeDefined();\n});\n\ntest(\"`myGlobalValue` is the string `\\\"I am global!\\\"`\", () => {\n    expect(myGlobalValue).toBe(\"I am global!\");\n});",
          "videoUrl": "https://www.youtube.com/embed/7_bW2AfT4F4",
          "starterCode": "\n{\n  // Scope 1:\n  console.log(`Scope 1 myGlobalValue: ${myGlobalValue}`);\n  {\n    // Scope 2:\n    console.log(`Scope 2 myGlobalValue: ${myGlobalValue}`);\n    {\n      // Scope 3:\n      console.log(`Scope 3 myGlobalValue: ${myGlobalValue}`);\n    }\n  }\n}\n",
          "solutionCode": "const myGlobalValue = \"I am global!\";\n\n{\n  // Scope 1:\n  console.log(`Scope 1 myGlobalValue: ${myGlobalValue}`);\n  {\n    // Scope 2:\n    console.log(`Scope 2 myGlobalValue: ${myGlobalValue}`);\n    {\n      // Scope 3:\n      console.log(`Scope 3 myGlobalValue: ${myGlobalValue}`);\n    }\n  }\n}\n",
          "content": "You may observe the series of brackets in the code above, e.g. `{ ... }`. The brackets create a new _scope_ in TypeScript. A scope basically defines a private environment or namespace for values to exist.\n\nOther than a few exceptional cases, values defined within a scope _cannot be accessed from outside of that scope._\n\nAs you may imagine, values in the _global scope_ are global and can be accessed anywhere in the program\\! "
        },
        {
          "id": "$o6Oq$iq",
          "type": "typescript",
          "title": "The Global Scope Math Object",
          "instructions": "In TypeScript there are a variety of objects available in the global scope for you to use as a programmer, anywhere in your program. For instead, the `Math` object exists globally and provides methods such as `floor`, `ceil`, `round` and otherwise for performing useful operations with numbers.\n\nUse the `Math` object methods to assign the correct values to the variables `down`, `up`, and `rounded` below\\.",
          "testCode": "test(\"The results `down`, `up`, and `rounded` should all be numbers.\", () => {\n  expect(typeof down).toBe(\"number\");\n  expect(typeof up).toBe(\"number\");\n  expect(typeof rounded).toBe(\"number\");\n});\n\ntest(\"The `down` variable should apply `Math.floor` to the `testNumber` variable.\", () => {\n  expect(down).toBe(Math.floor(testNumber));\n});\n\ntest(\"The `up` variable should apply `Math.ceil` to the `testNumber` variable.\", () => {\n  expect(up).toBe(Math.ceil(testNumber));\n});\n\ntest(\"The `rounded` variable should apply `Math.round` to the `testNumber` variable.\", () => {\n  expect(rounded).toBe(Math.round(testNumber));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/6hPX9XfyRn4",
          "starterCode": "\n// An example number\nconst testNumber = 10.325;\n\n// Round a decimal value down:\nconst down = undefined;\nconsole.log(`down: ${down}`);\n\n// Round a decimal value up:\nconst up = undefined;\nconsole.log(`up: ${up}`);\n\n// Round a decimal value:\nconst rounded = undefined;\nconsole.log(`rounded: ${rounded}`);",
          "solutionCode": "// An example number\nconst testNumber = 10.325;\n\n// Round a decimal value down:\nconst down = Math.floor(testNumber);\nconsole.log(`down: ${down}`);\n\n// Round a decimal value up:\nconst up = Math.ceil(testNumber);\nconsole.log(`up: ${up}`);\n\n// Round a decimal value:\nconst rounded = Math.round(testNumber);\nconsole.log(`rounded: ${rounded}`);",
          "content": "The `Math` object is just one globally available object for you to use in TypeScript. These may also be referred to as \"standard built\\-in\" objects.\n\nFor instance, global objects exist to instantiate the primitive data types you learned about previously: `String`, `Number`, and `Boolean` for instance.\n\nIn the following challenges we will experiment a little more with these global utility objects. Check out the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects) if you are curious to see a full list of what's available."
        },
        {
          "id": "aNx60YBP",
          "type": "typescript",
          "title": "More Math!",
          "instructions": "Let's play around more with the global `Math` object\\! It contains many other utilities to perform common math operations. In this challenge will implement a few functions for some simple math operations.\n\n**HINT: **If you want some help seeing which methods to use, take a look at the [Math object documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math). Also, don't forget that the editor can help make suggestions as you type. For example, try typing `Math.` in the editor somewhere\\!",
          "testCode": "\nconst inputs = [9, 25, 64, 100, 144, 225, 2025, 3136];\nconst runTest = (testFn, realFn) => inputs.forEach(i => expect(testFn(i)).toBe(realFn(i)));\n\ntest(\"The `squareRoot` function should return the square root of the `input` argument.\", () => {\n  runTest(squareRoot, Math.sqrt);\n});\n\ntest(\"The `absoluteValue` function should return the absolute of the `input` argument\", () => {\n  runTest(absoluteValue, Math.abs);\n});\n\ntest(\"The `logarithm` function should return the natural logarithm of the `input` argument.\", () => {\n  runTest(logarithm, Math.log);\n});\n\ntest(\"The `sign` function should return the sign of the `input` argument.\", () => {\n  runTest(sign, Math.sign);\n});\n\ntest(\"The `random` function should return a random number using the `Math` objects random utility.\", () => {\n  expect(typeof random()).toBe(\"number\");\n\n  let count = 0;\n  let results = [];\n  while (count < 500) {\n    results.push(random());\n    count++;\n  }\n  const unique = new Set(results);\n\n  // Blegh but it should work\n  expect(unique.size > 250).toBeTruthy();\n\n  // Search for the .random function in the user's code\n  expect(__user_code_string__.includes(\"Math.random(\")).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Et68gkvgK-M",
          "starterCode": "const squareRoot = (input: number): number => {\n    // Use the Math object to return the square root of the input value!\n}\n\nconst absoluteValue = (input: number): number => {\n    // Use the Math object to return the absolute value of the input value!\n}\n\nconst logarithm = (input: number): number => {\n    // Use the Math object to return the natural logarithm of the input value!\n}\n\nconst sign = (input: number): number => {\n    // Use the Math object to return the sign on the input value!\n}\n\nconst random = (): number => {\n    // Use the Math object to return a random number!\n    return Math.random();\n}",
          "solutionCode": "const squareRoot = (input: number): number => {\n    // Use the Math object to return the square root of the input value!\n    return Math.sqrt(input);\n}\n\nconst absoluteValue = (input: number): number => {\n    // Use the Math object to return the absolute value of the input value!\n    return Math.abs(input);\n}\n\nconst logarithm = (input: number): number => {\n    // Use the Math object to return the natural logarithm of the input value!\n    return Math.log(input);\n}\n\nconst sign = (input: number): number => {\n    // Use the Math object to return the sign on the input value!\n    return Math.sign(input);\n}\n\nconst random = (): number => {\n    // Use the Math object to return a random number!\n    return Math.random();\n}",
          "content": ""
        },
        {
          "id": "NtvLmjdo",
          "type": "typescript",
          "title": "The Global Date Object",
          "instructions": "Another global object you will probably encounter frequently is the `Date` object\\. It is used to construct and work with dates and times. A new date can be created using the `Date` object and instantiating it with the `new` keyword\\.",
          "testCode": "\nconst checkTheDate = () => {\n  const now = new Date();\n  let result = whatIsTheDate();\n  const milli = now.getMilliseconds();\n  expect(result.getMilliseconds() - milli < 50).toBeTruthy();\n}\n\ntest(\"The `whatIsTheDate` function should return the current date as a new instance of the `Date` object.\", () => {\n  // Check the date a few times\n  let count = 0;\n  while (count < 25) {\n    checkTheDate();\n    count++;\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/svaMUHgkfz4",
          "starterCode": "const whatIsTheDate = (): Date => {\n    // Create and return a new instance of Date\n}\n\nconst rightNow = whatIsTheDate();\n\n// Log the results\nconsole.log(rightNow);\nconsole.log(rightNow.toLocaleString());\n",
          "solutionCode": "const whatIsTheDate = (): Date => {\n    const date = new Date();\n    return date;\n}\n\nconst rightNow = whatIsTheDate();\nconsole.log(rightNow);\nconsole.log(rightNow.toLocaleString());\n",
          "content": ""
        },
        {
          "id": "UmvrXaKk",
          "type": "typescript",
          "title": "Learn about UNIX Epoch Time, now!",
          "instructions": "[Unix time](https://en.wikipedia.org/wiki/Unix_time) is a common date/time standard used in computing and operating systems. It describes a moment in time as the number of seconds which have passed since he Unix epoch which is the start of January 1, 1970 in UTC time. The current unix time can be retrieved from the `Date` object using a method called `now` \\(although this will actually return the number of milliseconds, in case you wanted to know\\!\\).  Take a look at the editor and try to convert dates to and from unix time\\!",
          "testCode": "const runChecks = (checkFn) => {\n  let count = 0;\n  while (count < 25) {\n    checkFn();\n    count++;\n  }\n}\n\ntest(\"The `getNowInUnixTime` function should return the current date in unix time.\", () => {\n  const check = () => {\n    const now = Date.now();\n    const result = getNowInUnixTime();\n    const diff = result - now;\n    expect(diff <= 50).toBeTruthy();\n    expect(diff >= 0).toBeTruthy();\n  }\n\n  runChecks(check);\n});\n\ntest(\"The `convertUnixTimeToDate` function should convert a unix timestamp number to a `Date` object.\", () => {\n  const check = () => {\n    const now = Date.now();\n    const result = convertUnixTimeToDate(now);\n    const expected = new Date(now).toUTCString();\n    expect(result.toUTCString()).toBe(expected);\n  }\n  \n  runChecks(check);\n});",
          "videoUrl": "https://www.youtube.com/embed/8f5wxOdzH_I",
          "starterCode": "const getNowInUnixTime = () => {\n    // Return the current unix timestamp\n}\n\nconst convertUnixTimeToDate = (unix: number): Date => {\n    // Convert and return a Date representing the input unix timestamp\n}\n\nconst unix = getNowInUnixTime();\nconsole.log(`unix: ${unix}`);\n\nconst date = convertUnixTimeToDate(unix);\nconsole.log(`date: ${date}`);\n\n",
          "solutionCode": "const getNowInUnixTime = () => {\n    return Date.now();\n}\n\nconst convertUnixTimeToDate = (unix: number): Date => {\n    return new Date(unix);\n}\n\nconst unix = getNowInUnixTime();\nconsole.log(`unix: ${unix}`);\n\nconst date = convertUnixTimeToDate(unix);\nconsole.log(`date: ${date}`);\n\n",
          "content": ""
        },
        {
          "id": "ld1zsdXb",
          "type": "typescript",
          "title": "Local Scope",
          "instructions": "Now that you have learned about global scope and some of the objects which are globally available for you to use, we will now take a look at _local scope_. Local scope refers to the ability to define a more restricted scope, or namespace, for values to exist in. Take a look at the editor to continue \\(it should look familiar from the earlier global scopes challenge\\!\\).\n\n> Note: Do not change the `console.log` statements \\(otherwise the tests will not work correctly\\).\n",
          "testCode": "\ntest(\"The `someVariable` variable should be redefined with a different value in each of the 4 scopes (global scope and 3 local scopes).\", () => {\n  const logs = parseLogBox(__secret_log_box);\n  const unique = new Set();\n  \n  for (const log of logs) {\n    const global_scope = \"Global scope someVariable: \";\n    const local_one = \"Scope 1 someVariable: \";\n    const local_two = \"Scope 2 someVariable: \";\n    const local_three = \"Scope 3 someVariable: \";  \n    if (log.includes(global_scope)) {\n      unique.add(log.replace(global_scope, \"\"));\n    } else if (log.includes(local_one)) {\n      unique.add(log.replace(local_one, \"\"));\n    } else if (log.includes(local_two)) {\n      unique.add(log.replace(local_two, \"\"));\n    } else if (log.includes(local_three)) {\n      unique.add(log.replace(local_three, \"\"));\n    }\n  }\n\n  expect(unique.size).toBe(4);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Pc0EFz9ecAI",
          "starterCode": "// Global scope:\nconst someVariable = \"\";\nconsole.log(`Global scope someVariable: ${someVariable}`);\n\n{\n  // Scope 1:\n  // const someVariable;\n  console.log(`Scope 1 someVariable: ${someVariable}`);\n  {\n    // Scope 2:\n    // const someVariable;\n    console.log(`Scope 2 someVariable: ${someVariable}`);\n    {\n      // Scope 3:\n      // const someVariable;\n      console.log(`Scope 3 someVariable: ${someVariable}`);\n    }\n  }\n}\n",
          "solutionCode": "// Global scope:\nconst someVariable = \"Global!\";\nconsole.log(`Global scope someVariable: ${someVariable}`);\n\n{\n  // Scope 1:\n  const someVariable = null;\n  console.log(`Scope 1 someVariable: ${someVariable}`);\n  {\n    // Scope 2:\n    const someVariable = \"A local value!\";\n    console.log(`Scope 2 someVariable: ${someVariable}`);\n    {\n      // Scope 3:\n      const someVariable = true;\n      console.log(`Scope 3 someVariable: ${someVariable}`);\n    }\n  }\n}\n",
          "content": "As you can see from this challenge, `{...}` can be used to create a new scope. The new local scope created by a pair of brackets can be used to redefine variables which exist in the outer scope, or it can be used to define values which _cannot_ be accessed by the outer scope. This is a very handy way to help you organize your code\\!\n\nHowever, as we will see next brackets are not the only way to create a new local scope."
        },
        {
          "id": "hyOjHRwi",
          "type": "typescript",
          "title": "Creating Local Scope with a Function",
          "instructions": "Function declarations also create a local scope owned by that function within the function body. This makes the function body a unique namespace where you can define values or change values which \\(usually\\) will not impact the outer scope. Dive into the code to see what we mean\\!",
          "testCode": "test(\"Change the value of the `outerValue` variable in the `aPrivateFunctionSpace` space to be `\\\"Hello, from the inner side!\\\"`.\", () => {\n  const result = aPrivateFunctionSpace();\n  expect(result).toBe(\"Hello, from the inner side!\");\n  expect(outerValue).toBe(\"Hello, from the outer side!\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/aSZHIIuXWjE",
          "starterCode": "const outerValue = \"Hello, from the outer side!\";\n\n// The function creates it's only private scope\nconst aPrivateFunctionSpace = () => {\n    // Change the code here!\n    const outerValue = \"\";\n    return outerValue;\n}\n\nconst innerValue = aPrivateFunctionSpace();\n\n// Log the results\nconsole.log(`innerValue: ${innerValue}`);\nconsole.log(`outerValue: ${outerValue}`);",
          "solutionCode": "const outerValue = \"Hello, from the outer side!\";\n\n// The function creates it's only private scope\nconst aPrivateFunctionSpace = () => {\n    // Change the code here!\n    const outerValue = \"Hello, from the inner side!\";\n    return outerValue;\n}\n\nconst innerValue = aPrivateFunctionSpace();\n\n// Log the results\nconsole.log(`innerValue: ${innerValue}`);\nconsole.log(`outerValue: ${outerValue}`);",
          "content": "Just like `{...}` brackets, functions can be nested. You can create functions within functions, or brackets within functions, or vice versus. All of these create new unique scopes. And they can be very nested\\! For instance, consider the following code:\n\n```typescript\nconst aVeryScopedWorld = () => {\n  // The main function scope\n\n  {\n    // Some brackets scope\n    const anotherFunction = () => {\n      // Now we are inside a new function and new scope\n      for (let i = 0; i < 10; i++) {\n        // A new scope, yet again!\n\n        const theForLoopFunction = () => {\n          // A function defined inside the for loop!\n          // Yes, it also creates a new scope!\n          return i;\n        }\n\n        const result = theForLoopFunction();\n        console.log(result);\n      }\n    }\n  }\n}\n\n```\n\nOk, this is a bit overkill\\! But it should get the idea across. Each of these new functions or brackets creates a new local scope\\!\n\nAlso, it's worth pointing out how flexible TypeScript is here. You can create and nest different constructs like this in very flexible ways. This gives you a lot of options as you craft programs to perform tasks and also as you think about the design, organization, and architecture of your programs.\n\nFor instance, should you create that new function right here, in the body of another function, or should you write outside in order to better separate your code?"
        },
        {
          "id": "Mpgh4e9m",
          "type": "media",
          "title": "A Final Note on Scope",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "So far we have seen some simple examples of what scope is in a computer program and how it is defined by functions and block statements of code.\n\nOne of the main ways scope is useful is by giving you the ability to create separations between pieces of code. This helps to improve the organization and readability of your program, and it may prevent bugs and problems as well.\n\nHowever, scope is not the only tool a programmer has to accomplish a goal like this.\n\nLater on, you will learn how to write programs and build apps using a real code environment \\(not this fun editor playground in a browser\\!\\). When you reach that stage, you will have a lot of other tools at your disposal.\n\nFor example, you can define parts of your program in different files, put related files in different folders, and then _import_ values from one file into another. You can also control what you _import_ and _export_. This is a very powerful capability for organizing software programs. These same skills will also allow you to download open source code other people have written and import this code in your own projects as well\\! This is incredibly useful and opens the doors to building a number of interesting applications\\!\n\nYou will learn the details of this later, but for now just keep it in mind as a short preview and extension of the ideas of scopes which will come in handy later\\!\n\nTake a look at this code snippet for a short teaser:\n\n```typescript\n// This imports the library \"request\", which is open source and written\n// and maintained by other developers.\nimport request from \"request\";\n\n// The request library lets you make HTTP requests to URLs!\nrequest(\"http://www.google.com\", (error, response, body) => {\n  if (error) {\n    throw error;\n  } else {\n    console.log(\"Success!, Response received: \", body);\n    // Do somethine else here...\n  }\n});\n\n```\n"
        },
        {
          "id": "QwTb996sF",
          "type": "section",
          "title": "Closures",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# What is a Closure?\n\nA closure refers to the bundling of a function with its enclosing state. Closures are tricky concepts to understand, let's start with a simple example:\n\n```typescript\nconst name = \"Sam\";\n\nfunction closureDemonstration() {\n    // The name constant is defined in the outer scope\n    return name;\n}\n\n```\n\nThe `closureDemonstration` function returns the `name` variable which is defined in the outer scope. When `closureDemonstration` executes, it can \"capture\" references to values in the outer scope which are then available within the body of the function. This is what is referred to as a closure.\n\n> The `closureDemonstration` function has a \"closure\" on the `name` value\\.\n\nIn TypeScript, closures are created every time a function is created and prepared for execution. A closure refers simply to this characteristic of functions that they can capture references to values in their surrounding environment or scope.\n# Why Are Closures Useful?\n\nYou may be thinking \"That's interesting... but what's the point?\"\n\nClosures are useful for many reasons:\n\n* The module pattern depends on the existence of closures.\n* Closures provide way for sharing state and updating between functions.\n* Closures allow for function composition with unique properties.\n\n\nAlso, closures are useful for these meta\\-reasons:\n\n* Closures often come up in engineering interview questions.\n* Understanding closures can help to understand the general execution of functions and programs.\n\n# A Practical Example\n\nLet's see a practical application of closures:\n\n```typescript\n// Create a counter tool\nconst createCounter = (initialValue = 0) => {\n  let value = initialValue;\n\n  // The returned value as a private \"closure\" on the\n  // value variable\n  return {\n    increment: () => {\n      value = value + 1;\n    },\n    decrement: () => {\n      value = value - 1;\n    },\n    getValue: () => {\n      return value;\n    },\n  };\n};\n\nconst counter = createCounter(15);\n\ncounter.increment();\ncounter.increment();\ncounter.increment();\ncounter.getValue(); // -> 18\n\ncounter.value; // Property 'value' does not exist\n\n```\n\nHere we create and return a `counter` object which has a value and can be incremented or decremented. The counter tracks its state internally using a closure on the `value` variable _which cannot be accessed from the outside._\n\nThis, in essence, illustrates the idea of the module pattern. This design pattern allows us to hide state \\(and anything else we need, like other methods\\) from code outside. If you are building something with an external API, this allows you to separate the API from the implementation and keep the implementation private.\n\nClosures have many other practical applications as well, but the most important thing at this stage is to understand what they are and there basic application. This section will walk through some simple challenges which involve closures."
        },
        {
          "id": "Cbx3@SXTb",
          "type": "typescript",
          "title": "Create a Closure",
          "instructions": "Write a function `createClosure` which returns a new function. The new function should return whatever value you pass to the `createClosure` function\\. To accomplish this, just define a new function inside the function body of `createClosure`, and then return this function\\! That new function will have a _closure_ on the argument you pass to `createClosure`.\n\n> This challenge also demonstrates the very useful ability in TypeScript to _return functions from functions._\n",
          "testCode": "test(\"`createClosure` should be a function.\", () => {\n  expect(typeof createClosure === \"function\").toBe(true);\n});\n\ntest(\"`createClosure` should return a function which returns whatever value was passed to `createClosure`.\", () => {\n  const values = [\n    100,\n    1000,\n    1,\n    \"hi\",\n    \"apples\",\n    [true, false, true],\n    { hello: null },\n    false,\n    \"blegh\",\n    1436.23482,\n  ];\n\n  for (const x of values) {\n    expect(createClosure(x)()).toEqual(x);\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/_pVybfKNZdI",
          "starterCode": "// Your code here",
          "solutionCode": "const createClosure = (value: any) => {\n  // Return a new function which returns the value argument\n  return () => value;\n};\n",
          "content": ""
        },
        {
          "id": "GKr5sCqW5",
          "type": "typescript",
          "title": "Multiply By",
          "instructions": "Create a function `multiplyBy` which accepts a single number. This function returns a new function which accepts a number which multiplies that number by the original number passed to the `multiplyBy` function\\. The type `MultiplyByFunction` is present for you as a guide. For example:\n\n```typescript\n// Get a multiplier function:\nconst multiplyByFive = multiplyBy(5);\n\n// Use the multiplier function:\nconst ten = multiplyByFive(2);\nconst fifty = multiplyByFive(10);\n\n```\n",
          "testCode": "test(\"`multiplyBy` should be a function.\", () => {\n  expect(typeof multiplyBy === \"function\").toBe(true);\n});\n\ntest(\"`multiplyBy` should return a function.\", () => {\n  expect(typeof multiplyBy(100) === \"function\").toBe(true);\n});\n\ntest(\"`multiplyBy` should accept a value and return a new function which accepts a value and returns the result of multiplying the two values together.\", () => {\n  const values = [1, 6, 8, 9, 10, 11, 12, 23, 234, 532, 645, 234, 5463];\n  for (const x of values) {\n    const fn = multiplyBy(x);\n    expect(fn(x)).toBe(x * x);\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Y32lj5T9Y7A",
          "starterCode": "type MultiplyByFunction = (multiplier: number) => (value: number) => number;\n\n// Your code here",
          "solutionCode": "type MultiplyByFunction = (multiplier: number) => (value: number) => number;\n\n// Provide a function to multiply by a value\nconst multiplyBy: MultiplyByFunction = (multiplier: number) => {\n  // Return a new function to perform the multiplication\n  return (value: number) => multiplier * value;\n};\n",
          "content": ""
        },
        {
          "id": "G9UqP4kBe",
          "type": "typescript",
          "title": "Create a Counter Machine",
          "instructions": "Let's create a counter tool like in the earlier example, but this time let's add some more functionality. Create a function `createCounter` which accepts an argument like the defined `CounterArguments`. The function should return a `Counter` object, which has the properties of a counter. The counter should increment or decrement a value based on the `size` argument, and it should allow reading and setting the value with the `getValue` and `setValue` functions\\.",
          "testCode": "test(\"`createCounter` should be a function.\", () => {\n  expect(typeof createCounter === \"function\").toBe(true);\n});\n\ntest(\"`createCounter` should return a `Counter` object.\", () => {\n  const counter = createCounter({ initialValue: 10, size: 10 });\n  expect(typeof counter.increment).toBe(\"function\");\n  expect(typeof counter.decrement).toBe(\"function\");\n  expect(typeof counter.setValue).toBe(\"function\");\n  expect(typeof counter.getValue).toBe(\"function\");\n  expect(counter.size === undefined).toBe(true);\n  expect(counter.value === undefined).toBe(true);\n});\n\ntest(\"The `Counter` object should increment and decrement values using the provided `initialValue` and `size`.\", () => {\n  const counter = createCounter({ initialValue: 10, size: 10 });\n  expect(counter.getValue()).toBe(10);\n  counter.increment();\n  counter.increment();\n  counter.increment();\n  expect(counter.getValue()).toBe(40);\n  counter.increment();\n  expect(counter.getValue()).toBe(50);\n  counter.decrement();\n  counter.decrement();\n  counter.decrement();\n  counter.decrement();\n  counter.decrement();\n  expect(counter.getValue()).toBe(0);\n\n  // Reset value\n  counter.setValue(100);\n  expect(counter.getValue()).toBe(100);\n  counter.decrement();\n  counter.decrement();\n  counter.decrement();\n  expect(counter.getValue()).toBe(70);\n  counter.increment();\n  counter.increment();\n  counter.increment();\n  counter.increment();\n  counter.increment();\n  counter.increment();\n  expect(counter.getValue()).toBe(130);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/USCNRNCMqNk",
          "starterCode": "interface CounterArguments {\n  size: number;\n  initialValue: number;\n}\n\ninterface Counter {\n  increment: () => void;\n  decrement: () => void;\n  getValue: () => number;\n  setValue: (value: number) => void;\n}\n\ntype CounterMachine = (args: CounterArguments) => Counter;\n\n// Your code here",
          "solutionCode": "interface CounterArguments {\n  size: number;\n  initialValue: number;\n}\n\ninterface Counter {\n  increment: () => void;\n  decrement: () => void;\n  getValue: () => number;\n  setValue: (value: number) => void;\n}\n\nconst createCounter = (args: CounterArguments) => {\n  const { size, initialValue } = args;\n\n  // Value to track counter state, using a closure\n  let value = initialValue;\n\n  // Setter function\n  const setValue = (x: number) => {\n    value = x;\n  }\n\n  const counter: Counter = {\n    setValue,\n    getValue: () => value,\n    increment: () => setValue(value + size),\n    decrement: () => setValue(value - size),\n  };\n\n  return counter;\n}",
          "content": ""
        },
        {
          "id": "prlFliKCW",
          "type": "section",
          "title": "Arrays and Objects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "A bunch of values together in a bucket.\n\nCollections is a general term. When we talk about collections we're going to be talking about two data structures in TypeScript:\n\n* Arrays\n   * A list of things. Like a shopping list. \n   * You access things within the array using an index. Example: `myArray[2]`\n* Objects\n   * A group of things, usually related. Like a row in a spreadsheet.\n   * You access things using a property name, which is a string. Example: `myObject[\"name\"]`\n   * You can **also** access things using a dot, followed by the property name. Example: `myObject.name`\n      * This is more common, but only works if your property name doesn't have special symbols like hyphens.\n\n# The importance of collections\n\nCollections are yet another way of representing data. You've seen `string`, `number`, `boolean` but alone those types are insufficient to represent the data of the world. In order to represent real\\-world data we're going to need collections.\n\n## Why arrays are important\n\nList are _everywhere_. You may not have thought about it before, but there are list all over the place. It's wild\\!\n\n* This page is made up of a list of html tags like `p`, `h1`, etc. The text within those tags is also a list, a list of characters like `a`, `b`, `c`, `.`, etc.\n* Schools have lists of students and grades.\n* Companies have lists of employees, expenses, and customers.\n* If you wrote out everything you did today it would make a list.\n* A recipe contains a lists of ingredients and steps to complete a dish.\n* The contacts in your phone is a list.\n\n\nThe list goes on \\(pun very much intended\\). The point is if we want to represent any of these things digitally we need the concept of a list in our programs. In TypeScript this takes the form of the `Array`.\n\n## Why objects are important\n\nThe idea of an object is a \"thing\" that has properties. For example, you—being a person—probably have a name, a job, and a _list_ of favorite HTML colors:\n\n```typescript\nconst me = {\n  name: \"Ian\",\n  job: \"Building Pairwise\",\n  favoriteHTMLColors: [\"Salmon\", \"Tomato\", \"Lime\"],\n};\n\n```\n\nYou see what I did there? An object con contain a list and likewise a list can also contain an object. TypeScript is very flexible like this.\n\n```typescript\nconst people = [\n  {\n    name: \"Ian\",\n    job: \"Building Pairwise\",\n    favoriteHTMLColors: [\"Salmon\", \"Tomato\", \"Lime\"]\n  },\n  {\n    name: \"Sean\",\n    job: \"Building Pairwise\",\n    favoriteHTMLColors: [\"SeaShell\", \"Coral\", \"MediumSeaGreen\"]\n  }\n];\n\n```\n\\(Sean doesn't yet know he favors the \"beach theme\" of HTML colors 🤫\\)\n\nAnother way to visualize the data above in the `people` array is as a table. Consider this more familiar form: \n| **Name** | **Job** | **Favorite HTML Colors** |\n|:--- |:--- |:--- |\n| Ian | Building Pairwise | Salmon, Tomato, Lime |\n| Sean | Building Pairwise | SeaShell, Coral, MediumSeaGreen |\n\nLook at that\\! By adding arrays and objects to our arsenal we can suddenly represent tabular data, which means we can represent anything you can put into a spreadsheet \\(quite literally, just look at Google Sheets\\).\n\nWe can even build on top of objects and arrays to create new data structures. \n# Syntax\n\nOK, now that we  know _why_ let's talk about _how_. The syntax for arrays and objects is fairly simple, but it may not be intuitive.\n\n## Creating Arrays and Objects\n\n```typescript\nconst htmlColors = [\"Salmon\", \"Tomato\", \"Lime\"];\nconst cat = {\n  name: \"Maomi\",\n  job: \"Napping\",\n  favoriteHTMLColors: [\"LightSalmon\", \"Salmon\", \"DarkSalmon\"] // Yes, these are real colors\n};\n\n```\n\nWe've created a new array with three wonderful HTML color names inside it and we've created a new `cat` object with some cat\\-appropriate properties.\n\n> **Syntax Specifics**\n> To create an array place any valid values separated by `,`within `[` and `]`\n> To create an object\n> \n> \n>    * Open `{` and `}` brackets\n>    * With the brackets use a string, followed by `:` , followed by any valid value to create a key\\-value pair\n\n## Using Arrays and Objects\n\n```typescript\nconsole.log(htmlColors[1]); // => \"Tomato\"\nconsole.log(cat.job); // \"Napping\"\nconsole.log(cat.favoriteHTMLColors[0]); // \"LightSalmon\"\n\n```\n\nHere we log three things out to the console.\n\n1. Log the string at index `1` of the `htmlColors` array\\.\n1. Log the value associated with the key `job` on the `cat` object\\.\n1. Log the string at index `0` of the array at key `favoriteHTMLColors` on the `cat` object\\.\n\n\nThe third line is an example of using nested selectors. \n\n> **Syntax Specifics**\n> To access an element within an array use a number placed between `[` and `]` after the array\n> To access a value associated with a key on an object place the key after a the object and a `.`\n> Alternatively, objects can use the same syntax as arrays except rather than a number use a string: `console.log(cat[\"name\"]);`\n"
        },
        {
          "id": "UMroK7wKl",
          "type": "typescript",
          "title": "Create Arrays",
          "instructions": "Create three arrays `stringArray`, `numArray`, and `boolArray`, each of which contains only strings, numbers, and booleans respectively.",
          "testCode": "test(\"`stringArray`, `numArray`, `boolArray` should not be null\", () => {\n  [stringArray, numArray, boolArray].forEach(x => {\n    expect(x).not.toBe(null);\n  });\n});\n\ntest(\"`stringArray`, `numArray`, `boolArray`  should be an arrays\", () => {\n  [stringArray, numArray, boolArray].forEach(x => {\n    expect(Array.isArray(x)).toBe(true);\n  });\n});\n\ntest(\"`stringArray` should be an array of strings\", () => {\n  expect(stringArray.length).toBeGreaterThan(0);\n  expect(stringArray.every(x => typeof x === \"string\")).toBe(true);\n});\ntest(\"`numArray` should be an array of numbers\", () => {\n  expect(numArray.length).toBeGreaterThan(0);\n  expect(numArray.every(x => typeof x === \"number\")).toBe(true);\n});\ntest(\"`boolArray` should be an array of booleans\", () => {\n  expect(boolArray.length).toBeGreaterThan(0);\n  expect(boolArray.every(x => typeof x === \"boolean\")).toBe(true);\n});",
          "videoUrl": "https://www.youtube.com/embed/ogAoK1_fnCc",
          "starterCode": "const stringArray: string[] = null;\nconst numArray: number[] = null;\nconst boolArray: boolean[] = null;\n",
          "solutionCode": "const stringArray: string[] = [\"hey\"];\nconst numArray: number[] = [1,2,3];\nconst boolArray: boolean[] = [true];\n",
          "content": ""
        },
        {
          "id": "@B$1sGvtR",
          "type": "typescript",
          "title": "Using Arrays",
          "instructions": "* Update `fifthNumber` to be the fifth number in the `numbers` array\n   * Hint: See how `fifthString` is defined.\n* Create the variable `firstNumber` and assign it to be the first number in the `numbers` array\\.\n* Create the variable `number88` and set assign it to be the 88th number of `largerArray`.\n* Use the `push` method to add two new elements to the end of the `strings` array\n   * Hint: The array will end up being `[\"hey\", \"this\", \"is\", \"an\", \"array\", \"of\", \"strings\", \"without\", \"booleans\"]`\n\n\n**NOTE: **It's very common to be off by one when working with arrays. Use `console.log` to see what element you're accessing from an array to see if you're accidentally using an index that's off by one.",
          "testCode": "// Write your tests here:\ntest(\"`fifthString`, `strings`, `numbers` should all be defined\", () => {\n  expect(fifthString).toBeDefined();\n  expect(strings).toBeDefined();\n  expect(numbers).toBeDefined()\n});\ntest(\"`fifthString` should be the fifth element of the `strings` array\", () => {\n  expect(fifthString).toBe(strings[4]);\n});\ntest(\"`fifthNumber` should be defined\", () => {\n  expect(fifthNumber).toBeDefined();\n});\ntest(\"`fifthNumber` should be the fifth number of the `numbers` array\", () => {\n  expect(fifthNumber).toBe(numbers[4]);\n});\ntest(\"`firstNumber` should be the fifth number of the `numbers` array\", () => {\n  expect(firstNumber).toBe(numbers[0]);\n});\ntest(\"`number88` should be the 88th number of the `largerArray` array\", () => {\n  expect(number88).toBe(largerArray[87]);\n});\ntest(\"`strings` should have `\\\"without\\\"`, `\\\"booleans\\\"` append to the end\", () => {\n  expect(strings).toEqual([\"hey\", \"this\", \"is\", \"an\", \"array\", \"of\", \"strings\", \"without\", \"booleans\"]);\n})",
          "videoUrl": "https://www.youtube.com/embed/3xnZnqUEx7M",
          "starterCode": "const strings = [\"hey\", \"this\", \"is\", \"an\", \"array\", \"of\", \"strings\"];\nconst numbers = [1, 2, 3, 4, 5];\n\n// This is an array of 300 numbers. Don't worry about .fill or .map right now,\n// we're just using these functions to create a large array without writing out\n// 300 elements by hand.\nconst largerArray = Array(300)\n  .fill(1)\n  .map((x, i) => (x + i) * i);\n\n// This one is completed for you to show off zero-based indexing (There's another challenge on this)\nconst fifthString = strings[4];\nconsole.log(`The fifth string is: \"${fifthString}\"`)\n\n//\n// Your code below\n//\nconst fifthNumber = undefined;\nconst firstNumber = undefined;\nconst number88 = undefined;\n",
          "solutionCode": "const strings = [\"hey\", \"this\", \"is\", \"an\", \"array\", \"of\", \"strings\"];\nconst numbers = [1, 2, 3, 4, 5];\n\n// This is an array of 300 numbers. Don't worry about .fill or .map right now,\n// we're just using these functions to create a large array without writing out\n// 300 elements by hand.\nconst largerArray = Array(300)\n  .fill(1)\n  .map((x, i) => (x + i) * i);\n\n// This one is completed for you to show off zero-based indexing (There's another challenge on this)\nconst fifthString = strings[4];\nconsole.log(`The fifth string is: \"${fifthString}\"`)\n\n//\n// Your code below\n//\nconst fifthNumber = numbers[4];\nconst firstNumber = numbers[0];\nconst number88 = largerArray[87];\n\nstrings.push(\"without\");\nstrings.push(\"booleans\");",
          "content": ""
        },
        {
          "id": "EHIj@pzdY",
          "type": "typescript",
          "title": "Zero-Based Indexes",
          "instructions": "* Set `numElements` to the number of elements in the `things` array\\. In other words, the length of the array.\n   * NOTE: Use the `length` property of the array rather than hard\\-coding a number. The array is very short so you can clearly see there are only 4 elements, but in practice it won't always be clear how many elements an array has. The `length` property gives us this information on\\-demand.\n* Set `first` equal to the first element of the `things` array\\.\n* Set `last` equal to the last element of the `things` array\\.\n\n\nRather than copying directly use array indexing to grab the value using it's index.",
          "testCode": "// Write your tests here:\ntest(\"`numElements` is equal to the length of the array\", () => {\n  expect(numElements).toBe(things.length);\n});\ntest(\"`first` is equal to the first element of the array\", () => {\n  expect(first).toBe(things[0]);\n});\ntest(\"`last` is equal to the last element of the array\", () => {\n  expect(last).toBe(things[things.length - 1]);\n});\n\n",
          "videoUrl": "https://www.youtube.com/embed/8phtrhNCcHg",
          "starterCode": "const things = [\"pears\", \"peaches\", \"apples\", \"juicer\"];\n\nconst numElements = undefined;\nconst first = undefined;\nconst last = undefined;\n\n",
          "solutionCode": "const things = [\"pears\", \"peaches\", \"apples\", \"juicer\"];\n\nconst numElements = things.length;\nconst first = things[0];\nconst last = things[things.length - 1];\n\n",
          "content": "# Zero\\-based?\n\nWhat this means is that the very first element of an array will always be at index zero. I.e. `someArray[0]`. This may be counterintuitive. For example if there are 8 elements in your array \\(i.e. the `length` is eight\\) and you want the last element you might be tempted to write `someArray[8]`. However, this will give you `undefined` for your troubles because the last element is actually at index `7`.\n# When in doubt, log it out\n\nOver time you will get used to this fact and you will not need to think much to work with arrays by index. However, it can get pretty confusing trying to think about what's at which index using simply your brain—after all, that's what computers are for. If you're ever in doubt just drop a `console.log` into your code somewhere and see what value you're actually getting.\n# Useful beyond TypeScript\n\nZero\\-based indexes is a fairly foundational concept in programming so it's worth trying to remember this early on. Mainstream programming languages such as Python, Ruby, PHP, Java, Swift, C\\# and of course JavaScript all use zero\\-based indexes. In fact, if you work as a software engineer or you write software for any reason at all the chances are overwhelmingly that you'll be using a language with zero\\-based indexes.\n\nAs with much of what you're learning in this course this knowledge is foundational."
        },
        {
          "id": "KOlr7dhnP",
          "type": "typescript",
          "title": "Create Objects",
          "instructions": "Create a single object named `cat` based on the following table:\n| **name** | **job** | **favoriteSubreddit** |\n|:--- |:--- |:--- |\n| Maomi | Napping | https://www.reddit.com/r/cats/ |\n",
          "testCode": "// Write your tests here:\ntest(\"`cat` should not be null\", () => {\n  expect(cat).not.toBe(null);\n});\n\nconst x = {\n  name: \"Maomi\",\n  job: \"Napping\",\n  favoriteSubreddit: \"https://www.reddit.com/r/cats/\",\n};\n\nObject.keys(x).forEach((k) => {\n  test(`\\`cat\\` should have a \\`${k}\\` of \\`${x[k]}\\``, () => {\n    expect(cat[k]).toBe(x[k]);\n  });\n});\n",
          "videoUrl": "https://www.youtube.com/embed/3K3Kyh-ritQ",
          "starterCode": "const cat = null;",
          "solutionCode": "const cat = {\n  name: \"Maomi\",\n  job: \"Napping\",\n  favoriteSubreddit: \"https://www.reddit.com/r/cats/\",\n};\n",
          "content": ""
        },
        {
          "id": "B@oHTd2Ha",
          "type": "typescript",
          "title": "Using Objects",
          "instructions": "* Set the cat's name \\(`cat.name`\\) to be Jarvis.\n* Set the cat's job to be `\"Coding\"` using the `JOB_PROPERTY` variable rather than using the `job` property directly.\n   * In other words, don't use `cat.job`, instead use bracket syntax to set the job property by using the `JOB_PROPERTY` variable\\.\n   * This covers setting a property defined in a variable, which is much more flexible than setting a hard\\-coded property.\n\n",
          "testCode": "test(\"`cat` should be defined\", () => {\n  expect(cat).toBeDefined();\n});\ntest(\"`cat.name` should be `\\\"Jarvis\\\"`\", () => {\n  expect(cat.name).toBe(\"Jarvis\");\n});\ntest(\"`cat.job` should be set to the value of `\\\"Coding\\\"`\", () => {\n  expect(cat[JOB_PROPERTY]).toBe(\"Coding\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/RUC41x5ao3w",
          "starterCode": "// Typescript wants to know what things are beforehand, so this defintion\n// tells it we just want an object with all string values.\ntype StringsObject = { [k: string]: string };\n\nconst cat: StringsObject = {};\n\nconst JOB_PROPERTY = \"job\";\n\n//\n// Your code here\n// Modify the cat object \n",
          "solutionCode": "// Typescript wants to know what things are beforehand, so this defintion\n// tells it we just want an object with all string values.\ntype StringsObject = { [k: string]: string };\n\nconst cat: StringsObject = {};\n\nconst JOB_PROPERTY = \"job\";\n\ncat.name = \"Jarvis\";\ncat[JOB_PROPERTY] = \"Coding\";\n",
          "content": ""
        },
        {
          "id": "NEKvEvei4",
          "type": "typescript",
          "title": "Objects and Arrays Together",
          "instructions": "Create an array of objects to represent the following table. Name the array `catParty`.\n**NOTE**: The cat named Jello does not have a favorite subreddit. Use `null` to represent this.\n| **name** | **job** | **favoriteSubreddit** |\n|:--- |:--- |:--- |\n| Maomi | Napping | https://www.reddit.com/r/cats |\n| Jarbles | Sleeping | https://www.reddit.com/r/cute |\n| Jello | Playing |  |\n",
          "testCode": "// Write your tests here:\ntest(\"`catParty` should be an array\", () => {\n  expect(Array.isArray(catParty)).toBe(true);\n});\n\ntest(\"Every object in `catParty` should have `name`, `job`, `favoriteSubreddit` keys.\", () => {\n  catParty.forEach((x) => {\n    expect(x).toHaveProperty(\"name\");\n    expect(x).toHaveProperty(\"job\");\n    expect(x).toHaveProperty(\"favoriteSubreddit\");\n  });\n});\n\ntest(\"There should be three cats in the party\", () => {\n  expect(catParty.length).toBe(3);\n})\n\n// This test would do it, but the others give more context to the user\ntest(\"Jello should have a favoriteSubreddit of `null`\", () => {\n  expect(catParty).toHaveProperty([2, 'favoriteSubreddit'], null);\n})\n\n// This test would do it, but the others give more context to the user\ntest(\"The three objects should match the three rows in the table\", () => {\n  const _expected = [\n    {\n      name: \"Maomi\",\n      job: \"Napping\",\n      favoriteSubreddit: \"https://www.reddit.com/r/cats\",\n    },\n    {\n      name: \"Jarbles\",\n      job: \"Sleeping\",\n      favoriteSubreddit: \"https://www.reddit.com/r/cute\",\n    },\n    {\n      name: \"Jello\",\n      job: \"Playing\",\n      favoriteSubreddit: null,\n    },\n  ]\n\n  expect(catParty).toEqual(_expected);\n})",
          "videoUrl": "https://www.youtube.com/embed/PHu1R1-Vs0I",
          "starterCode": "const catParty = null;",
          "solutionCode": "const catParty = [\n  {\n    name: \"Maomi\",\n    job: \"Napping\",\n    favoriteSubreddit: \"https://www.reddit.com/r/cats\",\n  },\n  {\n    name: \"Jarbles\",\n    job: \"Sleeping\",\n    favoriteSubreddit: \"https://www.reddit.com/r/cute\",\n  },\n  {\n    name: \"Jello\",\n    job: \"Playing\",\n    favoriteSubreddit: null,\n  },\n];\n",
          "content": ""
        },
        {
          "id": "sZBviRApf",
          "type": "typescript",
          "title": "Thinking in Terms of Data",
          "instructions": "Use nested arrays to model a tic\\-tac\\-toe board.",
          "testCode": "// Write your tests here:\ntest(\"`xWins` should have a winning X row\", () => {\n  expect(typeof xWins).not.toBe(\"undefined\");\n  expect(hasWinner(1, xWins)).toBe(true);\n});\n\ntest(\"`oWins` should have a winning O row\", () => {\n  expect(typeof xWins).not.toBe(\"undefined\");\n  expect(hasWinner(2, oWins)).toBe(true);\n});\n\nfunction hasWinner(winner, board) {\n  for (let i = 0; i < board.length; i++) {\n    // Rows\n    let rowSum = 0;\n    let colSum = 0;\n    for (let j = 0; j < board.length; j++) {\n      rowSum += board[i][j];\n      colSum += board[j][i];\n    }\n\n    if (rowSum === winner * 3) {\n      return true;\n    }\n    if (colSum === winner * 3) {\n      return true;\n    }\n  }\n  const d1 = [board[0][0], board[1][1], board[2][2]].reduce((a, b) => a + b);\n  const d2 = [board[0][2], board[1][1], board[2][0]].reduce((a, b) => a + b);\n  if (d1 === winner * 3 || d2 === winner * 3) {\n    return true;\n  }\n  return false;\n}\n",
          "videoUrl": "https://www.youtube.com/embed/CNS7talFD4Y",
          "starterCode": "const _ = 0; // We'll ues the underscore to mean \"empty\"\nconst X = 1;\nconst O = 2;\n\n// number[][] is the same as Array<Array<number>>\n// It's an array of arrays of numbers.\ntype BoardState = number[][];\n\n// Here's an example of creating a board based on nested arrays of numbers\nconst emptyBoard: BoardState = [\n  [_, _, _],\n  [_, _, _],\n  [_, _, _],\n];\n\nconst xWins: BoardState = [];\n\nconst oWins: BoardState = [];\n\nconsole.log(\"emptyBoard\");\nconsole.log(printBoard(emptyBoard));\nconsole.log(); // This just adds a new line in the console\nconsole.log(\"xWins\");\nconsole.log(printBoard(xWins));\nconsole.log();\nconsole.log(\"oWins\");\nconsole.log(printBoard(oWins));\n\n// -----------------------------------------------------\n// We've provided this function to help print out the board but you can ignore if it you want.\nfunction printBoard(rows: BoardState) {\n  const labelMap: any = { [_]: \"-\", [X]: \"X\", [O]: \"O\" };\n  return rows\n    .map((row) => {\n      return row.map((x: any) => labelMap[x]).join(\" \");\n    })\n    .join(\"\\n\");\n}\n",
          "solutionCode": "const _ = 0; // We'll ues the underscore to mean \"empty\"\nconst X = 1;\nconst O = 2;\n\n// number[][] is the same as Array<Array<number>>\n// It's an array of arrays of numbers.\ntype BoardState = number[][];\n\nconst emptyBoard: BoardState = [\n  [_, _, _],\n  [_, _, _],\n  [_, _, _],\n];\n\nconst xWins: BoardState = [\n  [X, _, _],\n  [_, X, _],\n  [_, _, X],\n];\n\nconst oWins: BoardState = [\n  [_, _, _],\n  [O, O, O],\n  [_, _, _],\n];\n\nconsole.log(\"xWins\");\nconsole.log(printBoard(xWins) + \"\\n\\n\");\n\nconsole.log(\"oWins\");\nconsole.log(printBoard(oWins));\n\nfunction printBoard(rows: BoardState) {\n  const labelMap: any = { [_]: \"-\", [X]: \"X\", [O]: \"O\" };\n  return rows\n    .map((row) => {\n      return row.map((x: any) => labelMap[x]).join(\" \");\n    })\n    .join(\"\\n\");\n}",
          "content": "The purpose of this lesson is to get you started thinking about how you can use data to model real\\-world situations like a tic tac toe game.\n\nUsing arrays and objects you can model anything you want. You can even use these data structures to create new data structures of your own that are useful in different ways. "
        },
        {
          "id": "b0uiUUzxT",
          "type": "section",
          "title": "Built-in Functions",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now that you've had a chance to look at the concept of functions we have some good news. There are many that are provided for you without writing any code\\! \n\n> \n> ### Jargon Time: The Standard Library\n> \n> Every programming language has functions or helpers that are provided for you out of the box. This is known as a **standard library** or standard \"lib\" for short.\n\nIn this section we'll cover things like `map`, `filter`, and `reduce`, which are fundamental concepts in programming. "
        },
        {
          "id": "dDOPoaBsH",
          "type": "typescript",
          "title": "Replacing Text",
          "instructions": "Write the `stripSpaces` function so that any string passed in to it will have all spaces stripped out. Examples:\n\n```\nstripSpaces(\"     \"); // => \"\"\nstripSpaces(\"Welcome to Pairwise\"); // => \"WelcometoPairwise\"\nstripSpaces(\"   Hello.   \"); // => \"Hello.\"\n\n```\n\n**NOTE:** The space character \\(`\" \"`\\) is not special like the period and does not need a `\\` in front of it to work in a regex.\n\nUsing regex is not intuitive so we've provided some examples in the code below. Check out the console output and scroll down to the content area for additional information.",
          "testCode": "// Write your tests here:\ntest(\"`stripSpaces` should strip all spaces from a string\", () => {\n  expect(stripSpaces(\"\")).toBe(\"\")\n  expect(stripSpaces(\"Welcome to Pairwise\")).toBe(\"WelcometoPairwise\");\n  expect(stripSpaces(\"     \")).toBe(\"\");\n  expect(stripSpaces(\"   Hello.   \")).toBe(\"Hello.\");\n});\n",
          "videoUrl": "",
          "starterCode": "const oddGreeting = \"hey. you. there.\";\n\nconsole.log(oddGreeting.replace(\"e\", \"[--E--]\"));  // Replaces only one \"e\"\nconsole.log(oddGreeting.replace(/e/, \"[--E--]\"));  // Repalces only one \"e\" (same as above)\nconsole.log(oddGreeting.replace(/e/g, \"[--E--]\")); // Replaces ALL \"e\"s\n//                                 👆 NOTICE THAT g, it's very important\n\n// Some characters are special and require a \\ in front of them. The period character for example.\nconsole.log(oddGreeting.replace(\".\", \"[--PERIOD--]\"));   // Replaces only one period\nconsole.log(oddGreeting.replace(/\\./, \"[--PERIOD--]\"));  // Repalces only one period (same as above)\nconsole.log(oddGreeting.replace(/\\./g, \"[--PERIOD--]\")); // Replaces ALL periods\n//                                  👆 NOTICE THAT g, it's very important\n\ntype StringFunction = (str: string) => string;\n\nconst stripPeriods: StringFunction = (str) => {\n  return str.replace(/\\./g, \"\");\n};\n\n// Your code here\nconst stripSpaces: StringFunction = undefined;\n",
          "solutionCode": "const oddGreeting = \"hey. you. there.\";\n\nconsole.log(oddGreeting.replace(\"e\", \"[--E--]\")); // Replaces only one \"e\"\nconsole.log(oddGreeting.replace(/e/, \"[--E--]\")); // Repalces only one \"e\" (same as above)\nconsole.log(oddGreeting.replace(/e/g, \"[--E--]\")); // Replaces ALL periods\n//                                  👆NOTICE THAT g, it's very important\n\n// Some characters are special and require a \\ in front of them. Perios is one such case.\nconsole.log(oddGreeting.replace(\".\", \"[--PERIOD--]\")); // Replaces only one period\nconsole.log(oddGreeting.replace(/\\./, \"[--PERIOD--]\")); // Repalces only one period (same as above)\nconsole.log(oddGreeting.replace(/\\./g, \"[--PERIOD--]\")); // Replaces ALL periods\n//                                  👆NOTICE THAT g, it's very important\n\ntype StringFunction = (str: string) => string;\n\nconst stripPeriods: StringFunction = (str) => {\n  return str.replace(/\\./g, \"\");\n};\n\n// Your code here\nconst stripSpaces: StringFunction = (x) => {\n  return x.replace(/ /g, \"\");\n};\n",
          "content": "Replacing text is all about transforming one string into another string. Some really common uses for text replacement are:\n\n* Remove unwanted characters from a string. In other words, replacing unwanted characters with an empty string.\n* \"Escape\" characters in a string to make it viable as a URL \\(Ever wonder why URLs don't have spaces in them?\\)\n* Turn plain text URLs into `a` tags so they can be clicked. For example: `http://example.com` can be replaced with `<a href=\"http://example.com>http://example.com</a>` and it will become clickable in a browser.\n\n# Replacing text is unintuitive\n\nUnfortunately, text replacement might not work as you expect. Consider this example:\n\n```typescript\n\"hello fellow learners\".replace(\" \", \"_\"); // => ???\n\n```\n\nWhat would you expect this to return? Intuitively you might expect all spaces to be replaced by underscores \\(\"\\_\"\\) but that's not the case. Only the fist space will get replaced:\n\n```typescript\n\"hello fellow learners\".replace(\" \", \"_\"); // => \"hello_fellow learners\"\n\n```\n\nHm\\... 🤔 This might be what you want but usually it's more useful to replace _every_ occurrence of a string. In this case what we want is `\"hello_fellow_learners\"`. In order to get that we need to use regular expressions—regex for short. Let's look at how we would make the previous example replace _all spaces_ with underscore.\n\n```typescript\n\"hello fellow learners\".replace(/ /g, \"_\"); // => \"hello_fellow_learners\"\n\n```\n# Using Regex for String Replacement\n\nThe `replace` function can work with just a string as the first argument, but if you want to do more advanced replacements or even simply replace all occurrences of a string you will need to use regex.\n\n\n## Replacing All Occurrences\n\nThe key to replacing all matched strings is to use a global regex, namely the `g` flag\\.\n\n```typescript\n\"hello fellow learners\".replace(/ /g, \"_\"); // => \"hello_fellow_learners\"\n\n```\n\nLet's look at that example from above again. Take note of the `g` directly after the regex matching the space character \\(`/ /`\\). That `g` flat informs the `replace` function that we want to replace _globally_ rather than just the first occurrence.\n\nIf we were to leave out the `g` flat we would get the same result as when we used a string.\n\n```typescript\n\"hello fellow learners\".replace(/ /, \"_\"); // => \"hello_fellow learners\"\n\n```\n# Getting the Right Regex\n\nConsidering how obscure regex syntax can be, we recommend using a tool to build up regex unless you're already familiar with the replacement you want to do. In the starter code for this challenge we used the regex `/\\./g` to replace all periods in a string. You can find an interactive example of that regex [here](https://regex101.com/r/9y1K7w/1).\n\n## Use Regex 101\n\nIn general, we recommend that whenever you're unsure of a regex you use an online tool for visualizing the results of your regex. At present we recommend Regex 101.\n\n* [Regex101\\.com](https://regex101.com/r/9y1K7w/1)\n\n"
        },
        {
          "id": "yOKFRV46u",
          "type": "typescript",
          "title": "Finding an Index",
          "instructions": "Use array methods to find the indices of the following:\n\n* The number `34` in the `numbers` array\\.\n* The object `{ name: \"Julie\", role: \"HR\" }` in the `people` array\\.\n\n\n**HINT**: There are two functions we're primarily concerned with here. Scroll down to the course content for more details.",
          "testCode": "// Write your tests here:\ntest(\"The index of `34` in `numbers` is correctly logged to the console\", () => {\n  const logs = parseLogBox(__secret_log_box);\n  expect(logs).toContain(\n    `The index of 34 in the numbers array is ${numbers.indexOf(34)}`\n  );\n});\ntest('The index of `{ name: \"Julie\", role: \"HR\" }` in `people` is correctly logged to the console', () => {\n  const logs = parseLogBox(__secret_log_box);\n  expect(logs).toContain(\n    `The index of the person named Julie in the people array is ${people.findIndex(x => x.name === \"Julie\")}`\n  );\n});\ntest(\"`indexOf` should be used\", () => {\n  expect(__user_code_string__).toMatch(/.+\\.indexOf/);\n});\ntest(\"`findIndex` should be used\", () => {\n  expect(__user_code_string__).toMatch(/.+\\.findIndex/);\n});\n",
          "videoUrl": "",
          "starterCode": "const numbers = [1, 5, 6, -2, 34, 6.1, 0, 12];\n\nconst people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"HR\" },\n];\n\nconsole.log(`The index of 34 in the numbers array is ${undefined}`);\nconsole.log(\n  `The index of the person named Julie in the people array is ${undefined}`\n);\n",
          "solutionCode": "const numbers = [1, 5, 6, -2, 34, 6.1, 0, 12];\n\nconst people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"HR\" },\n];\n\nconsole.log(`The index of 34 in the numbers array is ${numbers.indexOf(34)}`);\nconsole.log(\n  `The index of the person named Julie in the people array is ${people.findIndex(\n    (x) => x.name === \"Julie\"\n  )}`\n);\n",
          "content": "Finding the index of something in an array is often very important, more important than you might think. Consider this list of todos:\n\n```\nconst todos = [\n  { title: \"Buy soymilk\", completed: true },\n  { title: \"Write finding indices challenge\", completed: false },\n  { title: \"Bake cookies\", completed: true },\n];\n\n```\n\nThis list could serve as the data behind a simple todo app. Now imagine you have such an app and you click a checkbox to complete the middle item `\"Write finding indices challenge\"`. Before you click the app might look like this:\n\n![](/assets/yOKFRV46u/14d3762625a2d63ead4bb83896bf3cea_todo.png)\nOnce you click the todo item to complete it you will want to update the array to reflect that. If we know the index it's quite simple, if relatively verbose:\n\n```\nlet todos = [\n  { title: \"Buy soymilk\", completed: true },\n  { title: \"Write finding indices challenge\", completed: false },\n  { title: \"Bake cookies\", completed: true },\n];\n\n// Before\nconsole.log(todos[index].completed); // false\n\nconst index = /* ??? */;\n\ntodos = [\n  ...todos.slice(0, index),\n  {\n    ...todos[index],\n    completed: true,\n  },\n  ...todos.slice(index + 1),\n];\n\n// After\nconsole.log(todos[index].completed); // true\n\n```\n\nIn this case the index would be `1`, which you can tell just by looking at the tiny array, but what if we have 200 todos or 2000? It becomes necessary to find the index without having to look at it with our human eyes. We need the computer to find it for us.\n# indexOf\n\nTaking a step back from the todos example, let's consider a simple list of numbers:\n\n```typescript\nconst numbers = [1, 2, 3, 4, 5, 5, 256];\n\n```\n\nWhat's the index of `256`? Again you can tell just by looking at the array for a second but we want the computer to tell us. To do this we can use the `indexOf` function\\.\n\n```typescript\nnumbers.indexOf(256); // => 6\n\n```\n\nGreat\\! But we can pass anything into `indexOf`, what if we ask for something that doesn't exist in the array?\n\n```typescript\nnumbers.indexOf(8); // => -1\n\n```\n\n`-1` what's going on there 🤔?\n\n## Why indexOf can return \\-1\n\nThe reason for this oddity is that `-1` is an invalid index. So by returning an invalid index `indexOf` is telling us that there is no `8` in the array.\n# findIndex\n\n`indexOf` is great for finding a specific thing when you know exactly what that thing is. Finding `256` was easy because we knew exactly what we were looking for and we could tell the computer. However, sometimes you need to find items based on criteria rather than a specific value. There is a function just for this called `findIndex`.\n\nThis brings us back to the todo list example. We can fill in the question marks from earlier with `findIndex`:\n\n```typescript\nlet todos = [\n  { title: \"Buy soymilk\", completed: true },\n  { title: \"Write finding indices challenge\", completed: false },\n  { title: \"Bake cookies\", completed: true },\n];\n\n// Before\nconsole.log(todos[index].completed); // false\n\nconst index = todos.findIndex(\n  x => x.title === \"Write finding indices challenge\"\n);\n\ntodos = [\n  ...todos.slice(0, index),\n  {\n    ...todos[index],\n    completed: true,\n  },\n  ...todos.slice(index + 1),\n];\n\n// After\nconsole.log(todos[index].completed); // true\n\n```\n# When is this useful?\n\nBoth of these functions do the same thing, but `findIndex` allows you more flexibility in what you search for. To this end they are both used in the same general case: You have an array and you want to find the index of some item within it.\n\nIf you are dealing with a simple array of strings, numbers, booleans, etc. `indexOf` is likely an easier choice, but `findIndex` can work as well.\n\nIf you are working with an array of objects or other arrays you will need to use `findIndex` to find what you are looking for based on some property of the object or the array. In the example above we used the `title` property to find the todo item we were looking for.\n\n---\n\n**NOTE:** If you just want to check if something exists in an array and you don't care _where_ in the array it is then use `includes`. Since both `findIndex` and `indexOf` return `-1` when something is not found they are less useful with conditional statements. See the following code:\n\n```typescript\nconst numbers = [1, 2, 3, 4, 5, 5, 256];\n\n// This will not work, because indexOf(8) is -1 and if (-1) { ... } \n// is equivalent to if (true) { ... }. Only the number 0 is considered\n// false.\nif (numbers.indexOf(8)) {\n  console.log(\"Found 8\"); // This will log even though 8 is not in the array\n} else {\n  console.log(\"Could not find 8\");\n}\n\n// Using includes(8) gives us the answer we expect.\nif (numbers.includes(8)) {\n  console.log(\"Found 8\");\n} else {\n  console.log(\"Could not find 8\"); // This will log correctly, because 8 is not in the arary\n}\n\n```\n"
        },
        {
          "id": "B3mNHCb$m",
          "type": "typescript",
          "title": "Transform Array Items Using Map",
          "instructions": "* Using `.map` square all numbers in the `numbers` array \\(multiply them all by themself\\) and assign it to `squares`.\n   * The resulting array will be `[1,4,9,16,25]` but you should use `.map` to get it rather than writing it out directly.\n* Using `.toUpperCase` transform the `lowercase` string to all caps and assign it to `uppercase`.\n   * We're mainly talking about `.map` in this lesson, but being able to transform a string to uppercase is also useful and will help us with future challenges.\n\n",
          "testCode": "// Write your tests here:\ntest(\"`squares` should be an array of the squares of elements of `numbers`\", () => {\n  expect(squares).toEqual([1, 2, 3, 4, 5].map(x => x * x));\n});\ntest(\"`uppercase` should be the all-caps version of `lowercase`\", () => {\n  expect(uppercase).toBe(lowercase.toUpperCase());\n});\n",
          "videoUrl": "",
          "starterCode": "const numbers = [1,2,3,4,5];\nconst lowercase = \"cats like sleeping\";\n\nconst squares = undefined;\nconst uppercase = undefined;",
          "solutionCode": "const numbers = [1,2,3,4,5];\nconst lowercase = \"cats like sleeping\";\n\nconst squares = numbers.map(x => x * x);\nconst uppercase = lowercase.toUpperCase();",
          "content": "# Mapping\n\nThe idea of mapping is more generalized than the `map` function\\. To \"map\" something from one value to another is to provide instructions for how to get from A to B. A real world map \\(a physical map or Google Maps\\) can show you how to get from one location to another. Think of mapping as a similar idea, but it's concerned with getting from some data to some other data.\n# Why \"map?\"\n\nYou may be wondering why the `map` function is indeed called \"map\" as opposed to something like \"transform\" or \"transformEachElement\". I'll give you two answers:\n\n* It's conventional. Many _many_ programming languages implement a function very similar if not identical to the `map` function we've discussed here. Conventions like this make it much easier to pick up an unfamiliar programming language so it's beneficial for all languages to use similar naming.\n* It's a term from [mathematics](https://en.wikipedia.org/wiki/Map_%28mathematics%29), from where much of computer science can trace its roots.\n\n# When is this useful?\n\nWhenever you want to transform _EVERY_ element of an array."
        },
        {
          "id": "8nr@H9Eyrm",
          "type": "typescript",
          "title": "Taking Only Part of a List With Slice",
          "instructions": "Use `slice` to do the following:\n* `last1` should be _an array of_ the last element of `numbers`.\n* `first2` should be an array of the first two elements of `numbers`.\n* `last3` should be an array of the last three elements of `numbers`.\n* `middle3` should be an array of the middle elements of numbers. I.e. `[2,3,4]`, but be sure to use `slice` to get it.\n\n",
          "testCode": "// Write your tests here:\ntest(\"`last1` should be an array of the last element of `numbers`\", () => {\n  expect(last1).toEqual(numbers.slice(-1));\n});\ntest(\"`first2` should be an array of the last element of `numbers`\", () => {\n  expect(first2).toEqual(numbers.slice(0, 2));\n});\ntest(\"`last3` should be an array of the last element of `numbers`\", () => {\n  expect(last3).toEqual(numbers.slice(-3));\n});\ntest(\"`middle3` should be an array of the last element of `numbers`\", () => {\n  expect(middle3).toEqual(numbers.slice(1, -1));\n});\ntest('`slice` should be used', () => {\n  expect(__user_code_string__).toMatch(/.+\\.slice/)\n})\n",
          "videoUrl": "",
          "starterCode": "const numbers = [1, 2, 3, 4, 5];\n\nconst last1 = undefined;\nconst first2 = undefined;\nconst last3 = undefined;\nconst middle3 = undefined;\n\nconsole.log('last', last1);\nconsole.log('first2', first2);\nconsole.log('last3', last3);\nconsole.log('middle3', middle3);\n",
          "solutionCode": "const numbers = [1,2,3,4,5];\n\nconst last1 = numbers.slice(-1);\nconst first2 = numbers.slice(0,2);\nconst last3 = numbers.slice(-3);\nconst middle3 = numbers.slice(1,-1);\n\nconsole.log('last', last1);\nconsole.log('first2', first2);\nconsole.log('last3', last3);\nconsole.log('middle3', middle3);\n",
          "content": "# Slicing\n\nSlicing is all about extracting a _subsection_ of an array. Note that this is not the same as getting a subset, which can be accomplished with `filter`. Use `slice` when you want part of an array from one index to another.\n# How to use slice\n\n* You can slice from an index to the end of an array by providing a positive number\n* You can slice from an index to another index by providing two positive numbers\n* You can slice backwards _from the end_ of an array by providing a negative number\n* You can slice from an index to another index _relative to the end_ by providing a positive number and a negative number.\n   * `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].slice(5,-2)` will give you `[6, 7, 8]`.\n\n# When is this useful?\n\nWhenever you want a _subsection_ of an array.\n\nIt's also useful when working with strings because you can very easily transform a string to an array and back using `split` and `join`.\n\n## Copying Arrays\n\nSince arrays are mutable, sometimes you want to make a copy of an array as is. You can use `slice` for this.\n\nConsider this example:\n\n```\nconst arr = [1,2,3];\nconst arr2 = arr.slice();\narr2.push(8);\n\n// Notice that modifying arr2 did not modify arr, becuase it is a copy\nconsole.log(arr, arr2); // [1,2,3] [1,2,3,8]\n\n```\n\nThis is a special use case for `slice`. When you call it with zero arguments it will make a full copy of the array and return it."
        },
        {
          "id": "RBidz6MWr",
          "type": "typescript",
          "title": "Testing For Inclusion",
          "instructions": "Find if the following phrases exist in the `LONG_EXCERPT` string\\.\n* `\"expression\"`\n* `\"data dependency\"`\n* `\"higher-order\"`\n* `\"idempotent\"`\n* `\"trivial\"`\n\n\n**HINT:** This challenge is all about using the built\\-in `includes` function\\. ",
          "testCode": "// Write your tests here:\n\nObject.keys(includedPhrases).forEach((k) => {\n  const included = LONG_EXCERPT.includes(k);\n  test(\n    `\\`includedPhrases[\"${k}\"]\\` should ${included ? \"\" : \"not \"}be included`,\n    () => {\n      expect(includedPhrases[k]).toBe(included);\n    },\n  );\n});\n\ntest(\"The `includes` function should be used\", () => {\n  expect(__user_code_string__).toMatch(/LONG_EXCERPT\\s*\\.includes/);\n})",
          "videoUrl": "",
          "starterCode": "// This is an excerpt from the Wikipedia article on functional programming.\n// The contents are not important, it's just real English text that is meant\n// to be long enough that you would want to use functions to work with it.\nconst LONG_EXCERPT =\n  'Pure functions (or expressions) have no side effects (memory or I/O). This means that pure functions have several useful properties, many of which can be used to optimize the code:\\n\\nIf the result of a pure expression is not used, it can be removed without affecting other expressions.\\nIf a pure function is called with arguments that cause no side-effects, the result is constant with respect to that argument list (sometimes called referential transparency), i.e., calling the pure function again with the same arguments returns the same result. (This can enable caching optimizations such as memoization.)\\nIf there is no data dependency between two pure expressions, their order can be reversed, or they can be performed in parallel and they cannot interfere with one another (in other terms, the evaluation of any pure expression is thread-safe).\\nIf the entire language does not allow side-effects, then any evaluation strategy can be used; this gives the compiler freedom to reorder or combine the evaluation of expressions in a program (for example, using deforestation).\\nWhile most compilers for imperative programming languages detect pure functions and perform common-subexpression elimination for pure function calls, they cannot always do this for pre-compiled libraries, which generally do not expose this information, thus preventing optimizations that involve those external functions. Some compilers, such as gcc, add extra keywords for a programmer to explicitly mark external functions as pure, to enable such optimizations. Fortran 95 also lets functions be designated pure.[44] C++11 added constexpr keyword with similar semantics.\\n\\nIteration (looping) in functional languages is usually accomplished via recursion. Recursive functions invoke themselves, letting an operation be repeated until it reaches the base case. Although some recursion requires maintaining a stack, tail recursion can be recognized and optimized by a compiler into the same code used to implement iteration in imperative languages. The Scheme language standard requires implementations to recognize and optimize tail recursion. Tail recursion optimization can be implemented by transforming the program into continuation passing style during compiling, among other approaches.\\n\\nCommon patterns of recursion can be abstracted away using higher-order functions, with catamorphisms and anamorphisms (or \"folds\" and \"unfolds\") being the most obvious examples. Such recursion schemes play a role analogous to built-in control structures such as loops in imperative languages.\\n\\nMost general purpose functional programming languages allow unrestricted recursion and are Turing complete, which makes the halting problem undecidable, can cause unsoundness of equational reasoning, and generally requires the introduction of inconsistency into the logic expressed by the language\\'s type system. Some special purpose languages such as Coq allow only well-founded recursion and are strongly normalizing (nonterminating computations can be expressed only with infinite streams of values called codata). As a consequence, these languages fail to be Turing complete and expressing certain functions in them is impossible, but they can still express a wide class of interesting computations while avoiding the problems introduced by unrestricted recursion. Functional programming limited to well-founded recursion with a few other constraints is called total functional programming.';\n\ntype IncludedPhraes = { [k: string]: boolean | undefined };\n\n// Here is an object to store whether or not various phrases are included in the string.\n// NOTE: Since some of these phrases include special characters (like spaces and hyphens)\n// those keys are defined using quotes.\nconst includedPhrases: IncludedPhraes = {\n  expression: undefined,\n  \"data dependency\": undefined,\n  \"higher-order\": undefined,\n  idempotent: undefined,\n  trivial: undefined,\n};\n\n// Your code here. Or you can modify the object above\n\nconsole.log(includedPhrases);\n",
          "solutionCode": "// This is an excerpt from the Wikipedia article on functional programming.\n// The contents are not important, it's just real English text that is meant\n// to be long enough that you would want to use functions to work with it.\nconst LONG_EXCERPT =\n  'Pure functions (or expressions) have no side effects (memory or I/O). This means that pure functions have several useful properties, many of which can be used to optimize the code:\\n\\nIf the result of a pure expression is not used, it can be removed without affecting other expressions.\\nIf a pure function is called with arguments that cause no side-effects, the result is constant with respect to that argument list (sometimes called referential transparency), i.e., calling the pure function again with the same arguments returns the same result. (This can enable caching optimizations such as memoization.)\\nIf there is no data dependency between two pure expressions, their order can be reversed, or they can be performed in parallel and they cannot interfere with one another (in other terms, the evaluation of any pure expression is thread-safe).\\nIf the entire language does not allow side-effects, then any evaluation strategy can be used; this gives the compiler freedom to reorder or combine the evaluation of expressions in a program (for example, using deforestation).\\nWhile most compilers for imperative programming languages detect pure functions and perform common-subexpression elimination for pure function calls, they cannot always do this for pre-compiled libraries, which generally do not expose this information, thus preventing optimizations that involve those external functions. Some compilers, such as gcc, add extra keywords for a programmer to explicitly mark external functions as pure, to enable such optimizations. Fortran 95 also lets functions be designated pure.[44] C++11 added constexpr keyword with similar semantics.\\n\\nIteration (looping) in functional languages is usually accomplished via recursion. Recursive functions invoke themselves, letting an operation be repeated until it reaches the base case. Although some recursion requires maintaining a stack, tail recursion can be recognized and optimized by a compiler into the same code used to implement iteration in imperative languages. The Scheme language standard requires implementations to recognize and optimize tail recursion. Tail recursion optimization can be implemented by transforming the program into continuation passing style during compiling, among other approaches.\\n\\nCommon patterns of recursion can be abstracted away using higher-order functions, with catamorphisms and anamorphisms (or \"folds\" and \"unfolds\") being the most obvious examples. Such recursion schemes play a role analogous to built-in control structures such as loops in imperative languages.\\n\\nMost general purpose functional programming languages allow unrestricted recursion and are Turing complete, which makes the halting problem undecidable, can cause unsoundness of equational reasoning, and generally requires the introduction of inconsistency into the logic expressed by the language\\'s type system. Some special purpose languages such as Coq allow only well-founded recursion and are strongly normalizing (nonterminating computations can be expressed only with infinite streams of values called codata). As a consequence, these languages fail to be Turing complete and expressing certain functions in them is impossible, but they can still express a wide class of interesting computations while avoiding the problems introduced by unrestricted recursion. Functional programming limited to well-founded recursion with a few other constraints is called total functional programming.';\n\ntype IncludedPhraes = { [k: string]: boolean | undefined };\n\n// Here is an object to store whether or not various phrases are included in the string.\n// NOTE: Since some of these phrases include special characters (like spaces and hyphens)\n// those keys are defined using quotes.\nconst includedPhrases: IncludedPhraes = {\n  expression: undefined,\n  \"data dependency\": undefined,\n  \"higher-order\": undefined,\n  idempotent: undefined,\n  trivial: undefined,\n};\n\n// Your code here. Or you can modify the object above\nObject.keys(includedPhrases).forEach((k) => {\n  includedPhrases[k] = LONG_EXCERPT.includes(k);\n});\n\nconsole.log(includedPhrases);\n",
          "content": "# Includes\n\nIt's often vary useful to know if an element in included in an array or a string is included in another string. For example this is how rudimentary profanity filters worked on the web—detect if a bad word or phrase was present in a string and block the comment or remove it from the string.\n# Arrays and Strings\n\nYou can use `includes` on both arrays and strings. The usage is exactly the same. Consider this example:\n\n```\nconst appsArray = [\"Github\", \"Steam\", \"Phase\", /* etc... */];\nconst appsString = \"My favorite apps are Github, Steam, Phase, etc...\";\n\nif (appsArray.includes(\"Pairwise\") || appsString.includes(\"Pairwise\")) {\n  console.log(\"😻\");\n} else {\n  console.log(\"😿\");\n}\n\n```\n# When is this useful?\n\nWhenever you want to find out if a string is contained within another string or an element is contained within an array."
        },
        {
          "id": "Y3M5EjYjR",
          "type": "typescript",
          "title": "Splitting and Joining",
          "instructions": "This lesson is all about `split` and `join`. You can `split` a string into an array and you can `join` an array into a string. Scroll down to the content for more info. Here's the challenge:\n\n* Split the `str` variable on spaces and assign the result to `words`.\n* Split the `str` variable on individual characters and assign the result to `chars`. See HINT below.\n* Join `words` into a string using a space and assign the result to `joinedWords`.\n* Join `chars` into a string using an empty string and assign the result to `joinedChars`.\n\n\n**HINT**: To split on characters, think about it as splitting on \"nothing\" or splitting on an _empty string_.\n",
          "testCode": "// Write your tests here:\ntest(\"`words` should be `str` split on spaces\", () => {\n  expect(words).toEqual(str.split(\" \"));\n});\ntest(\"`chars` should be `str` split on an empty string\", () => {\n  expect(chars).toEqual(str.split(\"\"));\n});\ntest(\"`joinedWords` should be `words` joined on spaces\", () => {\n  expect(joinedWords).toEqual(words.join(\" \"));\n});\ntest(\"`joinedChars` should be `chars` joined on an empty string\", () => {\n  expect(joinedChars).toEqual(chars.join(\"\"));\n});\ntest(\"`joinedWords` and `joinedChars` should both equal `str`\", () => {\n  expect(joinedWords).toEqual(str);\n  expect(joinedChars).toEqual(str);\n});\n",
          "videoUrl": "",
          "starterCode": "const str = \"Welcome to a new challenge!\";\n\nconst words = undefined;\nconst chars = undefined;\n\nconst joinedWords = undefined;\nconst joinedChars = undefined;\n\nconsole.log(\"words:\", words);\nconsole.log(\"chars:\", chars);\nconsole.log(\"joinedWords:\", joinedWords);\nconsole.log(\"joinedChars:\", joinedChars);\n",
          "solutionCode": "const str = \"Welcome to a new challenge!\";\n\nconst words = str.split(\" \");\nconst chars = str.split(\"\");\n\nconst joinedWords = words.join(\" \");\nconst joinedChars = chars.join(\"\");\n\nconsole.log(\"words:\", words);\nconsole.log(\"chars:\", chars);\nconsole.log(\"joinedWords:\", joinedWords);\nconsole.log(\"joinedChars:\", joinedChars);\n",
          "content": "# From strings to arrays and back again\n\nIt turns out it's very useful to be able to go back and forth between strings and arrays. Many operations are much simpler on arrays or make more sense with arrays than with strings, however, what you ultimately want is a string not an array so you can do the following:\n\n* Convert a string to an array using `split`.\n* Manipulate the array in some way.\n* Convert the array back to a string using `join`.\n\n\nFor example, if you want to be more illegible online you could write a function to uppercase every other letter in your strings.\n\n```typescript\nconst trollSpeak = (str: string) => {\n  return str\n    .split(\"\")\n    .map((x, i) => (i % 2 === 0 ? x.toUpperCase() : x))\n    .join(\"\");\n}\n\nconsole.log(trollSpeak(\"wow it's so nice to be chatting online!\"));\n// => \"WoW It's sO NiCe tO Be cHaTtInG OnLiNe!\"\n\n```\n\nFun\\! What we did here is took a string then did the following steps, just like described above:\n\n1. `split` the string into an array. In this case we `split` on `\"\"` which is an empty string. What this does it it splits all characters of a string separately. Example: `\"wow\".split(\"\");` would give us `[\"w\", \"o\", \"w\"]`\n1. `map` each element of the array. In this case the mapping function calls `toUpperCase` on the string if it's even. Using `i % 2 === 0` is a pretty common pattern to determine if something is even, and in this case we run the uppercase function if it's even. The result is every other character getting uppercased.\n1. `join` the array back into a string. Again we use `\"\"` to join without anything in between. To put it another way we join the elements of the array with an empty string in between.\n\n# When is this useful?\n\nWhenever you want to convert from a string to an array or vice versa. \n\nYou won't always need to convert back to a string either. Sometimes you go from string to array and keep the array. Other times you start with an array of data but you simply want a string. "
        },
        {
          "id": "Q7MxbGkTU",
          "type": "typescript",
          "title": "Word Count",
          "instructions": "Use your newly learned powers to write a function `getWordCount` to calculate the word count for a string.",
          "testCode": "// NOTE: Consider them correct if they split on space rather than a more accurate\n// regex.\nconst bySpace = LONG_EXCERPT.split(' ').length\nconst byRe = LONG_EXCERPT.split(/\\s+/).length\n\ntest(\"`getWordCount` should get the word count of strings\", () => {\n  const count = getWordCount(LONG_EXCERPT);\n  // This oddness is to expect either one but to have a meaningful error message\n  // rather than testing a boolean result with ||\n  try {\n    expect(count).toBe(bySpace);\n  } catch (err) {\n    expect(count).toBe(byRe);\n  }\n});\n",
          "videoUrl": "",
          "starterCode": "const LONG_EXCERPT =\n  'Pure functions (or expressions) have no side effects (memory or I/O). This means that pure functions have several useful properties, many of which can be used to optimize the code:\\n\\nIf the result of a pure expression is not used, it can be removed without affecting other expressions.\\nIf a pure function is called with arguments that cause no side-effects, the result is constant with respect to that argument list (sometimes called referential transparency), i.e., calling the pure function again with the same arguments returns the same result. (This can enable caching optimizations such as memoization.)\\nIf there is no data dependency between two pure expressions, their order can be reversed, or they can be performed in parallel and they cannot interfere with one another (in other terms, the evaluation of any pure expression is thread-safe).\\nIf the entire language does not allow side-effects, then any evaluation strategy can be used; this gives the compiler freedom to reorder or combine the evaluation of expressions in a program (for example, using deforestation).\\nWhile most compilers for imperative programming languages detect pure functions and perform common-subexpression elimination for pure function calls, they cannot always do this for pre-compiled libraries, which generally do not expose this information, thus preventing optimizations that involve those external functions. Some compilers, such as gcc, add extra keywords for a programmer to explicitly mark external functions as pure, to enable such optimizations. Fortran 95 also lets functions be designated pure.[44] C++11 added constexpr keyword with similar semantics.\\n\\nIteration (looping) in functional languages is usually accomplished via recursion. Recursive functions invoke themselves, letting an operation be repeated until it reaches the base case. Although some recursion requires maintaining a stack, tail recursion can be recognized and optimized by a compiler into the same code used to implement iteration in imperative languages. The Scheme language standard requires implementations to recognize and optimize tail recursion. Tail recursion optimization can be implemented by transforming the program into continuation passing style during compiling, among other approaches.\\n\\nCommon patterns of recursion can be abstracted away using higher-order functions, with catamorphisms and anamorphisms (or \"folds\" and \"unfolds\") being the most obvious examples. Such recursion schemes play a role analogous to built-in control structures such as loops in imperative languages.\\n\\nMost general purpose functional programming languages allow unrestricted recursion and are Turing complete, which makes the halting problem undecidable, can cause unsoundness of equational reasoning, and generally requires the introduction of inconsistency into the logic expressed by the language\\'s type system. Some special purpose languages such as Coq allow only well-founded recursion and are strongly normalizing (nonterminating computations can be expressed only with infinite streams of values called codata). As a consequence, these languages fail to be Turing complete and expressing certain functions in them is impossible, but they can still express a wide class of interesting computations while avoiding the problems introduced by unrestricted recursion. Functional programming limited to well-founded recursion with a few other constraints is called total functional programming.';\nconst SHORT_EXCERPT = \"Pure functions (or expressions) have no side effects\";\n\nconst getWordCount = (s: string): number => {\n  // Your code here...\n};\n\nconsole.log(`There are ${getWordCount(LONG_EXCERPT)} words in the long excerpt.`);\nconsole.log(`There are ${getWordCount(SHORT_EXCERPT)} words in the short excerpt.`);",
          "solutionCode": "const LONG_EXCERPT =\n  'Pure functions (or expressions) have no side effects (memory or I/O). This means that pure functions have several useful properties, many of which can be used to optimize the code:\\n\\nIf the result of a pure expression is not used, it can be removed without affecting other expressions.\\nIf a pure function is called with arguments that cause no side-effects, the result is constant with respect to that argument list (sometimes called referential transparency), i.e., calling the pure function again with the same arguments returns the same result. (This can enable caching optimizations such as memoization.)\\nIf there is no data dependency between two pure expressions, their order can be reversed, or they can be performed in parallel and they cannot interfere with one another (in other terms, the evaluation of any pure expression is thread-safe).\\nIf the entire language does not allow side-effects, then any evaluation strategy can be used; this gives the compiler freedom to reorder or combine the evaluation of expressions in a program (for example, using deforestation).\\nWhile most compilers for imperative programming languages detect pure functions and perform common-subexpression elimination for pure function calls, they cannot always do this for pre-compiled libraries, which generally do not expose this information, thus preventing optimizations that involve those external functions. Some compilers, such as gcc, add extra keywords for a programmer to explicitly mark external functions as pure, to enable such optimizations. Fortran 95 also lets functions be designated pure.[44] C++11 added constexpr keyword with similar semantics.\\n\\nIteration (looping) in functional languages is usually accomplished via recursion. Recursive functions invoke themselves, letting an operation be repeated until it reaches the base case. Although some recursion requires maintaining a stack, tail recursion can be recognized and optimized by a compiler into the same code used to implement iteration in imperative languages. The Scheme language standard requires implementations to recognize and optimize tail recursion. Tail recursion optimization can be implemented by transforming the program into continuation passing style during compiling, among other approaches.\\n\\nCommon patterns of recursion can be abstracted away using higher-order functions, with catamorphisms and anamorphisms (or \"folds\" and \"unfolds\") being the most obvious examples. Such recursion schemes play a role analogous to built-in control structures such as loops in imperative languages.\\n\\nMost general purpose functional programming languages allow unrestricted recursion and are Turing complete, which makes the halting problem undecidable, can cause unsoundness of equational reasoning, and generally requires the introduction of inconsistency into the logic expressed by the language\\'s type system. Some special purpose languages such as Coq allow only well-founded recursion and are strongly normalizing (nonterminating computations can be expressed only with infinite streams of values called codata). As a consequence, these languages fail to be Turing complete and expressing certain functions in them is impossible, but they can still express a wide class of interesting computations while avoiding the problems introduced by unrestricted recursion. Functional programming limited to well-founded recursion with a few other constraints is called total functional programming.';\nconst SHORT_EXCERPT = \"Pure functions (or expressions) have no side effects\";\n\n// NOTE: Splitting on \" \" only gives us a rough approximation. A more accurate split would be\n// on /\\s+/ to account for newlines as well as repeated spaces.\nconst getWordCount = (s: string): number => {\n  return s.split(' ').length;\n};\n\nconsole.log(`There are ${getWordCount(LONG_EXCERPT)} words in the long excerpt.`);\nconsole.log(`There are ${getWordCount(SHORT_EXCERPT)} words in the short excerpt.`);",
          "content": ""
        },
        {
          "id": "A5veAUqXP",
          "type": "typescript",
          "title": "Capitalize Words",
          "instructions": "* Write a function `capitalize` that will capitalize a string. In other words, it will make the first character uppercase.\n* Write a function `capitalizeWords` that will capitalize _every_ word in a string.\n   * **HINT:** You can reuse your `capitalize` function to make this function very simple. Just focus on how to run capitalize on every word within a string.\n\n",
          "testCode": "// Write your tests here:\ntest(\"`capitalize` and `capitalizeWords` should be functions\", () => {\n  expect(typeof capitalize).toBe(\"function\");\n  expect(typeof capitalizeWords).toBe(\"function\");\n});\n\ntest(\"`capitalize` should capitalize a single word\", () => {\n  expect(capitalize(\"hey\")).toBe(\"Hey\");\n  expect(capitalize(\"Hey\")).toBe(\"Hey\");\n  expect(capitalize(\"less is more\")).toBe(\"Less is more\");\n});\n\ntest(\"`capitalizeWords` should capitalize every word in a string\", () => {\n  expect(capitalizeWords(\"hey\")).toBe(\"Hey\");\n  expect(capitalizeWords(\"Hey\")).toBe(\"Hey\");\n  expect(capitalizeWords(\"less is more\")).toBe(\"Less Is More\");\n});\n",
          "videoUrl": "",
          "starterCode": "const capitalize = (word: string): string => {\n  // Your code here\n};\n\nconst capitalizeWords = (str: string): string => {\n  // Your code here\n};\n\nconsole.log(capitalizeWords(\"welcome to pairwise\")); // \"Welcome To Pairwise\"",
          "solutionCode": "const capitalize = (word: string): string => {\n  return word[0].toUpperCase() + word.slice(1);\n};\n\n// The trick here is to\n// - turn the string into an arary\n// - run capitalize on every element of the array (this is exactly what .map is for)\n// - turn the array int a string\nconst capitalizeWords = (str: string): string => {\n  return str\n    .split(\" \")\n    .map(capitalize)\n    .join(\" \");\n};\n\nconsole.log(capitalizeWords(\"welcome to pairwise\")); // \"Welcome To Pairwise\"",
          "content": ""
        },
        {
          "id": "5HnuVW8li",
          "type": "typescript",
          "title": "Get the Items You Want Using a Filter",
          "instructions": "Use the `filter` function to do the following:\n\n* Extract all numbers from `mixedArray` and assign them to `numbers`\n* Extract all strings from `mixedArray` and assign them to `strings`\n* Filter out only names that start with \"A\" from the `names` list and assign the result to `namesStartingWithA`.\n\n\n**HINT:** For the first two you will find the `typeof` keyword helpful.\n",
          "testCode": "// Write your tests here:\ntest(\"`numbers` should be the subset of `mixedArray` elements that are numbers`\", () => {\n  expect(numbers).toEqual(mixedArray.filter(x => typeof x === \"number\"));\n});\ntest(\"`strings` should be the subset of `mixedArray` elements that are strings`\", () => {\n  expect(strings).toEqual(mixedArray.filter(x => typeof x === \"string\"));\n});\n\ntest(\"`namesStartingWithA` should be the subset of `names` elements start with the letter A`\", () => {\n  expect(namesStartingWithA).toEqual(names.filter(x => x.startsWith(\"A\")));\n});\n",
          "videoUrl": "",
          "starterCode": "const mixedArray = [\"one\", 2, \"three\", 4, \"five\", 6];\nconst names = [\n  \"Gabrielle\",\n  \"Kiarra\",\n  \"Santa\",\n  \"Peter\",\n  \"Wava\",\n  \"Austin\",\n  \"Austen\",\n  \"Alaina\",\n  \"Ian\",\n  \"Bria\",\n];\n\nconst numbers = undefined;\nconst strings = undefined;\nconst namesStartingWithA = undefined;",
          "solutionCode": "const mixedArray = [\"one\", 2, \"three\", 4, \"five\", 6];\nconst names = [\n  \"Gabrielle\",\n  \"Kiarra\",\n  \"Santa\",\n  \"Peter\",\n  \"Wava\",\n  \"Austin\",\n  \"Austen\",\n  \"Alaina\",\n  \"Ian\",\n  \"Bria\",\n];\n\nconst numbers = mixedArray.filter((x) => typeof x === \"number\");\nconst strings = mixedArray.filter((x) => typeof x === \"string\");\nconst namesStartingWithA = names.filter((x) => x[0] == \"A\");\n",
          "content": "# Filtering\n\nThe idea of filtering is to go from one set of things to a smaller set, i.e. a subset. You see this all the time in the world of software, especially messaging apps. Consider:\n\n* Your phone apps can filter your calls to show you things like your outgoing calls, or missed calls. These are both subsets of all the calls on your phone.\n* Email apps let you do tons of filtering such as: only emails from a particular sender, only sent emails, only unread emails, only emails flagged as important, etc.\n* Stock trading apps let you do tons of filtering too, often based on time: Daily price for the past two weeks, two months, 5 years, etc. Even simply entering in a ticker symbol is using filtering. The stock price for AMZN is a subset of all stock prices for all companies.\n\n# When is this useful?\n\nWhenever you want a subset of an array. "
        },
        {
          "id": "ZurFUR4Hb",
          "type": "typescript",
          "title": "Remove All Vowels",
          "instructions": "Write a function `removeVowels` that removes all vowels from any string you pass into it.\n\n**HINT**: Operating on every character in a string is easier if you convert it into an array of characters.",
          "testCode": "// Write your tests here:\ntest(\"`removeVowels` should remove all vowels from a string\", () => {\n  expect(removeVowels('Here we are in the vowels challenge')).toBe(\"Hr w r n th vwls chllng\");\n  expect(removeVowels('weeeeeeeeeeeeeeeeeeeeee are the champions')).toBe(\"w r th chmpns\");\n});\n",
          "videoUrl": "",
          "starterCode": "const VOWELS = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\nconst removeVowels = (s: string) => {\n  // Your code here\n};\n\nconsole.log(removeVowels('Here we are in the vowels challenge'));",
          "solutionCode": "const VOWELS: Array<string> = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\nconst removeVowels = (s: string) => {\n  return s\n    .split(\"\")\n    .filter((x) => !VOWELS.includes(x))\n    .join(\"\");\n};\n\nconsole.log(removeVowels('Here we are in the vowels challenge'));",
          "content": ""
        },
        {
          "id": "gKxkTMdpc",
          "type": "typescript",
          "title": "Upper Case and Lower Case",
          "instructions": "Write two functions `isUpperCase` and `isLowerCase` to determine if a string is **all** upper case or **all** lower case.\n\n**Hint**: You can use the `toUpperCase` or `toLowerCase` to convert a string to one or the other like so: `str.toUpperCase()`. Consider how you might use this to determine if the original string is upper case or not.\n\nExamples:\n```typescript\nisUpperCase(\"a\"); // => false\nisLowerCase(\"a\"); // => true\nisUpperCase(\"B\"); // => true\nisLowerCase(\"B\"); // => false\nisUpperCase(\"Cat\"); // => false\nisLowerCase(\"Cat\"); // => false\nisUpperCase(\"CAT\"); // => true\n\n```\n",
          "testCode": "// Write your tests here:\ntest(\"`toUpperCase` and `toLowerCase` should be functions\", () => {\n  expect(typeof isUpperCase).toBe(\"function\");\n  expect(typeof isLowerCase).toBe(\"function\");\n});\n\ntest(\"`toUpperCase` should test if a string is uppercase\", () => {\n  expect(isUpperCase(\"a\")).toBe(false);\n  expect(isUpperCase(\"B\")).toBe(true);\n  expect(isUpperCase(\"Cat\")).toBe(false);\n  expect(isUpperCase(\"CAT\")).toBe(true);\n});\ntest(\"`toLowerrCase` should test if a string is lowercase\", () => {\n  expect(isLowerCase(\"a\")).toBe(true);\n  expect(isLowerCase(\"B\")).toBe(false);\n  expect(isLowerCase(\"Cat\")).toBe(false);\n  expect(isLowerCase(\"CAT\")).toBe(false);\n  expect(isLowerCase(\"cat\")).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "const isUpperCase = (str: string): boolean => {\n  // Your code here...\n};\n\nconst isLowerCase = (str: string): boolean => {\n  // Your code here...\n};\n",
          "solutionCode": "const isUpperCase = (str: string): boolean => {\n  return str.toUpperCase() === str;\n};\n\nconst isLowerCase = (str: string): boolean => {\n  return str.toLowerCase() === str;\n};\n",
          "content": ""
        },
        {
          "id": "gR7810hCR",
          "type": "typescript",
          "title": "Calculate the Sum Using Reduce",
          "instructions": "Write a `sum` function that takes an array of numbers and returns their sum. Use `reduce`. Here's the specification:\n* Passing an array of numbers will return their sum. Example: `sum([2,4,1])` will return `7`.\n* Passing an empty array will return `0`.\n\n**Hint:** Check out the [video](#{\"component\":\"VideoPlayButton\"}) for more info on `reduce`.",
          "testCode": "// Write your tests here:\n\ntest(\"`sum` should return the sum of an array of numbers\", () => {\n  expect(sum([1, 2, 3])).toBe(6);\n  expect(sum([244, 61454, 0, 1, 9, 3, 35])).toBe(61746);\n});\ntest(\"`sum` should return `0` when passed an empty array\", () => {\n  expect(sum([])).toBe(0);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/V6tecUco7Xw",
          "starterCode": "const sum = (numbers: number[]): number => {\n  // Your code here\n};\n",
          "solutionCode": "const sum = (numbers: number[]): number => {\n  return numbers.reduce((a, b) => a + b, 0);\n};\n",
          "content": "# Reducing\n\nThe concept of reducing is extremely powerful and flexible, but may bit hard to wrap your head around initially. The idea is, given an array, transform the array into something else. There are many ways to transform an array, but `reduce` has a specific way to do it:\n\n```\nconst initialResult = 0;\n[1,2,3].reduce((lastResult, x) => {\n  return lastResult + x;\n}, initialResult); // The result will be 6.\n\n```\n\nWhen you `reduce` something you use a function that takes two arguments:\n\n* The \"result so far\" is the return value from the last call, or the initial value if this is the first call\n* The current element of the array\n\n\nBut notice that \"result so far\" might not make sense the first time the function is called, so you can pass in your own value to tell the function where to start. In the example above we used the `initialResult` of `0`. Let's walk through what happened one call at a time:\n\n1. First function call: `lastResult` is `0`, `x` is `1` \\(the first element of the array\\), the return value is `1`\n1. Second function call: `lastResult` is `1`, `x` is `2` \\(the second element of the array\\), the return value is `3`\n1. Third function call: `lastResult` is `3`, `x` is `3` \\(the third element of the array\\), the return value is `6`\n\n\n# When is this useful?\n\n* When you want to transform an itself array into something else\n\n\n## Differences with other array methods\n\n* `filter`: When you `filter` an array you want another array with some elements removed. \n* `map`: When you `map` an array you want to transform _every element_ of the array, but you still get back an array.\n* `reduce`: Use `reduce` when those other two methods don't serve your needs. Usually when you want to transform the array itself into something other than an array.\n   * For example: Array to number \\(the `sum` function in this challenge\\), array to string, array to object, etc.\n\n"
        },
        {
          "id": "0xs07JCP4",
          "type": "typescript",
          "title": "Counting Word Occurrences",
          "instructions": "Write two functions, `countWordsSimple` and `countWords`. Both functions should count the number of words in a string. Represent the word counts in an object with the words as they key and their counts as the value. For example, `countWords(\"hello hello everyone\")` would give us the object `{ hello: 2, everyone: 1 }`. This object represents that the string `\"hello\"` occurred `2` times in the input string and the string `\"everyone\"` occurred `1` time\\.\n* `countWordsSimple` should not add any additional logic to determine what a word is. It should just count all strings in the array separated by spaces.\n   * After implementing this you will notice the limitations. `The` and `the` get counted separately, as do `quick` and `quick.`\n* `countWords` should add additional logic to handle the issues described above. Namely: \n   * `countWords` should make all words lowercase before counting, so `The` and `the` get correctly counted as the same word.\n   * `countWords` should remove periods \\(`.`\\) so that `quick` and `quick.` get accurately counted as the same word.\n\n",
          "testCode": "const simpleExpected = {\n  The: 1,\n  quick: 1,\n  brown: 1,\n  fox: 2,\n  jumped: 1,\n  over: 1,\n  the: 2,\n  lazy: 1,\n  \"dog.\": 1,\n  Remember: 1,\n  was: 1,\n  \"quick.\": 1,\n};\n\nconst advancedExpected = {\n  the: 3,\n  quick: 2,\n  brown: 1,\n  fox: 2,\n  jumped: 1,\n  over: 1,\n  lazy: 1,\n  dog: 1,\n  remember: 1,\n  was: 1,\n};\n\ntest(\"`countWordsSimple` should count space-separated strings\", () => {\n  expect(simpleExpected).toEqual(countWordsSimple(sentence));\n});\n\ntest(\"`countWords` should count words in lowercase with periods removed\", () => {\n  expect(advancedExpected).toEqual(countWords(sentence));\n});\n",
          "videoUrl": "",
          "starterCode": "const sentence =\n  \"The quick brown fox jumped over the lazy dog. Remember the fox was quick.\";\n\ntype WordCounts = { [k: string]: number };\n\nconst countWordsSimple = (str: string): WordCounts => {\n  // Your code here\n};\n\nconst countWords = (str: string): WordCounts => {\n  // Your code here\n};\n\n\nconsole.log('Simple Count:', countWordsSimple(sentence));\nconsole.log('Advanced Count:', countWords(sentence));\n",
          "solutionCode": "const sentence =\n  \"The quick brown fox jumped over the lazy dog. Remember the fox was quick.\";\n\ntype WordCounts = { [k: string]: number };\n\nconst countWordsSimple = (str: string): WordCounts => {\n  return str.split(\" \").reduce((agg, word) => {\n    if (agg[word] === undefined) {\n      agg[word] = 0;\n    }\n    agg[word] += 1;\n    return agg;\n  }, {});\n};\n\nconst countWords = (str: string): WordCounts => {\n  return str\n    .split(\" \")\n    .map((x) => x.toLowerCase())\n    .map((x) => x.replace(\".\", \"\"))\n    .reduce((agg, word) => {\n      if (agg[word] === undefined) {\n        agg[word] = 0;\n      }\n      agg[word] += 1;\n      return agg;\n    }, {});\n};\n\nconsole.log(\"Simple Count:\", countWordsSimple(sentence));\nconsole.log(\"Advanced Count:\", countWords(sentence));\n",
          "content": ""
        },
        {
          "id": "y22djF1ur",
          "type": "typescript",
          "title": "Some and Every",
          "instructions": "Use the `some` and `every` array functions to complete the following:\n\n* Use `every` to confirm that all people in the `people` array have names starting with `\"J\"`.\n* Use `every` to confirm that **NOT** all people in the `people` array have `\"Sales\"` roles\\.\n* Use `some` to confirm that _some_ people in the `people` array have `\"Sales\"` roles, but not all.\n\n",
          "testCode": "// Write your tests here:\ntest(\"`allNamesStartWithJ` should be true\", () => {\n  expect(allNamesStartWithJ).toBe(true);\n});\ntest(\"`allPeopleHaveSalesRoles` should be false\", () => {\n  expect(allPeopleHaveSalesRoles).toBe(false);\n});\ntest(\"`somePeopleHaveSalesRoles` should be true\", () => {\n  expect(somePeopleHaveSalesRoles).toBe(true);\n});\ntest(\"The `some` function should be used\", () => {\n  expect(__user_code_string__).toMatch(/people\\s*\\.some/);\n});\ntest(\"The `every` function should be used\", () => {\n  expect(__user_code_string__).toMatch(/people\\s*\\.every/);\n});\n",
          "videoUrl": "",
          "starterCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\nconst allNamesStartWithJ = undefined;\nconst allPeopleHaveSalesRoles = undefined;\nconst somePeopleHaveSalesRoles = undefined;",
          "solutionCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\nconst allNamesStartWithJ = people.every(x => x.name.startsWith(\"J\"));\nconst allPeopleHaveSalesRoles = people.every(x => x.role === \"Sales\");\nconst somePeopleHaveSalesRoles = people.some(x => x.role === \"Sales\");",
          "content": "The idea of both of these functions is to tell you aggregate information about the elements of an array. This type of functionality often comes up in the real world. Consider:\n\n* Email apps often display a badge or an icon to indicate unread messages.\n   * Often they show a count too, which is a bit different, but many apps can be configured to just show the boolean state representing \"You have unread messages\"\n   * This was also true of many physical answering machines tied to land\\-line phones. They would display a blinking light or some other indicator showing that you have voicemail. \n* Expanding and collapsing lists. You can see this in the Pairwise navigation menu. The button to expand or collapse all sections changes depending on whether or not `some` sections are already open.\n\n# Usage\n\n`some` and `every` are relatively simple. You provide a function that \"tests\" every element in an array. The testing function should return true or false and will be passed an element from the array.\n\n```typescript\nconst arr = [1, \"2\"];\n\n// Our first testing function tests if something is a string\nconst isString = x => typeof x === \"string\";\n\n// Our second testing function tests if something is a number\nconst isNumber = x => typeof x === \"number\";\n\n// As expected, SOME elements of the array are strings but not EVERY element.\nconsole.log(arr.some(isString)); // true\nconsole.log(arr.every(isString)); // false\n\n// Same as above.\n// As expected, SOME elements of the array are strings but not EVERY element.\nconsole.log(arr.some(isNumber)); // true\nconsole.log(arr.every(isNumber)); // false\n\n```\n# When is this useful?\n\n* Whenever you want to know if _every single element_ of an array adheres to some criteria.\n* Whenever you want to know if _at least one element_ of an array adheres to some criteria.\n\n"
        },
        {
          "id": "ob0dNmu2nN",
          "type": "typescript",
          "title": "Push to Append to an Array",
          "instructions": "Add Jolin, the `newHire`, to the array of `people`. Use the `push` array method.",
          "testCode": "// Write your tests here:\ntest(\"`newHire` should be appended to `people`\", () => {\n  expect(people[people.length - 1]).toEqual(newHire);\n});\n\ntest(\"The `push` array method should be used\", () => {\n  expect(__user_code_string__).toMatch(/\\.push\\([\\s\\S]+\\)/);\n});\n",
          "videoUrl": "",
          "starterCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\nconst newHire = { name: \"Jolin\", role: \"Cat Trainer\" };\n\n// Your code here\n\nconsole.log(people);",
          "solutionCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\nconst newHire = { name: \"Jolin\", role: \"Cat Trainer\" };\n\npeople.push(newHire);\n\nconsole.log(people);",
          "content": "# Pushing\n\n`push`ing onto an array is a very simple operation. It just adds a new element to the end of an array. However, there are two points to note:\n\n* `push` will return the new `length` of the array, not the array itself\n* `push` will _directly modify the array_ without creating a new array. In other words it mutates the array.\n\n\nThe first point means you cannot use `push` together with other array methods in a chain. ++This will not work++:\n\n```\n[\"a\", \"b\"].push(\"c\").push(\"d\"); // This code will break!\n\n```\n\nThis code breaks because `push(\"c\")` will return the new length of the array, `3`. So the code will then be calling `3.push(\"d\")`, which is invalid because numbers do not have a `push` method\\.\n# Usage\n\nCall `push` with the value to push onto the array.\n\n```\nconst array = [];\n\narray.push(\"new\");\narray.push(\"stuff\");\n\nconsole.log(array); // [\"new\", \"stuff\"]\n\n```\n# When is this useful?\n\nWhenever you want to append to an array **AND** you don't mind modifying the original array. \n\nIf you want to append to an array without mutation consider using concat. See the [concat challenge](/workspace/0uUMIElC7) for more info."
        },
        {
          "id": "0uUMIElC7",
          "type": "typescript",
          "title": "Concat to Combine Arrays",
          "instructions": "The company is expanding quickly. There are now _two new hires_ to add to the `people` array\\. Use `concat` to combine the two arrays together and assign the result to `newRoster`.",
          "testCode": "// Write your tests here:\ntest(\"`people` and `newHires` should not be mutated\", () => {\n  expect(people).toEqual([\n    { name: \"Jim\", role: \"Sales\" },\n    { name: \"Jenna\", role: \"Management\" },\n    { name: \"Jack\", role: \"Sales\" },\n    { name: \"Julie\", role: \"Assistant\" },\n    { name: \"Jolin\", role: \"Cat Trainer\" },\n  ]);\n  expect(newHires).toEqual([\n    { name: \"Justine\", role: \"Engineer\" },\n    { name: \"Jolie\", role: \"Tomb Raider\" },\n  ]);\n});\n\ntest(\"`newRoster` should be the concatenation of `people` and `newHires`\", () => {\n  expect(newRoster).toEqual(people.concat(newHires));\n});\n\n\ntest(\"The `concat` array method should be used\", () => {\n  expect(__user_code_string__).toMatch(/\\.concat\\([\\s\\S]+\\)/);\n});\n",
          "videoUrl": "",
          "starterCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n  { name: \"Jolin\", role: \"Cat Trainer\" },\n];\n\nconst newHires = [\n  { name: \"Justine\", role: \"Engineer\" },\n  { name: \"Jolie\", role: \"Tomb Raider\" },\n];\n\n// Your code here\nconst newRoster = undefined;\n\nconsole.log(people);\n",
          "solutionCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n  { name: \"Jolin\", role: \"Cat Trainer\" },\n];\n\nconst newHires = [\n  { name: \"Justine\", role: \"Engineer\" },\n  { name: \"Jolie\", role: \"Tomb Raider\" },\n];\n\n// Your code here\nconst newRoster = people.concat(newHires);\n\nconsole.log(people);\n",
          "content": "# Concatenation\n\nConcatenation with arrays can be achieved with the `concat` method\\.\n\n* `concat` will return _a new array_ and will **NOT** mutate the original array.\n* `concat` will **NOT** _directly modify the array_ so you may need to assign the array to a new variable or reassign the existing variable.\n\n# Usage\n\nPass another array into `concat` in order to concatenate it onto the end of the array.\n\n```typescript\n[1,2,3].concat([4,5,6]); // => [1, 2, 3, 4, 5, 6]\n\n```\n\nYou can also use `concat` similar to `push` but without mutating the original array. Simply wrap the value you want to push in a new array:\n\n```typescript\nlet arr = [1,2,3];\n\narr = arr.concat([4]);\narr = arr.concat([5]);\n\nconsole.log(arr); // [1, 2, 3, 4, 5];\n\n```\n# When is this useful?\n\n* Whenever you want to combine two arrays together to form a _new array_.\n* Whenever you want to append to an array without modifying the original array.\n\n\n`concat` is also particularly useful in [functional programming](/workspace/jxRxi1j5A) when compared with `push` because it does not modify the original array."
        },
        {
          "id": "aruaCpquj1",
          "type": "typescript",
          "title": "For Each Element",
          "instructions": "Use `forEach` to log out a string to the console of the form `{name} is in {role}` where `{name}` and `{role}` are replaced by the persons actual name and role. For example, the first log line for Jim would be `Jim is in Sales`.",
          "testCode": "test(\"The console should not be empty\", () => {\n  expect(__secret_log_box).not.toEqual([]);\n});\npeople.forEach((x) => {\n  const s = `${x.name} is in ${x.role}`;\n  const logs = parseLogBox(__secret_log_box);\n  test(`\\`\"${s}\"\\` should be logged to the console`, () => {\n    expect(logs).toContain(s);\n  });\n});\ntest(\"`forEach` should be used\", () => {\n  expect(__user_code_string__).toMatch(/people\\s*\\.forEach/);\n});\n",
          "videoUrl": "",
          "starterCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"HR\" },\n];\n\n",
          "solutionCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"HR\" },\n];\npeople.forEach((x) => {\n  console.log(`${x.name} is in ${x.role}`);\n});\n",
          "content": "`forEach` is not coy about what it's used for: It runs a function once _for each_ element of an array.\n# Usage\n\nIf we want to log out every element of an array we could do the following:\n\n```typescript\nconst arr = [\"a\", \"b\", \"c\"]\n\n// Log every element of the array\narr.forEach(x => {\n  console.log(x);\n});\n\n```\n\nYou might recognize that we could do the exact same thing using a `for` loop:\n\n```typescript\nconst arr = [\"a\", \"b\", \"c\"]\n\n// Log every element of the array\nfor (let i = 0; i < arr.length; i++) {\n  const x = arr[i];\n  console.log(x);\n}\n\n```\n\nIn fact, `forEach` even gives you the index of the current element as the second argument. So you could use a `forEach` loop in the same way you could use a `for` loop like so:\n\n```\nconst arr = [\"a\", \"b\", \"c\"]\n\n// Log every element of the array\n// Using _ as a variable name is a convention for a variable that \n// you will not use.\narr.forEach((_, i) => {\n  const x = arr[i];\n  console.log(x);\n});\n\n```\n# Why not use a for loop?\n\nAs you can see in the example above, `forEach` and `for` can both give you the same result. So when to use one or the other? The fact is they are similar tools that can be used for different things.\n\n## Benefits of forEach\n\n* It's much simpler to write and more direct for iteration. You don't have to worry about array indexing syntax, loop syntax, or when to start and stop your loop.\n* It's directly related to your array. `for` loops can be used with arrays but they have no direct relation. A `for` loop lets you run some code N times where you get to choose what number N is.\n\n\n## Benefits of for loops\n\n* You get to `break` and `continue` in for loops. This can be very important for writing algorithms that run faster because you can skip work if it's not needed. `forEach` does not have this functionality.\n* You can iterate backwards, step\\-wise or any way you want. Using a `for` loop you can iterate backwards through an array, you can iterate over every even number, etc. You are much less constrained in how you loop.\n   * This makes `for` loops more powerful and more flexible than `forEach`, but it also makes `for` loops less well\\-suited to simply iterating over the elements of an array.\n\n\n> **Rule of thumb:** If you're wondering which one to use, try to use `forEach` and if it doesn't work for your use case then fall back to using a `for` loop\\.\n# When is this useful?\n\nWhenever you want to run some code for every element of an array.\n\n**NOTE:** If you want to _transform_ every element of an array it is simpler to use `map` rather than `forEach`."
        },
        {
          "id": "yQwcp1uKO",
          "type": "typescript",
          "title": "For Each Entry In An Object",
          "instructions": "Use `Object.entries` to iterate over the `cities` object and log each cities population in the form: `{city} has a population of {population}` where `{city}` is the name of the city \\(they key in the object\\) and `{population}` is the cities population.",
          "testCode": "Object.entries(cities).forEach(([name, x]) => {\n  const s = `${name} has a population of ${x.population}`;\n  test(`\\`\"${s}\"\\` should be logged`, () => {\n    const logs = parseLogBox(__secret_log_box);\n    expect(logs).toContain(s);\n  });\n});\n\ntest(\"`Object.entries` should be used\", () => {\n  expect(__user_code_string__).toMatch(/Object\\s*\\.entries\\([\\s\\S]+\\)/);\n});\n",
          "videoUrl": "",
          "starterCode": "interface City {\n  primaryLanguage: string;\n  population: number;\n  area: {\n    value: number;\n    unit: \"sq km\" | \"sq mi\";\n  };\n}\n\ntype Cities = { [k: string]: City };\n\nconst cities: Cities = {\n  \"New York\": {\n    primaryLanguage: \"English\",\n    population: 8336817,\n    area: {\n      value: 784,\n      unit: \"sq km\",\n    },\n  },\n  Tokyo: {\n    primaryLanguage: \"Japanese\",\n    population: 13942856,\n    area: {\n      value: 2194,\n      unit: \"sq km\",\n    },\n  },\n  Taipei: {\n    primaryLanguage: \"Mandarin\",\n    population: 2646204,\n    area: {\n      value: 272,\n      unit: \"sq km\",\n    },\n  },\n};\n\nconst logCityPopulations = (obj: Cities): void => {\n  // Your code here\n};\n\nlogCityPopulations(cities);\n",
          "solutionCode": "interface City {\n  primaryLanguage: string;\n  population: number;\n  area: {\n    value: number;\n    unit: \"sq km\" | \"sq mi\";\n  };\n}\n\ntype Cities = { [k: string]: City };\n\nconst cities: Cities = {\n  \"New York\": {\n    primaryLanguage: \"English\",\n    population: 8336817,\n    area: {\n      value: 784,\n      unit: \"sq km\",\n    },\n  },\n  Tokyo: {\n    primaryLanguage: \"Japanese\",\n    population: 13942856,\n    area: {\n      value: 2194,\n      unit: \"sq km\",\n    },\n  },\n  Taipei: {\n    primaryLanguage: \"Mandarin\",\n    population: 2646204,\n    area: {\n      value: 272,\n      unit: \"sq km\",\n    },\n  },\n};\n\nconst logCityPopulations = (obj: Cities): void => {\n  Object.entries(obj).forEach(([k, v]) => {\n    console.log(`${k} has a population of ${v.population}`);\n  });\n};\n\nlogCityPopulations(cities);\n",
          "content": "Unfortunately Objects do not give you the same helpful functions as arrays. Namely functions like `map`, `filter`, `reduce`, `forEach`, etc.\n\nTo get around this there are a number of helper functions specifically for Objects that you can use to accomplish these tasks. These functions are:\n\n* `Object.keys`\n   * Returns an array of all _keys_ of an object. `Object.keys({ name: 'Maomi', job: 'Sleeping' })` returns `[\"name\", \"job\"]`.\n* `Object.values`\n   * Returns an array of all _values_ of an object. `Object.values({ name: 'Maomi', job: 'Sleeping' })` returns `[\"Maomi\", \"Sleeping\"]`.\n* `Object.entries`\n   * Returns an array of all **keys and values** of an object. Since it returns a key and a value you will have an array of arrays. `Object.entries({ name: 'Maomi', job: 'Sleeping' })` returns `[[\"name\", \"Maomi\"], [\"Job\", \"Sleeping\"]]`.\n\n\nThis may seem a bit roundabout, and it is, but it's what's built\\-in for you to use. You can always write your own helper functions that allow you to map over arrays and objects the same way.\n# A common pattern\n\nJust as we can operate on strings by converting to an array and back again, we can do the same with objects. The implementation is a bit more cumbersome than with strings but the underlying idea is the same:\n\n1. Use `Object.entries` to convert an object into an array of key\\-value pairs.\n1. Operate on the array of key\\-value pairs using whatever array methods you like\n1. Use `reduce` to convert the array of key\\-value pairs into an object\n\n\nLet's see an example. We'll use a simplified `cities` object from the challenge:\n\n```typescript\nconst cities = {\n  \"New York\": {\n    primaryLanguage: \"English\",\n    population: 8336817,\n  },\n  Tokyo: {\n    primaryLanguage: \"Japanese\",\n    population: 13942856,\n  },\n  Taipei: {\n    primaryLanguage: \"Mandarin\",\n    population: 2646204,\n  },\n};\n\n// 1) Turn the object into key-value pairs\nconst pairs = Object.entries(cities);\n\n// This is entirely made up, but we'll say a city is \"huge\" \n// if it has more than 5 million people\nconst isHuge = x => x.population > 5000000;\n\n// 2) Operate on the key-value pairs. In this case assign\n// a \"huge\" property to every object. true means the city\n// has more than 5 million people.\nconst mappedPairs = pairs.map(([k, v]) => {\n  const newValue = { ...v, huge: isHuge(v) };\n  return [k, newValue]\n});\n\n// 3) Use reduce to turn the pairs back into an object\nconst mappedCities = mappedPairs.reduce((agg, [k, v]) => {\n  return { ...agg, [k]: v };\n}, {});\n\nconsole.log(mappedCities); // The result will look like what's below\n// {\n//   \"New York\": {\n//     primaryLanguage: \"English\",\n//     population: 8336817,\n//     huge: true,\n//   },\n//   Tokyo: {\n//     primaryLanguage: \"Japanese\",\n//     population: 13942856,\n//     huge: true,\n//   },\n//   Taipei: {\n//     primaryLanguage: \"Mandarin\",\n//     population: 2646204,\n//     huge: false,\n//   },\n// }\n\n```\n\nSince converting from an array of key\\-value pairs is fairly common, you could even create a helper function to do it for you:\n\n```typescript\ntype KeyValuePairs = [string, any][];\n\nconst fromPairs = (x: KeyValuePairs) => x.reduce((agg, [k, v]) => {\n  return { ...agg, [k]: v };\n}, {});\n\n// Now you can use this fromPairs function on an array of key-value pairs.\n// The code below essentially does nothing because fromPairs is the inverse\n// operation of Object.entries\nfromPairs(Object.entries({ isObject: true })); // => { isObject: true }\n\n```\n# When is this useful?\n\nWhenever you want to use array functions on an object. For example, if you want to `map`, `filter`, or `reduce` elements of an object."
        },
        {
          "id": "3G$qQheYh",
          "type": "typescript",
          "title": "Mapping Object Entries",
          "instructions": "Create a function `mapCityAreas` that will convert the `area` property of all cities in the `cities` object to imperial units. Initially the area is represented as `\"sq km\"` or square kilometers. We've provided a helper function `kmToMi` to convert from kilometers to miles.\n\n**HINT:** `Object.entries` will give you an array of key\\-value pairs. Since it's an array you can use `reduce` on it. There are many ways to solve this challenge, but using a combination of `Object.entries` and `reduce` may be the most straight forward.",
          "testCode": "// Write your tests here:\ntest(\"`result` be a cities object with areas mapped to imperial units\", () => {\n  const expected = Object.entries(cities).map(([_, v]) => v.area).map(x => ({\n    unit: 'sq mi',\n    value: kmToMi(x.value), \n  }));\n  const _result = Object.entries(result).map(([_, v]) => v.area);\n  expect(_result).toEqual(expected);\n});\n",
          "videoUrl": "",
          "starterCode": "interface City {\n  primaryLanguage: string;\n  population: number;\n  area: {\n    value: number;\n    unit: \"sq km\" | \"sq mi\";\n  };\n}\n\ntype Cities = { [k: string]: City };\n\nconst cities: Cities = {\n  \"New York\": {\n    primaryLanguage: \"English\",\n    population: 8336817,\n    area: {\n      value: 784,\n      unit: \"sq km\",\n    },\n  },\n  Tokyo: {\n    primaryLanguage: \"Japanese\",\n    population: 13942856,\n    area: {\n      value: 2194,\n      unit: \"sq km\",\n    },\n  },\n  Taipei: {\n    primaryLanguage: \"Mandarin\",\n    population: 2646204,\n    area: {\n      value: 272,\n      unit: \"sq km\",\n    },\n  },\n};\n\n// A helper function to convert kilometers to miles\nconst kmToMi = (km: number): number => {\n  return Math.floor(km / 2.59);\n};\n\nconst mapCityAreas = (obj: Cities): Cities => {\n  // Your code here\n};\n\nconst result = mapCityAreas(cities);\n\nconsole.log(result);\n",
          "solutionCode": "interface City {\n  primaryLanguage: string;\n  population: number;\n  area: {\n    value: number;\n    unit: \"sq km\" | \"sq mi\";\n  };\n}\n\ntype Cities = { [k: string]: City };\n\nconst cities: Cities = {\n  \"New York\": {\n    primaryLanguage: \"English\",\n    population: 8336817,\n    area: {\n      value: 784,\n      unit: \"sq km\",\n    },\n  },\n  Tokyo: {\n    primaryLanguage: \"Japanese\",\n    population: 13942856,\n    area: {\n      value: 2194,\n      unit: \"sq km\",\n    },\n  },\n  Taipei: {\n    primaryLanguage: \"Mandarin\",\n    population: 2646204,\n    area: {\n      value: 272,\n      unit: \"sq km\",\n    },\n  },\n};\n\n// A helper function to convert kilometers to miles\nconst kmToMi = (km: number): number => {\n  return Math.floor(km / 2.59);\n};\n\nconst mapCityAreas = (obj: Cities): Cities => {\n  return Object.entries(obj).reduce((agg, [name, x]) => {\n    return {\n      ...agg,\n      [name]: {\n        ...x,\n        area: {\n          value: kmToMi(x.area.value),\n          unit: \"sq mi\",\n        },\n      },\n    };\n  }, {});\n};\n\nconst result = mapCityAreas(cities);\n\nconsole.log(result);\n",
          "content": ""
        },
        {
          "id": "y6F01Gwa7",
          "type": "media",
          "title": "Functions and Methods",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "There's another word for functions that you will come across during your travels as a software engineer. That word is \"method\" and it means _almost_ the same thing.\n# What is a method?\n\nIt's just a function but it's defined on an object. The first part of that is important—it's just a function. So for all intents and purposes you can just remember functions and not worry about the distinction, but you will see the word \"method\" written online a lot and you will hear other programmers say it. \n# Some quick examples\n\nHere are some string _methods_ at work:\n\n```typescript\n\"some string\".split(\" \"); // [\"some\", \"string\"]\n\"no yelling!\".toUpperCase(); // \"NO YELLING!\"\n\n```\n\nRemember, `split` and `toUpperCase` are just functions, but they would also be called methods because they are defined on the string object.\n\nHere are some more examples of methods:\n\n```typescript\n[\"a\", \"b\", \"c\"].map(x => x + x); // [\"aa\", \"bb\", \"cc\"]\n[1,2,3,4,5].filter(x => x % 2 === 0); // [2,4]\nObject.keys({ name: \"Maomi\", job: \"Sleeping\" }); // [\"name\", \"job\"]\n\n```\n\nIn this example the methods are `map`, `filter`, and `keys`.\n\n> **Rule of thumb**: You can tell it's a method if it's called with a `.` in front of it.\n"
        },
        {
          "id": "7WoHO3ohe",
          "type": "section",
          "title": "Mutation & Immutability",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Let's talk about changes. Mutation refers to modifying data. Let's jump right in to an example:\n# Example: Mutable Arrays\n\n```typescript\nconst a = [];\nconst b = a;\nconsole.log(a, b); // [] []\nconsole.log(a === b); // true\n\n```\n\nHere we have an array `a` and a variable `b` set to the same array. `a` is equal to `b` \\(not surprising\\) and the array is currently empty but we can change that.\n\n```typescript\na.push(\"ch-ch-changes!\");\nconsole.log(a, b); // [\"ch-ch-changes!\"] [\"ch-ch-changes!\"]\nconsole.log(a === b); // true\n\n```\n\nThe array has changed and it is _still the same array_. Is it obvious that the second `console.log` would return `true`? Moreover, is it obvious that `b` is _also_ changed when we changed `a`? Regardless, the array has changed despite still being the same array. In fact, we would say ++it has been mutated++. Arrays are mutable, meaning they can change without becoming a new array. \n\nThis is still a bit abstract, so let's look at another example.\n# Example: Immutable Strings\n\n```typescript\nlet c = \"hello\";\nlet d = c;\nconsole.log(c, d); // \"hello\" \"hello\"\nconsole.log(c === d); // true\n\n```\n\nHere we have a string `c` and another variable `d` equal to the same string. `c` and `d` are very unsurprisingly equal. Now, just like with the array we can change our string. You may have also noticed that we used `let` rather than `const` here\\. We'll get to that in a moment.\n\n```typescript\nc = c + \" world\";\nconsole.log(c, d); // \"hello world\" \"hello\"\nconsole.log(c === d); // false\n\n```\n\nHere we modified `c` by appending `\" world\"` to the end, but `d` remains unchanged. This also seems like the expected behavior, but why is it different for strings and arrays. Furthermore, we had to _reassign_ `c` in order to change it. There is no equivalent of `push` for strings. \n\nStrings are immutable, meaning that you cannot change strings—you cannot mutate strings. You can create new strings and you can change what string a variable is assigned to, but you do not change the string itself.\n\nTo further highlight this difference, consider the following example. Although arrays are mutable we do not _have to_ mutate them:\n\n```typescript\nlet e = [\"h\", \"e\", \"l\", \"l\", \"o\"]\nlet f = e;\nconsole.log(e === f); // true\ne = e.concat([\" \", \"w\", \"o\", \"r\", \"l\", \"d\"]);\nconsole.log(e === f); // false\n\n```\n\nHere we see that we updated `e` without changing the underlying array and without changing `f`. The key is that we _created a new array_ rather than mutating the existing array.\n# Immutability\n\nImmutable types cannot be mutated. They are generally simpler to work with because you **always know** they cannot be mutated. Whenever you are operating on a string you know that if you change the string a new string is created.\n\nMutable types can be mutated. This generally means you have to be more careful when working with mutable types in certain ways. A common mistake is to assume that `array1 === array2` will be `false` if one of the arrays change. This is not true. If the two variables reference the same array they will remain equal even as the array changes.\n# Mutable and Immutable Methods\n\nAs you saw above, some array methods mutate the array and some do not. In general, most array methods **do not** mutate the array. `map`, `filter`, `reduce` for example all create array copies and do not mutate the array. However, some do. Most notably, the `push` method will modify the array rather than create a copy.\n# Mutability Reference\n\nHere are the common types you will be interacting with and whether or not they can be mutated.\n| **Type** | **Mutable?** |\n|:--- |:--- |\n| `string` | No |\n| `number` | No |\n| `boolean` | No |\n| Array | ⚠️ Yes |\n| Object | ⚠️ Yes |\n# Tradeoffs of Mutability\n\nAs with anything in engineering there are tradeoffs to immutable or mutable data types. However, a quick note:\n\n> The benefits and tradeoffs will be less apparent until you start programming larger programs.\n\nThe course challenges are intentionally designed to be roughly bite\\-sized to introduce concepts quickly and provide immediate feedback. However, much of the benefits of immutability and the drawbacks only become viscerally apparent in a larger codebase.\n\n## Immutability Benefits\n\nThe big benefit of immutable data is it makes for much simpler programs. It's easier to reason about data flow when you know that your data cannot change—new data can be created but none of your variables will secretly get updated without you knowing.\n\n## Immutability Drawbacks\n\nThe big drawback of immutability is performance. Immutable data means your program will use more memory for duplicate data and will spend more CPU power copying data. However, modern computers \\(including mobile devices\\) are _extremely_ powerful and have no problem copying data or using slightly more memory.\n\n> In short, immutability will have no performance impact on mobile devices or the web.\n\nIt's still quite possible to write slow code and to bring even modern devices to a grinding halt by writing terrible software, but the point is it is our mistakes as programmers that cause these issues not the immutable data we use.\n\nIf later in your career you decide to start programming low\\-level systems like operating systems or ATM machines then you will care much more about performance, but you will also know much more by then so you will be able to tackle the problem.\n# Mutation is not reassignment\n\n\n## Mutation\n\nIn this example the second `console.log` is not what we would initially expect. Why? `jarbles` was directly modified but `bestFriend` was not, not directly. However, `bestFriend` has indeed changed along with `jarbles`. This may not seem all that bad, or even undesirable, but the issue is that in a real project you might have 100 lines of of code between the first `console.log` and the second. It's much simpler to be able to guarantee that a variable has not changed than it is to worry about what it might be.\n\n```typescript\nconst jarbles = { name: \"Jarbles\", job: \"Cat Trainer\" };\nconst bestFriend = jarbles;\nconsole.log(`My best friend is ${bestFriend.name}!`);\n\njarbles.job = \"Cow Tipper\"; // Oh oh... \n\nconsole.log(`My friend really loves cats, their job is ${bestFriend.job}`)\n\n```\n\n## Reassignment\n\nReassignment is much easier to avoid than mutation because you can simply use `const` to ensure a variable is never reassigned. In fact, this is why we always use `const` instead of `let` unless something is specifically going to be reassigned. This practice ensures that neither you nor someone else working on your code with you accidentally reassigns something that shouldn't be.\n\n```\nconst jarbles = { name: \"Jarbles\", job: \"Cat Trainer\" };\nconst bestFriend = jarbles;\nconsole.log(`My best friend is ${bestFriend.name}!`);\n\n// No way Bongle! This will break the code so there's no inserting yourself here\nbestFriend = { name: \"Bongle\" };\n\nconsole.log(`My friend really loves cats, their job is ${bestFriend.job}`)\n\n```\n# Best Practices\n\nThe best practices are simple:\n\n* Avoid mutation whenever possible.\n   * When working with arrays and objects use immutable methods or the spread operator to make changes without mutation.\n* Avoid reassignment whenever possible. \n   * Always use `const` unless you explicitly want to reassign something, in which case use `let`.\n\n\nMutation and reassignment are not bad, they allow for different solutions to different problems, however they come at the cost of cognitive overhead. Sometimes that cost is worth paying and sometimes its unavoidable.\n\nThe advice of this author is simply to be mindful of your data and deliberate with mutations and reassignments. \n# Functional Programming and Object\\-Oriented Programming\n\nMutability and immutability are often closely intertwined with the two primary language paradigms as follows:\n\n* Object\\-oriented programming loves mutability \\(or at least depends on it\\)\n* Functional programming loves immutability\n\n\n## Classes and Mutation\n\nThis is in large part due to the idioms of these two types of programming. Classes themselves have no meaning without the notion of internal state, and the defining feature of state is that it changes over time. Thus you generally won't find classes without much mutation. Sometimes they are used simply as namespaces, but in that case there are more direct mechanisms such as simple objects or modules so classes are still primarily useful in the context of state and mutation. \n\n## Functions and Immutability\n\nFunctions on the other hand are concerned with input and output. You pass in arguments and you get a return value. When you want to do complex things you write many functions and hook them all together end to end. We will see how to do this in the [functional programming](/workspace/jxRxi1j5A) section\\.\n\nA function certainly could mutate it's arguments and pass them back \\(or not\\) but that's usually clumsy to write when you're expected to return a value. Furthermore a function that modifies its arguments is no longer pure and thus breaks purity guarantees that many functional programming principles depend on.\n# Immutability and Programming Languages\n\nIn this course we are concerned with TypeScript, which shares all the mutability characteristics of JavaScript as described here. However it is worth noting that other languages have different approaches to mutability.\n\nPrimarily object\\-oriented languages such as Ruby and Python tend more towards mutability, in large part simply because using classes is the idiomatic way to solve problems.\n\nPrimarily functional languages such as Clojure and Haskell have immutability built in to the language itself \\(think arrays and objects that cannot be mutated\\).\n\nJavaScript \\(and thus TypeScript\\) is a bit of an oddball language in this respect because you can choose to write highly functional code or highly object\\-oriented code. It's extremely flexible, which is both a blessing and a curse. Throughout your travels when reading code in the wild you may well discover you have no idea what's going on because the author created a bunch of abstractions you're unfamiliar with."
        },
        {
          "id": "ruPUvG25T",
          "type": "typescript",
          "title": "Mutate the Array",
          "instructions": "`arr` and `letters` reference the same array, which can be mutated. \n* Use the `push` array method to mutate the `letters` array by pushing the characters `\" \"`, `\"y\"`, `\"o\"`, and `\"u\"` onto the array.\n   * The resulting array will be `[\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"y\", \"o\", \"u\"]`\n* Log `arr` to the console to confirm that it too was mutated.\n\n",
          "testCode": "// Write your tests here:\ntest(\"`arr` should NOT be mutated directly\", () => {\n  expect(__user_code_string__).not.toMatch(/arr\\s*\\.push\\([\\s\\S]+\\)/);\n  expect(__user_code_string__).not.toMatch(/arr\\s*\\.splice\\([\\s\\S]+\\)/);\n  expect(__user_code_string__).not.toMatch(/arr\\s*\\.sort\\(/);\n});\n\ntest(\"`letters` should be mutated directly\", () => {\n  expect(__user_code_string__).toMatch(/letters\\s*\\.push\\([\\s\\S]+\\)/);\n});\n\ntest('`\" \"`, `\"y\"`, `\"o\"`, and `\"u\"` should be appended to `letters`', () => {\n  expect(letters).toEqual([\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"y\", \"o\", \"u\"]);\n});\n\n// Testing for logged arrays seems difficult. This stringify business seems fragile\n// but we can revisit if it proves not to work in other browsers.\ntest(\"`arr` should be logged to the console\", () => {\n  const logs = parseLogBox(__secret_log_box);\n  expect(JSON.stringify(logs)).toContain(\n    JSON.stringify([\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"y\", \"o\", \"u\"])\n  );\n});\n",
          "videoUrl": "",
          "starterCode": "const arr = [\"h\", \"e\", \"l\", \"l\", \"o\"];\nconst letters = arr;",
          "solutionCode": "const arr = [\"h\", \"e\", \"l\", \"l\", \"o\"];\nconst letters = arr;\n\nletters.push(\" \");\nletters.push(\"y\");\nletters.push(\"o\");\nletters.push(\"u\");\n\nconsole.log(arr);",
          "content": ""
        },
        {
          "id": "zxk4TAdC5",
          "type": "typescript",
          "title": "Mutate the Object in the Array",
          "instructions": "Jim has just been given a new role in `\"Management\"`. Modify his role to be `\"Management\"` using the `peopleCopy` array\\.\n\n**NOTE:** Use simple `0` index to access the object for Jim in the `peopleCopy` array\\. The point of this challenge is to demonstrate that mutable object references remain even if the parent object or array is copied.",
          "testCode": "// Write your tests here:\ntest(\"`people` should NOT be mutated directly\", () => {\n  expect(__user_code_string__).not.toMatch(/people\\s*\\[\\d\\]\\.\\w+/);\n});\n\ntest(\"`peopleCopy` should be mutated directly\", () => {\n  expect(__user_code_string__).toMatch(/peopleCopy\\s*\\[\\d\\]\\.\\w+/);\n});\n\ntest('`people[0]` (aka Jim) should have the role `\"Management\"`', () => {\n  expect(people[0].role).toBe(\"Management\");\n});\n",
          "videoUrl": "",
          "starterCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\n// Calling slice with no arguments copies an array\nconst peopleCopy = people.slice();\n\n// Mutate the peopleCopy array to show that people is NOT mutated\npeopleCopy.push({ name: \"Jarbles\", role: \"Cat Wrangler\" });\nconsole.log(`people has ${people.length} elements, peopleCopy has ${peopleCopy.length} elements`);\n\n// Confirm that they are not the same array\nconsole.log(`people === peopleCopy`, people === peopleCopy)\n\nconsole.log('Before:', people[0]);\n\n// Your code here...\n\nconsole.log('After:', people[0]);",
          "solutionCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\n// Calling slice with no arguments copies an array\nconst peopleCopy = people.slice();\n\n// Mutate the peopleCopy array to show that people is NOT mutated\npeopleCopy.push({ name: \"Jarbles\", role: \"Cat Wrangler\" });\nconsole.log(`people has ${people.length} elements, peopleCopy has ${peopleCopy.length} elements`);\n\n// Confirm that they are not the same array\nconsole.log(`people === peopleCopy`, people === peopleCopy)\n\n\nconsole.log(people[0]);\n\npeopleCopy[0].role = \"Management\";\n\nconsole.log(people[0]);",
          "content": ""
        },
        {
          "id": "Bwbb8vnwD",
          "type": "typescript",
          "title": "The Spread Operator Does Not Mutate!",
          "instructions": "Use the spread operator to update `peopleCopy[0]` \\(aka Jim\\) to have a role of `\"Management\"` _without_ changing the `people` array\\.\n\n**NOTE:** This is the exact same operation as the [Mutate the Object in the Array](/workspace/zxk4TAdC5) challenge, however in this case the goal is **not** to mutate the original object.",
          "testCode": "// Write your tests here:\ntest(\"`people` should NOT be mutated at all\", () => {\n  expect(people).toEqual([\n    { name: \"Jim\", role: \"Sales\" },\n    { name: \"Jenna\", role: \"Management\" },\n    { name: \"Jack\", role: \"Sales\" },\n    { name: \"Julie\", role: \"Assistant\" },\n  ]);\n});\n\ntest(\"`peopleCopy` should be mutated so that Jim has a role of `\\\"Management\\\"`\", () => {\n  expect(peopleCopy).toEqual([\n    { name: \"Jim\", role: \"Management\" },\n    { name: \"Jenna\", role: \"Management\" },\n    { name: \"Jack\", role: \"Sales\" },\n    { name: \"Julie\", role: \"Assistant\" },\n  ]);\n});\n\ntest('The spread operator (`...`) should be used', () => {\n  expect(__user_code_string__).toMatch(/\\.\\.\\.\\s*\\w+/);\n});\n",
          "videoUrl": "",
          "starterCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\n// Calling slice with no arguments copies an array\nconst peopleCopy = people.slice();\n\n// Your code here\n\nconsole.log('Original:', people[0]);\nconsole.log('Copy:', peopleCopy[0]);",
          "solutionCode": "const people = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\n// Calling slice with no arguments copies an array\nconst peopleCopy = people.slice();\n\npeopleCopy[0] = {\n  ...peopleCopy[0],\n  role: \"Management\",\n};\n\nconsole.log('Original:', people[0]);\nconsole.log('Copy:', peopleCopy[0]);",
          "content": "# The Spread Operator\n\nGiven all this talk of mutating objects and arrays it's time to talk about how to make updates without mutating the original data. For example, consider the following object:\n\n```typescript\nconst person = { name: \"Jenna\", role: \"Management\" };\n\n```\n\nJenna has decided to break away from all the \"J\" names in her company and so she's changing her name to `\"Gemma\"`. How could we update the object to reflect this? The mutative way, the easy way is to just assign a new name on the object:\n\n```typescript\nperson.name = \"Gemma\";\nconsole.log(person); // { name: \"Gemma\", role: \"Management\" }\n\n```\n\nThis certainly accomplishes the update we want, but if we wanted to do it without mutation we need a new approach.\n# Enter the Spread Operator\n\nThere is a nifty operator called the spread operator which let's you extend or overwrite objects. The syntax is as follows \\(notice the `...`\\):\n\n```typescript\nconst updatedPerson = {\n  ...person,\n  name: \"Gemma\",\n};\nconsole.log(person); // { name: \"Jenna\", role: \"Management\" }\nconsole.log(updatedPerson); // { name: \"Gemma\", role: \"Management\" }\n\n```\n\nAs you can see the `person` object hasn't changed.\n# Order is important\n\nWhen using the spread operator it's very important to know what order you want to use it in. For example:\n\n```typescript\nconst person = { name: \"Jenna\", role: \"Management\" };\nconst a = {\n  ...person,\n  name: \"Gemma\",\n};\nconst b = {\n  name: \"Gemma\",\n  ...person,\n};\nconsole.log(a); // { name: \"Gemma\", role: \"Management\" }\nconsole.log(b); // { name: \"Jenna\", role: \"Management\" }\n\n```\n\nUsing the spread operator on an object will overwrite whatever came before. So if `person` has a `name` property it will overwrite any `name` property created earlier in the object. If this is not clear let's use some more verbose code to explain. \n\nHere are two equivalent ways to create an object:\n\n```\n// This is the standard way to create an object, but the two forms of \n// creating an object below are equivalent.\nconst a = { name: \"Gemma\" };\n\n// This will result in the same object as above, but it's more verbose\n// and requires more code.\nconst a = {};\na.name = \"Gemma\"\n\n```\nNote: This code wouldn't run in an editor because the constant `a` is defined twice, but it's just for demonstration purposes here.\n\nHere are two ways to give `a` all the properties of `person`:\n\n```\nconst a = {\n  ...person,\n  name: \"Gemma\",\n};\n\n// equivalent to this code\nconst a = {};\na.name = person.name;\na.role = person.role;\na.name = \"Gemma\";\n\n```\n\nNow let's look at the code with the order of `...person` changed so that it comes afterwards.\n\n```\nconst a = {\n  name: \"Gemma\",\n  ...person,\n};\n\n// equivalent to this code\nconst a = {};\na.name = \"Gemma\";\na.name = person.name;\na.role = person.role;\n\n```\n \nChanging the order has completely changed the ultimate value of `a.name`."
        },
        {
          "id": "n9QYwQgTM",
          "type": "section",
          "title": "Side Effects & Purity",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Impure code\\! It's a thing. The term \"pure\" and \"impure\" in this context are concerned with functions and what functions do. The definition of functional purity is as follows. A function is \"pure\" if it passes the following tests:\n\n* The function **always** returns the same result \n* No side effects\n\n# Side Effects\n\nA side effect is any \"effect\" that happens outside the scope of a function. For example, let's look at an impure function that increments a number:\n\n```typescript\nlet count = 0;\n\nconst impureIncrement = () => {\n  count += 1;\n};\n\nconsole.log(count); // 0\nimpureIncrement();\nconsole.log(count); // 1\n\n```\n\nTo be specific `impureIncrement` breaks both tests of purity:\n\n* It accesses the `count` variable from outside its scope. Can can be changed by any other part of the code, and if it changes it will change the return value of `impureIncrement`. Therefore the return value is not guaranteed to be the same for the same input.\n* By incrementing the `count` variable `impureIncrement` is modifying a variable outside its scope. This is a side effect.\n\n\nBy being impure `impureIncrement` loses one of the core features of functions: Reusability. The function depends on the `count` variable so it can't be used in other parts of our code where `count` is not accessible.\n\nLet's look at a pure increment function and compare the differences:\n\n```typescript\nlet count = 0;\n\nconst pureIncrement = (n: number) => {\n  return n + 1;\n};\n\nconsole.log(pureIncrement(count)); // 1\nconsole.log(count); // 0\n\n```\n\nIn contrast to `impureIncrement`, `pureIncrement` does not depend on any variables outside its scope and it doesn't have any side effects. You'll notice that the second time we log `count` it hasn't changed at all. If we want to change `count` we can easily do so by reassigning it:\n\n```typescript\ncount = pureIncrement(count);\n\n```\n# The Case for Pure Functions\n\n\n## Simplicity\n\nWhen dealing with pure functions you are able to ignore _all other code_ while working on them, because you know the only variables relevant to the output are in the function itself. Not having to worry about other code can save you a huge amount of mental energy and anyone else working on your code with you will thank you for making their lives easier too.\n\n## Reusability\n\nPure code is reusable code. All that matters is the input arguments match the required type.\n\n## Testability\n\nThis likely won't mean much now because we haven't covered automated testing yet, but it's an important benefit that we will touch on much more later in the course.\n\nIt's extremely easy to automatically test pure functions so that you will immediately know if they every break do to changes in your code.\n# The Necessity of Side Effects\n\n> This section may read as if side effects are a bad thing and that is simply not the case. Side effects are not bad, they are necessary. However, the tone of this article comes from the **_overuse_** of side effects. When side effects are not needed, they should be avoided. \n\nSide effects are necessary to create interesting software. To make this point clear, let's consider some side effects that software can perform:\n\n* Saving information to a database\n* Sending an email\n* Making a phone call\n* Buying or selling stocks\n* Ordering a package\n\n\nSide effects are inherent in useful software because side effects are how we interact with the world. Software without side effects would not be able to interact with the world, and thus would not be useful to us.\n\nAvoid side effects where possible, be deliberate with them where necessary.\n\n---\n# Appendix\n\n\n## Pure Functions and Class Methods\n\nClasses and pure functions often coexist in the same codebase, but because classes are inherently stateful they do lend themselves to functional purity.\n\n### Instance Methods\n\n**TL;DR:** Instance methods and pure functions are _incompatible_.\n\nLet's consider some examples:\n\n```typescript\nclass Incrementor {\n  n: number;\n\n  constructor(n: number) {\n    this.n = n;\n  }\n\n  increment = () => {\n    this.n += 1;\n  };\n}\n\nconst incrementor = new Incrementor(0);\nconsole.log(incrementor.n); // 0\nincrementor.increment();\nconsole.log(incrementor.n); // 1\n\n```\n\nIt may be tempting to think that the `increment` method of `Incrementor` is pure because it only operates on its own class, but this is not true. The reason is, we have no guarantees about the value of `this.n`. It is just as bad as an external variable for purity because not only can other methods of `Incrementor` modify `n` but _any code at all_ with access to the instance can.\n\n```typescript\nclass Incrementor {\n  n: number;\n\n  constructor(n: number) {\n    this.n = n;\n  }\n\n  increment = () => {\n    this.n += 1;\n  };\n}\n\nconst incrementor = new Incrementor(0);\nconsole.log(incrementor.n); // 0\nincrementor.increment();\nconsole.log(incrementor.n); // 1 \n\n// Directly modify n\nincrementor.n = 87;\nincrementor.increment();\nconsole.log(incrementor.n); // 88\n\n```\n\nWe've changed the return value of `incrementor.increment()` without changing it's arguments\\! This is not OK for a pure function.\n\nYou may be thinking surely can just make `n` a private instance property and thus disallow access from the outside world. Then we will have a pure function\\! Unfortunately in that case there are still two problems:\n\n* JavaScript\\. Your own TypeScript codebase will respect `private` properties but any code that you import into you application from JavaScript that has access to `incrementor` could still update the value.\n* Instance methods. We didn't include any other instance methods above but maybe someone will add some later. Maybe se ourselves will add some later, forgetting that we wanted increment to be a pure function.\n\n\nLet's modify the code to use a private instance method for `n`. We'll also add a `goWild` method to demonstrate the danger of other methods to our would\\-be pure function.\n\n```typescript\nclass Incrementor {\n  // Ooooh so private, the outside world can't change my value!\n  private n: number;\n\n  constructor(n: number) {\n    this.n = n;\n  }\n\n  increment = () => {\n    this.n += 1;\n  };\n\n  // Since n is not private, we need a method to access it\n  getN = () => this.n;\n\n  goWild = () => {\n    this.n = Math.random();\n  };\n}\n\nconst incrementor = new Incrementor(0);\nconsole.log(incrementor.getN()); // 0\nincrementor.increment();\nconsole.log(incrementor.getN()); // 1 \n\n// Uh oh...\nincrementor.goWild();\n\nincrementor.increment();\nconsole.log(incrementor.getN()); // ???\n\n```\n\nThere is no way of knowing what the value of `n` will be on the last line, despite the fact the increment was called with the same arguments as before—no arguments. Thus the `increment` method is not a pure function.\n\nIt is very simple to create a  pure increment function:\n\n```\nconst increment = (n: number) => n + 1;\n\n```\n\nHowever, in this case we have no need for a `class`. This is why pure functions and class methods are incompatible.\n\n### Static Methods\n\nUnlike instance methods, static methods can absolutely be pure. Static methods have no instance to access so they can be just as pure or impure as any old function. Let's create a `Calculations` class which will serve as a collection of math calculations:\n\n```typescript\nclass Calculations {\n  static add = (a: number, b: number) => a + b;\n  static increment = (n: number) => n + 1;\n};\n\nconsole.log(Calculations.add(2, 3)); // 5\nconsole.log(Calculations.increment(7)); // 8\n\n```\n\nBoth `Calculations.add` and `Calculations.increment` are pure functions. The question here is, what are we using the class for?\n\nIf someone else comes along and wants to use our functions they might do this if they don't read our source code:\n\n```\nconst c = new Calculations();\nconsole.log(c.add(2,3)); // This will break\n\n```\n\nThere's no reason to instantiate the `Calculations` class, it's just a collection of static methods. However, that's not necessarily obvious without reading through the source code and believe me, not everyone reads the source of all the functions they use.\n\nIn this case a more intuitive approach would simply be to use an object:\n\n```typescript\nconst Calculations = {\n  add: (a: number, b: number) => a + b,\n  increment: (n: number) => n + 1,\n};\n\nconsole.log(Calculations.add(2, 3)); // 5\nconsole.log(Calculations.increment(7)); // 8\n\n```\n\nUse your own judgement when working with classes and functions. Sometimes static methods will work best because they are consistent with other code in your codebase. Sometimes they may be entirely unnecessary and a plain object would serve better.\n\nIn general, if something isn't needed then it's best left out. Programming is complex enough without more code lying around that isn't really needed but still runs and could potentially contain bugs."
        },
        {
          "id": "t9xjzdvd6",
          "type": "typescript",
          "title": "A Pure Push Function",
          "instructions": "Write your own version of the `push` array method with the following characteristics \\(to avoid confusion we'll call this function `append`\\):\n\n* `append` should be pure \\(no side effects, does not access external variables\\)\n* `append` should take two arguments: an array and an item to append to the array\n* `append` should return a _new array_ with all the elements of the first array plus the new element appended at the end  \n\n\nThe array method `push` is impure because its output is not dependent solely on its input. It will depend on the array itself, which can be modified by other parts of the codebase.",
          "testCode": "// Write your tests here:\ntest(\"`people` should **not** be mutated\", () => {\n  expect(people).toEqual([\n    { name: \"Jim\", role: \"Sales\" },\n    { name: \"Jenna\", role: \"Management\" },\n  ]);\n});\n\ntest(\"`append` should return `newRoster` with Jolin appended as the final element\", () => {\n  expect(newRoster).toEqual([\n    { name: \"Jim\", role: \"Sales\" },\n    { name: \"Jenna\", role: \"Management\" },\n    { name: \"Jolin\", role: \"Cat Trainer\" },\n  ]);\n  expect(__user_code_string__).toMatch(/\\append\\(.+\\)/);\n});\n",
          "videoUrl": "",
          "starterCode": "const append = (arr: any[], element: any) => {\n    // Your code here\n};\n\nconst people = [\n    { name: \"Jim\", role: \"Sales\" },\n    { name: \"Jenna\", role: \"Management\" },\n];\n\nconst newRoster = append(people, { name: \"Jolin\", role: \"Cat Trainer\" });\n\nconsole.log('People:', people);\nconsole.log('New Roster:', newRoster)\n",
          "solutionCode": "const append = (arr: any[], element: any) => {\n    return [ ...arr, element ];\n};\n\nconst people = [\n    { name: \"Jim\", role: \"Sales\" },\n    { name: \"Jenna\", role: \"Management\" },\n];\n\nconst newRoster = append(people, { name: \"Jolin\", role: \"Cat Trainer\" });\n\nconsole.log('People:', people);\nconsole.log('New Roster:', newRoster)\n",
          "content": ""
        },
        {
          "id": "IIIdYXsE$",
          "type": "typescript",
          "title": "A Pure Pop Function",
          "instructions": "Let's do the same thing with `.pop`, a function which just \"pops\" the final element from an array. If the array is empty, pop returns `-1`. Write a `last` function which returns the final element in an array without modifying the original array.",
          "testCode": "test(\"The `last` function should be defined.\", () => {\n  expect(typeof last === \"function\").toBe(true);\n});\n\ntest(\"`last` should return `-1` for empty arrays.\", () => {\n  expect(last([])).toBe(-1);\n});\n\ntest(\"`last` should return the final element in the input array, without modifying it.\", () => {\n  let input = [1, 2, 3];\n  let expected = input.slice();\n  let result = last(input);\n  expect(input).toEqual(expected);\n  expect(result).toBe(input.pop());\n\n  input = [1, 2, 3, 8, true];\n  expected = input.slice();\n  result = last(input);\n  expect(input).toEqual(expected);\n  expect(result).toBe(input.pop());\n\n  input = stringList;\n  expected = input.slice();\n  result = last(input);\n  expect(input).toEqual(expected);\n  expect(result).toBe(input.pop());\n});",
          "videoUrl": "",
          "starterCode": "// Your code here",
          "solutionCode": "// A pure function version of the array .pop method\nconst last = (values: any[]): any => {\n  if (values.length === 0) {\n    return -1;\n  }\n\n  // Get the last value\n  const last = values[values.length - 1];\n  return last;\n}",
          "content": ""
        },
        {
          "id": "$SghMZjwc",
          "type": "typescript",
          "title": "Clone an Array",
          "instructions": "Array's provide a handy built\\-in `.slice` method which copies the array into a new array. Implement slice manually in a `cloneArray` pure function which should accept an array as input and return a copied version of that array without using `.slice`.",
          "testCode": "test(\"`cloneArray` should be a function.\", () => {\n  expect(typeof cloneArray === \"function\").toBe(true);\n});\n\ntest(\"`cloneArray` should return a copied version of the input array.\", () => {\n  let input = [1, 2, 3];\n  let result = cloneArray(input);\n  expect(input !== result).toBe(true);\n  expect(input).toEqual(result);\n\n  input = [1, 2, 3, 5, 6, 7, 8, 3, 345, 345, 432, 123, 432, 241];\n  result = cloneArray(input);\n  expect(input !== result).toBe(true);\n  expect(input).toEqual(result);\n\n  input = stringList;\n  result = cloneArray(input);\n  expect(input !== result).toBe(true);\n  expect(input).toEqual(result);\n});\n\ntest(\"`cloneArray` should not use `.slice` method.\", () => {\n  expect(__user_code_string__.includes(\".slice\")).toBe(false);\n});\n",
          "videoUrl": "",
          "starterCode": "// Your code here",
          "solutionCode": "// Manually clone an array without using the slice method\nconst cloneArray = (array: any[]): any[] => {\n  let clone = [];\n  for (let i = 0; i < array.length; i++) {\n    clone[i] = array[i];\n  }\n  return clone;\n}",
          "content": ""
        },
        {
          "id": "jxRxi1j5A",
          "type": "section",
          "title": "Functional Programming",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Functions are pretty flexible. So flexible in fact that you can build _whole applications_ with functions alone. If you boil JavaScript down, it's actually almost entirely objects and functions \\(see the Appendix for more on this if you're curious\\).\n\nThe aim of this section is to explain how code like this works:\n\n```typescript\n[\"a\", \"b\", \"c\"]\n  .map(capitalize)\n  .map(surround(`'`))\n  .map(append(\" is a letter\")); // [\"'A' is a letter\", \"'B' is a letter\", \"'C' is a letter\"]\n\n```\n# Functions as data\n\nAlso known as first\\-class functions, if you like jargon.\n\nFunctions are like any other data type in that they can be passed around and used wherever syntactically valid. The jargon here is \"first\\-class\" meaning that functions are just like any other value in terms of where they can be used.\n\nIn other words, ++functions can be used just like data++.\n\n> **Why do first\\-class functions matter**?\n> First class functions allow you a huge degree of flexibility in your programs. Having first\\-class functions is one of the major defining characteristics of JavaScript and thus of TypeScript too. **Not all** programming languages allow you to use functions in this way.\n\nLook at the first code below. You will see that we are passing a function in to the `map` array method. Since functions are like any other value we can grab it right out of there and assign it to another variable. The following two code snippets are equivalent:\n\n```typescript\n[\"a\", \"b\", \"c\"].map((letter: string) => letter.toUpperCase()); // => [\"A\", \"B\", \"C\"]\n\n```\n\n```typescript\nconst capitalize = (letter: string) => letter.toUpperCase();\n\n[\"a\", \"b\", \"c\"].map(capitalize); // => [\"A\", \"B\", \"C\"]\n\n```\n\nJust like any other value we can also put functions into arrays:\n\n```typescript\nconst capitalize = (letter: string) => letter.toUpperCase();\nconst surroundQuote = (s: string) => `'${s}'`;\nconst appendLetter = (s: string) => `${s} is a letter`;\n\n// Create an array of transformations (functions)\nconst transformations = [capitalize, surroundQuote, appendLetter];\n\nconst result = [\"a\", \"b\", \"c\"].map((letter: string) => {\n  transformations.forEach((transform: Function) => {\n    letter = transform(letter);\n  });\n  return letter;\n});\n\nconsole.log(result);\n// [\"'A' is a letter\", \"'B' is a letter\", \"'C' is a letter\"];\n\n```\n\nFinally, just like any other value we can put functions onto objects. Here's an example creating some helper functions that prepend the type of log operation to the message:\n\n```typescript\nconst Log = {\n  info: (message: string) => console.info(\"[INFO]\" + message),\n  warn: (message: string) => console.info(\"[WARN]\" + message),\n};\nLog.info(\"Log helper created\"); // \"[INFO] Log helper created\"\nLog.warn(\"This helper is not so useful...\"); // \"[WARN] This helper is not so useful...\"\n\n```\n# Simple, but not easy¹\n\nThe idea that functions can be used anywhere just like other values is simple, but it's not easy. Here's what we mean:\n\n* It's **simple** because you don't have to worry about where functions can be used. If you can use any kind of value you can use a function. This means less cognitive overhead worrying about what type can be used where.\n* It's **not easy** because it's unintuitive. We're used to thinking of \n   * **NOTE:** It's unintuitive for _most people_. It is true that some people understand these concepts very quickly. If you are one of those people that's great\\! However, most programmers, including this author, struggled with the idea of first\\-class functions before it finally clicked.\n\n# Higher\\-order Functions\n\nAs a consequence of functions being first\\-class, they can be passed in to other functions and passed back out too. When a function deals with other functions it's called a higher\\-order function.\n\n> **Jargon Tip**: Now that you know of higher\\-order functions you can forget the term until someone brings it up in a programming interview or a pedantry contest. The _idea_ of higher order functions is extremely useful—the jargon less so.\n\n## Functions can take other functions as arguments\n\nYou've already seen this but it may not have been apparent what was going on. Array methods often take functions:\n\n* `map`\n* `filter`\n* `reduce`\n\n\nThese are all examples of functions that take other functions as arguments. As an example:\n\n```typescript\nconst double = (n: number) => n * 2;\n[2,3,4].map(double); // => [4, 6, 8]\n\n```\n\n## Functions can return functions\n\nThis is where things get a bit more interesting and potentially more confusing. Let's just jump right in with an example. Above we had a `double` function that will multiply any number by `2`. What if we wanted some number other than `2`? We can write other functions for other numbers, but we can also write a function that will create other functions.\n\n```typescript\nconst multiplyBy = (n: number) => {\n  // Define our inner function. n is currently available within scope\n  // so we can make use of it in our inner function \n  const multiplyByN = (x: number) => {\n    return n * x;\n  };\n\n  // Return the new function\n  return multiplyByN;\n};\n\n```\n\nNow we can use this `multiplyBy` function to define new functions for us. Rewriting the doubling example above:\n\n```\nconst double = multiplyBy(2);\n[2,3,4].map(double); // => [4, 6, 8]\n\n```\n\nIf we're not going to reuse the `double` function we can make this even less verbose:\n\n```\n[2,3,4].map(multiplyBy(2)); // => [4, 6, 8]\n\n```\n\n**NOTE:** Another way you will often see these functions written is in this more concise way. Here's our rewritten `multiplyBy` function\\.\n\n```\nconst multiplyBy = (n: number) => (x: number) => n * x;\n\n```\n\nRevisiting our string transformation functions from above, we can rewrite them to make them more reusable. Here was the original code. `capitalize` is not going to change, but the other two can be rewritten to allow surrounding with any string and appending any string.\n\n```\n// Original code\nconst capitalize = (letter: string) => letter.toUpperCase();\nconst surroundQuote = (s: string) => `'${s}'`;\nconst appendLetter = (s: string) => `${s} is a letter`;\nconst transformations = [capitalize, surroundQuote, appendLetter];\n\n// New code. capitalize remains the same\nconst surround = (s: string) => (x: string) => s + x + s;\nconst append = (s: string) => (x: string) => x + s;\nconst transformations = [capitalize, surround(`'`), append(\" is a letter\")];\n\n```\n# Why?\n\nThis may all seem a bit crazy and even _less readable_ than before, but there's a reason many programmers use this style.\n\n## Declarative Code\n\nDeclarative code is more concerned with the \"what\" than the \"how\" which can often make it very easy to read, at least once you're familiar with this programming style. It's very easy to get caught up in the nitty gritty details while programming. Declarative programming is all about creating abstractions that make it easier to not worry about the \"how\" so you can focus on \"what\" you want instead.\n\nLet's revisit the example from above. In English we might say:\n\n1. Capitalize each letter\n1. Surround each letter with a single quote\n1. Append \" is a letter\" to the end of the string \n\n\nNow let's look at some code again:\n\n```typescript\n[\"a\", \"b\", \"c\"]\n  .map((x) => x.toUpperCase())\n  .map((x) => `'${x}'`)\n  .map((x) => x + \" is a letter\"); // [\"'A' is a letter\", \"'B' is a letter\", \"'C' is a letter\"]\n\n```\n\nThere's certainly nothing wrong with this code. It's concise and direct. However, a more declarative approach might make it more clear what each step is doing:\n\n```typescript\n[\"a\", \"b\", \"c\"]\n  .map(capitalize)\n  .map(surround(`'`))\n  .map(append(\" is a letter\")); // [\"'A' is a letter\", \"'B' is a letter\", \"'C' is a letter\"]\n\n```\n\nUltimately some of this comes down to personal choice. How you choose to write your own code is highly subjective and you should pursue whatever you enjoy at the time while still being open to new styles.\n\nRegardless of how you enjoy programming you will eventually read code in many different styles so it will help to be familiar with many.\n\n---\n# Appendix\n\n\n## Simple vs. Easy\n\nI've borrowed this particular distinction from the seminal talk [Simple Made Easy](https://www.infoq.com/presentations/Simple-Made-Easy/) by Rich Hickey, the creator of the [Clojure](https://clojure.org/) programming language. Clojure, unsurprisingly, is a functional programming language that incorporates this idea of striving for code that is simple rather than easy.\n\nThe idea is that there's a strong distinction between what is simple and what is quick or within reach.\n\n* Simple: Lacking exceptions. Not interconnected or dependent on other conditions.\n   * Being able to use functions as data is simple because you can use other values as data. You don't have to worry about whether or not something is a function to add it to an array for example.\n* Easy: Within reach, nearby. Relating to things we already know.\n   * Using functions as data is not easy because we lack mental context for it. Using functions as a set of steps to complete **is easy** because we have context for this. \n\n\n### Sometimes you can have both\n\nSimple and easy are not mutually exclusive, but they are often in opposition in the world of programming.\n\n## Classes before the class keyword\n\nLet's create a simple `Person` class\\.\n\n```\nclass Person {\n  constructor(props) {\n    this.name = props.name;\n    this.role = props.role;\n  }\n\n  getDescription = () => {\n    return `${this.name} works in ${this.role}`;\n  }\n}\n\nconst jim = new Person({ name: 'Jim', role: 'Sales' });\n\nconsole.log(jim.getDescription()); // Jim works in Sales\n\n```\n\nHowever, did you know that classes are actually functions? In the past, classes were only classes because of the `new` keyword which could be applied to functions. Here's how you could create a `Person` class without using the `class` keyword\\.\n\n```\nfunction Person(props) {\n  this.name = props.name;\n  this.role = props.role;\n\n  this.getDescription = () => {\n    return `${this.name} works in ${this.role}`;\n  };\n}\n\nconst jim = new Person({ name: 'Jim', role: 'Sales' });\n\nconsole.log(jim.getDescription()); // Jim works in Sales\n\n```\n\nThese two examples will give you the same result.\n\n> **NOTE:** Although you can create classes this way you absolutely should use the `class` keyword when creating classes. It makes for much clearer code, which is part of why the `class` keyword was created and added to the language.\n"
        },
        {
          "id": "Jo7lG3TTa",
          "type": "typescript",
          "title": "Functions as Values",
          "instructions": "We've put a number of functions into the `functions` array\\. Use the `functions` array to recreate the `capitalizeWords` function from the [Capitalize Words challenge](/workspace/A5veAUqXP).\n\n* `capitalizeWords` should capitalize every word in a string.\n* Rather than using the code from a past challenge use the `functions` array to run every function on a string in order.\n\n",
          "testCode": "test(\"`capitalizeWords` should capitalize every word in a string\", () => {\n  expect(capitalizeWords(\"hey\")).toBe(\"Hey\");\n  expect(capitalizeWords(\"Hey\")).toBe(\"Hey\");\n  expect(capitalizeWords(\"less is more\")).toBe(\"Less Is More\");\n});\n\ntest(\"The `functions` array should be used in your solution\", () => {\n  // Pretty rudimentary test. Just lolk for the array being accessed with brackets\n  // OR dot syntax\n  try {\n    expect(__user_code_string__).toMatch(/functions\\[.+\\]/);\n  } catch (err) {\n    expect(__user_code_string__).toMatch(/functions\\./);\n  }\n});\n",
          "videoUrl": "",
          "starterCode": "const capitalize = (word: string): string => {\n  return word[0].toUpperCase() + word.slice(1);\n};\nconst splitOnSpace = (s: string) => s.split(\" \");\nconst joinOnSpace = (words: string[]) => words.join(\" \");\n\nconst functions: Function[] = [\n  splitOnSpace,\n  (words: string[]) => words.map(capitalize), // Run capitalize on every word\n  joinOnSpace,\n];\n\nconst capitalizeWords = (str: string): string => {\n  // Your code here\n};\n\nconsole.log(capitalizeWords(\"welcome to pairwise\")); // \"Welcome To Pairwise\"",
          "solutionCode": "const capitalize = (word: string): string => {\n  return word[0].toUpperCase() + word.slice(1);\n};\n\nconst splitOnSpace = (s: string) => s.split(\" \");\nconst joinOnSpace = (words: string[]) => words.join(\" \");\n\nconst functions: Function[] = [\n  splitOnSpace,\n  (words: string[]) => words.map(capitalize), // Run capitalize on every word\n  joinOnSpace,\n];\n\n// We can iterate through all the functions and run them in order, reassigning\n// the result every iteration.\n// NOTE: we could simply reassign `str` as well. Since it's a string it will \n// not be mutated, however, I find using the `result` variable makes it more\n// clear that there is no mutation going on.\nconst capitalizeWords1 = (str: string): string => {\n  let result = str;\n  functions.forEach((fn) => {\n    result = fn(result);\n  });\n  return result;\n};\n\n// Same as above, but using a for loop instead\nconst capitalizeWords2 = (str: string): string => {\n  let result = str;\n  for (let i = 0; i < functions.length; i++) {\n    result = functions[i](result);\n  }\n  return result;\n};\n\n// Another approach is to use reduce to run every single function in order.\n// NOTE: It's important to use `str` as the starting value for reduce\nconst capitalizeWords3 = (str: string): string => {\n  return functions.reduce((x: any, fn: Function) => {\n    return fn(x);\n  }, str);\n  //  👆 This starting value is important, otherwise the first `x` will not be the input string\n};\n\nconst capitalizeWords = capitalizeWords1;\n\nconsole.log(capitalizeWords(\"welcome to pairwise\")); // \"Welcome To Pairwise\"",
          "content": ""
        },
        {
          "id": "U7AhhCIyGT",
          "type": "typescript",
          "title": "Higher-Order Filtering",
          "instructions": "Write your own version of the array `filter` function\\. Your function should take two arguments: An array to filter and the function to test if an element should be included in the result.\n\n**NOTE:** In practice you can of course use the `.filter` method of an array directly, however, writing your own `filter` function will help you understand higher order functions as well as the standard array `.filter` method\\.",
          "testCode": "// Write your tests here:\ntest(\"`filter(numbers, isEven)` should be `[2,4]`\", () => {\n  expect(filter(numbers, isEven)).toEqual(numbers.filter(isEven));\n});\ntest(\"`filter(numbers, isEven)` should be `[2,4]`\", () => {\n  expect(filter(people, isPersonInSales)).toEqual(people.filter(isPersonInSales));\n});\ntest(\"The array `.filter` method should **not** be used\", () => {\n  expect(__user_code_string__).not.toMatch(/.+\\.filter/);\n})\n",
          "videoUrl": "",
          "starterCode": "const filter = (arr: any[], isIncluded: (x: any) => boolean): any[] => {\n  // Your code here\n};\n\ninterface Person {\n  name: string;\n  role: string;\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconst people: Person[] = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\nconst isEven = (n: number) => n % 2 === 0;\nconst isPersonInSales = (x: Person) => x.role === \"Sales\";\nconsole.log(filter(numbers, isEven)); // [2,4]\nconsole.log(filter(people, isPersonInSales)); // [{ name: \"Jim\", role: \"Sales\" }, { name: \"Jack\", role: \"Sales\" }]\n",
          "solutionCode": "type Filter = (arr: any[], isIncluded: (x: any) => boolean) => any[];\n\n/**\n * There are many ways to solve this one. Here are a few.\n */\n\n// The forEach approach. The same could be accomplished with a for loop but it would be a bit more verbose\nconst filter1: Filter = (arr, isIncluded) => {\n  const result: any[] = [];\n\n  arr.forEach((x) => {\n    if (isIncluded(x)) {\n      result.push(x);\n    }\n  });\n\n  return result;\n};\n\n// The .reduce method. The code here is shorter for sure, but it may be a bit less clear\n// what's going on if you're not used to reduce. Ther's also no array mutation here\n// which is nice, but there's no real advantage over filter1 in this regard. Since filter1\n// only mutates its own local variables it's still a pure function.\nconst filter2: Filter = (arr, isIncluded) => {\n  return arr.reduce((agg, x) => {\n    return isIncluded(x) ? [...agg, x] : agg;\n  }, []);\n};\n\n// This is a bit of an oddball solution just thrown in to add variaety. You can accomplish\n// almost anything with while loops and this is no exception. That doesn't mean you should\n// though.\nconst filter3: Filter = (arr, isIncluded) => {\n  const copy = arr.slice(); // Copy the array to avoid mutating the passed in array\n  const result = [];\n  let next = copy.shift();\n  while (next !== undefined) {\n    if (isIncluded(next)) {\n      result.push(next);\n    }\n    next = copy.shift();\n  }\n  return result;\n};\n\n// You can modify this line to change which filter function is tested\nconst filter = filter1;\n\ninterface Person {\n  name: string;\n  role: string;\n}\nconst numbers = [1, 2, 3, 4, 5];\nconst people: Person[] = [\n  { name: \"Jim\", role: \"Sales\" },\n  { name: \"Jenna\", role: \"Management\" },\n  { name: \"Jack\", role: \"Sales\" },\n  { name: \"Julie\", role: \"Assistant\" },\n];\n\nconst isEven = (n: number) => n % 2 === 0;\nconst isPersonInSales = (x: Person) => x.role === \"Sales\";\nconsole.log(filter(numbers, isEven)); // [2,4]\nconsole.log(filter(people, isPersonInSales)); // [{ name: \"Jim\", role: \"Sales\" }, { name: \"Jack\", role: \"Sales\" }]\n",
          "content": "This `.filter` method is just one example of higher order functions. Many of the built\\-in array methods are higher order functions, for example:\n\n* `map`\n* `filter`\n* `reduce`\n* `findIndex`\n* `find`\n* `every`\n* `some`\n* `forEach`\n\n\nAll these methods take a function as at least one of their arguments.\n# Callbacks\n\nJargon time\\! Get excited because we have more obscure terminology coming your way. Generally when you pass a function into another function its called a \"callback.\" You will see this term used a lot in the JavaScript and TypeScript community because this concept is used heavily in many situations.\n\nLater in the course when we get into asynchronous programming and Node \\(programming servers\\) there will be callbacks all over the place.\n# Predicate Functions\n\nYou know how you pass a function into `.filter` to decide which elements of an array to keep? That type of function is so common that it actually has a name: A predicate. \n\nA predicate is a function that takes in some value and returns `true` or `false`. The type signature looks like this:\n\n```typescript\ntype Predicate = (x: any) => boolean;\n\n```\n\nExamples of predicates:\n\n```typescript\nconst isEven = (x: number) => x % 2 === 0;\nconst isNotInSales = (x: Person) => x.role !== \"Sales\";\nconst nameStartsWithJ = (x: person) => person.name.startsWith(\"J\");\n\n```\n\nThese are all predicates because they take in a value and return a boolean. Many array methods listed above make use of predicates:\n\n* `filter`\n* `findIndex`\n* `find`\n* `some`\n* `every`\n\n"
        },
        {
          "id": "4oZlcZsZi",
          "type": "typescript",
          "title": "Run All Functions",
          "instructions": "Write a `runAll` function that will take an `initialValue` and a list of `functions`. `runAll` should run each function in turn passing the result from one function into the next. For example:\n\nThis code:\n```\nrunAll(\"hello pairwise\", [splitOnSpace, capitalizeArray, joinOnSpace]); // => \"Hello Pairwise\"\n\n```\nWould be equivalent to:\n```\njoinOnSpace(capitalizeArray(splitOnSpace(\"hello pairwise\"))); // => \"Hello Pairwise\"\n\n```\n",
          "testCode": "test(\"`runAll` should run an initial value through all functions\", () => {\n  expect(runAll(\"hey\", [(x) => x.split(\"\")])).toEqual([\"h\", \"e\", \"y\"]);\n  expect(runAll(\"hey\", [(x) => x.split(\"\"), (x) => x.join(\"-\")])).toEqual(\n    \"h-e-y\"\n  );\n  expect(\n    runAll(\"hey\", [\n      (x) => x.split(\"\"),\n      (xs) => xs.map((y) => y.toUpperCase()),\n      (x) => x.join(\"-\"),\n    ])\n  ).toEqual(\"H-E-Y\");\n});\ntest(\"`capitalizeWords` should capitalize every word in a string\", () => {\n  expect(capitalizeWords(\"hey\")).toBe(\"Hey\");\n  expect(capitalizeWords(\"Hey\")).toBe(\"Hey\");\n  expect(capitalizeWords(\"less is more\")).toBe(\"Less Is More\");\n});\n",
          "videoUrl": "",
          "starterCode": "const capitalize = (word: string): string => {\n  return word[0].toUpperCase() + word.slice(1);\n};\nconst capitalizeArray = (words: string[]) => words.map(capitalize);\nconst splitOnSpace = (s: string) => s.split(\" \");\nconst joinOnSpace = (words: string[]) => words.join(\" \");\n\nconst runAll = (initialValue: any, functions: Function[]) => {\n  // Your code here\n};\n\nconst capitalizeWords = (str: string) => {\n  return runAll(str, [splitOnSpace, capitalizeArray, joinOnSpace]);\n};\n\nconsole.log(capitalizeWords(\"welcome to pairwise\")); // \"Welcome To Pairwise\"\n",
          "solutionCode": "const capitalize = (word: string): string => {\n  return word[0].toUpperCase() + word.slice(1);\n};\nconst capitalizeArray = (words: string[]) => words.map(capitalize);\nconst splitOnSpace = (s: string) => s.split(\" \");\nconst joinOnSpace = (words: string[]) => words.join(\" \");\n\nconst runAll1 = (initialValue: any, functions: Function[]) => {\n  let result = initialValue;\n  functions.forEach((fn) => {\n    result = fn(result);\n  });\n  return result;\n};\n\n// another approach using .reduce\nconst runAll2 = (initialValue: any, functions: Function[]) => {\n  return functions.reduce((acc, fn) => fn(acc), initialValue);\n};\n\nconst runAll = runAll1;\n\nconst capitalizeWords = (str: string): string => {\n  return runAll(str, [splitOnSpace, capitalizeArray, joinOnSpace]);\n};\n\nconsole.log(capitalizeWords(\"welcome to pairwise\")); // \"Welcome To Pairwise\"\n",
          "content": ""
        },
        {
          "id": "JYcktwpDa1",
          "type": "typescript",
          "title": "A Generic Adding Function",
          "instructions": "Write a function called `createdAdder` that takes a number `n` and returns _a new function_ that will add `n` to any number passed. For example:\n\n```typescript\nconst add5 = createAdder(5);\nconsole.log(add5(2)); // 7\nconsole.log(add5(10)); // 15\nconsole.log(add5(71)); // 76\n\nconst increment = createAdder(1);\nconsole.log(increment(2)); // 3\nconsole.log(increment(10)); // 11\nconsole.log(increment(71)); // 72\n\n```\n",
          "testCode": "// Write your tests here:\nconst testValues = [1, 3, 5, 7, 2, 28, 68, 256];\n\ntest(\"`createAdder` should return a function\", () => {\n  expect(typeof createAdder(0)).toBe('function');\n});\n\ntestValues.forEach((n) => {\n  test(`\\`add5(${n})\\` should be \\`${n + 5}\\``, () => {\n    expect(add5(n)).toBe(n + 5);\n  });\n});\ntestValues.forEach((n) => {\n  test(`\\`increment(${n})\\` should be \\`${n + 1}\\``, () => {\n    expect(increment(n)).toBe(n + 1);\n  });\n});\n",
          "videoUrl": "",
          "starterCode": "type Adder = (x: number) => number;\n\nconst createAdder = (n: number): Adder => {\n  // Your code here\n};\n\nconst add5 = createAdder(5);\nconst increment = createAdder(1);\n\n// You can uncomment these log statements if you want to see some output\n\n// console.log(add5(2)); // 7\n// console.log(add5(10)); // 15\n// console.log(add5(71)); // 76\n\n// console.log(increment(2)); // 3\n// console.log(increment(10)); // 11\n// console.log(increment(71)); // 72\n",
          "solutionCode": "type Adder = (x: number) => number;\n\nconst createAdder = (n: number): Adder => {\n  return (x: number) => n + x;\n};\n\nconst add5 = createAdder(5);\nconsole.log(add5(2)); // 7\nconsole.log(add5(10)); // 15\nconsole.log(add5(71)); // 76\n\nconst increment = createAdder(1);\nconsole.log(increment(2)); // 3\nconsole.log(increment(10)); // 11\nconsole.log(increment(71)); // 72",
          "content": ""
        },
        {
          "id": "3aH7QTZ3v",
          "type": "typescript",
          "title": "More higher-order functions",
          "instructions": "Write the following two functions:\n\n* `prepend`: Creates new \"prepender\" functions that will prepend a string onto another string\n* `append`: Very similar to prepend but it _appends_ to the end of a string. \n\n\nThe returned functions should be able to handle numbers too. You shouldn't have to write any additional code to get this functionality since combining a string and a number automatically creates a string. Examples:\n\n```typescript\nconst formatDollars = prepend(\"$\");\nconst formatPercent = append(\"%\");\nformatDollars(12); // => \"$12\"\nformatPercent(12); // => \"12%\"\n\n// Any string will work, even if if the output doesn't make much sense\nformatDollars(\"uper\")); // \"$uper\"\n\n```\n",
          "testCode": "// Write your tests here:\ntest(\"`formatDollars(12)` should return `\\\"$12\\\"`\", () => {\n  expect(formatDollars(12)).toBe(\"$12\");\n});\ntest(\"`formatPercent(12)` should return `\\\"12%\\\"`\", () => {\n  expect(formatPercent(12)).toBe(\"12%\");\n});\ntest(\"`formatDollars(12)` should return `\\\"$12\\\"`\", () => {\n  expect(formatDollars(\"uper\")).toBe(\"$uper\");\n});\ntest(\"`greet(\\\"Jarvis\\\")` should return `\\\"Hello Jarvis\\\"`\", () => {\n  expect(greet(\"Jarvis\")).toBe(\"Hello Jarvis\");\n});\n",
          "videoUrl": "",
          "starterCode": "type FormatFunction = (s: string) => (x: string | number) => string;\n\nconst prepend: FormatFunction = (prefix) => {\n  // Your code here\n};\n\nconst append: FormatFunction = (suffix) => {\n  // Your code here\n};\n\nconst formatDollars = prepend(\"$\");\nconst formatPercent = append(\"%\");\nconst greet = prepend(\"Hello \");\n\n// Here are some logs if you want to uncommend and see the output\n\n// console.log(formatDollars(12)); // \"$12\"\n// console.log(formatPercent(12)); // \"12%\"\n// console.log(formatDollars(\"uper\")); // \"$uper\"\n// console.log(greet(\"Jarvis\")); // Hello Jarvis\n",
          "solutionCode": "type FormatFunction = (s: string) => (x: string | number) => string;\n\nconst prepend: FormatFunction = (prefix) => {\n  return (x) => prefix + x;\n};\n\nconst append: FormatFunction = (suffix) => {\n  return (x) => x + suffix;\n};\n\nconst formatDollars = prepend(\"$\");\nconst formatPercent = append(\"%\");\nconst greet = prepend(\"Hello \");\n\nconsole.log(formatDollars(12)); // \"$12\"\nconsole.log(formatPercent(12)); // \"12%\"\nconsole.log(formatDollars(\"uper\")); // \"$uper\"\nconsole.log(greet(\"Jarvis\")); // Hello Jarvis\n",
          "content": ""
        },
        {
          "id": "f5Z5fSfdl8",
          "type": "typescript",
          "title": "Combining Functions and Composition",
          "instructions": "Use composition \\(using the `pipe` function\\) to create the function `formatPercent` according to the specification below. This will be similar to the last time you wrote `formatPercent`:\n* Format the number to have two decimal places \\(example: 3 would turn into `3.00` , 12.8223 would turn into `12.82`, etc\\).\n* Multiply the number by 100, so `.88` would become `88` and `.07` would become `7`, etc.\n* Append the `%` symbol to the end of the string. `2.00` would become `2.00%`, `12.28` would become `12.28%`, etc.\n\n",
          "testCode": "// Write your tests here:\ntest(\"`formatPercent(.73)` should be `\\\"73.00%\\\"`\", () => {\n  expect(formatPercent(.73)).toBe(\"73.00%\");\n});\ntest(\"`formatPercent(.2)` should be `\\\"20.00%\\\"`\", () => {\n  expect(formatPercent(.2)).toBe(\"20.00%\");\n});\ntest(\"`formatPercent(.256)` should be `\\\"25.60%\\\"`\", () => {\n  expect(formatPercent(.256)).toBe(\"25.60%\");\n});\ntest('The `pipe` function should be used', () => {\n  expect(__user_code_string__).toMatch(/pipe\\([\\s\\S]+\\)/);\n});",
          "videoUrl": "",
          "starterCode": "// Here we've defined a pipe function for you. We recommend you ignore the\n// definition for now unless you're curious about it. As you can see it doesn't\n// require much code but it's a pretty serious higher-order function--both its\n// arguments and return value are functions.\ntype Pipe = (...fns: Function[]) => Function;\nconst pipe: Pipe = (...fns) => {\n  return fns.reduce((f, g) => (x: any) => g(f(x)));\n};\n\nconst multiplyBy = (n: number) => {\n  return (x: number) => {\n    return n * x;\n  };\n};\n\nconst append = (s: string) => {\n  return (x: string | number) => x + s;\n};\n\nconst toFixed = (digits: number) => {\n  return (n: number) => n.toFixed(digits);\n};\n\n// Your code here\n// Use pipe to combine functions to create formatPercent\nconst formatPercent = undefined;\n\n// Uncomment these to see the logs of what formatPercent returns\n// console.log(formatPercent(.73)); // \"73.00%\"\n// console.log(formatPercent(.2)); // \"20.00%\"\n// console.log(formatPercent(.256)); // \"25.60%\"\n",
          "solutionCode": "// It's worth noting that these are very vague type definitions. It's possible to type\n// this function much better, but it would become significantly more verbose and probably\n// not aid understanding of composition (it would certainly help you learn TS typing though).\n// TypeScript has made great strides in its ability to type functional code but it's\n// unfortunately still not a strength of the langauge.\ntype Pipe = (...fns: Function[]) => Function;\nconst pipe: Pipe = (...fns) => {\n  return fns.reduce((f, g) => (x: any) => g(f(x)));\n};\n\nconst multiplyBy = (n: number) => {\n  return (x: number) => {\n    return n * x;\n  };\n};\n\nconst append = (s: string) => {\n  return (x: string | number) => x + s;\n};\n\nconst toFixed = (digits: number) => {\n  return (n: number) => n.toFixed(digits);\n};\n\nconst formatPercent = pipe(multiplyBy(100), toFixed(2), append(\"%\"));\n\nconsole.log(formatPercent(.73)); // \"73.00%\"\nconsole.log(formatPercent(.2)); // \"20.00%\"\nconsole.log(formatPercent(.256)); // \"25.60%\"",
          "content": "Composing functions is how you put different functions together. Let's say we want to expand on one of our functions from earlier: `formatPercent`. The job of this function is to format a number as a percent \\(ex: 12.50%\\). Let's update that function to do more than just append a `%` sign\\. Here's all the relevant code from before:\n\n```typescript\nconst append = (s: string) => (x: string | number) => x + s;\nconst formatPercent = append(\"%\");\nformatPercent(.73); // => \".73%\"\nformatPercent(.2); // => \".2%\"\nformatPercent(.256); // => \".256%\"\n\n```\n\nNow let's say we want our `formatPercent` function to: \n\n* Multiply by 100, so `.2` becomes `20`, `.256` becomes `25.6`, etc. At the beginning of this section we talked about a `multiplyBy` function\\. We can reuse that function here.\n* Ensure there are 2 decimal places. Numbers have a built\\-in way to do this using `.toFixed`. Example: `(3).toFixed(2)` will give us `\"3.00\"`.\n\n# Creating a Function Pipeline\n\nUnfortunately there's no built\\-in way to create a pipeline of functions so we have to create our own solution. That solution will be the `pipe` function\\. We won't talk about how to write that function yet because we want to focus on what it lets us do:\n\n```typescript\n// First lets wrap the toFixed method\nconst toFixed = (decimalPlaces: number) => (n: number) => n.toFixed(decimalPlaces);\n\n// Now we will create a pipeline of functions\nconst formatPercent = pipe(\n  multiplyBy(100),\n  toFixed(2),\n  append(\"%\")\n);\n\n```\n\nNotice how we combined three functions together to form a new one. This is what the `pipe` function lets us do. We'll go over `pipe` in more detail in a future lesson.\n\n\n## Why not a \"normal\" function?\n\nLet's rewrite the code above to use a more traditional approach:\n\n```typescript\n// First lets wrap the toFixed method\nconst toFixed = (decimalPlaces: number) => (n: number) => n.toFixed(decimalPlaces);\n\nconst formatPercent = (input: number) => {\n  let result = input;\n  \n  result = multiplyBy(100)(result);\n  result = toFixed(2)(result);\n  result = append(\"%\")(result);\n  \n  return result;\n};\n\n```\n\nThere is nothing wrong with this approach, but it's more work for you as the programmer:\n\n* You will need one or more new variables. In this case we used `input` and `result`. These variables are not needed when we use `pipe`.\n* You need to assign your variables and return a result manually. Notice that in the `pipe` version we never have to use the `=` symbol to assign anything or the `return` keyword to return anything.\n\n\nIn other words, using `pipe` our function becomes more concise. It is indeed harder to understand at first—this is normal. It really becomes useful once you're used to writing functions composed of other functions.\n\n> **Recommendation:** Use whatever approach is easier for you to understand. It's most important that you _write code_, no matter how you write it. Once you've written lots and lots of code you can start experiment with different coding styles. \n"
        },
        {
          "id": "@kEvI62Kek",
          "type": "typescript",
          "title": "Yelling Via Composition",
          "instructions": "Use `pipe` to combine other functions and create the `yell` function which does the following:\n\n* `yell` should transform a string to uppercase.\n* `yell` should append an exclamation mark to the end of the string.\n\n\nExamples:\n\n```\nconsole.log(yell(\"I enjoy meditation\")); // \"I ENJOY MEDITATION!\"\nconsole.log(yell(\"bed time\")); // \"BED TIME!\"\n\n```\n\nVery useful for online comment threads.\n\n**NOTE:** The `append` helper function would be useful here but has not been included. Feel free to copy it from a previous challenge or write your own.",
          "testCode": "test(\"`yell(\\\"I enjoy meditation\\\")` should be yelled\", () => {\n  expect(yell(\"I enjoy meditation\")).toBe(\"I ENJOY MEDITATION!\");\n});\ntest(\"`yell(\\\"bed time\\\")` should be yelled\", () => {\n  expect(yell(\"bed time\")).toBe(\"BED TIME!\");\n});\ntest('The `pipe` function should be used', () => {\n  expect(__user_code_string__).toMatch(/pipe\\([\\s\\S]+\\)/);\n});",
          "videoUrl": "",
          "starterCode": "// Here we have the same pipe function we've been using in this section. \n// You can ignore the implementation if you wish as it's not needed to \n// pass the tests.\ntype Pipe = (...fns: Function[]) => Function;\nconst pipe: Pipe = (...fns) => {\n  return fns.reduce((f, g) => (x: any) => g(f(x)));\n};\n\n// Your code here\nconst yell = undefined;\n\n// Uncomment if you like. Initially the code will not compile until yell is defined\n// console.log(yell(\"I enjoy meditation\")); // \"I ENJOY MEDITATION!\"\n// console.log(yell(\"bed time\")); // \"BED TIME!\"",
          "solutionCode": "type Pipe = (...fns: Function[]) => Function;\nconst pipe: Pipe = (...fns) => {\n  return fns.reduce((f, g) => (x: any) => g(f(x)));\n};\n\n// Bring back the append function\nconst append = (s: string) => (x: string) => x + s;\n\n// NOTE: You could also extract the toUpperCase call into its own function\n// but it's certainly not necessary. Your call\nconst yell = pipe(\n  (x: string) => x.toUpperCase(),\n  append(\"!\")\n);\n\nconsole.log(yell(\"I enjoy meditation\")); // \"I ENJOY MEDITATION!\"\nconsole.log(yell(\"bed time\")); // \"BED TIME!\"",
          "content": ""
        },
        {
          "id": "z0AGNe4Lk",
          "type": "media",
          "title": "Functional Programming: The Pipe Function Explained",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/P9ua8GEbwPw",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this video I'll demonstrate how the `pipe` function works and why it's written the way it is. Since `pipe` is a higher order function this lesson also discusses building functions that return other functions."
        },
        {
          "id": "uyjd$DG@$",
          "type": "section",
          "title": "Classes",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Classes in TypeScript provide a way for grouping shared state and behavior in a single entity. What do we mean? Consider this class:\n\n### A Box Class\n\n```\n// Define a class which has the properities of a box\nclass Box {\n    constructor(width: number, height: number, depth: number){\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n    }\n}\n\n// Create a new instance of a Box\nconst box = new Box(5, 10, 25);\n\n// Inspect the box\nconsole.log(box.width); // => 5\nconsole.log(box.height); // => 10\nconsole.log(box.depth); // => 25\n\n```\n\nWe have defined a class `Box` using the `class` keyword\\. We then create a new instance of a `Box` and inspect the box's width, height, and depth. There are a few new things here, which we will explain and practice. But first, what is the point of creating a structure like this?\n\n### Object Oriented Programming\n\nA discipline of programming called \"object oriented programming\" took the programming world by storm several decades ago. The basic premise of object oriented programming is that you can use \"objects\" to encapsulate common state and behavior. These objects can be composed and used to create more complex systems and behavior, but, individually everything would always reduce to small, single responsibility, encapsulated, decoupled objects \\(which could also be easily tested\\).\n\nIt's a great vision\\! In practice, object oriented programming turned out to not be a silver bullet for all software design.\n\nHowever, it is a very useful and powerful practice in many situations, and object oriented programming skills are definitely important to be familiar with. It's a tool you can productively use to solve many problems.\n\nWhile the complete story of how object oriented programming has evolved in JavaScript/TypeScript is out of the scope of this lesson, suffice it to say that ECMAScript 6 has introduced more traditional object\\-oriented classes to JavaScript, which TypeScript builds upon to support the type of object orientated capabilities programmers coming from other object oriented languages are more familiar with.\n\n### TypeScript Classes\n\nWhen building classes you will commonly provide a `constructor` function, which sets property values on the class, and member methods, which provide functionality and behavior associated with that class. Consider this more developed `Box`:\n\n```\nclass Box {\n  // These are properties\n  width: number;\n  height: number;\n  depth: number;\n\n  // This is the constructor\n  constructor(width: number, height: number, depth: number) {\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n  }\n\n  // This is a member method\n  getDimensions() {\n    return {\n      width: this.width,\n      height: this.height,\n      depth: this.depth,\n    };\n  }\n}\n\n```\n\nThe `constructor` is called a single time when the class is first instantiated. A class is instantiated using the `new` keyword, and a class can be instantiated multiple times. Multiple instantiated classes are all separate \"instances\" of the original class. When a class is instantiated, the constructor is responsible for setting up the class and performing any initialization which is required. The constructor can accept arguments which it will use during initialization.\n\nClass properties are values stored on the class itself which can be used to track internal class state. For the box, these properties track the box dimensions.\n\nFinally, member methods are just functions which are attached to the class. These functions typically provide behavior associated with the class. They may set or update internal class state, or provide some behavior. In the box example above, there is one member method, `getDimensions`, which returns the box's dimensions.\n\n### The \"this\" Keyword\n\nThere is a complicated history associated with the `this` keyword in JavaScript. For the sake of total simplicity, here is the only thing you need to know right now:\n\n* Use `this` inside of a class method or its constructor and it refers to the current instance of that class.\n\n\nIn the above examples, `this` is used to reference the current instance of the class. It's like saying \"give me _this_ class\". You can use the `this` keyword inside a class to access properties and class members which are attached to that class.\n\n### Encapsulation\n\nOne traditional principle with object oriented programming is that objects should encapsulate state and operations and they should expose a public API for consumers to use. Most traditional object oriented languages directly support this separation between \"public\" and \"private\" class properties and methods, and so does TypeScript\\! As a side note, the same is not possible in JavaScript.\n\nClass values which are \"private\" are not available to the outside world, while \"public\" properties or methods can be accessed directly by outside code. This allows you to keep the internal implementation of a class cleanly separated from how other code will \"use\" your class. In general, this is useful and a good practice. Consider our box one last time:\n\n```\nclass Box {\n  // These are properties\n  private width: number;\n  private height: number;\n  private depth: number;\n\n  // This is the constructor\n  constructor(width: number, height: number, depth: number) {\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n  }\n\n  // This is a member method\n  public getDimensions() {\n    return {\n      width: this.width,\n      height: this.height,\n      depth: this.depth,\n    };\n  }\n}\n\nconst box = new Box(5, 5, 5);\nconsole.log(box.width);\n// -> Property 'width' is private and only accessible\n// within class 'Box'.(2341)\n\n```\n\nWe have added the `public` and `private` keywords within the class, and then tried to access `box.width` after instantiating a new class. The following comment shows the error TypeScript would display if you tried to do this. The `width` property is `private` and cannot be accessed outside of the `Box` class\\!\n\nTypically, an object oriented approach hides data in private instance variables or properties and exposes this data via public accessor methods. The data should not be accessed or \"set\" directly from the outside. Instead, public \"getter\" and \"setter\" methods are exposed to control these operations.\n\n### OOP Principles\n\nObject oriented programming \\(OOP\\) has an entire ideological history behind it. Without getting into the details here are three powerful OOP principles which have wide ranging application throughout all of programming:\n\n* **Encapsulation:** As demonstrated above, encapsulation is the principle of hiding data and exposing public getter/setter methods for reading and writing data from/to objects.\n* **Abstraction: **Abstraction is the principle of expressing the \"intention\" or \"shape\"/\"behavior\" of a class separately from its actual implementation. In TypeScript, this can be achieved using interfaces to define the shape of a class and then implementing interfaces using the `implements` keyword\\.\n* **Inheritance:** Inheritance is the principle of creating objects which \"inherit\" state or behavior from parent objects. Inheritance allows you to share functionality, compose objects together, better organize code, and create more complex structures. For instance, in the above examples you might imagine a base `Shape` class which our box `extends`, or inherits from.\n\n\nObject oriented programming is a diverse and powerful discipline of programming, with a lot to get into. For this section, we will focus on covering the basics of classes in TypeScript and getting familiar with building some simple classes to represent common everyday objects\\!"
        },
        {
          "id": "66sfsGVp8",
          "type": "typescript",
          "title": "Build the Box",
          "instructions": "Let's implement the `Box` class from the previous challenge explanation. Use the tests as a guide, and feel free to check the last challenge to see the exact syntax. Good luck writing your first class\\!",
          "testCode": "test(\"`Box` should be defined.\", () => {\n  expect(Box).toBeDefined();\n});\n\ntest(\"A new `Box` can be instanted with the `new` keyword.\", () => {\n  expect(new Box(1, 2, 3)).toBeDefined();\n});\n\ntest(\"The `Box` constructor expects three arguments: `width`, `height`, and `depth` (NOTE: in that order).\", () => {\n  expect(new Box(1, 2, 3)).toBeDefined();\n});\n\ntest(\"The `Box` has private properities for `width`, `height`, and `depth`.\", () => {\n  const code = __user_code_string__;\n  expect(code.includes(\"private width\")).toBe(true);\n  expect(code.includes(\"private height\")).toBe(true);\n  expect(code.includes(\"private depth\")).toBe(true);\n});\n\ntest(\"The `Box` has a method `getDimensions` which returns the box dimensions provided in the constructor initialization.\", () => {\n  let width = 10;\n  let height = 15;\n  let depth = 25;\n  expect(new Box(width, height, depth).getDimensions()).toEqual({\n    width,\n    height,\n    depth,\n  });\n\n  width = 50;\n  height = 50;\n  depth = 50;\n  expect(new Box(width, height, depth).getDimensions()).toEqual({\n    width,\n    height,\n    depth,\n  });\n\n  width = 500;\n  height = 500;\n  depth = 500;\n  expect(new Box(width, height, depth).getDimensions()).toEqual({\n    width,\n    height,\n    depth,\n  });\n\n  width = 501.51;\n  height = 501.52;\n  depth = 501.53;\n  expect(new Box(width, height, depth).getDimensions()).toEqual({\n    width,\n    height,\n    depth,\n  });\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7fNxWIHOLQE",
          "starterCode": "// Your code here",
          "solutionCode": "class Box {\n  private width: number;\n  private height: number;\n  private depth: number;\n\n  constructor(width: number, height: number, depth: number) {\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n  }\n\n  getDimensions() {\n    return {\n      width: this.width,\n      height: this.height,\n      depth: this.depth,\n    };\n  }\n}\n",
          "content": ""
        },
        {
          "id": "O5fUcvQk9",
          "type": "typescript",
          "title": "The Extends Keyword",
          "instructions": "Classes can `extend` other classes, to \"inherit\" state or behavior. Consider the code in the editor. It's all type definitions\\! No functional code exists, just several interfaces which define the structure of different 2D and 3D shapes, and then a more specific `Box` interface\\.\n\nImplement actual classes which implement these interfaces using the `implements` keyword\\. You can do that like this:\n\n```\n// The implements keyword enforces the constraints of an interface onto\n// a class definition.\nconst MyClass implements SomeInterface { ... }\n\n```\n\nFollow the tests for a guide. Good luck\\!",
          "testCode": "test(\"A `Square` class should be defined and implement the `TwoDimensionalShape` interface.\", () => {\n  const code = __user_code_string__;\n  expect(Square).toBeDefined();\n  expect(typeof new Square(5, 5).width === \"number\").toBe(true);\n  expect(typeof new Square(5, 5).height === \"number\").toBe(true);\n  expect(typeof new Square().getDimensions === \"function\").toBe(true);\n  expect(code.includes(\"class Square implements TwoDimensionalShape\"));\n});\n\ntest(\"A `Rectangle` class should be defined and implement the `TwoDimensionalShape` interface.\", () => {\n  const code = __user_code_string__;\n  expect(Rectangle).toBeDefined();\n  expect(typeof new Rectangle(5, 5).width === \"number\").toBe(true);\n  expect(typeof new Rectangle(5, 5).height === \"number\").toBe(true);\n  expect(typeof new Rectangle().getDimensions === \"function\").toBe(true);\n  expect(code.includes(\"class Rectangle implements TwoDimensionalShape\"));\n});\n\ntest(\"A `Box` class should be defined and implement the `Box` interface.\", () => {\n  const code = __user_code_string__;\n  expect(Box).toBeDefined();\n  expect(new Box().type === \"box\").toBe(true);\n  expect(typeof new Box(5, 5, 5).width === \"number\").toBe(true);\n  expect(typeof new Box(5, 5, 5).height === \"number\").toBe(true);\n  expect(typeof new Box(5, 5, 5).depth === \"number\").toBe(true);\n  expect(typeof new Box().getDimensions === \"function\").toBe(true);\n  expect(code.includes(\"class Box implements ThreeDimensionalShape\"));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/AHH638mYezw",
          "starterCode": "// Define the basic shape class\ninterface BaseShape {\n  width: number;\n  height: number;\n}\n\n// Define a 2D shape to extend the base shape\ninterface TwoDimensionalShape extends BaseShape {\n  getDimensions: () => {\n    width: number;\n    height: number;\n  }\n}\n\n// Define a 3D shape to extend the base shape\ninterface ThreeDimensionalShape extends BaseShape {\n  depth: number;\n  getDimensions: () => {\n    width: number;\n    height: number;\n    depth: number;\n  }\n}\n\n// Define a specific box as a type of 3D shape\ninterface IBox extends ThreeDimensionalShape {\n  type: \"box\";\n}\n\n// Your code here",
          "solutionCode": "// Define the basic shape class\ninterface BaseShape {\n  width: number;\n  height: number;\n}\n\n// Define a 2D shape to extend the base shape\ninterface TwoDimensionalShape extends BaseShape {\n  getDimensions: () => {\n    width: number;\n    height: number;\n  }\n}\n\n// Define a 3D shape to extend the base shape\ninterface ThreeDimensionalShape extends BaseShape {\n  depth: number;\n  getDimensions: () => {\n    width: number;\n    height: number;\n    depth: number;\n  }\n}\n\n// Define a specific box as a type of 3D shape\ninterface IBox extends ThreeDimensionalShape {\n  type: \"box\";\n}\n\n// Square\nclass Square implements TwoDimensionalShape {\n  width: number;\n  height: number;\n\n  constructor(size: number) {\n    this.width = size;\n    this.height = size;\n  }\n\n  getDimensions() {\n    return {\n      width: this.width,\n      height: this.height,\n    };\n  }\n}\n\n// Rectangle\nclass Rectangle implements TwoDimensionalShape {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  getDimensions() {\n    return {\n      width: this.width,\n      height: this.height,\n    };\n  }\n}\n\n// Box\nclass Box implements IBox {\n  type: \"box\" = \"box\";\n  width: number;\n  height: number;\n  depth: number;\n\n  constructor(width: number, height: number, depth: number) {\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n  }\n\n  getDimensions() {\n    return {\n      width: this.width,\n      height: this.height,\n      depth: this.depth,\n    };\n  }\n}",
          "content": ""
        },
        {
          "id": "OtNV$ge0a",
          "type": "typescript",
          "title": "Getters and Setters",
          "instructions": "Create a class `NameBadge` which tracks an internal property `name`. The `name` property should be `private` and can be set via a public `setName` method, and read via a public `getName` method\\. For a bonus, try writing an interface for your class to implement\\!",
          "testCode": "test(\"`NameBadge` should be defined.\", () => {\n  expect(NameBadge).toBeDefined();\n});\n\ntest(\"`NameBadge` can be instantiated.\", () => {\n  expect(new NameBadge()).toBeDefined();\n});\n\ntest(\"`NameBadge` should have a `setName` method.\", () => {\n  expect(typeof new NameBadge().setName).toBe(\"function\");\n});\n\ntest(\"`NameBadge` should have a `getName` method.\", () => {\n  expect(typeof new NameBadge().getName).toBe(\"function\");\n});\n\ntest(\"`NameBadge` should have a private `name` property.\", () => {\n  expect(__user_code_string__.includes(\"private name\")).toBe(true);\n});\n\ntest(\"The `setName` and `getName` public methods can be used to read and write the `name` property of `NameBadge`.\", () => {\n  const x = new NameBadge();\n  let name = \"Sean\";\n  x.setName(name);\n  expect(x.name).toBe(name);\n  expect(x.getName()).toBe(name);\n\n  name = \"Sam\";\n  x.setName(name);\n  expect(x.name).toBe(name);\n  expect(x.getName()).toBe(name);\n\n  name = \"Sara\";\n  x.setName(name);\n  expect(x.name).toBe(name);\n  expect(x.getName()).toBe(name);\n\n  name = \"Ben\";\n  x.setName(name);\n  expect(x.name).toBe(name);\n  expect(x.getName()).toBe(name);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/F-p_pdAsWdI",
          "starterCode": "// Your code here",
          "solutionCode": "// Interface definition\ninterface INameBadge {\n  getName: () => string;\n  setName: (name: string) => void;\n}\n\n// Class definition\nclass NameBadge implements INameBadge {\n  private name: string = \"\";\n\n  setName(name: string) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}",
          "content": ""
        },
        {
          "id": "fNDLi4KXp",
          "type": "typescript",
          "title": "Build a Person Class",
          "instructions": "Let's define a `Person` class \\(the most classic OOP exercise of all time\\!\\).",
          "testCode": "const getNewPerson = () => {\n  const age = 15;\n  const name = \"Sam\";\n  const profession = \"Engineer\";\n  const email = \"sam@engineer.com\";\n  const nationality = \"USA\";\n  const details = {\n    age,\n    name,\n    profession,\n    email,\n    nationality,\n  };\n  return new Person(details);\n};\n\ntest(\"`Person` should be defined.\", () => {\n  expect(Person).toBeDefined();\n});\n\ntest(\"The `Person` class constructor should accept an object with `name`, `age`, `profession`, `email`, and `nationality` fields to initalize a person with.\", () => {\n  const age = 15;\n  const name = \"Sam\";\n  const profession = \"Engineer\";\n  const email = \"sam@engineer.com\";\n  const nationality = \"USA\";\n  const details = {\n    age,\n    name,\n    profession,\n    email,\n    nationality,\n  };\n  const p = new Person(details);\n  expect(p).toBeDefined();\n  expect(p.getAge()).toBe(age);\n  expect(p.getName()).toBe(name);\n  expect(p.getProfession()).toBe(profession);\n  expect(p.getEmail()).toBe(email);\n  expect(p.getNationality()).toBe(nationality);\n});\n\ntest(\"A `Person` should have a `setAge` method which sets their age, and a `getAge` method which returns their age.\", () => {\n  const p = getNewPerson();\n  p.setAge(15);\n  expect(p.getAge()).toBe(15);\n});\n\ntest(\"A `Person` should have a `setName` method which sets their name, and a `getName` method which returns their name.\", () => {\n  const p = getNewPerson();\n  p.setName(\"Sam\");\n  expect(p.getName()).toBe(\"Sam\");\n});\n\ntest(\"A `Person` should have a `setProfession` method which sets their age, and a `getProfession` method which returns their profession.\", () => {\n  const p = getNewPerson();\n  p.setProfession(\"Engineer\");\n  expect(p.getProfession()).toBe(\"Engineer\");\n});\n\ntest(\"A `Person` should have a `setEmail` method which sets their age, and a `getEmail` method which returns their email.\", () => {\n  const p = getNewPerson();\n  p.setEmail(\"sam@engineer.com\");\n  expect(p.getEmail()).toBe(\"sam@engineer.com\");\n});\n\ntest(\"A `Person` should have a `setNationality` method which sets their age, and a `getNationality` method which returns their nationatliy.\", () => {\n  const p = getNewPerson();\n  p.setNationality(\"USA\");\n  expect(p.getNationality()).toBe(\"USA\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7XnQXLrv8ko",
          "starterCode": "// Your code here",
          "solutionCode": "// Person details used to instantiate class\ninterface PersonDetails {\n  age: number;\n  name: string;\n  profession: string;\n  email: string;\n  nationality: string;\n}\n\n// Person class\nclass Person {\n  private age: number;\n  private name: string;\n  private profession: string;\n  private email: string;\n  private nationality: string;\n\n  constructor(personDetails: PersonDetails) {\n    const {\n      age,\n      name,\n      profession,\n      email,\n      nationality,\n    } = personDetails;\n\n    this.age = age;\n    this.name = name;\n    this.profession = profession;\n    this.email = email;\n    this.nationality = nationality;\n  }\n\n  public getAge() {\n    return this.age;\n  }\n\n  public setAge(age: number) {\n    this.age = age;\n  }\n\n  public getName() {\n    return this.name;\n  }\n\n  public setName(name: string) {\n    this.name = name;\n  }\n\n  public getProfession() {\n    return this.profession;\n  }\n\n  public setProfession(profession: string) {\n    this.profession = profession;\n  }\n\n  public getEmail() {\n    return this.email;\n  }\n\n  public setEmail(email: string) {\n    this.email = email;\n  }\n\n  public getNationality() {\n    return this.nationality;\n  }\n\n  public setNationality(nationality: string) {\n    this.nationality = nationality;\n  }\n}",
          "content": ""
        },
        {
          "id": "c3TMHf9F2",
          "type": "typescript",
          "title": "Queue Class",
          "instructions": "Data structures are often implemented using object oriented programming techniques. We have seen some common data structures in this programming module, like arrays and objects, but there are many more than just these which you will encounter over time, one of which we will create in this challenge\\!\n\nIn this challenge, create a `Queue` class which implements the basic functionality of a queue. Items can be \"enqueued\" and \"dequeued\". The first item into the queue should be the first one out\\! It's just like standing in a line for a movie.",
          "testCode": "test(\"`Queue` should be defined.\", () => {\n  expect(Queue).toBeDefined();\n});\n\ntest(\"`Queue` should have a method called `enqueue`.\", () => {\n  expect(typeof new Queue().enqueue).toBe(\"function\");\n});\n\ntest(\"`Queue` should have a method called `dequeue`.\", () => {\n  expect(typeof new Queue().dequeue).toBe(\"function\");\n});\n\ntest(\"The `Queue` returns items using the `dequeue` method in the order they were added with the `enqueue` method.\", () => {\n  const q = new Queue();\n  q.enqueue(1);\n  q.enqueue(2);\n  q.enqueue(3);\n  expect(q.dequeue()).toBe(1);\n  expect(q.dequeue()).toBe(2);\n  expect(q.dequeue()).toBe(3);\n\n  q.enqueue(\"A\");\n  q.enqueue(\"B\");\n  q.enqueue(\"C\");\n  q.enqueue(\"X\");\n  q.enqueue(\"Y\");\n  q.enqueue(\"Z\");\n  expect(q.dequeue()).toBe(\"A\");\n  expect(q.dequeue()).toBe(\"B\");\n  expect(q.dequeue()).toBe(\"C\");\n  expect(q.dequeue()).toBe(\"X\");\n  expect(q.dequeue()).toBe(\"Y\");\n  expect(q.dequeue()).toBe(\"Z\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Lr8obDUBCak",
          "starterCode": "// Your code here",
          "solutionCode": "// A First In First Out \"FIFO\" queue class\nclass Queue {\n  private items: any[] = [];\n\n  public enqueue(item: any) {\n    this.items.push(item);\n  }\n\n  public dequeue() {\n    const items = this.items;\n    const item = items[0];\n    /**\n     * Note that this is not a very efficient solution\n     * since it has to copy the remainder of the items\n     * list every time an item is dequeued... What other\n     * ways could you design this?\n     */\n    this.items = items.slice(1);\n    return item;\n  }\n}\n",
          "content": ""
        },
        {
          "id": "Hvnu4UcaE",
          "type": "section",
          "title": "Algorithms Basics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now you have learned all the basics of a programming language\\! Now that you have a solid foundation it's time to put your skills to the test solving some algorithms. These will be simple, and increasingly more challenging, problems that require you to write a function to perform some specific operation or algorithm. To solve them, you will need to have a firm grasp of all the basic programming concepts: conditional statements, loops, data structures, functions, and so on.\n\nSolving a number of questions like this is the best way to build up your programming skills and become confident in your abilities.\n\nA quick note about algorithms: eventually, in your journey as a programmer you may find yourself in an interview where you have to solve algorithm questions, perhaps on a whiteboard or in a coding environment. These can be a hard and challenging part of getting a job as a programmer.\n\nThis section is not meant to be practice for this style of algorithm questions. It is just meant to provide a lot of simple practice putting to use the concepts and skills you have learned in the previous challenges. These algorithms should give you ample practice writing functions, working with arrays, objects, and classes, and experimenting with the language features TypeScript has to offer. By the end, you should be very comfortable writing TypeScript\\!"
        },
        {
          "id": "6T3GXc4ap",
          "type": "typescript",
          "title": "Add Two Numbers",
          "instructions": "Complete the function body below. The function should receive two numbers as input arguments and return the result of adding these numbers together.",
          "starterCode": "const addTwoNumbers = (a: number, b: number) => {\n  // Your code here\n}\n\nconst result = addTwoNumbers(10, 20);\nconsole.log(result);\n",
          "solutionCode": "const addTwoNumbers = (a: number, b: number) => {\n  return a + b;\n}\n\nconst result = addTwoNumbers(10, 20);\nconsole.log(result);\n",
          "testCode": "const cases = [\n  { input: [1, 2], expected: 3 },\n  { input: [10, 50], expected: 60 },\n  { input: [-10, -50], expected: -60 },\n  { input: [100, 500], expected: 600 },\n  { input: [1123, 532142], expected: 533265 },\n  { input: [-10, 50], expected: 40 },\n  { input: [1, 500], expected: 501 },\n  { input: [842, 124], expected: 966 },\n  { input: [1000, 500], expected: 1500 },\n  { input: [-100, 100], expected: 0 },\n  { input: [2, 50234432], expected: 50234434 },\n];\n\ncases.forEach(x => {\n    const { input: [a, b], expected } = x;\n    test(`${x.input[0]} + ${x.input[1]}`, () => {\n        expect(addTwoNumbers(a,b)).toBe(expected)\n    })\n})",
          "content": "",
          "videoUrl": "https://www.youtube.com/embed/mK9gImt5huc"
        },
        {
          "id": "WUA8ezECU",
          "type": "typescript",
          "title": "Reverse a String",
          "instructions": "Complete the function body below. The function will receive a string and should return the same string in reverse order.",
          "starterCode": "const reverseString = (inputString: string) => {\n  // Edit code here\n}\n\nconst result = reverseString(\"hello\");\nconsole.log(result);\n",
          "solutionCode": "const reverseString = (inputString: string) => {\n  return inputString.split('').reverse().join('');\n}\n\nconst result = reverseString(\"hello\");\nconsole.log(result);\n",
          "testCode": "[\n  { input: [\"hello\"], expected: \"olleh\" },\n  { input: [\"fantastic\"], expected: \"citsatnaf\" },\n  { input: [\"superb\"], expected: \"brepus\" },\n  { input: [\"frustrating\"], expected: \"gnitartsurf\" },\n  { input: [\"exciting\"], expected: \"gniticxe\" },\n  { input: [\"happy\"], expected: \"yppah\" },\n  { input: [\"a\"], expected: \"a\" },\n  { input: [\"aaaaaaaaaaaaz\"], expected: \"zaaaaaaaaaaaa\" },\n  { input: [\"jumping\"], expected: \"gnipmuj\" },\n  { input: [\"silly\"], expected: \"yllis\" },\n  { input: [\"zombie\"], expected: \"eibmoz\" },\n].forEach(({ input, expected }) => {\n  test(`${input[0]} -> ${expected}`, () => {\n    expect(reverseString(...input)).toBe(expected);\n  })\n})\n",
          "content": "",
          "videoUrl": "https://www.youtube.com/embed/_Df1h0mFJuQ"
        },
        {
          "id": "50fxTLRcV",
          "type": "typescript",
          "title": "Return the Length of an Array",
          "instructions": "Complete the function body below. The function will receive an array as input and should return the number of items in the array.",
          "starterCode": "const lengthOfArray = (array: any[]) => {\n  // Edit code here\n};\n\nconst result = lengthOfArray([\"a\", \"b\", \"c\"]);\nconsole.log(result);\n",
          "solutionCode": "\nconst lengthOfArray = (array: any[]) => {\n  return array.length;\n}\n\nconst result = lengthOfArray([\"a\", \"b\", \"c\"]);\nconsole.log(result);\n",
          "testCode": "[\n  { input: [[1, 2, 3, 4]], expected: 4 },\n  { input: [[]], expected: 0 },\n  { input: [[1, 1, 1, 1, 1, 1, 1, 1, 1]], expected: 9 },\n  { input: [[3, 3, 3]], expected: 3 },\n  { input: [[2]], expected: 1 },\n  { input: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], expected: 14 },\n].forEach(({ input, expected }) => {\n  test(`\\\\[${input[0].join(\", \")}\\\\] has length ${expected}`, () => {\n    expect(lengthOfArray(...input)).toBe(expected);\n  });\n});\n",
          "content": "",
          "videoUrl": "https://www.youtube.com/embed/ttgWiLcA49g"
        },
        {
          "id": "E9wWilBf8",
          "type": "typescript",
          "title": "Gateway",
          "instructions": "There is a function called `gateway` in the editor below. It should only allow `Person`s to pass. The function should throw an error if it receives any other `item` as an argument. Your job is to implement this function\\!\n\nIf it receives a `Person` just return the `Person` from the function. Otherwise, throw an error. Good luck\\!",
          "testCode": "test(\"The `gateway` function should reject string arguments and throw an error.\", () => {\n  expect(() => gateway(\"A string argument\")).toThrow(\n    \"Expected the gateway function to throw an error\"\n  );\n});\n\ntest(\"The `gateway` function should reject `null` arguments and throw an error.\", () => {\n  expect(() => gateway(null)).toThrow(\n    \"Expected the gateway function to throw an error\"\n  );\n});\n\ntest(\"The `gateway` function should reject `undefined` arguments and throw an error.\", () => {\n  expect(() => gateway(undefined)).toThrow(\n    \"Expected the gateway function to throw an error\"\n  );\n});\n\ntest(\"The `gateway` function should reject any non `Person` arguments and throw an error.\", () => {\n  expect(() => gateway([])).toThrow(\n    \"Expected the gateway function to throw an error\"\n  );\n  expect(() => gateway({})).toThrow(\n    \"Expected the gateway function to throw an error\"\n  );\n});\n\ntest(\"The `gateway` function should accept `Person` arguments, and return the same argument.\", () => {\n  const person = {\n    name: \"Sam\",\n    age: 25,\n    profession: \"engineer\",\n  };\n\n  const result = gateway(person);\n  expect(result).toEqual(person);\n});\n\ntest(\"The `gateway` function should reject objects which look like a `Person` but have additional non Person properties.\", () => {\n  const notPerson = {\n    name: \"Sam\",\n    age: 25,\n    profession: \"engineer\",\n    otherKey: \"hi!\",\n  };\n\n  expect(() => gateway(notPerson)).toThrow(\n    \"A Person-like object with additional keys should be rejected with an error.\"\n  );\n});\n",
          "videoUrl": "https://www.youtube.com/embed/I7xbta_BScM",
          "starterCode": "interface Person {\n  name: string;\n  age: number;\n  profession: string;\n}\n\ntype Item = string | number | undefined | null | Person;\n\nconst gateway = (item: Item) => {\n  // Your code here\n};\n",
          "solutionCode": "interface Person {\n  name: string;\n  age: number;\n  profession: string;\n}\n\ntype Item = string | number | undefined | null | Person;\n\nconst gateway = (item: Item) => {\n  // Your code here\n  const maybePerson: any = item;\n\n  // First reject null and undefined values\n  if (!maybePerson) {\n    throw new Error(`Invalid type received: ${typeof maybePerson}`);\n  }\n\n  // Check that the argument has all of the required Person keys\n  if (\n    typeof maybePerson.age === \"number\" &&\n    typeof maybePerson.name === \"string\" &&\n    typeof maybePerson.profession === \"string\"\n  ) {\n    if (Object.keys(maybePerson).length === 3) {\n      return maybePerson;\n    } else {\n      // Reject any Person with additional properties\n      throw new Error(\n        \"Expected a person with only name, age, and profession properties!\"\n      );\n    }\n  } else {\n    // Reject other, non Person types of arguments\n    throw new Error(\n      \"Only Person arguments are accepted. A Person must have a name, age, and profession property!\"\n    );\n  }\n};\n",
          "content": ""
        },
        {
          "id": "HkU594v6Y",
          "type": "typescript",
          "title": "Guard House",
          "instructions": "Here we have a function which tests your understand of _scope_ and _closures_. The `createGuard`function returns a new function, `guard`, which guards the entrance\\! The `createGuard` function accepts a `passcode` which the `guard` function should use to control the entrance. Requests to the `guard` must pass a `passphrase` and some `entrant` value\\. The `entrant` should only be allowed if the `passphrase` they provide matches the `passcode` given to the `guard`. If not, throw an error and reject them\\! If the `passcode` is valid, return the provided `entrant`.",
          "testCode": "test(\"The `createGuard` function should return new `guard` functions.\", () => {\n  expect(typeof createGuard(\"passcode\") === \"function\").toBe(true);\n});\n\ntest(\"The `guard` function should reject `entrants` which provide an invalid `passphrase`.\", () => {\n  const guard = createGuard(\"passcode\");\n  expect(() => guard(\"HI\", \"passphrase\")).toThrow(\n    \"Invalid passphrases should be rejected with errors.\"\n  );\n});\n\ntest(\"The `guard` function should accept `entrants` which provide a valid `passphrase`, and return the provided `entrant`.\", () => {\n  const guard = createGuard(\"passcode\");\n  expect(guard(\"HI\", \"passcode\")).toBe(\"HI\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/_5jHX8HykVo",
          "starterCode": "// Create a new guard function\nconst createGuard = (passcode: string) => {\n  const guard = (entrant: any, passphrase: string) => {\n    // Your code here!\n    // Only allow entrants which provide a passphrase which matches the passcode.\n  };\n\n  return guard;\n};\n",
          "solutionCode": "// Create a new guard function\nconst createGuard = (passcode: string) => {\n  const guard = (entrant: any, passphrase: string) => {\n    // Your code here!\n    // Only allow entrants which provide a passphrase which matches the passcode.\n    if (passphrase !== passcode) {\n      throw new Error(\"Invalid passphrase!\");\n    } else {\n      return entrant;\n    }\n  };\n\n  return guard;\n};\n",
          "content": ""
        },
        {
          "id": "dEW9hNml8",
          "type": "typescript",
          "title": "Random Four",
          "instructions": "You are implementing a multiple choice game. Each question will show 4 random answers. To make the game challenging, you have a large bank of answer choices, and you want to randomly select 4 choices to show for each question. The `randomFourItems` function is ready and waiting for you\\!\n\n**Note:** It's hard to test randomness. Do the best you can\\! There are a few creative ways to solve this. Don't forget about `Math.random`\\!",
          "testCode": "test(\"The `randomFourItems` function requires an argument string array with at least 4 strings.\", () => {\n  expect(() => randomFourItems([])).toThrow(\"An array of four strings is required\");\n  expect(() => randomFourItems([\"a\", \"b\"])).toThrow(\"An array of four strings is required\");\n  expect(() => randomFourItems([\"a\", \"b\", \"c\"])).toThrow(\"An array of four strings is required\");\n});\n\ntest(\"The `randomFourItems` function should return an array of 4 strings\", () => {\n  const result = randomFourItems([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]);\n  expect(Array.isArray(result)).toBe(true);\n  expect(result.length).toBe(4);\n});\n\ntest(\"The `randomFourItems` function should return 4 items picked randomy from the provided list.\", () => {\n  const choices = [\n    \"OjwTImGxLC\",\n    \"nIHnbjiUvG\",\n    \"vwitzxZTyj\",\n    \"NAJlgKfPbE\",\n    \"OSAjWslqnc\",\n    \"tnlFLxnGZs\",\n    \"FMSHjIBHyp\",\n    \"NowDHsOBbx\",\n    \"ZrnbHxCMYl\",\n    \"YOGDcQJFtP\",\n    \"imvpxAekRu\",\n    \"BQOrbtFWOG\",\n    \"PquNWuJLvf\",\n    \"PtYkXHpKxJ\",\n    \"lkOLKQDleN\",\n    \"ZlOSZslGFf\",\n    \"BsyLzmvsfh\",\n    \"DVFanTyJAn\",\n    \"nLNqjeaKhM\",\n    \"PlOMgvQcQj\",\n    \"XfTOPpaIOx\",\n    \"dpbRhXpPOr\",\n    \"gHbLeRMoba\",\n    \"oYkShEhEzI\",\n    \"lvKWfrNoFk\",\n    \"cRVIbFJiTy\",\n    \"VTLurYvTXC\",\n    \"NtbeVYeBgB\",\n    \"jcLCExnhEu\",\n    \"iwxVeJhkuD\",\n    \"bZYEhPWSqC\",\n    \"ZifngnMQph\",\n    \"KNtbLExkEN\",\n    \"anfDStnaTl\",\n    \"klbWjPbZga\",\n    \"yzfNuLOaDc\",\n    \"TXHxXgKcRS\",\n    \"qxkGsGROeS\",\n    \"bSzHLzWboT\",\n    \"xnvSiudAgI\",\n    \"gHCqLwnMuE\",\n    \"VmyfmFqaXu\",\n    \"eQZCisJIMJ\",\n    \"RCsMCFMdgy\",\n    \"SHWbzyuQmD\",\n    \"jRlNduCWNF\",\n    \"GiZkWdmKDe\",\n    \"DGZWFUGbsL\",\n    \"FkJHsyHsiF\",\n    \"YqrMeBxyFP\",\n    \"FvQvkQvsNg\",\n    \"mslQVkCJDX\",\n    \"TTubUFuqKW\",\n    \"WNGBPbSoji\",\n    \"vyMDoXGDxk\",\n    \"MvpYbIIQPP\",\n    \"VmCTnEYlIN\",\n    \"VYaNYWSmiu\",\n    \"ycDvRQEXxK\",\n    \"faJGmkhJmV\",\n    \"wnMBsfLoCO\",\n    \"xrpUaqCfkn\",\n    \"IEHWraqOJp\",\n    \"zvkVtIGpHk\",\n    \"YksbzquDUr\",\n    \"PZFZtuJjzD\",\n    \"pbfGUbBNRB\",\n    \"eINHwAGyMO\",\n    \"rFXbTYiuwJ\",\n    \"jUWznFmxNR\",\n    \"wLtYKaISde\",\n    \"PEjyCyymMP\",\n    \"EPSEiMidmW\",\n    \"vrdAumqfkx\",\n    \"bsucJBMvER\",\n    \"QhvRlcrxJS\",\n    \"rhHgcMasWJ\",\n    \"ALrjoIzrQq\",\n    \"eGYPapwTDy\",\n    \"qsWFfAlgbj\",\n    \"CEtSIFTvKE\",\n    \"FemCfNHVSz\",\n    \"MGqWLMuFjX\",\n    \"pWxknIYCZT\",\n    \"PoNGqNymvo\",\n    \"jMoHtNHAet\",\n    \"xoyojtUADF\",\n    \"kfLhMzhoLu\",\n    \"nmEtKQPAHU\",\n    \"PjNUWUsbKf\",\n    \"yPIVMldFpV\",\n    \"MKiWWFDXHB\",\n    \"mPakefdyRU\",\n    \"oAMssRhUiZ\",\n    \"ShuqjyaarR\",\n    \"rLczkzhBZr\",\n    \"xRYXWzrowE\",\n    \"SSqoDSCwLh\",\n    \"ZHveUjJPox\",\n    \"AULYLenHyi\",\n  ];\n\n  let count = 0;\n  let results = new Set();\n  const getResult = () =>\n    randomFourItems(choices)\n      .sort()\n      .join(\"\");\n\n  while (count < 100) {\n    results.add(getResult());\n    count++;\n  }\n\n  expect(results.size > 75).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/vG4a7FTYbe4",
          "starterCode": "// All choices are just some string value\ntype Choice = string;\n\n// Accept a list of choices (strings) and select 4 randomly,\n// return them as a list.\nconst randomFourItems = (listOfChoices: Choice[]): Choice[] => {\n  // Your code here!\n};\n",
          "solutionCode": "// All choices are just some string value\ntype Choice = string;\n\n// Accept a list of choices (strings) and select 4 randomly,\n// return them as a list.\nconst randomFourItems = (listOfChoices: Choice[]): Choice[] => {\n  // Your code here!\n  if (listOfChoices.length < 4) {\n    throw new Error(\"listOfChoices must have at least 4 elements!\");\n  } else if (listOfChoices.length === 4) {\n    return listOfChoices;\n  }\n\n  let result = [];\n\n  // Track used index values to not use them twice\n  const usedIndexes = new Set();\n\n  // Find a random index in the provided choice list\n  const randomIndex = () => {\n    return Math.floor(Math.random() * (listOfChoices.length - 1));\n  };\n\n  // Fill the results with random index choices until the results\n  // array is full.\n  while (result.length < 4) {\n    const index = randomIndex();\n    if (!usedIndexes.has(index)) {\n      result.push(listOfChoices[index]);\n      usedIndexes.add(index);\n    }\n  }\n\n  return result;\n};\n",
          "content": ""
        },
        {
          "id": "Yqp21wDWa",
          "type": "typescript",
          "title": "Random Four (With a Twist!)",
          "instructions": "The `randomFourItems` function is back again\\! This time, the randomly selected answers _should not reuse previously selected answers_ until all of the answers have been exhausted. This is a little tricky\\! Good luck.\n\n**Hint: **A `Set` can be useful to track unique elements.",
          "testCode": "test(\"The `randomFourItems` function requires an argument string array with at least 4 strings.\", () => {\n  expect(() => randomFourItems([])).toThrow(\n    \"An array of four strings is required\"\n  );\n  expect(() => randomFourItems([\"a\", \"b\"])).toThrow(\n    \"An array of four strings is required\"\n  );\n  expect(() => randomFourItems([\"a\", \"b\", \"c\"])).toThrow(\n    \"An array of four strings is required\"\n  );\n});\n\ntest(\"The `randomFourItems` function should return an array of 4 strings.\", () => {\n  const result = randomFourItems([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]);\n  expect(Array.isArray(result)).toBe(true);\n  expect(result.length).toBe(4);\n});\n\nconst choices = [\n  \"OjwTImGxLC\",\n  \"nIHnbjiUvG\",\n  \"vwitzxZTyj\",\n  \"NAJlgKfPbE\",\n  \"OSAjWslqnc\",\n  \"tnlFLxnGZs\",\n  \"FMSHjIBHyp\",\n  \"NowDHsOBbx\",\n  \"ZrnbHxCMYl\",\n  \"YOGDcQJFtP\",\n  \"imvpxAekRu\",\n  \"BQOrbtFWOG\",\n  \"PquNWuJLvf\",\n  \"PtYkXHpKxJ\",\n  \"lkOLKQDleN\",\n  \"ZlOSZslGFf\",\n  \"BsyLzmvsfh\",\n  \"DVFanTyJAn\",\n  \"nLNqjeaKhM\",\n  \"PlOMgvQcQj\",\n  \"XfTOPpaIOx\",\n  \"dpbRhXpPOr\",\n  \"gHbLeRMoba\",\n  \"oYkShEhEzI\",\n  \"lvKWfrNoFk\",\n  \"cRVIbFJiTy\",\n  \"VTLurYvTXC\",\n  \"NtbeVYeBgB\",\n  \"jcLCExnhEu\",\n  \"iwxVeJhkuD\",\n  \"bZYEhPWSqC\",\n  \"ZifngnMQph\",\n  \"KNtbLExkEN\",\n  \"anfDStnaTl\",\n  \"klbWjPbZga\",\n  \"yzfNuLOaDc\",\n  \"TXHxXgKcRS\",\n  \"qxkGsGROeS\",\n  \"bSzHLzWboT\",\n  \"xnvSiudAgI\",\n  \"gHCqLwnMuE\",\n  \"VmyfmFqaXu\",\n  \"eQZCisJIMJ\",\n  \"RCsMCFMdgy\",\n  \"SHWbzyuQmD\",\n  \"jRlNduCWNF\",\n  \"GiZkWdmKDe\",\n  \"DGZWFUGbsL\",\n  \"FkJHsyHsiF\",\n  \"YqrMeBxyFP\",\n  \"FvQvkQvsNg\",\n  \"mslQVkCJDX\",\n  \"TTubUFuqKW\",\n  \"WNGBPbSoji\",\n  \"vyMDoXGDxk\",\n  \"MvpYbIIQPP\",\n  \"VmCTnEYlIN\",\n  \"VYaNYWSmiu\",\n  \"ycDvRQEXxK\",\n  \"faJGmkhJmV\",\n  \"wnMBsfLoCO\",\n  \"xrpUaqCfkn\",\n  \"IEHWraqOJp\",\n  \"zvkVtIGpHk\",\n  \"YksbzquDUr\",\n  \"PZFZtuJjzD\",\n  \"pbfGUbBNRB\",\n  \"eINHwAGyMO\",\n  \"rFXbTYiuwJ\",\n  \"jUWznFmxNR\",\n  \"wLtYKaISde\",\n  \"PEjyCyymMP\",\n  \"EPSEiMidmW\",\n  \"vrdAumqfkx\",\n  \"bsucJBMvER\",\n  \"QhvRlcrxJS\",\n  \"rhHgcMasWJ\",\n  \"ALrjoIzrQq\",\n  \"eGYPapwTDy\",\n  \"qsWFfAlgbj\",\n  \"CEtSIFTvKE\",\n  \"FemCfNHVSz\",\n  \"MGqWLMuFjX\",\n  \"pWxknIYCZT\",\n  \"PoNGqNymvo\",\n  \"jMoHtNHAet\",\n  \"xoyojtUADF\",\n  \"kfLhMzhoLu\",\n  \"nmEtKQPAHU\",\n  \"PjNUWUsbKf\",\n  \"yPIVMldFpV\",\n  \"MKiWWFDXHB\",\n  \"mPakefdyRU\",\n  \"oAMssRhUiZ\",\n  \"ShuqjyaarR\",\n  \"rLczkzhBZr\",\n  \"xRYXWzrowE\",\n  \"SSqoDSCwLh\",\n  \"ZHveUjJPox\",\n  \"AULYLenHyi\",\n];\n\ntest(\"The `randomFourItems` should only add answer one time every time it is called until it uses all of the available answers.\", () => {\n  let count = 0;\n  let results = new Set();\n  let selectedAnswers = new Set();\n\n  const getResult = () =>\n    randomFourItems(choices)\n      .map((answer) => {\n        selectedAnswers.add(answer);\n        return answer;\n      })\n      .sort()\n      .join(\"\");\n\n  while (count < 100) {\n    results.add(getResult());\n    count++;\n  }\n\n  expect(results.size > 75).toBe(true);\n  expect(selectedAnswers.size).toBe(choices.length);\n});\n\ntest(\"The `randomFourItems` should start to reuse selected answers after using the entire provided `listOfChoices` first.\", () => {\n  let count = 0;\n  let results = new Set();\n  let selectedAnswers = new Set();\n\n  const getResult = () =>\n    randomFourItems(choices)\n      .map((answer) => {\n        selectedAnswers.add(answer);\n        return answer;\n      })\n      .sort()\n      .join(\"\");\n\n  while (count < 500) {\n    results.add(getResult());\n    count++;\n  }\n\n  expect(results.size > 450).toBe(true);\n  expect(selectedAnswers.size).toBe(choices.length);\n});\n\ntest(\"The `randomFourItems` function should return 4 items picked randomy from the provided list.\", () => {\n  let count = 0;\n  let results = new Set();\n\n  const getResult = () =>\n    randomFourItems(choices)\n      .sort()\n      .join(\"\");\n\n  while (count < 100) {\n    results.add(getResult());\n    count++;\n  }\n\n  expect(results.size > 75).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/5XcnRmVMOQ8",
          "starterCode": "// All choices are just some string value\ntype Choice = string;\n\n// Accept a list of choices (strings) and select 4 randomly,\n// return them as a list.\nconst randomFourItems = (listOfChoices: Choice[]): Choice[] => {\n  // Your code here!\n};\n",
          "solutionCode": "// All choices are just some string value\ntype Choice = string;\n\n// Track the user answers. The randomFourItems function holds\n// onto this value via a closure.\nlet usedAnswers = new Set();\n\n// Accept a list of choices (strings) and select 4 randomly,\n// return them as a list.\nconst randomFourItems = (listOfChoices: Choice[]): Choice[] => {\n  // Your code here!\n  if (listOfChoices.length < 4) {\n    throw new Error(\"listOfChoices must have at least 4 elements!\");\n  } else if (listOfChoices.length === 4) {\n    return listOfChoices;\n  }\n\n  let result = [];\n\n  // Track used index values to not use them twice\n  const usedIndexes = new Set();\n\n  // Find a random index in the provided choice list\n  const randomIndex = () =>\n    Math.floor(Math.random() * listOfChoices.length - 1);\n\n  // Fill the results with random index choices until the results\n  // array is full.\n  while (result.length < 4) {\n    const index = randomIndex();\n\n    if (!usedIndexes.has(index)) {\n      const answer = listOfChoices[index];\n      // Only add the answer if it has not been added yet\n      if (!usedAnswers.has(answer)) {\n        // Include the answer\n        result.push(answer);\n        // Record using the index\n        usedIndexes.add(index);\n        // Record using this answer\n        usedAnswers.add(answer);\n\n        // Reset the used answers cache once it is full\n        if (usedAnswers.size === listOfChoices.length) {\n          usedAnswers = new Set();\n        }\n      }\n    }\n  }\n\n  return result;\n};\n",
          "content": ""
        },
        {
          "id": "0@Il4HpR@",
          "type": "typescript",
          "title": "Create a Soldier",
          "instructions": "Object oriented programming is a useful skill. It can be very useful at times \\(not always\\!\\). In this challenge, we want to define a `Soldier` class\\. The `Soldier` should implement the `Soldier` interface shown in the code editor. Be creative\\!\n\n**Some rules:**\n* You need to initialize a `soldier` variable below, which instantiates the `Soldier` class\\.\n* The soldier's initial health should start above `0`.\n* The soldier and foe's health should not go below `0` in a battle.\n* The `battle` should reduce the soldier and foe's health by the fixed `battleDamageAmount` of `500`.\n* The `isAlive` method should return `true` as long as the soldier's health is above `0`.\n\n",
          "testCode": "test(\"A `soldier` variable should exist and have a `name`, `weapon`, `health`, and `hasShield` properties.\", () => {\n  const testSoldier = new Soldier(\"Isaac\", \"sword\", 1000, true);\n  const isWeaponValid = (weapon) => {\n    return (\n      weapon === \"sword\" || weapon === \"spear\" || weapon === \"bow and arrow\"\n    );\n  };\n\n  expect(testSoldier).toBeDefined();\n  expect(typeof testSoldier.name === \"string\").toBe(true);\n  expect(typeof testSoldier.weapon === \"string\").toBe(true);\n  expect(isWeaponValid(testSoldier.weapon)).toBe(true);\n  expect(typeof testSoldier.health === \"number\").toBe(true);\n  expect(typeof testSoldier.hasShield === \"boolean\").toBe(true);\n});\n\ntest(\"The `soldier` `battle` method should reduce the soldier and foe health by the `battleDamageAmount` until they reach zero.\", () => {\n  const testSoldier = new Soldier(\"Isaac\", \"sword\", 1000, true);\n  let result = testSoldier.battle(100);\n  expect(testSoldier.health).toBe(500);\n  expect(testSoldier.isAlive()).toBe(true);\n  expect(result.foeHealth).toBe(0);\n});\n\ntest(\"The `soldier` and `foe` health should not go below `0`.\", () => {\n  const testSoldier = new Soldier(\"Isaac\", \"sword\", 1000, true);\n  let result = testSoldier.battle(100);\n  expect(result.foeHealth).toBe(0);\n});\n\ntest(\"The `soldier` `isAlive` method should return `false` when the soldier's health reaches `0`.\", () => {\n  const testSoldier = new Soldier(\"Isaac\", \"sword\", 1000, true);\n  expect(testSoldier.health > 0).toBe(true);\n  expect(testSoldier.isAlive()).toBe(true);\n  // Force the health to zero\n  testSoldier.health = 0;\n  expect(testSoldier.isAlive()).toBe(false);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/H6hSF-EEJj4",
          "starterCode": "type Weapon = \"sword\" | \"spear\" | \"bow and arrow\";\n\ninterface BattleResult {\n  soldierHealth: number;\n  foeHealth: number;\n}\n\ninterface SoldierInterface {\n  battleDamageAmount: 500;\n  name: string;\n  weapon: Weapon;\n  health: number;\n  hasShield: boolean;\n  battle: (foeHealth: number) => BattleResult;\n  isAlive: () => boolean;\n}\n\nclass Soldier implements SoldierInterface {\n  // Your code here!\n}\n\n// Change code here, if necessary!\nconst soldier = new Soldier();\n",
          "solutionCode": "type Weapon = \"sword\" | \"spear\" | \"bow and arrow\";\n\ninterface BattleResult {\n  soldierHealth: number;\n  foeHealth: number;\n}\n\ninterface SoldierInterface {\n  battleDamageAmount: 500;\n  name: string;\n  weapon: Weapon;\n  health: number;\n  hasShield: boolean;\n  battle: (foeHealth: number) => BattleResult;\n  isAlive: () => boolean;\n}\n\nclass Soldier implements SoldierInterface {\n  battleDamageAmount: 500 = 500;\n  name: string;\n  weapon: Weapon;\n  health: number;\n  hasShield: boolean;\n\n  // Your code here!\n  constructor(\n    name: string,\n    weapon: Weapon,\n    health: number,\n    hasShield: boolean\n  ) {\n    this.name = name;\n    this.weapon = weapon;\n    this.health = health;\n    this.hasShield = hasShield;\n  }\n\n  battle(foeHealth: number) {\n    const newFoeHealth = foeHealth - this.battleDamageAmount;\n    const newSoldierHealth = this.health - this.battleDamageAmount;\n    this.health = newSoldierHealth > 0 ? newSoldierHealth : 0;\n    return {\n      foeHealth: newFoeHealth > 0 ? newFoeHealth : 0,\n      soldierHealth: newSoldierHealth > 0 ? newSoldierHealth : 0,\n    };\n  }\n\n  isAlive() {\n    return this.health > 0;\n  }\n}\n\n// Change code here, if necessary!\nconst soldier = new Soldier(\"Isaac\", \"sword\", 1000, true);\n",
          "content": ""
        },
        {
          "id": "cMfM6vCPX",
          "type": "typescript",
          "title": "Bus Stop",
          "instructions": "There is a `Bus` class in the editor below. It should model a real world bus. The `Bus` has a `capacity` \\(total number of passengers it can support\\). The `capacity` is set when the bus is instantiated \\(different busses might have different capacities.\n\nThe `Bus` class has two methods: `embark` and `disembark` which represent the actions of passengers getting on and off the bus. Your job is to complete these methods, adhering to the following logic:\n\n* The `Bus` `passengers` value reflects the current number of passengers on the bus.\n* The `Bus` `passengers` can not exceed the `capacity` of the bus, or fall below zero.\n* Calling the `embark` method increments the `Bus` `passengers`, only if there is room for a new passenger. The method returns `true` if embarkment was successful, and `false` otherwise\\.\n* Calling the `disembark` method decrements the `Bus` `passengers`, but not below zero. The method returns `true` if disembarking was successful, and `false` otherwise\\.\n\n",
          "testCode": "test(\"The bus cannot `embark` more passengers than the `capacity`.\", () => {\n  const bus = new Bus(25);\n  let count = 0;\n  while (count < 25) {\n    const result = bus.embark();\n    expect(result).toBe(true);\n    count++;\n  }\n  expect(bus.passengers).toBe(25);\n  const result = bus.embark();\n  expect(result).toBe(false);\n});\n\ntest(\"The bus will `disembark` passengers but not below `0`.\", () => {\n  const bus = new Bus(25);\n  let count = 0;\n  while (count < 25) {\n    const result = bus.embark();\n    expect(result).toBe(true);\n    count++;\n  }\n  bus.embark();\n  bus.embark();\n  bus.embark();\n  expect(bus.passengers).toBe(25);\n\n  while (count > 0) {\n    const result = bus.disembark();\n    expect(result).toBe(true);\n    count--;\n  }\n\n  expect(bus.passengers).toBe(0);\n  const result = bus.disembark();\n  expect(result).toBe(false);\n  expect(bus.passengers).toBe(0);\n  bus.disembark();\n  bus.disembark();\n  bus.disembark();\n  expect(bus.passengers).toBe(0);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7T6wJYcAO-Y",
          "starterCode": "class Bus {\n  capacity: number;\n  passengers: number;\n\n  constructor(capacity: number) {\n    this.capacity = capacity;\n    this.passengers = 0;\n  }\n\n  embark(): boolean {\n    // Your code here\n  }\n\n  disembark(): boolean {\n    // Your code here\n  }\n}\n",
          "solutionCode": "class Bus {\n  capacity: number;\n  passengers: number;\n\n  constructor(capacity: number) {\n    this.capacity = capacity;\n    this.passengers = 0;\n  }\n\n  embark(): boolean {\n    // Your code here\n    if (this.passengers === this.capacity) {\n      return false;\n    } else {\n      this.passengers++;\n      return true;\n    }\n  }\n\n  disembark(): boolean {\n    // Your code here\n    if (this.passengers === 0) {\n      return false;\n    } else {\n      this.passengers--;\n      return true;\n    }\n  }\n}\n",
          "content": ""
        },
        {
          "id": "fG7qhC0Z9",
          "type": "typescript",
          "title": "Transform List",
          "instructions": "You are given a list of some values and a function to apply to each value in the list. Write a function to transform the list with the provided function.",
          "testCode": "test(\"The `transformList` function should apply the provided `transfromFn` to each item in the `list`, and return the result.\", () => {\n  let list = [1, 2, 3, 6, 7, 8, 3, 1, 3, 9, 2];\n  let fn = (x) => (x * 100) / 2;\n  let result = transformList(list, fn);\n  expect(result).toEqual(list.map(fn));\n\n  list = [\"asdf\", \"asfdafsda\", \"aaestasdf\", \"sdfz\"];\n  fn = (x) => x.slice(0, 1) + \"abc!\";\n  result = transformList(list, fn);\n  expect(result).toEqual(list.map(fn));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/R-MbWfn1PXk",
          "starterCode": "// Transform a list with a provided transformation function\nconst transformList = <T extends {}>(\n  list: T[],\n  transformFn: (arg: T) => any\n) => {\n  // Your code here\n};\n",
          "solutionCode": "// Transform a list with a provided transformation function\nconst transformList = <T extends {}>(\n  list: T[],\n  transformFn: (arg: T) => any\n) => {\n  // Your code here\n  // Solution 1:\n  // Use .map\n  // return list.map(transformFn);\n\n  // Solution 2:\n  // Use a for...of loop with a local result variable\n  let transformedList = [];\n  for (const item of list) {\n    const result = transformFn(item);\n    transformedList.push(result);\n  }\n  return transformedList;\n};\n",
          "content": ""
        },
        {
          "id": "RZ@VTuljX",
          "type": "typescript",
          "title": "Sort The Boxes",
          "instructions": "A `Box` can be small, medium, or large. Write a function to accept a list of boxes and sort them into an object based on their size.",
          "testCode": "const solutionFn = (boxes) => {\n  let result = {\n    small: [],\n    medium: [],\n    large: [],\n  };\n  for (const box of boxes) {\n    if (box.size === \"small\") {\n      result = {\n        ...result,\n        small: result.small.concat(box),\n      };\n    } else if (box.size === \"medium\") {\n      result = {\n        ...result,\n        medium: result.medium.concat(box),\n      };\n    } else if (box.size === \"large\") {\n      result = {\n        ...result,\n        large: result.large.concat(box),\n      };\n    }\n  }\n  return result;\n};\n\ntest(\"The `sortTheBoxes` function should sort the provided list of boxes correctly and return a `SortedBoxes` object.\", () => {\n  const small = {\n    size: \"small\",\n    contents: 5,\n  };\n  const medium = {\n    size: \"medium\",\n    contents: 10,\n  };\n  const large = {\n    size: \"large\",\n    contents: 50,\n  };\n\n  let boxes = [small, medium, medium, small, large, medium, small, large];\n  let result = sortTheBoxes(boxes);\n  let expected = solutionFn(boxes);\n  expect(result).toEqual(expected);\n\n  boxes = [large, large, large, large, large, small, small];\n  result = sortTheBoxes(boxes);\n  expected = solutionFn(boxes);\n  expect(result).toEqual(expected);\n\n  boxes = [\n    large,\n    medium,\n    small,\n    small,\n    medium,\n    medium,\n    medium,\n    large,\n    large,\n    medium,\n    medium,\n    medium,\n    large,\n    small,\n  ];\n  result = sortTheBoxes(boxes);\n  expected = solutionFn(boxes);\n  expect(result).toEqual(expected);\n\n  boxes = [];\n  result = sortTheBoxes(boxes);\n  expected = solutionFn(boxes);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/plhLrgzZKic",
          "starterCode": "type BoxSize = \"small\" | \"medium\" | \"large\";\n\ninterface Box {\n  size: BoxSize;\n  contents: any;\n}\n\ninterface SortedBoxes {\n  small: Box[];\n  medium: Box[];\n  large: Box[];\n}\n\nconst sortTheBoxes = (boxes: Box[]): SortedBoxes => {\n  // Your code here\n};",
          "solutionCode": "type BoxSize = \"small\" | \"medium\" | \"large\";\n\ninterface Box {\n  size: BoxSize;\n  contents: any;\n}\n\ninterface SortedBoxes {\n  small: Box[];\n  medium: Box[];\n  large: Box[];\n}\n\nconst sortTheBoxes = (boxes: Box[]): SortedBoxes => {\n  let result: SortedBoxes = {\n    small: [],\n    medium: [],\n    large: [],\n  };\n\n  // Iterate over the boxes and place them according to their\n  // size:\n  for (const box of boxes) {\n    if (box.size === \"small\") {\n      result = {\n        ...result,\n        small: result.small.concat(box),\n      };\n    } else if (box.size === \"medium\") {\n      result = {\n        ...result,\n        medium: result.medium.concat(box),\n      };\n    } else if (box.size === \"large\") {\n      result = {\n        ...result,\n        large: result.large.concat(box),\n      };\n    }\n  }\n\n  return result;\n};",
          "content": ""
        },
        {
          "id": "DpEPuZSCH",
          "type": "typescript",
          "title": "Square or Rectangle",
          "instructions": "A `FourSides` object has four sides and a `width` and `height`. Complete the `isSquareOrRectangle` function to determine if such an object is a `square` or `rectangle`.",
          "testCode": "test(\"`isSquareOrRectangle` should return `square` when passed a square object.\", () => {\n  expect(isSquareOrRectangle({ width: 50, height: 50 })).toBe(\"square\");\n  expect(isSquareOrRectangle({ width: 50245, height: 50245 })).toBe(\"square\");\n  expect(isSquareOrRectangle({ width: 2, height: 2 })).toBe(\"square\");\n  expect(isSquareOrRectangle({ width: 5, height: 5 })).toBe(\"square\");\n  expect(isSquareOrRectangle({ width: 150, height: 150 })).toBe(\"square\");\n});\n\ntest(\"`isSquareOrRectangle` should return `rectangle` when passed a rectangle object.\", () => {\n  expect(isSquareOrRectangle({ width: 504, height: 50 })).toBe(\"rectangle\");\n  expect(isSquareOrRectangle({ width: 502345, height: 50245 })).toBe(\"rectangle\");\n  expect(isSquareOrRectangle({ width: 21, height: 2 })).toBe(\"rectangle\");\n  expect(isSquareOrRectangle({ width: 4, height: 5 })).toBe(\"rectangle\");\n  expect(isSquareOrRectangle({ width: 151, height: 150 })).toBe(\"rectangle\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/NhpWrfMZNoE",
          "starterCode": "interface FourSides {\n  width: number;\n  height: number;\n}\n\ntype Result = \"square\" | \"rectangle\";\n\nconst isSquareOrRectangle = (fourSidedObject: FourSides): Result => {\n  // Your code here.\n}",
          "solutionCode": "interface FourSides {\n  width: number;\n  height: number;\n}\n\ntype Result = \"square\" | \"rectangle\";\n\nconst isSquareOrRectangle = (fourSidedObject: FourSides): Result => {\n  if (fourSidedObject.width === fourSidedObject.height) {\n    return \"square\";\n  } else {\n    return \"rectangle\";\n  }\n}",
          "content": ""
        },
        {
          "id": "TL9i1z2rT",
          "type": "typescript",
          "title": "Circumference",
          "instructions": "Let's write a function to calculate the circumference of a circle. Recall from math class that the circumference is `C = 2πr` where `r` is the radius of the circle.\n\n**Hint: **TypeScript provides the constant π with `Math.PI`.\n\n```\nCircumference: 2 * π * radius\n\n```\n",
          "testCode": "test(\"The `getCircumference` function should calculate and return the circumference of the provided `Circle`.\", () => {\n  expect(getCircumference({ radius: 10 })).toBe(2 * Math.PI * 10);\n  expect(getCircumference({ radius: 12 })).toBe(2 * Math.PI * 12);\n  expect(getCircumference({ radius: 192 })).toBe(2 * Math.PI * 192);\n  expect(getCircumference({ radius: 105 })).toBe(2 * Math.PI * 105);\n  expect(getCircumference({ radius: 637 })).toBe(2 * Math.PI * 637);\n  expect(getCircumference({ radius: 2893 })).toBe(2 * Math.PI * 2893);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Ev78MLdce8Y",
          "starterCode": "interface Circle {\n  radius: number;\n}\n\n// Return the circumference of a circle\nconst getCircumference = (circle: Circle): number => {\n  // Your code here\n}",
          "solutionCode": "interface Circle {\n  radius: number;\n}\n\n// Return the circumference of a circle\nconst getCircumference = (circle: Circle): number => {\n  return 2 * Math.PI * circle.radius;\n}",
          "content": ""
        },
        {
          "id": "Bqb7cmX3q",
          "type": "typescript",
          "title": "Pythagorean",
          "instructions": "Recall the [Pythagorean theorem](https://en.wikipedia.org/wiki/Pythagorean_theorem) from math class \\(we know you want to 😉\\): `a^2 + b^2 = c^2`. Given a `Triangle` with sides `a` and `b`, return the length of side `c` using the Pythagorean formula.",
          "testCode": "const solutionFn = (triangle) => {\n  return Math.sqrt(Math.pow(triangle.a, 2) + Math.pow(triangle.b, 2));\n};\n\ntest(\"Given a `Triangle`, `pythagoreanFormula` should return the length of the longest side.\", () => {\n  let triangle = { a: 3, b: 4 };\n  let result = pythagoreanFormula(triangle);\n  let expected = solutionFn(triangle);\n  expect(result).toBe(expected);\n\n  triangle = { a: 30, b: 42 };\n  result = pythagoreanFormula(triangle);\n  expected = solutionFn(triangle);\n  expect(result).toBe(expected);\n\n  triangle = { a: 30, b: 42 };\n  result = pythagoreanFormula(triangle);\n  expected = solutionFn(triangle);\n  expect(result).toBe(expected);\n\n  triangle = { a: 5, b: 12 };\n  result = pythagoreanFormula(triangle);\n  expected = solutionFn(triangle);\n  expect(result).toBe(expected);\n\n  triangle = { a: 39, b: 80 };\n  result = pythagoreanFormula(triangle);\n  expected = solutionFn(triangle);\n  expect(result).toBe(expected);\n\n  triangle = { a: 65, b: 72 };\n  result = pythagoreanFormula(triangle);\n  expected = solutionFn(triangle);\n  expect(result).toBe(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/UzdQOZKc7gs",
          "starterCode": "interface Triangle {\n  a: number;\n  b: number;\n}\n\n// Return the length of the longest side of a triangle\nconst pythagoreanFormula = (triangle: Triangle): number => {\n  // Your code here\n};\n",
          "solutionCode": "interface Triangle {\n  a: number;\n  b: number;\n}\n\n// Return the length of the longest side of a triangle\nconst pythagoreanFormula = (triangle: Triangle): number => {\n  const c = Math.sqrt(Math.pow(triangle.a, 2) + Math.pow(triangle.b, 2));\n  return c;\n};\n",
          "content": ""
        },
        {
          "id": "3evnp9yvA",
          "type": "typescript",
          "title": "Count the Words",
          "instructions": "People take word processors for granted\\! They are actually much more complicated than you might imagine. Let's implement one basic functionality: word count. Given a string of text, return the number of words in the string. Don't worry about spelling, a word is just a substring with spaces on either side.\n\nThe string `Today I am learning to code.` has 6 words in it, for example. Good luck\\!",
          "testCode": "test(\"The `wordCount` function should return the number of words in a string.\", () => {\n  expect(wordCount(\"I am a cat.\")).toBe(4);\n  expect(wordCount(\"\")).toBe(0);\n  expect(wordCount(\"I love learning to code!\")).toBe(5);\n  expect(wordCount(\"Amazing\")).toBe(1);\n  const bigString = \"is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\";\n  expect(wordCount(bigString)).toBe(89);\n});\n\ntest(\"The `wordCount` function should return `0` for empty string `\\\"\\\"` arguments.\", () => {\n  expect(wordCount(\"\")).toBe(0);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/bmGKH-zvjKk",
          "starterCode": "// A function to perform word count on a string\nconst wordCount = (text: string): number => {\n  // Your code here\n}",
          "solutionCode": "// A function to perform word count on a string\nconst wordCount = (text: string): number => {\n  // We can just split the text based on the presence of \" \" spaces\n  // and return the length of the array.\n  return text.split(\" \").filter(Boolean).length;\n}",
          "content": ""
        },
        {
          "id": "IVu9guoLS",
          "type": "typescript",
          "title": "Enter the Matrix",
          "instructions": "One way to represent a matrix is with an array of arrays: `number[][]`.  For instance, you could represent a Tic Tac Toe board using this structure:\n\n```\nconst TicTacToe = [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\n\n```\n\nIn the code editor is a function which should accept a matrix of zeroes and ones. Complete the function `countMatrixZeroes` which should accept a 2 dimensional array and return the number of `0`s the matrix contains.",
          "testCode": "test(\"`countMatrixZeroes` should return the number of zeroes in a matrix of `1`s and `0`s.\", () => {\n  let matrix = [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n  ];\n  let result = countMatrixZeroes(matrix);\n  expect(result).toBe(6);\n\n  matrix = [\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n  ];\n  result = countMatrixZeroes(matrix);\n  expect(result).toBe(9);\n\n  matrix = [\n    [0, 1, 1],\n    [0, 1, 1],\n    [0, 1, 1],\n  ];\n  result = countMatrixZeroes(matrix);\n  expect(result).toBe(3);\n\n  matrix = [\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1],\n  ];\n  result = countMatrixZeroes(matrix);\n  expect(result).toBe(0);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/oP2PhxtTzv8",
          "starterCode": "type Matrix = number[][];\n\n/**\n * A function to count the number of zeroes within a\n * 2 dimenstional array.\n */\nconst countMatrixZeroes = (matrix: Matrix): number => {\n  // Your code here!\n}",
          "solutionCode": "type Matrix = number[][];\n\n/**\n * A function to count the number of zeroes within a\n * 2 dimenstional array.\n */\nconst countMatrixZeroes = (matrix: Matrix): number => {\n  let zeroes = 0;\n  // Iterate through each row\n  for (const row of matrix) {\n    // Iterate through each item of the each row\n    for (const element of row) {\n      // Increment the zeroes counter, if the item is 0\n      if (element === 0) {\n        zeroes++;\n      }\n    }\n  }\n  return zeroes;\n}",
          "content": ""
        },
        {
          "id": "F1dLKVeY1",
          "type": "typescript",
          "title": "Search the Matrix",
          "instructions": "Given a 2D matrix and an element, return `true` if the matrix contains the element and `false` otherwise\\.",
          "testCode": "test(\"Given a matrix and element, `findElementInMatrix` should return `true` if the matrix contains the element and `false` otherwise.\", () => {\n  let matrix = [\n    [1, 1, 1],\n    [2, 2, 2],\n    [3, 3, 3],\n    [4, 4, 5],\n  ];\n  expect(findElementInMatrix(matrix, 5)).toBe(true);\n  expect(findElementInMatrix(matrix, 1)).toBe(true);\n  expect(findElementInMatrix(matrix, 2)).toBe(true);\n  expect(findElementInMatrix(matrix, 3)).toBe(true);\n  expect(findElementInMatrix(matrix, 4)).toBe(true);\n  expect(findElementInMatrix(matrix, 15)).toBe(false);\n  expect(findElementInMatrix(matrix, 25)).toBe(false);\n  expect(findElementInMatrix(matrix, 51)).toBe(false);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/P51EIhp4KHE",
          "starterCode": "// Find an element in a 2D matrix of values\nconst findElementInMatrix = (matrix: any[][], element: any): boolean => {\n  // Your code here!\n}",
          "solutionCode": "// Find an element in a 2D matrix of values\nconst findElementInMatrix = (matrix: any[][], element: any): boolean => {\n  for (const row of matrix) {\n    for (const item of row) {\n      // Return true as soon as the element is found\n      if (item === element) {\n        return true;\n      }\n    }\n  }\n\n  // If the element was never found, return false\n  return false;\n}",
          "content": ""
        },
        {
          "id": "EztzbqIDQ",
          "type": "typescript",
          "title": "Batch Lists",
          "instructions": "You have a long list of elements which you want to batch into smaller lists, with a variable batch size. For example:\n\n```\n// Input list\nconst input = [1,2,3,4,5,6,7,8,9,10];\n// Batched output, with a batchSize of 3:\nconst output = [ [1,2,3], [4,5,6], [7,8,9], [10] ];\n\n```\n\nImplement the `batchLists` function in the code editor.",
          "testCode": "const batchListSolution = (list, batchSize = 5) => {\n  let batches = [];\n  let batch = [];\n  for (let i = 0; i < list.length; i += batchSize) {\n    batch = list.slice(i, i + batchSize);\n    batches.push(batch);\n  }\n  return batches;\n};\n\ntest(\"The `batchLists` function should accept a list of elements and return a batched list using the provided `batchSize`.\", () => {\n  let list = stringList.slice(0, 12);\n  let result = batchLists(list);\n  let expected = batchListSolution(list);\n  expect(result).toEqual(expected);\n\n  list = stringList.slice(0, 24);\n  result = batchLists(list, 12);\n  expected = batchListSolution(list, 12);\n  expect(result).toEqual(expected);\n  expect(result[0].length).toBe(12);\n  expect(result[1].length).toBe(12);\n\n  list = stringList.slice(0, 76);\n  result = batchLists(list);\n  expected = batchListSolution(list);\n  expect(result).toEqual(expected);\n\n  list = [];\n  result = batchLists(list);\n  expected = batchListSolution(list);\n  expect(result).toEqual(expected);\n\n  list = stringList.slice(0, 30);\n  result = batchLists(list, 7);\n  expected = batchListSolution(list, 7);\n  expect(result).toEqual(expected);\n  expect(result[0].length).toBe(7);\n  expect(result[1].length).toBe(7);\n  expect(result[2].length).toBe(7);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/uBuOsMg_vv8",
          "starterCode": "/**\n * A function which accepts a list of elements and returns a list\n * of lists of the elements in batches\n */\nconst batchLists = <T extends {}>(list: T[], batchSize = 5): T[][] => {\n  // Your code here\n}",
          "solutionCode": "/**\n * A function which accepts a list of elements and returns a list\n * of lists of the elements in batches\n */\nconst batchLists = <T extends {}>(list: T[], batchSize = 5): T[][] => {\n  let batches = [];\n  let batch = [];\n  for (let i = 0; i < list.length; i += batchSize) {\n    batch = list.slice(i, i + batchSize);\n    batches.push(batch);\n  }\n  return batches;\n}",
          "content": ""
        },
        {
          "id": "Es@mxtD8l",
          "type": "typescript",
          "title": "Object Filter",
          "instructions": "You receive an object where some of the values may be `null` or `undefined`. We want to remove all of these from the object. For instance, given the object `{ name: \"Ben\", age: null }` we want to remove `age` and return `{ name: \"Ben\" }`.",
          "testCode": "const objectFilterSolution = (obj) => {\n  return Object.entries(obj).reduce((filtered, [key, value]) => {\n    if (value) {\n      return {\n        ...filtered,\n        [key]: value,\n      };\n    } else {\n      return filtered;\n    }\n  }, {});\n};\n\ntest(\"`objectFilter` should remove `null` or `undefined` values from an object.\", () => {\n  let obj = {};\n  let result = objectFilter(obj);\n  let expected = objectFilterSolution(obj);\n  expect(result).toEqual(expected);\n\n  obj = {\n    name: \"Ben\",\n    age: null,\n  };\n  result = objectFilter(obj);\n  expected = objectFilterSolution(obj);\n  expect(result).toEqual(expected);\n\n  obj = {\n    name: \"Ben\",\n    age: null,\n    value: undefined,\n    list: [1, 2, 3],\n    obj: { x: \"x\", z: \"z\" },\n    other: null,\n  };\n  result = objectFilter(obj);\n  expected = objectFilterSolution(obj);\n  console.log(expected);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/4_Wc3t5WfX0",
          "starterCode": "// Filter null or undefined values from an object\nconst objectFilter = (obj: { [key: string]: any }): { [key: string]: any } => {\n  // Your code here\n};\n",
          "solutionCode": "// Filter null or undefined values from an object\nconst objectFilter = (obj: { [key: string]: any }): { [key: string]: any } => {\n  // Reduce the object entries to a new object, only including {key:value} pairs\n  // where the value is not null or undefined.\n  return Object.entries(obj).reduce(\n    (filtered: { [key: string]: any }, [key, value]: [string, any]) => {\n      if (value === null || value === undefined) {\n        return filtered;\n      } else {\n        return {\n          ...filtered,\n          [key]: value,\n        };\n      }\n    },\n    {}\n  );\n};\n",
          "content": ""
        },
        {
          "id": "qvVZSJxdh",
          "type": "typescript",
          "title": "Count the Elements",
          "instructions": "You receive an array of integers, e.g. `[1, 2, 2, 1, 7, 8, 2, 9]`. Return an object which specifies the number of times each element appears in the array, e.g. `{ 1: 2, 2: 3, 7: 1, 8: 1, 9: 1 }`. The keys in the object should represent the number from the list, and the value should represent how many times it appears in the array.",
          "testCode": "const countElementsInListSolution = (list) => {\n  let counts = {};\n  for (const item of list) {\n    counts[item] = item in counts ? counts[item] + 1 : 1;\n  }\n  return counts;\n};\n\ntest(\"`countElementsInList` should return an object with key value pairs which indicate the number of times (value) each item (key) appears in the list.\", () => {\n  let list = [1, 2, 2, 1, 7, 8, 2, 9];\n  let result = countElementsInList(list);\n  let expected = countElementsInListSolution(list);\n  expect(result).toEqual(expected);\n\n  list = [1, 12, 12, 12, 12, 12, 5, 5, 6, 8, 8, 8, 8, 8, 8, 30, 90, 99];\n  result = countElementsInList(list);\n  expected = countElementsInListSolution(list);\n  expect(result).toEqual(expected);\n\n  list = [\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    9,\n    11,\n    11,\n    11,\n    11,\n    5,\n    5,\n    7,\n    7,\n    7,\n    100,\n    12333333,\n  ];\n  result = countElementsInList(list);\n  expected = countElementsInListSolution(list);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/iI-KgVImSfw",
          "starterCode": "const countElementsInList = (list: any[]): { [key: number]: number } => {\n  // Your code here\n}",
          "solutionCode": "const countElementsInList = (list: number[]): { [key: number]: number } => {\n  let counts: { [key: number]: number } = {};\n\n  for (const item of list) {\n    if (item in counts) {\n      // Second or more appearance, just increment:\n      counts[item] = counts[item] + 1;\n    } else {\n      // First appearance, set to 1:\n      counts[item] = 1;\n    }\n  }\n\n  return counts;\n}",
          "content": ""
        },
        {
          "id": "xvKEAc0sX",
          "type": "typescript",
          "title": "Box of Strings",
          "instructions": "You are given a box of strings, and a list of valid strings. Return only the strings in the box which are included in the list of valid strings.\n\n**Note: **There are many ways to do this. Get creative and try out different solutions\\!",
          "testCode": "const solutionFn = (boxOfStrings, validStrings) => {\n  const valid = new Set(validStrings);\n  return boxOfStrings.filter((s) => valid.has(s));\n};\n\ntest(\"`getValidStrings` should return only the strings in the provided `boxOfStrings` which exist in the `validStrings` list.\", () => {\n  let list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\n  let result = getValidStrings(list, list.slice(0, 2));\n  let expected = solutionFn(list, list.slice(0, 2));\n  expect(result).toEqual(expected);\n\n  list = stringList;\n  result = getValidStrings(list, stringList.slice(0, 12));\n  expected = solutionFn(list, stringList.slice(0, 12));\n  expect(result).toEqual(expected);\n\n  list = stringList;\n  result = getValidStrings(list, stringList.slice(0, 50));\n  expected = solutionFn(list, stringList.slice(0, 50));\n  expect(result).toEqual(expected);\n\n  list = stringList;\n  result = getValidStrings(list, []);\n  expected = solutionFn(list, []);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/xYDQvZZtq3A",
          "starterCode": "// A function to filter a list of strings given a list of valid strings.\nconst getValidStrings = (boxOfStrings: string[], validStrings: string[]): string[] => {\n  // Your code here\n}",
          "solutionCode": "// A function to filter a list of strings given a list of valid strings.\nconst getValidStrings = (boxOfStrings: string[], validStrings: string[]): string[] => {\n  // Create a set of only the valid strings\n  const valid = new Set(validStrings);\n  // Filter the box of strings, including only strings in the valid set\n  return boxOfStrings.filter(s => valid.has(s));\n}",
          "content": ""
        },
        {
          "id": "8EE78uuRi",
          "type": "typescript",
          "title": "Exclusion",
          "instructions": "You are given a list of elements. Return the list, excluding all elements which appear more than `n` times\\. For instance, `[1,1,1,2,3]` with `n = 2` should return `[2,3]`. The elements in the original list which remain should be retained in the same order and frequency.",
          "testCode": "const solutionFn = (list, n) => {\n  let counts = {};\n  for (const element of list) {\n    const key = String(element);\n    if (element in counts) {\n      counts[key] = counts[key] + 1;\n    } else {\n      counts[key] = 1;\n    }\n  }\n\n  let result = [];\n  for (const element of list) {\n    const key = String(element);\n    if (counts[key] > n) {\n      continue;\n    } else {\n      result.push(element);\n    }\n  }\n\n  return result;\n};\n\ntest(\"`exclusion` should exclude elements which appear more than `n` times from the provided `list`.\", () => {\n  let list = [1, 1, 1, 2, 3];\n  let result = exclusion(list, 2);\n  let expected = solutionFn(list, 2);\n  expect(result).toEqual(expected);\n\n  list = [1, 1, 1, 2, 2, 3, 5, 5, 5, 5];\n  result = exclusion(list, 2);\n  expected = solutionFn(list, 2);\n  expect(result).toEqual(expected);\n\n  list = [1, 1, 1, 2, 2, 3, 5, 5, 5, 5];\n  result = exclusion(list, 7);\n  expected = solutionFn(list, 7);\n  expect(result).toEqual(expected);\n\n  list = [1, 1, 1, 2, 2, 3, 5, 5, 5, 5];\n  result = exclusion(list, 1);\n  expected = solutionFn(list, 1);\n  expect(result).toEqual(expected);\n\n  list = [1, 1, 1, 2, 2, 3, 5, 5, 5, 5];\n  result = exclusion(list, 0);\n  expected = solutionFn(list, 0);\n  expect(result).toEqual(expected);\n\n  list = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];\n  result = exclusion(list, 20);\n  expected = solutionFn(list, 20);\n  expect(result).toEqual(expected);\n\n  result = exclusion(list, 21);\n  expected = solutionFn(list, 21);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/JxTdKHZQSIs",
          "starterCode": "// Exclude elements from a list which appear more than n times\nconst exclusion = <T extends {}>(list: T[], n: number): T[] => {\n  // Your code here\n};\n\nconst input = [1, 1, 1, 2, 3];\nconst output = exclusion<number>(input, 2);\nconsole.log(output);\n",
          "solutionCode": "// Exclude elements from a list which appear more than n times\nconst exclusion = <T extends string | number>(list: T[], n: number): T[] => {\n  // Construct an object to track how many times all the\n  // elements appear in the list\n  let counts: { [key: string]: number } = {};\n  for (const element of list) {\n    const key = String(element);\n    if (element in counts) {\n      counts[key] = counts[key] + 1;\n    } else {\n      counts[key] = 1;\n    }\n  }\n\n  // Iterate through the list and build up a results\n  // list which only contains the items from the original\n  // list which appear more than n times\n  let result = [];\n  for (const element of list) {\n    const key = String(element);\n    if (counts[key] > n) {\n      continue;\n    } else {\n      result.push(element);\n    }\n  }\n\n  // Return the final result\n  return result;\n};\n\nconst input = [1, 1, 1, 2, 3];\nconst output = exclusion<number>(input, 2);\nconsole.log(output);\n",
          "content": ""
        },
        {
          "id": "8XxA3@@xk",
          "type": "typescript",
          "title": "Shortest String",
          "instructions": "You receive a long string of words. Find and return the shortest word in the string, if there are multiple shortest words, just return the first word which is the shortest. For instance, `In this sentence there is an answer find the shortest word`, the result would be `In`. Note that `is` and `an` are not returned. If the input string is empty, you should return `\"\"`.\n\n**Note: **You can assume for this challenge the input will only include regular letter characters \\(no punctuation\\).",
          "testCode": "const solutionFn = (words) => {\n  const wordsList = words.split(\" \");\n  let shortest = wordsList[0];\n\n  for (const word of wordsList) {\n    if (word.length < shortest.length) {\n      shortest = word;\n    }\n  }\n\n  for (const word of wordsList) {\n    if (word.length === shortest.length) {\n      return word;\n    }\n  }\n\n  return shortest;\n};\n\ntest(\"`findTheShortestWord` should return the first shortest word in a provided string.\", () => {\n  let input =\n    \"Now we want to return all of the shortest strings If there is only one shortest string just return it\";\n  let result = findTheShortestWord(input);\n  let expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = \"This should return the long string the\";\n  result = findTheShortestWord(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = \"\";\n  result = findTheShortestWord(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = \"house\";\n  result = findTheShortestWord(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/eM1_so26yKk",
          "starterCode": "// Find the first shortest word in a string of words\nconst findTheShortestWord = (words: string): string => {\n  // Your code here\n}",
          "solutionCode": "// Find the first shortest word in a string of words\nconst findTheShortestWord = (words: string): string => {\n  const wordsList = words.split(\" \");\n  let shortest = wordsList[0];\n\n  // Find the shortest word\n  for (const word of wordsList) {\n    if (word.length < shortest.length) {\n      shortest = word;\n    }\n  }\n\n  // Find the first word in the list with the length\n  // of the shortest\n  for (const word of wordsList) {\n    if (word.length === shortest.length) {\n      return word;\n    }\n  }\n\n  // Default condition\n  return shortest;\n\n  // Alternate solution:\n  // return words.split(\" \").sort().pop() || \"\";\n};\n",
          "content": ""
        },
        {
          "id": "6kQfWh0a4",
          "type": "typescript",
          "title": "Shortest String(s)",
          "instructions": "Now, we want to return all of the shortest strings. If there is only one shortest string, just return it. If there are more than one, return them in a list. For instance, `In this sentence there is an answer find the shortest word`, the result would be `[\"In\", \"is\", \"an\"]`.\n\n**Note: **You can assume for this challenge the input will only include regular letter characters \\(no punctuation\\).",
          "testCode": "const solutionFn = (words) => {\n  const wordsList = words.split(\" \");\n  let shortest = wordsList[0];\n\n  for (const word of wordsList) {\n    if (word.length < shortest.length) {\n      shortest = word;\n    }\n  }\n\n  let results = [];\n\n  for (const word of wordsList) {\n    if (word.length === shortest.length) {\n      results.push(word);\n    }\n  }\n\n  return results.length === 1 ? results[0] : results;\n};\n\ntest(\"If there is only one shortest word, `findTheShortestWord` should return exactly that word.\", () => {\n  let input = \"This should return the long string\";\n  let result = findTheShortestWord(input);\n  let expected = solutionFn(input);\n  expect(result).toEqual(expected);\n  expect(Array.isArray(expected)).toBe(false);\n});\n\ntest(\"If there are multiple shortest words, `findTheShortestWord` should an array of these shortest words.\", () => {\n  input = \"This should return the long string the\";\n  result = findTheShortestWord(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n  expect(Array.isArray(expected)).toBe(true);\n});\n\ntest(\"`findTheShortestWord` should return all the shortest words in a provided string.\", () => {\n  let input =\n    \"Now we want to return all of the shortest strings If there is only one shortest string just return it\";\n  let result = findTheShortestWord(input);\n  let expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = \"This should return the long string the\";\n  result = findTheShortestWord(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = \"\";\n  result = findTheShortestWord(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = \"house\";\n  result = findTheShortestWord(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/CMELB5ZS6l8",
          "starterCode": "// Find the first shortest word in a string of words\nconst findTheShortestWord = (words: string): string | string[] => {\n  // Your code here\n}",
          "solutionCode": "// Find the shortest word(s) in the string\nconst findTheShortestWord = (words: string): string | string[] => {\n  const wordsList = words.split(\" \");\n  let shortest = wordsList[0];\n\n  // Find the length of the shortest word\n  for (const word of wordsList) {\n    if (word.length < shortest.length) {\n      shortest = word;\n    }\n  }\n\n  let results = [];\n\n  // Find all words matching the shortest length\n  for (const word of wordsList) {\n    if (word.length === shortest.length) {\n      results.push(word);\n    }\n  }\n\n  // If there is only one result, return it directly, otherwise\n  // return all the results\n  return results.length === 1 ? results[0] : results;\n};",
          "content": ""
        },
        {
          "id": "pezwk4Wq5",
          "type": "typescript",
          "title": "Alphanumeric",
          "instructions": "One limitation from the last 2 challenges is the assumption that the strings did not contain any non\\-alphanumeric characters. But what if they did? Complete the function below to remove all non alphanumeric characters from a string. There is a `RegExp` in the code editor to help you, look at the `console.log` examples to see how you can use it.",
          "testCode": "test(\"`alphanumericOnly` should remove non-alphanumeric characters, if they exist.\", () => {\n  expect(alphanumericOnly(\"\")).toBe(\"\");\n  expect(alphanumericOnly(\"Hello!!!!!!!!\")).toBe(\"Hello\");\n  expect(alphanumericOnly(\"Hello\")).toBe(\"Hello\");\n  expect(alphanumericOnly(\"This, is, a, test, can, it, pass, ???\")).toBe(\"This is a test can it pass \");\n  expect(alphanumericOnly(\"!!! This, is, a, test, can, it, pass, ???hi\")).toBe(\" This is a test can it pass hi\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/bHmNgukdRmk",
          "starterCode": "// Match any character which is NOT: a-z, A-Z, 0-9, or \" \"\nconst nonAlphanumeric = new RegExp(/[^a-zA-Z0-9 ]/);\n\n// Example:\nconsole.log(nonAlphanumeric.test(\"What is your name\")); // -> false\nconsole.log(nonAlphanumeric.test(\"What is your name?\")); // -> true\n\n// Remove all non-alphanumeric characters from a string\nconst alphanumericOnly = (text: string): string => {\n  // Your code here\n}",
          "solutionCode": "// Match any character which is NOT: a-z, A-Z, 0-9, or \" \"\nconst nonAlphanumeric = new RegExp(/[^a-zA-Z0-9 ]/);\n\n// Example:\nconsole.log(nonAlphanumeric.test(\"What is your name\")); // -> false\nconsole.log(nonAlphanumeric.test(\"What is your name?\")); // -> true\n\n// Remove all non-alphanumeric characters from a string\nconst alphanumericOnly = (text: string): string => {\n  let result = \"\";\n\n  // Manually iterate through the string and test each character\n  for (let i = 0; i < text.length; i++) {\n    const character = text.charAt(i);\n    if (!nonAlphanumeric.test(character)) {\n      result += character;\n    }\n  }\n\n  return result;\n};\n\n// Replace using a one line RegExp\nconst alphanumericOnlyRegexGlobal = (text: string): string => {\n  // Only line global replace using the same RegExp pattern\n  return text.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\n",
          "content": ""
        },
        {
          "id": "IBXksmEFC",
          "type": "typescript",
          "title": "Mixed Bag",
          "instructions": "You're given a list of unknown elements \\- they could be of any type. Write a function called `mixedBag` which accepts a list of elements and returns an object `MixedBagContents`. The type of this return object is defined in the editor for you. Each item type should be grouped into a `Content` type, which will include all of the original items of that type, and an `amount` field specifying how many items were found.\n\n**Note: **You can assume only the types represented in the `MixedBagContents` will be provided in the list.",
          "testCode": "test(\"A function called `mixedBag` should exist.\", () => {\n  expect(typeof mixedBag === \"function\").toBe(true);\n});\n\nconst solutionFn = (list) => {\n  const nullResult = {\n    amount: 0,\n    contents: [],\n  };\n  const undefinedResult = {\n    amount: 0,\n    contents: [],\n  };\n  const arrayResult = {\n    amount: 0,\n    contents: [],\n  };\n  const objectResult = {\n    amount: 0,\n    contents: [],\n  };\n  const booleanResult = {\n    amount: 0,\n    contents: [],\n  };\n  const stringResult = {\n    amount: 0,\n    contents: [],\n  };\n  const numberResult = {\n    amount: 0,\n    contents: [],\n  };\n\n  for (const item of list) {\n    if (item === null) {\n      nullResult.amount++;\n      nullResult.contents.push(item);\n    } else if (item === undefined) {\n      undefinedResult.amount++;\n      undefinedResult.contents.push(item);\n    } else if (typeof item === \"string\") {\n      stringResult.amount++;\n      stringResult.contents.push(item);\n    } else if (typeof item === \"number\") {\n      numberResult.amount++;\n      numberResult.contents.push(item);\n    } else if (Array.isArray(item)) {\n      arrayResult.amount++;\n      arrayResult.contents.push(item);\n    } else if (typeof item === \"boolean\") {\n      booleanResult.amount++;\n      booleanResult.contents.push(item);\n    } else {\n      objectResult.amount++;\n      objectResult.contents.push(item);\n    }\n  }\n\n  const result = {\n    null: nullResult,\n    undefined: undefinedResult,\n    arrays: arrayResult,\n    objects: objectResult,\n    booleans: booleanResult,\n    strings: stringResult,\n    numbers: numberResult,\n  };\n\n  return result;\n};\n\ntest(\"`mixedBag` should order an unknown list and return the result according to the provided `MixedBagContents` interface.\", () => {\n  let bag = [\n    true,\n    true,\n    false,\n    null,\n    undefined,\n    undefined,\n    [],\n    {},\n    {},\n    {},\n    {},\n    {},\n    {},\n    {},\n    {},\n    {},\n    {},\n    true,\n    \"string\",\n    \"hello\",\n    false,\n    \"hi\",\n    null,\n    [],\n  ];\n  let result = mixedBag(bag);\n  let expected = solutionFn(bag);\n  expect(result).toEqual(expected);\n\n  bag = [];\n  result = mixedBag(bag);\n  expected = solutionFn(bag);\n  expect(result).toEqual(expected);\n\n  bag = [\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    true,\n    [],\n  ];\n  result = mixedBag(bag);\n  expected = solutionFn(bag);\n  expect(result).toEqual(expected);\n\n  bag = [\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    true,\n    null,\n    {},\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n  ];\n  result = mixedBag(bag);\n  expected = solutionFn(bag);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/BAO1Q2Kpypg",
          "starterCode": "interface Contents <T extends any>{\n  amount: number;\n  contents: T[];\n}\n\n// Result object: include information for\n// each type found in the unknown list. Include\n// the amount of items found, and include all of\n// the items from the original list of that type.\ninterface MixedBagContents {\n  null: Contents<null>;\n  undefined: Contents<undefined>;\n  arrays: Contents<Array<any>>;\n  objects: Contents<object>;\n  booleans: Contents<boolean>;\n  strings: Contents<string>;\n  numbers: Contents<number>;\n}\n\n// Your code here",
          "solutionCode": "interface Contents<T extends any> {\n  amount: number;\n  contents: T[];\n}\n\n// Result object: include information for\n// each type found in the unknown list. Include\n// the amount of items found, and include all of\n// the items from the original list of that type.\ninterface MixedBagContents {\n  null: Contents<null>;\n  undefined: Contents<undefined>;\n  arrays: Contents<any[]>;\n  objects: Contents<object>;\n  booleans: Contents<boolean>;\n  strings: Contents<string>;\n  numbers: Contents<number>;\n}\n\nconst mixedBag = (list: any[]): MixedBagContents => {\n  // Create result objects\n  const nullResult: Contents<null> = {\n    amount: 0,\n    contents: [],\n  };\n  const undefinedResult: Contents<undefined> = {\n    amount: 0,\n    contents: [],\n  };\n  const arrayResult: Contents<any[]> = {\n    amount: 0,\n    contents: [],\n  };\n  const objectResult: Contents<object> = {\n    amount: 0,\n    contents: [],\n  };\n  const booleanResult: Contents<boolean> = {\n    amount: 0,\n    contents: [],\n  };\n  const stringResult: Contents<string> = {\n    amount: 0,\n    contents: [],\n  };\n  const numberResult: Contents<number> = {\n    amount: 0,\n    contents: [],\n  };\n\n  // Iterate over the list and categorize the items\n  for (const item of list) {\n    if (item === null) {\n      nullResult.amount++;\n      nullResult.contents.push(item);\n    } else if (item === undefined) {\n      undefinedResult.amount++;\n      undefinedResult.contents.push(item);\n    } else if (typeof item === \"string\") {\n      stringResult.amount++;\n      stringResult.contents.push(item);\n    } else if (typeof item === \"number\") {\n      numberResult.amount++;\n      numberResult.contents.push(item);\n    } else if (Array.isArray(item)) {\n      arrayResult.amount++;\n      arrayResult.contents.push(item);\n    } else if (typeof item === \"boolean\") {\n      booleanResult.amount++;\n      booleanResult.contents.push(item);\n    } else {\n      // Object is the final option.\n      objectResult.amount++;\n      objectResult.contents.push(item);\n    }\n  }\n\n  // Build up the result MixedBagContents\n  const result: MixedBagContents = {\n    null: nullResult,\n    undefined: undefinedResult,\n    arrays: arrayResult,\n    objects: objectResult,\n    booleans: booleanResult,\n    strings: stringResult,\n    numbers: numberResult,\n  };\n\n  // Return the result\n  return result;\n};\n",
          "content": ""
        },
        {
          "id": "wH7qiJ2P4",
          "type": "typescript",
          "title": "Find in Array",
          "instructions": "You are given an array of integers and a target integer. Return all of the indexes which contain the target integer in the array, or `null` if the target is not present. For instance, `[1,7,9,8,9]` with a target of `9` should return `[2,4]`. A target of `11` would return `null`.",
          "testCode": "test(\"`findInArray` should return `null` for target values which are not present.\", () => {\n  expect(findInArray([1, 1, 2, 3, 4, 5, 6], 8)).toBe(null);\n  expect(findInArray([1, 1, 2, 3, 4, 5, 6], 7)).toBe(null);\n  expect(findInArray([1, 1, 2, 3, 4, 5, 6], -1)).toBe(null);\n  expect(findInArray([1, 1, 2, 3, 4, 5, 6], NaN)).toBe(null);\n  expect(findInArray([], 8)).toBe(null);\n});\n\ntest(\"`findInArray` should return an array containing all of the indexes the target value can be found in the array.\", () => {\n  expect(findInArray([10000], 10000)).toEqual([0]);\n  expect(findInArray([1, 1, 2, 3, 4, 5, 6], 1)).toEqual([0, 1]);\n  expect(findInArray([1, 1, 2, 3, 4, 5, 6], 2)).toEqual([2]);\n  expect(findInArray([-1, 1, 1, 2, 3, 4, 5, 6, -1], -1)).toEqual([0, 8]);\n  expect(findInArray([1, 1, 2, 3, 4, 5, 6, 7, 7, 7], 7)).toEqual([7, 8, 9]);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/-Qtbv33hmJ4",
          "starterCode": "/**\n * Given an array and a target, return all of the indexes\n * which contain the target value in the array.\n */\nconst findInArray = (list: number[], target: number): number[] | null => {\n  // Your code here\n}",
          "solutionCode": "/**\n * Given an array and a target, return all of the indexes\n * which contain the target value in the array.\n */\nconst findInArray = (list: number[], target: number): number[] | null => {\n  let indexes = [];\n  // Find each index and push the index into a results array\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === target) {\n      indexes.push(i);\n    }\n  }\n  // Return null if indexes is empty (no target found)\n  return indexes.length > 0 ? indexes : null;\n};\n",
          "content": ""
        },
        {
          "id": "igCXB755P",
          "type": "typescript",
          "title": "Zip the Lists",
          "instructions": "A zip operation takes two lists and processes them in parallel. The `zip` function in the editor takes two lists of values and a callback function to call for each value in the arrays. Implement the function so it processes the arrays and applies the callback to each item in the arrays. Add the result from the `callbackFn` into a result array, and return this from the function. You can assume the lists will be the same length.\n\nHere is an example to help you understand what the function should do:\n\n```typescript\n// Input lists:\nconst listA = [1,2,3];\nconst listB = [4,5,6];\n\n// The callback function just adds the numbers, but\n// it could do anything.\nconst callbackFn = (a: number, b: number) => a + b;\n\n// Call the function:\nconst result = zip(listA, listB, callbackFn);\n\nconsole.log(result); // -> should be: [5,7,9]\n\n```\n",
          "testCode": "test(\"The `zip` function should process the two provided lists in parallel and return the aggregated results in a new list.\", () => {\n  let a = [1, 2, 3];\n  let b = [4, 5, 6];\n  let fn = (a, b) => a + b;\n  let result = zip(a, b, fn);\n  let expected = [5, 7, 9];\n  expect(result).toEqual(expected);\n\n  a = [1, 2, 3];\n  b = [4, 5, 6];\n  fn = (a, b) => a * b;\n  result = zip(a, b, fn);\n  expected = [4, 10, 18];\n  expect(result).toEqual(expected);\n\n  a = [];\n  b = [];\n  fn = (a, b) => a * b;\n  result = zip(a, b, fn);\n  expected = [];\n  expect(result).toEqual(expected);\n\n  a = [10, 20, 30];\n  b = [5, 10, 3];\n  fn = (a, b) => a / b;\n  result = zip(a, b, fn);\n  expected = [2, 2, 10];\n  expect(result).toEqual(expected);\n\n  a = [1, 2, 3];\n  b = [5, 10, 3];\n  fn = (a, b) => Math.pow(a, b);\n  result = zip(a, b, fn);\n  expected = [1, 1024, 27];\n  expect(result).toEqual(expected);\n\n  a = [\"hi\", \"ho\", \"he\"];\n  b = [\"a\", \"b\", \"c\"];\n  fn = (a, b) => a + b + \" lol !!!\";\n  result = zip(a, b, fn);\n  expected = [\"hia lol !!!\", \"hob lol !!!\", \"hec lol !!!\"];\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/14rHjhFGL9k",
          "starterCode": "type CallbackFn = (itemA: any, itemB: any) => any;\n\n/**\n * Processes two lists item by item and apply a callback\n * function to each item. Aggregate and return the results\n * in a new list.\n */\nconst zip = (listA: any[], listB: any[], callbackFn: CallbackFn): void => {\n  // Your code here\n};\n",
          "solutionCode": "type CallbackFn = (itemA: any, itemB: any) => any;\n\n/**\n * Processes two lists item by item and apply a callback\n * function to each item. Aggregate and return the results\n * in a new list.\n */\nconst zip = (listA: any[], listB: any[], callbackFn: CallbackFn): any[] => {\n  const results = [];\n\n  // Processes the lists using a regular for loop to use\n  // the index to access the same index item in each list\n  // at the same time.\n  for (let i = 0; i < listA.length; i++) {\n    const result = callbackFn(listA[i], listB[i]);\n    results.push(result);\n  }\n\n  return results;\n};\n",
          "content": ""
        },
        {
          "id": "SdMX7Pp7p",
          "type": "typescript",
          "title": "Zip Round II",
          "instructions": "In the last challenge we made the assumption the two input lists are the same length. Let's remove that assumption and allow them to be different lengths. The `zip` function should only processes the lists up to the point where they both have values at the same index. If one list is longer, `zip` should ignore the extra values in the longer list, and just return the result up to the point where both lists have values. Example:\n\n```\n// Input lists:\nconst listA = [1,2,3,9,10,11];\nconst listB = [4,5,6];\nconst callbackFn = (a: number, b: number) => a + b;\n\n// Call the function:\nconst result = zip(listA, listB, callbackFn);\n\n// -> should still be: [5,7,9] (the extra 9,10,11 are ignored).\nconsole.log(result);\n\n```\n",
          "testCode": "test(\"The `zip` function should process the two provided lists in parallel and return the aggregated results in a new list.\", () => {\n  let a = [1, 2, 3, 1, 1, 1];\n  let b = [4, 5, 6];\n  let fn = (a, b) => a + b;\n  let result = zip(a, b, fn);\n  let expected = [5, 7, 9];\n  expect(result).toEqual(expected);\n\n  a = [1, 2, 3];\n  b = [4, 5, 6, 8];\n  fn = (a, b) => a * b;\n  result = zip(a, b, fn);\n  expected = [4, 10, 18];\n  expect(result).toEqual(expected);\n\n  a = [];\n  b = [9];\n  fn = (a, b) => a * b;\n  result = zip(a, b, fn);\n  expected = [];\n  expect(result).toEqual(expected);\n\n  (a = [10, 20, 30]), 100;\n  b = [5, 10, 3];\n  fn = (a, b) => a / b;\n  result = zip(a, b, fn);\n  expected = [2, 2, 10];\n  expect(result).toEqual(expected);\n\n  a = [1, 2, 3, 8];\n  b = [5, 10, 3];\n  fn = (a, b) => Math.pow(a, b);\n  result = zip(a, b, fn);\n  expected = [1, 1024, 27];\n  expect(result).toEqual(expected);\n\n  a = [\"hi\", \"ho\", \"he\", \"zzz\"];\n  b = [\"a\", \"b\", \"c\"];\n  fn = (a, b) => a + b + \" lol !!!\";\n  result = zip(a, b, fn);\n  expected = [\"hia lol !!!\", \"hob lol !!!\", \"hec lol !!!\"];\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/s4DIZONlJ04",
          "starterCode": "type CallbackFn = (itemA: any, itemB: any) => any;\n\n/**\n * Processes two lists item by item and apply a callback\n * function to each item. Aggregate and return the results\n * in a new list.\n */\nconst zip = (listA: any[], listB: any[], callbackFn: CallbackFn): void => {\n  // Your code here\n};\n",
          "solutionCode": "type CallbackFn = (itemA: any, itemB: any) => any;\n\n/**\n * Processes two lists item by item and apply a callback\n * function to each item. Aggregate and return the results\n * in a new list.\n */\nconst zip = (listA: any[], listB: any[], callbackFn: CallbackFn): any[] => {\n  const results = [];\n\n  // Find the shortest list to use as the measurement:\n  const shortestList = listA.length < listB.length ? listA : listB;\n\n  // Processes the lists using the shortests list as a reference\n  for (let i = 0; i < shortestList.length; i++) {\n    const result = callbackFn(listA[i], listB[i]);\n    results.push(result);\n  }\n\n  return results;\n};\n",
          "content": ""
        },
        {
          "id": "GGjwEZwUQ",
          "type": "typescript",
          "title": "Position Tracker",
          "instructions": "You are building a class to represent a player on a game board. The player can move left and right on the board, but should not be able to move past the board boundaries. The class `PositionTracker` is initialized with an `initialPosition` and a `boardLength` so it can be re\\-used for different sized boards and multiple players.\n\nYour job is to implement the `moveLeft` and `moveRight` methods to track the player's position correctly on the board. Remember, the player should not be able to move beyond the maximum border length in either direction\\!",
          "testCode": "test(\"The `moveLeft` method moves a player to the left, but not off the edge of the board.\", () => {\n  const tracker = new PositionTracker(5, 10);\n  expect(tracker.getPosition()).toBe(5);\n  tracker.moveLeft();\n  expect(tracker.getPosition()).toBe(4);\n  tracker.moveLeft();\n  expect(tracker.getPosition()).toBe(3);\n  tracker.moveLeft();\n  expect(tracker.getPosition()).toBe(2);\n  tracker.moveLeft();\n  expect(tracker.getPosition()).toBe(1);\n  tracker.moveLeft();\n  expect(tracker.getPosition()).toBe(0);\n  tracker.moveLeft();\n  expect(tracker.getPosition()).toBe(0);\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  expect(tracker.getPosition()).toBe(0);\n});\n\ntest(\"The `moveRight` method moves a player to the right, but not off the edge of the board.\", () => {\n  const tracker = new PositionTracker(5, 10);\n  expect(tracker.getPosition()).toBe(5);\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(6);\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(7);\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(8);\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(9);\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(10);\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(10);\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(10);\n});\n\ntest(\"The player can move from either end of the board with the `moveLeft` and `moveRight` methods.\", () => {\n  const tracker = new PositionTracker(8, 11);\n  expect(tracker.getPosition()).toBe(8);\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(11);\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  expect(tracker.getPosition()).toBe(5);\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  tracker.moveLeft();\n  expect(tracker.getPosition()).toBe(0);\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(5);\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  tracker.moveRight();\n  expect(tracker.getPosition()).toBe(11);\n});",
          "videoUrl": "https://www.youtube.com/embed/j2MMCTWzcEk",
          "starterCode": "// A class which tracks a game player's position on a board\nclass PositionTracker {\n  position: number;\n  boardLength: number;\n\n  constructor(initialPosition: number, boardLength: number) {\n    this.position = initialPosition;\n    this.boardLength = boardLength;\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  moveLeft(): void {\n    // Your code here\n  }\n\n  moveRight(): void {\n    // Your code here\n  }\n}",
          "solutionCode": "// A class which tracks a game player's position on a board\nclass PositionTracker {\n  position: number;\n  boardLength: number;\n\n  constructor(initialPosition: number, boardLength: number) {\n    this.position = initialPosition;\n    this.boardLength = boardLength;\n  }\n\n  getPosition(): number {\n    return this.position;\n  }\n\n  moveLeft(): void {\n    if (this.position > 0) {\n      this.position--;\n    }\n  }\n\n  moveRight(): void {\n    if (this.position < this.boardLength) {\n      this.position++;\n    }\n  }\n}",
          "content": ""
        },
        {
          "id": "2GGJQvNjr",
          "type": "typescript",
          "title": "Group By",
          "instructions": "Write a `groupBy` function that takes an array of anything and a grouping function and returns an object of arrays grouped according to the grouping function. Here are some examples:\n\n```\n// Group by Math.floor, which rounds numbers down (3.7 becomes 3, 43.1 becomes 43, etc)\ngroupBy([6.1, 4.2, 6.3], Math.floor); // => { '4': [4.2], '6': [6.1, 6.3] }\n\n// Group strings by their length\ngroupBy(['one', 'two', 'three'], x => x.length); // => { '3': ['one', 'two'], '5': ['three'] }\n\n```\n",
          "testCode": "// Write your tests here:\ntest(\"`groupBy` should group array elements using the provided grouping function.\", () => {\n  expect(groupBy([6.1, 4.2, 6.3], Math.floor)).toEqual({ '4': [4.2], '6': [6.1, 6.3] })\n  expect(groupBy(['one', 'two', 'three'], x => x.length)).toEqual({ '3': ['one', 'two'], '5': ['three'] });\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ED9lY38C5Zk",
          "starterCode": "type Groups = { [k: string]: any[] };\n\ntype GroupBy = (arr: any[], getGroup: (x: any) => string | number) => Groups;\n\nconst groupBy: GroupBy = (arr, getGroup) => {\n  // Your code here\n};\n\nconsole.log(groupBy(['one', 'two', 'three'], x => x.length));\n",
          "solutionCode": "type Groups = { [k: string]: any[] };\n\ntype GroupBy = (arr: any[], getGroup: (x: any) => string | number) => Groups;\n\nconst groupBy: GroupBy = (arr, getGroup) => {\n  const groups: Groups = {};\n  arr.forEach((x) => {\n    const group = getGroup(x);\n\n    // If there is not yet an array for this group, create it\n    if (!(group in groups)) {\n      groups[group] = [];\n    }\n\n    groups[group].push(x);\n  });\n  return groups;\n};\n\nconsole.log(groupBy([6.1, 4.2, 6.3], Math.floor));\nconsole.log(groupBy([\"one\", \"two\", \"three\"], (x) => x.length));\n",
          "content": "The group by operation is fairly common across multiple programming languages and writing a `groupBy` function is an actual programming interview question at some companies so it's useful to know.\n\nThe main idea of a group by function is that you're grouping elements of an array by some criteria. That criteria is specified in a function. This makes the `groupBy` function extremely flexible, because you can group by any criteria you want. \n\nFor example, consider the [Counting Word Occurrences](/workspace/0xs07JCP4) challenge\\. In that challenge we wanted to find out how frequently words occurred in a string. Using the `groupBy` function we can get a very similar answer in just a few lines of code:\n\n```\nconst sentence = \"The quick brown fox jumped over the lazy dog. Remember, the fox was quick.\";\nconst words = sentence.split(\" \");\n\n// Our grouping function will lowercase the string and remove a period if present.\nconst groupingFunction = (x: string) => x.toLowerCase().replace(\".\", \"\");\n\ngroupBy(words, groupingFunction);\n// => \n// { \n//   the: ['The', 'the', 'the'], \n//   quick: ['quick', 'quick.'], \n//   ...etc \n// }\n\n```\n\nAs you can see this approach gives us a list of all occurrences of a word based on our `groupingFunction`, rather than the number of occurrences. To get the number from here we could easily use `.length` on each of the grouped arrays."
        },
        {
          "id": "49hgAfavS",
          "type": "typescript",
          "title": "Most Frequent Number",
          "instructions": "You are given an array of integers. Write a function `mostFrequentNumber` to return the integer which appears most frequently in the array. If the input array is empty, return `null`.",
          "testCode": "test(\"`mostFrequentNumber` should be defined.\", () => {\n  expect(mostFrequentNumber).toBeDefined();\n});\n\ntest(\"`mostFrequentNumber` should return `null` for empty arrays.\", () => {\n  expect(mostFrequentNumber([])).toBe(null);\n});\n\ntest(\"`mostFrequentNumber` should accept an array of integers as an argument and return the most frequent integer in the array.\", () => {\n  expect(mostFrequentNumber([8])).toBe(8);\n  expect(mostFrequentNumber([30, 30, 30, 1, 7, 7])).toBe(30);\n  expect(mostFrequentNumber([30, 30, 30, 1, 7, 7, 900, 900, 900, 900])).toBe(\n    900\n  );\n  expect(mostFrequentNumber([1, 2, 5, 5, 5, 7, 8, 8])).toBe(5);\n  expect(mostFrequentNumber([1, 2, 15, 15, 15, 15, 9, 9, 9, 10, 11, 12])).toBe(\n    15\n  );\n});\n",
          "videoUrl": "https://www.youtube.com/embed/zlo-FMskETQ",
          "starterCode": "// Your code here",
          "solutionCode": "// Return the most frequent number in an array\nconst mostFrequentNumber = (input: number[]): number | null => {\n  // Handle empty case\n  if (input.length === 0) {\n    return null;\n  }\n\n  // Create an object to count the frequency of numbers in the list\n  let counts: { [key: number]: number } = {};\n  for (const num of input) {\n    counts[num] = (counts[num] || 0) + 1;\n  }\n\n  // Default the most frequent integer to the first integer\n  let mostFrequentInteger = input[0];\n  // Track the highest count\n  let highestCount = 0;\n\n  // Iterate through all the counted integers and track the most\n  // frequent\n  for (const n in counts) {\n    const count = counts[n];\n    if (count > highestCount) {\n      highestCount = count;\n      mostFrequentInteger = Number(n);\n    }\n  }\n\n  // Return the most frequent integer\n  return mostFrequentInteger;\n};\n",
          "content": ""
        },
        {
          "id": "HB0P9thnMf",
          "type": "typescript",
          "title": "Unique Numbers",
          "instructions": "You are given an array of integers. Write a function `uniqueNumbers` to return the subset of integers which only appear one time in the input array.\n\nFor instance, given the input `[1, 5, 5, 5, 7, 9, 9]` the result would be `[1, 7]`. If no numbers appear only once, return an empty array.",
          "testCode": "test(\"`uniqueNumbers` should be defined.\", () => {\n  expect(uniqueNumbers).toBeDefined();\n});\n\ntest(\"`uniqueNumbers` should return `[]` if there are no unique numbers in the input array.\", () => {\n  expect(uniqueNumbers([])).toEqual([]);\n  expect(uniqueNumbers([2, 2, 3, 3, 3, 5, 5])).toEqual([]);\n  expect(uniqueNumbers([7, 7, 7, 7, 7])).toEqual([]);\n  expect(uniqueNumbers([7, 7])).toEqual([]);\n  expect(uniqueNumbers([7, 7, 9, 9, 100, 100, 100])).toEqual([]);\n});\n\ntest(\"`uniqueNumbers` should return an array of the numbers which only appear once in the input array.\", () => {\n  expect(uniqueNumbers([6])).toEqual([6]);\n  expect(uniqueNumbers([2, 2, 3, 3, 3, 8, 5, 5])).toEqual([8]);\n  expect(uniqueNumbers([7, 7, 7, 7, 7, 2, -1])).toEqual([2, -1]);\n  expect(uniqueNumbers([7, 7, 1000000])).toEqual([1000000]);\n  expect(uniqueNumbers([7, 7, 9, 9, 100, 100, 100, 18])).toEqual([18]);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/82U4ak6FeA8",
          "starterCode": "// Your code here",
          "solutionCode": "// Return the umbers which only appear once in the input array\nconst uniqueNumbers = (input: number[]): number[] => {\n  // Create two sets to track number seen once and more than once\n  const seenOnce = new Set<number>();\n  const seenTwice = new Set<number>();\n\n  // Iterate through the list\n  for (const n of input) {\n    if (seenTwice.has(n)) {\n      // If the number has been seen twice, just continue\n      continue;\n    } else if (seenOnce.has(n)) {\n      // If the number has been seen once and is seen again\n      // add it to seenTwice and remove it from seenOnce\n      seenTwice.add(n);\n      seenOnce.delete(n);\n    } else {\n      // If this is the first time seeing a number, add it\n      // to seenOnce\n      seenOnce.add(n);\n    }\n  }\n\n  // Return an array of values in the seenOnce set\n  return Array.from(seenOnce);\n};\n",
          "content": ""
        },
        {
          "id": "fOCQv3Dx$",
          "type": "typescript",
          "title": "The Average Row",
          "instructions": "You have a 2 dimensional array of `1`s and `0`s, e.g.\n\n```typescript\n[\n    [1, 1, 0],\n    [0, 0, 0],\n    [1, 1, 1],\n]\n\n```\n\nWrite a function `averageRow` to return the mean of each row in the array, in a new array. The above example would return: `[0.67, 0, 1]`. You can round decimals to the nearest hundredths place \\(see the `.toFixed` [method documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)\\). If the row is empty, return `null` for that row. Note that the rows can differ in length.",
          "testCode": "test(\"`averageRow` should be defined.\", () => {\n  expect(averageRow).toBeDefined();\n});\n\ntest(\"`averageRow` should return `null` for any row which doesn't contain any values.\", () => {\n  let input = [[1, 1, 1], []];\n  let expected = [1, null];\n  let result = averageRow(input);\n  expect(result).toEqual(expected);\n});\n\ntest(\"`averageRow` should return an array containing the average of each row from the input array.\", () => {\n  let input = [[1, 1, 1]];\n  let expected = [1];\n  let result = averageRow(input);\n  expect(result).toEqual(expected);\n\n  input = [\n    [1, 1, 0],\n    [0, 0, 0],\n    [1, 1, 1],\n  ];\n  expected = [0.67, 0, 1];\n  result = averageRow(input);\n  expect(result).toEqual(expected);\n\n  input = [[1, 1, 10, 10, 10], [0, 0, 0, 50], [1, 1, 1, 72, 98, 200], [1009]];\n  expected = [6.4, 12.5, 62.17, 1009];\n  result = averageRow(input);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/PRNygJn7Kzc",
          "starterCode": "// Your code here",
          "solutionCode": "// Find the average of each row in a matrix\nconst averageRow = (matrix: number[][]): Array<number | null> => {\n  let averages = [];\n  // Iterate through every row in the matrix\n  for (const row of matrix) {\n    // Handle empty rows\n    if (row.length === 0) {\n      averages.push(null);\n      continue;\n    }\n\n    // For non-empty rows, find the sum of all the values\n    let sum = 0;\n    for (const n of row) {\n      sum += n;\n    }\n    // Find the average, given the sum\n    const average = sum / row.length;\n    // Push the rounded averge into the results array\n    averages.push(Number(average.toFixed(2)));\n  }\n\n  return averages;\n};\n",
          "content": ""
        },
        {
          "id": "ZOkGBcvQ7E",
          "type": "typescript",
          "title": "Immutable Reversal",
          "instructions": "You receive an array of values _but you cannot change it._ Write a function `reverseArrayImmutable` to return a new array which is the reverse of the given array, without modifying the given array. This means that you cannot mutate or change the original way. You must create a new array which represents the reverse of the given array\\! There are a few ways to do this \\- get creative and try out some different solutions\\!",
          "testCode": "test(\"`reverseArrayImmutable` should be defined.\", () => {\n  expect(reverseArrayImmutable).toBeDefined();\n});\n\ntest(\"`reverseArrayImmutable` should not modify the given array.\", () => {\n  let array = [1, 2, 3];\n  let input = array.slice();\n  let result = reverseArrayImmutable(array);\n  expect(array === array).toBe(true);\n  expect(array).toEqual(input);\n  expect(result).toEqual([3, 2, 1]);\n\n  array = [1, 2, 3, [], \"hi\", \"blegh\", 999];\n  input = array.slice();\n  result = reverseArrayImmutable(array);\n  expect(array === array).toBe(true);\n  expect(array).toEqual(input);\n  expect(result).toEqual(input.slice().reverse());\n});\n\ntest(\"`reverseArrayImmutable` should return a new array which is the reverse of the given array.\", () => {\n  let array = [1, 2, 3];\n  let result = reverseArrayImmutable(array);\n  let input = array.slice();\n  expect(result).toEqual(input.slice().reverse());\n\n  array = [1, 2, 3, [], \"hi\", \"blegh\", 999];\n  input = array.slice();\n  result = reverseArrayImmutable(array);\n  expect(result).toEqual(input.slice().reverse());\n\n  array = [null, undefined, {key: \"hi\" }, true, false, 101010];\n  input = array.slice();\n  result = reverseArrayImmutable(array);\n  expect(result).toEqual(input.slice().reverse());\n});\n",
          "videoUrl": "https://www.youtube.com/embed/fFJOV8xRobI",
          "starterCode": "// Your code here",
          "solutionCode": "// Reverse an array without changing the input array\nconst reverseArrayImmutable = (list: any[]): any[] => {\n  // Just copy the array and reverse it!\n  return list.slice().reverse();\n\n  // You can also use a regular for loop and iterate\n  // from the end of the array to the beginning, building\n  // up the new array item by item. This would be a great\n  // solution because it would only require a single iteration\n  // through the list.\n}",
          "content": ""
        },
        {
          "id": "l88IK5JHN",
          "type": "typescript",
          "title": "Top Products",
          "instructions": "You are building an API for providing product suggestions for an online marketplace. Products have recommendations which are created by users. Take a look in the code editor to see what the type definitions for these objects look like. Your function, `getTopProducts`, will be used to populate a suggestion feed of popular products. Write this function, which should receive a list of products and a number, `pageSize`. It should return the top most highly recommended products, up to the limit prescribed by the `pageSize`. Note that the `rating` field of a `Review` can be from `0` to `5` where `5` is the highest recommendation. You can assume no two products will have the same average rating.",
          "testCode": "const __productUtils = {\n  getReview: () => ({\n    author: \"Sam\",\n    comments: \"Good experience\",\n    rating: __randomInRange(0, 5),\n  }),\n  getReviews: (amount) => {\n    const recs = [];\n    while (recs.length < amount) {\n      recs.push(__productUtils.getReview());\n    }\n    return recs;\n  },\n  getProduct: (reviews = __randomInRange(5, 25)) => ({\n    uuid: __id(),\n    cost: 100,\n    title: \"Great product!\",\n    description: \"Excellent!\",\n    reviews: __productUtils.getReviews(reviews),\n  }),\n  getAverageRating: (reviews) => {\n    let total = 0;\n    for (const x of reviews) {\n      total += x.rating;\n    }\n    return total / reviews.length;\n  },\n  getProducts: (amount) => {\n    const products = [];\n    while (products.length < amount) {\n      products.push(__productUtils.getProduct());\n    }\n\n    let ratings = new Set();\n    let uniqueProducts = [];\n    for (const product of products) {\n      const rating = __productUtils.getAverageRating(product.reviews);\n      if (ratings.has(rating)) {\n        continue;\n      } else {\n        uniqueProducts.push(product);\n        ratings.add(rating);\n      }\n    }\n\n    return uniqueProducts;\n  },\n  solutionFn: (products, pageSize) => {\n    const sortedProducts = products.sort((a, b) => {\n      return __productUtils.getAverageRating(a.reviews) >\n        __productUtils.getAverageRating(b.reviews)\n        ? -1\n        : 1;\n    });\n\n    return sortedProducts.slice(0, pageSize);\n  },\n};\n\nlet products = __productUtils.getProducts(50);\n\ntest(\"`getTopProducts` should be defined.\", () => {\n  expect(getTopProducts).toBeDefined();\n});\n\ntest(\"`getTopProducts` should return an array of the length specified by the 2nd argument `pageSize`.\", () => {\n  let result = getTopProducts(products, 3);\n  expect(result.length).toBe(3);\n\n  result = getTopProducts(products, 1);\n  expect(result.length).toBe(1);\n\n  result = getTopProducts(products, 0);\n  expect(result.length).toBe(0);\n\n  result = getTopProducts(products, 10);\n  expect(result.length).toBe(10);\n});\n\ntest(\"`getTopProducts` should return the top rated products from the given products list.\", () => {\n  let result = getTopProducts(products, 3);\n  expect(result).toEqual(__productUtils.solutionFn(products, 3));\n\n  result = getTopProducts(products, 1);\n  expect(result).toEqual(__productUtils.solutionFn(products, 1));\n\n  result = getTopProducts(products, 27);\n  expect(result).toEqual(__productUtils.solutionFn(products, 27));\n\n  products = __productUtils.getProducts(50);\n  result = getTopProducts(products, 0);\n  expect(result).toEqual(__productUtils.solutionFn(products, 0));\n\n  result = getTopProducts(products, 10);\n  expect(result).toEqual(__productUtils.solutionFn(products, 10));\n\n  result = getTopProducts(products, 15);\n  expect(result).toEqual(__productUtils.solutionFn(products, 15));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/qa00L1TD8bo",
          "starterCode": "interface Review {\n  rating: number;\n  comments: string;\n  author: string;\n}\n\ninterface Product {\n  uuid: string;\n  cost: number;\n  title: string;\n  description: string;\n  reviews: Review[];\n}\n\n// Your code here",
          "solutionCode": "interface Review {\n  rating: number;\n  comments: string;\n  author: string;\n}\n\ninterface Product {\n  uuid: string;\n  cost: number;\n  title: string;\n  description: string;\n  reviews: Review[];\n}\n\n// Your code here\n\n// Helper to get the average rating from a list of reviews\nconst getAverageRating = (reviews: Review[]) => {\n  let total = 0;\n  for (const x of reviews) {\n    total += x.rating;\n  }\n  return total / reviews.length;\n};\n\n// Return the most highly rating products from a list of products\nconst getTopProducts = (\n  products: Product[],\n  pageSize: number\n): Product[] => {\n  // Sort the products based on their recommendation ratings\n  const sortedProducts = products.sort((a, b) => {\n    return getAverageRating(a.reviews) >\n      getAverageRating(b.reviews)\n      ? -1\n      : 1;\n  });\n\n  // Return the top rated results in the requested pageSize amount\n  return sortedProducts.slice(0, pageSize);\n};\n",
          "content": ""
        },
        {
          "id": "Sj1Ubp7Qs",
          "type": "typescript",
          "title": "Toggle Class",
          "instructions": "In the editor is the definition of a `Toggle` class\\. Create a class called `ToggleClass` which implements this interface and provides the functionality of a \"toggle\" switch. Imagine how you might use this in a real application to model several different toggle switches in a control panel or interface.",
          "testCode": "test(\"`ToggleClass` should be defined.\", () => {\n  expect(ToggleClass).toBeDefined();\n});\n\ntest(\"`ToggleClass` should have a method `toggleOn`.\", () => {\n  \n  expect(new ToggleClass().toggleOn).toBeDefined();\n});\n\ntest(\"`ToggleClass` should have a method `toggleOff`.\", () => {\n  expect(new ToggleClass().toggleOff).toBeDefined();\n});\n\ntest(\"`ToggleClass` should have a method `getToggleState`.\", () => {\n  expect(new ToggleClass().getToggleState).toBeDefined();\n});\n\ntest(\"`ToggleClass` should have a method `setToggleState`.\", () => {\n  expect(new ToggleClass().setToggleState).toBeDefined();\n});\n\ntest(\"The `ToggleClass` `getToggleState` should return `on` or `off`.\", () => {\n  const toggle = new ToggleClass();\n  const state = toggle.getToggleState();\n  expect(state === \"on\" || state === \"off\").toBe(true);\n});\n\ntest(\"The `ToggleClass` can toggle state between `on` and `off` using the class methods.\", () => {\n  const toggle = new ToggleClass();\n  toggle.setToggleState(\"off\");\n  expect(toggle.getToggleState()).toBe(\"off\");\n  toggle.toggleOn();\n  expect(toggle.getToggleState()).toBe(\"on\");\n  toggle.toggleOff();\n  toggle.toggleOff();\n  expect(toggle.getToggleState()).toBe(\"off\");\n  toggle.toggleOn();\n  expect(toggle.getToggleState()).toBe(\"on\");\n  toggle.setToggleState(\"on\");\n  expect(toggle.getToggleState()).toBe(\"on\");\n  toggle.setToggleState(\"off\");\n  expect(toggle.getToggleState()).toBe(\"off\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/zLpq2K0sXUk",
          "starterCode": "type ToggleState = \"on\" | \"off\";\n\ninterface Toggle {\n  state: ToggleState;\n  toggleOn: () => void;\n  toggleOff: () => void;\n  getToggleState: () => ToggleState;\n  setToggleState: (state: ToggleState) => void;\n}\n\n// Your code here",
          "solutionCode": "type ToggleState = \"on\" | \"off\";\n\ninterface Toggle {\n  state: ToggleState;\n  toggleOn: () => void;\n  toggleOff: () => void;\n  getToggleState: () => ToggleState;\n  setToggleState: (state: ToggleState) => void;\n}\n\nclass ToggleClass implements Toggle {\n  state: ToggleState = \"off\";\n\n  toggleOn = () => {\n    this.state = \"on\";\n  }\n\n  toggleOff = () => {\n    this.state = \"off\";\n  }\n\n  getToggleState = () => {\n    return this.state;\n  }\n\n  setToggleState = (state: ToggleState) => {\n    this.state = state;\n  }\n}",
          "content": ""
        },
        {
          "id": "0KYYpigq9$",
          "type": "typescript",
          "title": "Selective Transformation",
          "instructions": "You have a list of items and you want to apply some transformation to only certain items in the list. Complete the function `selectiveTransformation` in the editor below according to its function signature and the provided type definition. The function should accept a list of items, a conditional function to test each item, and a transformation function to apply to each item which passes the test.",
          "testCode": "test(\"`selectiveTransformation` should be defined.\", () => {\n  expect(selectiveTransformation).toBeDefined();\n});\n\ntest(\"`selectiveTransformation` should apply the provided `transformationFunction` only to items which return true from the `conditionalFunction`.\", () => {\n  let conditionalFunction = (x) => x % 2 === 0;\n  let transformationFunction = (x) => x * 10;\n  let list = [1, 2, 3, 4, 5];\n  let result = selectiveTransformation(\n    list,\n    conditionalFunction,\n    transformationFunction\n  );\n  let expected = [1, 20, 3, 40, 5];\n  expect(result).toEqual(expected);\n\n  conditionalFunction = (x) => x > 10;\n  transformationFunction = (x) => 0;\n  list = [1, 2, 3, 10, 20, 100, 60];\n  result = selectiveTransformation(\n    list,\n    conditionalFunction,\n    transformationFunction\n  );\n  expected = [1, 2, 3, 10, 0, 0, 0];\n  expect(result).toEqual(expected);\n\n  conditionalFunction = (x) => x.includes(\"a\");\n  transformationFunction = (x) => \"xxx\";\n  list = [\"ccc\", \"zzz\", \"abc\", \"aaa\", \"lol\", \"hahaha\"];\n  result = selectiveTransformation(\n    list,\n    conditionalFunction,\n    transformationFunction\n  );\n  expected = [\"ccc\", \"zzz\", \"xxx\", \"xxx\", \"lol\", \"xxx\"];\n  expect(result).toEqual(expected);\n\n  conditionalFunction = (x) => Array.isArray(x);\n  transformationFunction = (x) => null;\n  list = [\n    \"ccc\",\n    \"zzz\",\n    \"abc\",\n    \"aaa\",\n    \"lol\",\n    \"hahaha\",\n    [],\n    [null],\n    [1, 2, 3],\n    {},\n  ];\n  result = selectiveTransformation(\n    list,\n    conditionalFunction,\n    transformationFunction\n  );\n  expected = [\n    \"ccc\",\n    \"zzz\",\n    \"abc\",\n    \"aaa\",\n    \"lol\",\n    \"hahaha\",\n    null,\n    null,\n    null,\n    {},\n  ];\n  expect(result).toEqual(expected);\n\n  conditionalFunction = (x) => true;\n  transformationFunction = (x) => x;\n  list = [true, false, null, undefined, [], {}, \"hello\"];\n  result = selectiveTransformation(\n    list,\n    conditionalFunction,\n    transformationFunction\n  );\n  expected = [true, false, null, undefined, [], {}, \"hello\"];\n  expect(result).toEqual(expected);\n\n  conditionalFunction = (x) => true;\n  transformationFunction = (x) => null;\n  list = [true, false, null, undefined, [], {}, \"hello\"];\n  result = selectiveTransformation(\n    list,\n    conditionalFunction,\n    transformationFunction\n  );\n  expected = [null, null, null, null, null, null, null];\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/lBBvbHicw1A",
          "starterCode": "/**\n * Process a list of items, applying a transformation function to\n * each item which passes a conditional function.\n */\nconst selectiveTransformation = (\n  list: any[],\n  conditionalFunction: (item: any) => boolean,\n  transformationFunction: (item: any) => any\n): any[] => {\n  // Your code here\n};\n",
          "solutionCode": "/**\n * Process a list of items, applying a transformation function to\n * each item which passes a conditional function.\n */\nconst selectiveTransformation = (\n  list: any[],\n  conditionalFunction: (item: any) => boolean,\n  transformationFunction: (item: any) => any\n): any[] => {\n  // Just map over the list and return the transformation applied\n  // to each element if it passes the conditional function. Otherwise,\n  // just return the element itself.\n  return list.map(x => {\n    if (conditionalFunction(x)) {\n      return transformationFunction(x);\n    } else {\n      return x;\n    }\n  });\n};\n",
          "content": ""
        },
        {
          "id": "zPMu5Wjfm",
          "type": "typescript",
          "title": "Password Validator",
          "instructions": "A very common thing to do when writing software is user input validation. You always have to validate the input coming into your program to ensure it is within the bounds your program expects. If there is some expectation that a name can only be 25 characters long, but someone provides a longer name, this could break your system\\! This is a simple example, but you will be surprised by the creative ways users will do things which you could not predict, and the even more creative ways your software will blow up when these creative users get ahold of it\\! It only takes a trivial error to crash production.\n\nWrite a function `validateUserPassword` in the code editor to validate a password change request from a user. The function should adhere to all of the rules defined by the challenge tests.",
          "testCode": "test(\"`validateUserPassword` should be defined.\", () => {\n  expect(validateUserPassword).toBeDefined();\n});\n\ntest(\"`validateUserPassword` should accept two arguments: `currentPassword` and `newPassword`.\", () => {\n  const code = __user_code_string__;\n  expect(code.includes(\"currentPassword\")).toBe(true);\n  expect(code.includes(\"newPassword\")).toBe(true);\n});\n\ntest(\"`validateUserPassword` should throw an error if the `currentPassword` and `newPassword` are the same.\", () => {\n  expect(validateUserPassword).toBeDefined();\n  expect(() =>\n    validateUserPassword(\"asdfsadfdasa9s87fd\", \"asdfsadfdasa9s87fd\")\n  ).toThrow(\"An error should be thrown if the passwords are the same.\");\n});\n\ntest(\"`validateUserPassword` should throw an error if the `newPassword` is shorter than 10 characters.\", () => {\n  expect(validateUserPassword).toBeDefined();\n  expect(() => validateUserPassword(\"asdfsadfdasa9s87fd\", \"asdff8s7f\")).toThrow(\n    \"An error should be thrown if the new password is less than 10 characters.\"\n  );\n});\n\ntest(\"`validateUserPassword` should throw an error if the `newPassword` is longer than 50 characters.\", () => {\n  expect(validateUserPassword).toBeDefined();\n  expect(() =>\n    validateUserPassword(\n      \"asdfsadfdasa9s87fd\",\n      \"asd90f70asasd90f70asasd90f70asasd90f70asasd90f70as1\"\n    )\n  ).toThrow(\n    \"An error should be thrown if the new password is longer than 50 characters\"\n  );\n});\n\ntest(\"`validateUserPassword` should require the `newPassword` to contain at least one lowercase letter, one uppercase letter, one number, and throw an error if this condition is not met.\", () => {\n  expect(validateUserPassword).toBeDefined();\n  expect(() =>\n    validateUserPassword(\"asdfsadfdasa9s87fd\", \"aasdfasfsadfasfasbc\")\n  ).toThrow(\n    \"An error should be thrown if the new password does not contain 1 lowercase letter, 1 uppercase letter, and 1 number.\"\n  );\n\n  expect(() =>\n    validateUserPassword(\"asdfsadfdasa9s87fd\", \"DDDADSAFASDFSAAADA\")\n  ).toThrow(\n    \"An error should be thrown if the new password does not contain 1 lowercase letter, 1 uppercase letter, and 1 number.\"\n  );\n\n  expect(() =>\n    validateUserPassword(\"asdfsadfdasa9s87fd\", \"78970707007070707\")\n  ).toThrow(\n    \"An error should be thrown if the new password does not contain 1 lowercase letter, 1 uppercase letter, and 1 number.\"\n  );\n\n  expect(() =>\n    validateUserPassword(\"asdfsadfdasa9s87fd\", \"DDDsadfsafafsafsaAAADA\")\n  ).toThrow(\n    \"An error should be thrown if the new password does not contain 1 lowercase letter, 1 uppercase letter, and 1 number.\"\n  );\n\n  expect(() =>\n    validateUserPassword(\"asdfsadfdasa9s87fd\", \"fasdfsafdsa698769867679\")\n  ).toThrow(\n    \"An error should be thrown if the new password does not contain 1 lowercase letter, 1 uppercase letter, and 1 number.\"\n  );\n});\n\ntest(\"`validateUserPassword` should return `true` when provided valid arguments.\", () => {\n  expect(validateUserPassword(\"78a90f7d809daf\", \"as0df87as90fADFSA\")).toBe(true);\n  expect(validateUserPassword(\"78a90f7d809daf\", \"fasd978fs9a07ASDFSA\")).toBe(true);\n  expect(validateUserPassword(\"78a90f7d809daf\", \"2342asdfasASDFSA\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/H99sns7Yxh4",
          "starterCode": "// Your code here",
          "solutionCode": "// Validate a password. Throw errors if the password is invalid, return true\n// if the password is valid.\nconst validateUserPassword = (currentPassword: string, newPassword: string): boolean => {\n  if (currentPassword === newPassword) {\n    throw new Error(\"The new password cannot match the existing password!\");\n  }\n\n  if (newPassword.length < 10) {\n    throw new Error(\"The new password must be 10 characters or longer!\");\n  }\n\n  if (newPassword.length > 50) {\n    throw new Error(\"The new password cannot be longer than 50 characters!\");\n  }\n\n  if (!/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])/.test(newPassword)) {\n    throw new Error(\"The new password must container 1 lowercase letter, 1 uppercase letter, and 1 number!\");\n  }\n\n  return true;\n}",
          "content": ""
        },
        {
          "id": "4ECHBPN@p",
          "type": "typescript",
          "title": "Sort the Change",
          "instructions": "Write a function `sortTheChange` which accepts a lot of `Money` objects and sorts them correctly into a `Bank`. The `Bank` should contain a `total` field which records the total amount of money held in the bank. Each `Money` object will have an `amount` field which specifies its value, which you can use to calculate the total. The `Bank` should store all of the individual bills or coins, in the order received in the original list, in the appropriate field in the `Bank` object\\.",
          "testCode": "test(\"`sortTheChange` should be defined.\", () => {\n  expect(sortTheChange).toBeDefined();\n});\n\ntest(\"`sortTheChange` should correctly sort a list of change into a `Bank` object.\", () => {\n  const money = [\n    {\n      amount: 1.0,\n      type: \"one dollar\",\n      category: \"bill\",\n    },\n    {\n      amount: 5.0,\n      type: \"five dollar\",\n      category: \"bill\",\n    },\n    {\n      amount: 10.0,\n      type: \"ten dollar\",\n      category: \"bill\",\n    },\n    {\n      amount: 20.0,\n      type: \"twenty dollar\",\n      category: \"bill\",\n    },\n    {\n      amount: 50.0,\n      type: \"fifty dollar\",\n      category: \"bill\",\n    },\n    {\n      amount: 100.0,\n      type: \"one hundred dollar\",\n      category: \"bill\",\n    },\n    {\n      amount: 0.1,\n      type: \"penny\",\n      category: \"coin\",\n    },\n    {\n      amount: 0.5,\n      type: \"nickel\",\n      category: \"coin\",\n    },\n    {\n      amount: 0.1,\n      type: \"dime\",\n      category: \"coin\",\n    },\n    {\n      amount: 0.25,\n      type: \"quarter\",\n      category: \"coin\",\n    },\n  ];\n\n  const randomMoney = () => money[__randomInRange(0, money.length - 1)];\n\n  const getRandomMoney = (max) => {\n    let list = [];\n    while (list.length < max) {\n      list.push(randomMoney());\n    }\n    return list;\n  };\n\n  const solutionFn = (moneyList) => {\n    let total = 0;\n\n    let ones = [];\n    let fives = [];\n    let tens = [];\n    let twenties = [];\n    let fifties = [];\n    let hundreds = [];\n    let pennies = [];\n    let nickels = [];\n    let dimes = [];\n    let quarters = [];\n\n    for (const money of moneyList) {\n      switch (money.type) {\n        case \"one dollar\":\n          total += money.amount;\n          ones.push(money);\n          break;\n        case \"five dollar\":\n          total += money.amount;\n          fives.push(money);\n          break;\n        case \"ten dollar\":\n          total += money.amount;\n          tens.push(money);\n          break;\n        case \"twenty dollar\":\n          total += money.amount;\n          twenties.push(money);\n          break;\n        case \"fifty dollar\":\n          total += money.amount;\n          fifties.push(money);\n          break;\n        case \"one hundred dollar\":\n          total += money.amount;\n          hundreds.push(money);\n          break;\n        case \"penny\":\n          total += money.amount;\n          pennies.push(money);\n          break;\n        case \"nickel\":\n          total += money.amount;\n          nickels.push(money);\n          break;\n        case \"dime\":\n          total += money.amount;\n          dimes.push(money);\n          break;\n        case \"quarter\":\n          total += money.amount;\n          quarters.push(money);\n          break;\n        default:\n          throw new Error(`Unknown money received! ${money}`);\n      }\n    }\n\n    return {\n      total,\n      bills: {\n        \"one dollar\": ones,\n        \"five dollar\": fives,\n        \"ten dollar\": tens,\n        \"twenty dollar\": twenties,\n        \"fifty dollar\": fifties,\n        \"one hundred dollar\": hundreds,\n      },\n      coins: {\n        penny: pennies,\n        nickel: nickels,\n        dime: dimes,\n        quarter: quarters,\n      },\n    };\n  };\n\n  let input = getRandomMoney(5);\n  let result = sortTheChange(input);\n  let expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = getRandomMoney(15);\n  result = sortTheChange(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = getRandomMoney(25);\n  result = sortTheChange(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = getRandomMoney(1);\n  result = sortTheChange(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n\n  input = getRandomMoney(50);\n  result = sortTheChange(input);\n  expected = solutionFn(input);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/fi0Iba0IHw0",
          "starterCode": "type MONEY_CATEGORY = \"bill\" | \"coin\";\n\ntype COINS = \"penny\" | \"nickel\" | \"dime\" | \"quarter\";\ntype BILLS =\n  | \"one dollar\"\n  | \"five dollar\"\n  | \"ten dollar\"\n  | \"twenty dollar\"\n  | \"fifty dollar\"\n  | \"one hundred dollar\";\ntype MONEY_TYPE = COINS | BILLS;\n\ninterface Money {\n  amount: number;\n  type: MONEY_TYPE;\n  category: MONEY_CATEGORY;\n}\n\ninterface Bank {\n  total: number; // The total balance in the bank\n  bills: {\n    \"one dollar\": Money[],\n    \"five dollar\": Money[],\n    \"ten dollar\": Money[],\n    \"twenty dollar\": Money[],\n    \"fifty dollar\": Money[],\n    \"one hundred dollar\": Money[],\n  };\n  coins: {\n    \"penny\": Money[],\n    \"nickel\": Money[],\n    \"dime\": Money[],\n    \"quarter\": Money[],\n  };\n}\n\n// Your code here\n",
          "solutionCode": "type MONEY_CATEGORY = \"bill\" | \"coin\";\n\ntype COINS = \"penny\" | \"nickel\" | \"dime\" | \"quarter\";\ntype BILLS =\n  | \"one dollar\"\n  | \"five dollar\"\n  | \"ten dollar\"\n  | \"twenty dollar\"\n  | \"fifty dollar\"\n  | \"one hundred dollar\";\ntype MONEY_TYPE = COINS | BILLS;\n\ninterface Money {\n  amount: number;\n  type: MONEY_TYPE;\n  category: MONEY_CATEGORY;\n}\n\ninterface Bank {\n  total: number; // The total balance in the bank\n  bills: {\n    \"one dollar\": Money[],\n    \"five dollar\": Money[],\n    \"ten dollar\": Money[],\n    \"twenty dollar\": Money[],\n    \"fifty dollar\": Money[],\n    \"one hundred dollar\": Money[],\n  };\n  coins: {\n    \"penny\": Money[],\n    \"nickel\": Money[],\n    \"dime\": Money[],\n    \"quarter\": Money[],\n  };\n}\n\n// Sort a list of change into a bank, with a total balance\nconst sortTheChange = (moneyList: Money[]): Bank => {\n  // Total\n  let total = 0;\n\n  // Bills\n  let ones = [];\n  let fives = [];\n  let tens = [];\n  let twenties = [];\n  let fifties = [];\n  let hundreds = [];\n  \n  // Coins\n  let pennies = [];\n  let nickels = [];\n  let dimes = [];\n  let quarters = [];\n\n  // Iterate through the list of money and track all\n  // the individual money types\n  for (const money of moneyList) {\n    switch (money.type) {\n      case \"one dollar\":\n        total += money.amount;\n        ones.push(money);\n        break;\n      case \"five dollar\":\n        total += money.amount;\n        fives.push(money);\n        break;\n      case \"ten dollar\":\n        total += money.amount;\n        tens.push(money);\n        break;\n      case \"twenty dollar\":\n        total += money.amount;\n        twenties.push(money);\n        break;\n      case \"fifty dollar\":\n        total += money.amount;\n        fifties.push(money);\n        break;\n      case \"one hundred dollar\":\n        total += money.amount;\n        hundreds.push(money);\n        break;\n      case \"penny\":\n        total += money.amount;\n        pennies.push(money);\n        break;\n      case \"nickel\":\n        total += money.amount;\n        nickels.push(money);\n        break;\n      case \"dime\":\n        total += money.amount;\n        dimes.push(money);\n        break;\n      case \"quarter\":\n        total += money.amount;\n        quarters.push(money);\n        break;\n      default:\n        throw new Error(`Unknown money received! ${money}`);\n    }\n  }\n\n  // Build up the bank  \n  const bank: Bank = {\n    total,\n    bills: {\n      \"one dollar\": ones,\n      \"five dollar\": fives,\n      \"ten dollar\": tens,\n      \"twenty dollar\": twenties,\n      \"fifty dollar\": fifties,\n      \"one hundred dollar\": hundreds,\n    },\n    coins: {\n      \"penny\": pennies,\n      \"nickel\": nickels,\n      \"dime\": dimes,\n      \"quarter\": quarters,\n    },\n  };\n\n  // Return the bank result\n  return bank;\n};\n",
          "content": ""
        },
        {
          "id": "n7yk$aLKz",
          "type": "typescript",
          "title": "Greatest Pair",
          "instructions": "You receive a list of pairs of integers, e.g. `[ [1,2], [7,9], [12,8], ... [8,3] ]`. Write a function, `largestPair`, which returns the pair in the list which sums to the largest value. In that example, `[12,8]` would be returned. You can assume that there will only be a single pair which sums to the largest value.",
          "testCode": "test(\"`largestPair` should be defined.\", () => {\n  expect(largestPair).toBeDefined();\n});\n\ntest(\"`largestPair` should return the pair in a given array which has the largest sum of any pair in that array.\", () => {\n  let input = [\n    [1, 2],\n    [11, 9],\n    [1, 5],\n    [7, 2],\n    [17, 0],\n    [1, 200],\n    [0, 0],\n  ];\n  let result = largestPair(input);\n  let expected = [1, 200];\n  expect(result).toEqual(expected);\n\n  input = [\n    [1, 2],\n    [11, 9],\n    [1, 5],\n    [7, 2],\n    [17, 0],\n    [1, 200],\n    [0, 1100],\n  ];\n  result = largestPair(input);\n  expected = [0, 1100];\n  expect(result).toEqual(expected);\n\n  input = [[-1, 2]];\n  result = largestPair(input);\n  expected = [-1, 2];\n  expect(result).toEqual(expected);\n\n  input = [\n    [-12, 19],\n    [100, 2],\n  ];\n  result = largestPair(input);\n  expected = [100, 2];\n  expect(result).toEqual(expected);\n\n  input = [\n    [-12, 19],\n    [100, 2],\n    [100, 200],\n  ];\n  result = largestPair(input);\n  expected = [100, 200];\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Ivdjv4wAXqA",
          "starterCode": "// Your code here",
          "solutionCode": "type Pair = [number, number];\n\n// Find and return the largest pair in the given array\nconst largestPair = (pairs: Pair[]): Pair => {\n  // Track the largest sum and the pair which creates that sum\n  let largestSum = 0;\n  let largestPair = pairs[0];\n\n  // Iterate throught the list and find the largest pair\n  for (const [a, b] of pairs) {\n    const sum = a + b;\n    if (sum > largestSum) {\n      largestSum = sum;\n      largestPair = [a, b];\n    }\n  }\n\n  return largestPair;\n};\n",
          "content": ""
        },
        {
          "id": "Qm$hr@r@o",
          "type": "typescript",
          "title": "Rationer",
          "instructions": "Sometimes less is more. Complete the `rationer` function in the editor below. The function accepts a `rationLimit` which specifies how much a `Consumer` can receive of some `\"Goods\"`. The `rationLimit` function returns a new function, the `distributor` function\\. This function is called with consumer requests, and accepts a `Consumer` and `requestSize` as arguments. The distributor should provide goods to each consumer until the consumer has received the number of goods equal to the `rationLimit`. Once this limit is reached, no more goods should be returned for the consumer. Consumers are identified using their unique `id` attribute\\.\n\nThe goods are rationed because they are scarce\\! The `rationer` also accepts a second argument, `totalGoods`, which specifies the total supply of the good being rationed. Once this amount has been distributed, no more goods should be distributed, even to new consumers.\n\nWhen the goods are depleted, or when a consumer has reached their limit, the distributor should return `null`. If the goods are not depleted yet, the distributor should return as many goods as possible based on the request \\(in an array\\). For instance, if a consumer requests 10 goods, but the total goods supply is five, the distributor should return 5 goods: `[\"Goods\", \"Goods\", \"Goods\", \"Goods\", \"Goods\"]`. Note that the ration limit can be larger than the total goods.\n\n**Hint:** The distributor function can track the total distributed goods using a _closure_ on values in the outer function scope.",
          "testCode": "const A = {\n  id: __id(),\n  name: \"Sam\",\n};\n\nconst B = {\n  id: __id(),\n  name: \"Sara\",\n};\n\nconst C = {\n  id: __id(),\n  name: \"Ben\",\n};\n\ntest(\"`rationer` should be defined.\", () => {\n  expect(rationer).toBeDefined();\n});\n\ntest(\"`rationer` should be return a function.\", () => {\n  expect(typeof rationer() === \"function\").toBe(true);\n});\n\ntest('The `distributor` function returned from `rationer` should return arrays of `\"Goods\"` for consumers up to the provided `rationLimit`.', () => {\n  const distributor = rationer(5, 25);\n  let result = distributor(A, 1);\n  expect(result).toEqual([\"Goods\"]);\n  result = distributor(A, 1);\n  expect(result).toEqual([\"Goods\"]);\n  result = distributor(A, 1);\n  expect(result).toEqual([\"Goods\"]);\n  result = distributor(A, 1);\n  expect(result).toEqual([\"Goods\"]);\n  result = distributor(A, 1);\n  expect(result).toEqual([\"Goods\"]);\n  result = distributor(A, 1);\n  expect(result).toEqual(null);\n\n  result = distributor(B, 5);\n  expect(result).toEqual([\"Goods\", \"Goods\", \"Goods\", \"Goods\", \"Goods\"]);\n  result = distributor(B, 5);\n  expect(result).toEqual(null);\n\n  result = distributor(C, 5);\n  expect(result).toEqual([\"Goods\", \"Goods\", \"Goods\", \"Goods\", \"Goods\"]);\n  result = distributor(C, 5);\n  expect(result).toEqual(null);\n});\n\ntest('The `distributor` function returned from `rationer` should return arrays of `\"Goods\"` up to the provided `totalGoods` amount.', () => {\n  let distributor = rationer(3, 2);\n  let result = distributor(A, 10);\n  expect(result).toEqual([\"Goods\", \"Goods\"]);\n\n  distributor = rationer(2, 1);\n  result = distributor(A, 20);\n  expect(result).toEqual([\"Goods\"]);\n  result = distributor(B, 200);\n  expect(result).toEqual(null);\n  result = distributor(C, 20);\n  expect(result).toEqual(null);\n\n  distributor = rationer(2, 4);\n  result = distributor(A, 2);\n  expect(result).toEqual([\"Goods\", \"Goods\"]);\n  result = distributor(B, 2);\n  expect(result).toEqual([\"Goods\", \"Goods\"]);\n  result = distributor(C, 2);\n  expect(result).toEqual(null);\n  result = distributor(A, 2);\n  expect(result).toEqual(null);\n  result = distributor(B, 2);\n  expect(result).toEqual(null);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/gCcM1SBf_gc",
          "starterCode": "type Distributor = (customer: Consumer, requestSize: number) => Result;\n\ninterface Consumer {\n  id: string;\n  name: string;\n}\n\n// Just a placeholder to represnet some product item\ntype Goods = \"Goods\";\ntype Result = Goods[] | null;\n\nconst rationer = (rationLimit: number, totalGoods: number): Distributor => {\n  // Your code here\n\n  // A distribute function which distributes goods to consumers\n  // according to the provided rationLimit\n  const distributor = (consumer: Consumer, requestSize: number): Result => {\n    // Your code here\n    return [\"Goods\"];\n  };\n\n  return distributor;\n};",
          "solutionCode": "type Distributor = (customer: Consumer, requestSize: number) => Result;\n\ninterface Consumer {\n  id: string;\n  name: string;\n}\n\n// Just a placeholder to represnet some product item\ntype Goods = \"Goods\";\ntype Result = Goods[] | null;\n\nconst rationer = (rationLimit: number, totalGoods: number): Distributor => {\n  // Add state variables which will be tracked by the distributor\n  // function via a closure.\n\n  // Track total supply\n  let totalRemainingSupply = totalGoods;\n\n  // Track the goods dispersed to each consumer\n  let consumerRequestCache: { [key: string]: number } = {};\n\n  // A distribute function which distributes goods to consumers\n  // according to the provided rationLimit\n  const distributor = (consumer: Consumer, requestSize: number): Result => {\n    // If the total supply is exhausted just return null\n    if (totalRemainingSupply === 0) {\n      return null;\n    }\n\n    // Get the existing distribution size if this is a return consumer\n    const distributionSize = consumerRequestCache[consumer.id] || 0;\n\n    // Find the remaining allowance for this consumer. Use the least value\n    // between the ration limit and the total remaining supply to\n    // determine how much can be distributed to this consumer.\n    const remaining = Math.min(rationLimit, totalRemainingSupply) - distributionSize;\n\n    // If no more can be distributed, return null\n    if (remaining <= 0) {\n      return null;\n    }\n\n    // Set the amount to distribute based on how much is possible\n    let toDistribute = 0;\n\n    if (requestSize <= remaining) {\n      toDistribute = requestSize;\n    } else {\n      toDistribute = remaining;\n    }\n\n    // Update the consumer request cache with the newly\n    // distributed goods\n    consumerRequestCache[consumer.id] = distributionSize + toDistribute;\n\n    // Decrement the total remaining supply\n    totalRemainingSupply -= toDistribute;\n\n    // Fill an array with the right amount of Goods\n    const result: Result = new Array(toDistribute).fill(\"Goods\");\n\n    // Return the goods!\n    return result;\n  };\n\n  return distributor;\n};\n",
          "content": ""
        },
        {
          "id": "gQBQUIV8B",
          "type": "typescript",
          "title": "Create a Multiplier",
          "instructions": "The type signature for a `Multipler` function is in the editor below. This function should receive a value `x` to multiply other values by and then return a new function which accepts a `value` argument and then returns the result of multiplying this value by the previous value, `x`. Implement this function\\!",
          "testCode": "test(\"`multiplier` should be defined.\", () => {\n  expect(multiplier).toBeDefined();\n});\n\ntest(\"`multiplier` should be a function.\", () => {\n  expect(typeof multiplier).toBe(\"function\");\n});\n\ntest(\"`multiplier` should return a function.\", () => {\n  expect(typeof multiplier()).toBe(\"function\");\n});\n\ntest(\"The function returned by `multiplier` should return accept number arguments, and return the result of multiplying these numbers by the original value passed to the `multiplier` function.\", () => {\n  let mult = multiplier(2);\n  let result = mult(5);\n  expect(result).toBe(10);\n\n  mult = multiplier(20);\n  result = mult(1);\n  expect(result).toBe(20);\n\n  mult = multiplier(5);\n  result = mult(100);\n  expect(result).toBe(500);\n  result = mult(1);\n  expect(result).toBe(5);\n  result = mult(10);\n  expect(result).toBe(50);\n  result = mult(27);\n  expect(result).toBe(135);\n\n  mult = multiplier(9);\n  result = mult(10);\n  expect(result).toBe(90);\n  result = mult(1);\n  expect(result).toBe(9);\n  result = mult(11);\n  expect(result).toBe(99);\n  result = mult(100);\n  expect(result).toBe(900);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/27HaCx20dxM",
          "starterCode": "type Multiplier = (x: number) => (value: number) => number;\n\n// Your code here",
          "solutionCode": "type Multiplier = (x: number) => (value: number) => number;\n\n/**\n * We can easily solve this with one-line arrow functions.\n * Note that the function type definition is defined separately\n * and then used to type the function at the beginning. The\n * arguments then do not require explicit type definitions,\n * but TypeScript still understands what the types are.\n */\nconst multiplier: Multiplier = (x) => (value) => value * x;\n",
          "content": ""
        },
        {
          "id": "tjwaDWhXXM",
          "type": "typescript",
          "title": "Lock and Key",
          "instructions": "Create a class `LockAndKeyClass` which can be instantiated with some `key` value string, e.g.\n\n```typescript\nconst lockAndKey = new LockAndKeyClass(\"secret-passcode\");\n\n```\n\nThe `LockAndKeyClass` should implement the methods defined in the `LockAndKey` interface\\. The class should be able to be \"locked\" and \"unlocked\" by providing the original secret key which was used to create the class. If the class is \"unlocked\", the contents methods can be accessed. If it is \"locked\", the contents methods return `null`. Implement this behavior\\!",
          "testCode": "test(\"`LockAndKeyClass` should be defined.\", () => {\n  expect(LockAndKeyClass).toBeDefined();\n});\n\n\ntest(\"`LockAndKeyClass` can be instantiated with a `key` passphrase.\", () => {\n  const key = \"spadf87sa97fas0\";\n  const lock = new LockAndKeyClass(key);\n  expect(lock instanceof LockAndKeyClass).toBe(true);\n});\n\ntest(\"The `lock` method exists on an instantiated `LockAndKeyClass` class.\", () => {\n  const key = \"spadf87sa97fas0\";\n  const lock = new LockAndKeyClass(key);\n  expect(typeof lock.lock === \"function\").toBe(true);\n});\n\ntest(\"The `unlock` method exists on an instantiated `LockAndKeyClass` class.\", () => {\n  const key = \"spadf87sa97fas0\";\n  const lock = new LockAndKeyClass(key);\n  expect(typeof lock.unlock === \"function\").toBe(true);\n});\n\ntest(\"The `getContents` method exists on an instantiated `LockAndKeyClass` class.\", () => {\n  const key = \"spadf87sa97fas0\";\n  const lock = new LockAndKeyClass(key);\n  expect(typeof lock.getContents === \"function\").toBe(true);\n});\n\ntest(\"The `addContents` method exists on an instantiated `LockAndKeyClass` class.\", () => {\n  const key = \"spadf87sa97fas0\";\n  const lock = new LockAndKeyClass(key);\n  expect(typeof lock.addContents === \"function\").toBe(true);\n});\n\ntest(\"The `LockAndKeyClass` is in a default \\\"locked\\\" state and the contents methods return `null`.\", () => {\n  const key = \"spadf87sa97fas0\";\n  const lock = new LockAndKeyClass(key);\n  expect(lock.lock(\"asfd\")).toBe(null);\n  expect(lock.unlock(\"asfd\")).toBe(null);\n  expect(lock.getContents()).toBe(null);\n  expect(lock.addContents(\"asfd\")).toBe(null);\n});\n\ntest(\"The `LockAndKeyClass` can be unlocked using the original `key` used to instantiate the class. The unlocked class by default contains no contents, `[]`, and allows contents to be added and read.\", () => {\n  const key = \"spadf87sa97fas0\";\n  const lock = new LockAndKeyClass(key);\n  expect(lock.lock(\"asfd\")).toBe(null);\n  expect(lock.unlock(\"asfd\")).toBe(null);\n  expect(lock.getContents()).toBe(null);\n  expect(lock.addContents(\"asfd\")).toBe(null);\n  lock.unlock(\"safd870sa-7fd0sa-\");\n  expect(lock.getContents()).toBe(null);\n  lock.unlock(\"safd8787as0d\");\n  expect(lock.getContents()).toBe(null);\n  lock.unlock(\"asdfazzax\");\n  expect(lock.getContents()).toBe(null);\n  lock.unlock(key);\n  expect(lock.getContents()).toEqual([]);\n  lock.addContents(\"apples\");\n  expect(lock.getContents()).toEqual([\"apples\"]);\n  lock.addContents(\"bananas\");\n  lock.addContents(\"cherries\");\n  expect(lock.getContents()).toEqual([\"apples\", \"bananas\", \"cherries\"]);\n});\n\ntest(\"The `LockAndKeyClass` can be locked and unlocked using the original secret key and retains the same contents.\", () => {\n  const key = \"spadf87sa97fas0\";\n  const lock = new LockAndKeyClass(key);\n  expect(lock.lock(\"asfd\")).toBe(null);\n  expect(lock.unlock(\"asfd\")).toBe(null);\n  expect(lock.getContents()).toBe(null);\n  expect(lock.addContents(\"asfd\")).toBe(null);\n\n  lock.unlock(key);\n  lock.addContents(\"apples\");\n  lock.addContents(\"bananas\");\n  lock.addContents(\"cherries\");\n  expect(lock.getContents()).toEqual([\"apples\", \"bananas\", \"cherries\"]);\n  lock.lock(key);\n  expect(lock.lock(\"asfd\")).toBe(null);\n  expect(lock.unlock(\"asfd\")).toBe(null);\n  expect(lock.getContents()).toBe(null);\n  expect(lock.addContents(\"asfd\")).toBe(null);\n  lock.unlock(key);\n  expect(lock.getContents()).toEqual([\"apples\", \"bananas\", \"cherries\"]);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ajSIr5VB2vg",
          "starterCode": "interface LockAndKey {\n  /**\n   * NOTE: These class properties are NOT private! There are ways to provide\n   * private properties or fields to a class, which cannot be accessed by\n   * the consumers of that class, however, they are out of the scope of this\n   * challenge. For now, feel free to implement these as class properties\n   * at this stage for simplicity.\n   */\n  key: string; // Set to the key used to instantiate the class\n  contents: any[]; // Default to empty array\n  locked: boolean; // Default to true\n\n  lock(secretKey: string): null | void; // secretKey must be the key which was used to create the class\n  unlock(secretKey: string): null | void; // secretKey must be the key which was used to create the class\n  getContents(): null | any[];\n  addContents(content: any): null | void;\n}\n\n// Your code here",
          "solutionCode": "interface LockAndKey {\n  /**\n   * NOTE: These class properities are NOT private! There are ways to provide\n   * private properities or fields to a class, which cannot be accessed by\n   * the consumers of that class, however, they are out of the scope of this\n   * challenge. For now, feel free to implement these as class properities\n   * at this stage for simplicity.\n   */\n  key: string; // Set to the key used to instantiate the class\n  contents: any[]; // Default to empty array\n  locked: boolean; // Default to true\n\n  lock(secretKey: string): null | void; // secretKey must be the key which was used to create the class\n  unlock(secretKey: string): null | void; // secretKey must be the key which was used to create the class\n  getContents(): null | any[];\n  addContents(content: any): null | void;\n}\n\nclass LockAndKeyClass implements LockAndKey {\n  key = \"\";\n  contents: any[] = [];\n  locked = true;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n\n  lock(secretKey: string) {\n    if (secretKey === this.key) {\n      this.locked = true;\n    } else {\n      return null;\n    }\n  }\n\n  unlock(secretKey: string) {\n    if (secretKey === this.key) {\n      this.locked = false;\n    } else {\n      return null;\n    }\n  }\n\n  getContents() {\n    if (this.locked) {\n      return null;\n    }\n\n    return this.contents;\n  }\n\n  addContents(contents: any) {\n    if (this.locked) {\n      return null;\n    }\n\n    this.contents.push(contents);\n  }\n}",
          "content": ""
        },
        {
          "id": "gFARdL2FUm",
          "type": "typescript",
          "title": "Remember Me",
          "instructions": "Implement a function which accepts two arguments, a `value` and `n`. This function should return a new function which returns the `value` every `n`th time is it called, and `null` otherwise\\. For instance:\n\n```typescript\nconst forgetful = getForgetfulFunction(\"It's hard to remember...\", 3);\n\nforgetful(); // -> null\nforgetful(); // -> null\nforgetful(); // -> \"It's hard to remember...\"\nforgetful(); // -> null\nforgetful(); // -> null\nforgetful(); // -> \"It's hard to remember...\"\n\n// The forgetful function returns the first argument every 3rd time it\n// is invoked.\n\n```\n",
          "testCode": "test(\"`getForgetfulFunction` should be defined.\", () => {\n  expect(getForgetfulFunction).toBeDefined();\n});\n\ntest(\"`getForgetfulFunction` should return a function.\", () => {\n  expect(typeof getForgetfulFunction()).toBe(\"function\");\n});\n\ntest(\"The function returned by `getForgetfulFunction` should return the `value` argument every `n` time it is called.\", () => {\n  let value = \"x\";\n  let f = getForgetfulFunction(value, 2);\n  expect(f()).toBe(null);\n  expect(f()).toBe(value);\n  expect(f()).toBe(null);\n  expect(f()).toBe(value);\n  expect(f()).toBe(null);\n  expect(f()).toBe(value);\n\n  value = \"x888\";\n  f = getForgetfulFunction(value, 5);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(value);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(value);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(value);\n\n  value = \"cheese\";\n  f = getForgetfulFunction(value, 15);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(null);\n  expect(f()).toBe(value);\n  expect(f()).toBe(null);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/mnaWOXaiJM4",
          "starterCode": "// Your code here",
          "solutionCode": "// Return a new function which remembers the value every\n// n times it is called.\nconst getForgetfulFunction = (value: any, n: number) => {\n  // Use a closure over the current value here to track\n  // the number of times the function has been called.\n  let current = 0;\n\n  // Return a new function\n  return () => {\n    current++;\n    if (current === n) {\n      current = 0;\n      return value;\n    } else {\n      return null;\n    }\n  };\n};\n",
          "content": ""
        },
        {
          "id": "6lgJamB8yr",
          "type": "typescript",
          "title": "Create a Set Data Structure",
          "instructions": "A Set is a data structure which efficiently records whether an item exists or not. A set holds keys, not values. A set is a good way to store values which you need to later lookup and know simply if they have been seen before or not. You may be familiar with the built\\-in `Set` data structure which TypeScript has to offer, but in this challenge we will try to implement the behavior of a set using a class. It is often a helpful learning exercise to implement data structures or functions by hand, even if in a real programming environment you will use a built\\-in tool or library for the same purpose.\n\nCreate a class `CustomSet` which correctly implements the `SetClass` interface in the editor. Try to implement the set behavior without using an actual `Set` \\- there are other ways to do this\\!",
          "testCode": "test(\"`CustomSet` should be defined.\", () => {\n  expect(CustomSet).toBeDefined();\n});\n\ntest(\"`CustomSet` can be instantiated and has methods `add`, `has`, `remove`, and `getSize`.\", () => {\n  const x = new CustomSet();\n  expect(typeof x.add === \"function\").toBe(true);\n  expect(typeof x.has === \"function\").toBe(true);\n  expect(typeof x.remove === \"function\").toBe(true);\n  expect(typeof x.getSize === \"function\").toBe(true);\n});\n\ntest(\"`CustomSet` provides the behavior or a set for adding and removing items, and checking if items exist.\", () => {\n  const x = new CustomSet();\n  expect(x.has(\"z\")).toBe(false);\n  x.add(\"z\");\n  expect(x.has(\"z\")).toBe(true);\n  x.remove(\"z\");\n  expect(x.has(\"z\")).toBe(false);\n\n  x.add(\"a\");\n  x.add(\"b\");\n  x.add(\"c\");\n  expect(x.has(\"a\")).toBe(true);\n  expect(x.has(\"b\")).toBe(true);\n  expect(x.has(\"c\")).toBe(true);\n  x.remove(\"a\");\n  expect(x.has(\"a\")).toBe(false);\n  x.add(\"aasdfsa\");\n  x.add(\"basdfsadfasdf\");\n  x.add(\"casdfas\");\n  x.add(\"aasdfas\");\n  x.add(\"basdf\");\n  x.add(\"casdf\");\n  x.add(\"sfga\");\n  x.add(\"bdhsgfs\");\n  x.add(\"csfgs\");\n  expect(x.has(\"b\")).toBe(true);\n  expect(x.has(\"c\")).toBe(true);\n  x.remove(\"b\");\n  x.remove(\"c\");\n  expect(x.has(\"b\")).toBe(false);\n  expect(x.has(\"c\")).toBe(false);\n  expect(x.has(\"basdfsadfasdf\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/zjdqRroXDns",
          "starterCode": "interface SetClass<T extends string | number> {\n  add(item: T): void;\n  has(item: T): boolean;\n  remove(item: T): void;\n  getSize(): number;\n}\n\n// Your code here",
          "solutionCode": "interface SetClass<T extends string | number> {\n  add(item: T): void;\n  has(item: T): boolean;\n  remove(item: T): void;\n  getSize(): number;\n}\n\n/**\n * We can use an array internally to track a series of values. This\n * is okay, but it does require us to iterate through the entire array\n * to determine if a value exists, or to remove a value.\n *\n * Another option would be to use an object, and just store a simple\n * placeholder value each key. Objects keys can be read and removed\n * in a single operation and would not require any iteration.\n */\nclass CustomSet<T extends string | number> implements SetClass<T> {\n  items: T[] = [];\n\n  add(item: T) {\n    this.items.push(item);\n  }\n\n  has(item: T) {\n    return !!this.items.find((x) => x === item);\n  }\n\n  remove(item: T) {\n    this.items = this.items.filter((x) => x !== item);\n  }\n\n  getSize() {\n    return this.items.length;\n  }\n}\n",
          "content": ""
        },
        {
          "id": "bOKf5cIqT",
          "type": "typescript",
          "title": "Sort the Rows",
          "instructions": "You receive a 2 dimensional grid of numbers, each row contains a list of numbers of varying lengths. Write a function `sortTheRows` to return a new grid which has the rows sorted by smallest sum to largest sum. Here is an example:\n\n```typescript\n// Input:\n[\n    [11, 6, 20],\n    [1, 3, 9, 0, 1],\n    [2, 90],\n]\n\n// Output:\n[\n    [1, 3, 9, 0, 1],\n    [11, 6, 20],\n    [2, 90],\n]\n\n```\n",
          "testCode": "test(\"`sortTheRows` should be defined.\", () => {\n  expect(sortTheRows).toBeDefined();\n});\n\ntest(\"`sortTheRows` should be a function.\", () => {\n  expect(typeof sortTheRows === \"function\").toBe(true);\n});\n\ntest(\"`sortTheRows` should accept a matrix of rows and return a new matrix with the rows sorted from least sum to greatest sum.\", () => {\n  const solutionFn = (grid) => {\n    const sumRow = (row) => row.reduce((total, x) => total + x);\n    return grid.slice().sort((a, b) => {\n      const sumA = sumRow(a);\n      const sumB = sumRow(b);\n      return sumA > sumB ? 1 : -1;\n    });\n  };\n\n  let input = [\n    [11, 6, 20],\n    [1, 3, 9, 0, 1],\n    [2, 90],\n  ];\n\n  const output = [\n    [1, 3, 9, 0, 1],\n    [11, 6, 20],\n    [2, 90],\n  ];\n  expect(sortTheRows(input)).toEqual(output);\n\n  input = [[1]];\n  expect(sortTheRows(input)).toEqual(solutionFn(input));\n\n  input = [[1], [9, 9, 9, 9, 9, 9], [-1, -10], [-100, 90]];\n  expect(sortTheRows(input)).toEqual(solutionFn(input));\n\n  input = [[7, 6, 5, 4, 3, 1, 2], [1], [8, 9]];\n  expect(sortTheRows(input)).toEqual(solutionFn(input));\n\n  input = [[7, 6, 5, 4, 3, 1, 2], [1], [8, 9], [-100000]];\n  expect(sortTheRows(input)).toEqual(solutionFn(input));\n\n  input = [\n    [7, 6, 5, 4, 3, 1, 2],\n    [1],\n    [8, 9],\n    [32, 234, 234, 234, 234, 234, 234, 324, 324, 2342, 234, 23424, 234],\n    [-5, 2],\n    [-50000000000],\n  ];\n  expect(sortTheRows(input)).toEqual(solutionFn(input));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/_mqCLLplca8",
          "starterCode": "// Your code here",
          "solutionCode": "// Sort a matrix by the sum of each row\nconst sortTheRows = (grid: number[][]): number[][] => {\n  // Reduce a row to a sum:\n  const sumRow = (row: number[]) => row.reduce((total, x) => total + x);\n\n  // Sort the grid based on the row sums\n  const sortedMatrix = grid.slice().sort((a, b) => {\n    const sumA = sumRow(a);\n    const sumB = sumRow(b);\n    return sumA > sumB ? 1 : -1;\n  });\n\n  // Return the sorted grid\n  return sortedMatrix;\n};\n",
          "content": ""
        },
        {
          "id": "0ch2x12xH",
          "type": "typescript",
          "title": "A Stream of Elements",
          "instructions": "A stream is a continuous supply of events or elements over time. In this challenge, create a class `StreamClass` which accepts elements in a stream using a `next` method\\. The class should implement the other methods in the `Stream` interface which track information about all of the current elements in the stream: least, greatest, mean and size. If the stream is empty, these methods should return `null`.",
          "testCode": "test(\"`StreamClass` should be defined.\", () => {\n  expect(StreamClass).toBeDefined();\n});\n\ntest(\"`StreamClass` can be instantiated and contains all of the methods defined in the `Stream` interface.\", () => {\n  const s = new StreamClass();\n  expect(typeof s.getLeast).toBe(\"function\");\n  expect(typeof s.getGreatest).toBe(\"function\");\n  expect(typeof s.getMean).toBe(\"function\");\n  expect(typeof s.getSize).toBe(\"function\");\n  expect(typeof s.next).toBe(\"function\");\n});\n\ntest(\"If the stream is empty the `StreamClass` methods `getLeast`, `getGreatest` and `getMean` should return `null`.\", () => {\n  const s = new StreamClass();\n  expect(s.getLeast()).toBe(null);\n  expect(s.getGreatest()).toBe(null);\n  expect(s.getMean()).toBe(null);\n  expect(s.getSize()).toBe(0);\n});\n\ntest(\"The stream should accept new elements using the `next` method, and return all the elements using the `getElements` method.\", () => {\n  const s = new StreamClass();\n  s.next(1);\n  s.next(12);\n  expect(s.getElements()).toEqual([1, 12]);\n  s.next(8);\n  s.next(7);\n  s.next(5);\n  expect(s.getElements()).toEqual([1, 12, 8, 7, 5]);\n});\n\ntest(\"The stream should track the least value in a stream of elements correctly.\", () => {\n  const s = new StreamClass();\n  s.next(10);\n  expect(s.getLeast()).toBe(10);\n  s.next(12);\n  s.next(16);\n  s.next(200);\n  expect(s.getLeast()).toBe(10);\n  s.next(13);\n  s.next(6);\n  expect(s.getLeast()).toBe(6);\n  s.next(1);\n  expect(s.getLeast()).toBe(1);\n  s.next(-7);\n  expect(s.getLeast()).toBe(-7);\n});\n\ntest(\"The stream should track the greatest value in a stream of elements correctly.\", () => {\n  const s = new StreamClass();\n  s.next(10);\n  expect(s.getGreatest()).toBe(10);\n  s.next(12);\n  s.next(16);\n  s.next(200);\n  expect(s.getGreatest()).toBe(200);\n  s.next(13);\n  s.next(6);\n  expect(s.getGreatest()).toBe(200);\n  s.next(1);\n  expect(s.getGreatest()).toBe(200);\n  s.next(-7);\n  expect(s.getGreatest()).toBe(200);\n  s.next(700);\n  expect(s.getGreatest()).toBe(700);\n  s.next(7005);\n  expect(s.getGreatest()).toBe(7005);\n});\n\ntest(\"The stream should track the mean value in a stream correctly.\", () => {\n  const s = new StreamClass();\n  s.next(1);\n  s.next(1);\n  s.next(1);\n  s.next(1);\n  s.next(1);\n  s.next(1);\n  expect(s.getMean()).toBe(1);\n\n  const s2 = new StreamClass();\n  s2.next(1);\n  s2.next(2);\n  s2.next(3);\n  s2.next(4);\n  s2.next(5);\n  s2.next(6);\n  s2.next(7);\n  expect(s2.getMean()).toBe(4);\n\n  const s3 = new StreamClass();\n  const values = [112, 232131, 32131, 4241, 5324, 6234, 72342443];\n  let total = 0;\n  for (const n of values) {\n    s3.next(n);\n    total += n;\n  }\n  expect(s3.getMean()).toBe(total / values.length);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/rJXjAXqfqbA",
          "starterCode": "interface Stream {\n  getLeast(): number | null;\n  getGreatest(): number | null;\n  getMean(): number | null;\n  getSize(): number;\n  getElements(): number[];\n  next(element: number): void;\n}\n\n// Your code here",
          "solutionCode": "interface Stream {\n  getLeast(): number | null;\n  getGreatest(): number | null;\n  getMean(): number | null;\n  getSize(): number;\n  getElements(): number[];\n  next(element: number): void;\n}\n\nclass StreamClass implements Stream {\n  min: number = Infinity;\n  max: number = -Infinity;\n  total: number = 0;\n  elements: number[] = [];\n\n  getSize() {\n    return this.elements.length;\n  }\n\n  getLeast() {\n    if (this.getSize() === 0) {\n      return null;\n    }\n\n    return this.min;\n  }\n\n  getGreatest() {\n    if (this.getSize() === 0) {\n      return null;\n    }\n\n    return this.max;\n  }\n\n  getMean() {\n    if (this.getSize() === 0) {\n      return null;\n    }\n\n    return this.total / this.getSize();\n  }\n\n  next(element: number) {\n    // Track the min, max, and total in place\n    // so the elements do not need to be iterated\n    // to return the least, greatest, and mean\n    // values.\n    this.min = Math.min(element, this.min);\n    this.max = Math.max(element, this.max);\n    this.total = this.total + element;\n    this.elements.push(element);\n  }\n\n  getElements() {\n    return this.elements;\n  }\n}\n",
          "content": ""
        },
        {
          "id": "YXEoFvb4x",
          "type": "typescript",
          "title": "Build a Cache",
          "instructions": "A fundamental and powerful tool in programming is a cache. A cache is just a quick store for a value which is otherwise costly to look up or calculate. Caches are a common answer to performance problems in software applications. We will cover caching more in depth later in the course. In this challenge, we will implement a simple caching behavior.\n\nImplement a `CacheClass` which implements the behavior described in the `ICache` interface\\. The class should use the `source` object's `getItem` method to retrieve items, but then cache items using their `id`. An item should only be fetched one time from the `source` object \\- after that the `CacheClass` should cache it somehow and return the cached item for subsequent requests.",
          "testCode": "test(\"`CacheClass` should be defined.\", () => {\n  expect(CacheClass).toBeDefined();\n});\n\ntest(\"An instantiated`CacheClass` should have a get method.\", () => {\n  expect(typeof new CacheClass().get === \"function\").toBe(true);\n});\n\ntest(\"The `CacheClass` should cache items using their `id`, and only make requests to the `source` object one time per item `id.`\", () => {\n  let sourceRequests = new Set();\n  source.getItem = (id) => {\n    expect(sourceRequests.has(id)).toBe(false);\n    sourceRequests.add(id);\n    return { id, contents: null };\n  };\n\n  const x = new CacheClass();\n\n  x.get(__id());\n  x.get(__id());\n  x.get(__id());\n  x.get(__id());\n  x.get(__id());\n  x.get(__id());\n  x.get(__id());\n\n  const firstId = __id();\n  let result = x.get(firstId);\n  expect(result).toEqual({ id: firstId, contents: null });\n  result = x.get(firstId);\n  result = x.get(firstId);\n  expect(result).toEqual({ id: firstId, contents: null });\n\n  id = __id();\n  result = x.get(id);\n  expect(result).toEqual({ id, contents: null });\n  result = x.get(id);\n  result = x.get(id);\n  expect(result).toEqual({ id, contents: null });\n  result = x.get(firstId);\n  result = x.get(firstId);\n  result = x.get(firstId);\n  expect(result).toEqual({ id: firstId, contents: null });\n  result = x.get(id);\n  expect(result).toEqual({ id, contents: null });\n\n  for (let i = 0; i < 25; i++) {\n    const id = __id();\n    expect(x.get(id)).toEqual({ id, contents: null });\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/4Hc85Oa2A_o",
          "starterCode": "/**\n * A simple object to provide a source for Item objects.\n * In a real application, the source object would be fetched\n * from some remote source/server or the result of an\n * expensive or time consuming operation.\n */\nconst source = {\n  getItem(id: string) {\n    const item: Item = {\n      id,\n      contents: null, // -> imagine there are some random contents in here\n    };\n    return item;\n  },\n};\n\ninterface Item {\n  id: string;\n  contents: any;\n}\n\n// Do not change code above here\n\n/**\n * The Cache just provides a get method to get items\n * by their unique id. Items should be cached using\n * their id, if an item has been requested previously,\n * the cache should return a locally cached version.\n * Otherwise, it should call the source object getItem\n * method, cache the result, and then return the result.\n * \n * The source object getItem method should only be\n * called one time for each unique id.\n */\ninterface Cache {\n  get(id: string): Item;\n}\n\n// Your code here\n",
          "solutionCode": "/**\n * A simple object to provide a source for Item objects.\n * In a real application, the source object would be fetched\n * from some remote source/server or the result of an\n * expensive or time consuming operation.\n */\nconst source = {\n  getItem(id: string) {\n    const item: Item = {\n      id,\n      contents: null, // -> imagine there are some random contents in here\n    };\n    return item;\n  },\n};\n\ninterface Item {\n  id: string;\n  contents: any;\n}\n\n// Do not change code above here\n\n/**\n * The Cache just provides a get method to get items\n * by their unique id. Items should be cached using\n * their id, if an item has been requested previously,\n * the cache should return a locally cached version.\n * Otherwise, it should call the source object getItem\n * method, cache the result, and then return the result.\n *\n * The source object getItem method should only be\n * called one time for each unique id.\n */\ninterface ICache {\n  get(id: string): Item;\n}\n\nclass CacheClass implements ICache {\n  // Use a Map for a constant time lookup cache.\n  // A regular object would also work.\n  cache = new Map();\n\n  get(id: string) {\n    // Check the local cache first\n    if (this.cache.has(id)) {\n      return this.cache.get(id);\n    } else {\n      // Cache is empty, fetch the item, cache it, and return it\n      const item = source.getItem(id);\n      this.cache.set(id, item);\n      return item;\n    }\n  }\n}\n",
          "content": ""
        },
        {
          "id": "OFfKcMn5X",
          "type": "typescript",
          "title": "Tracker",
          "instructions": "Implement a function which records values only if the value meets some condition, which can be provided by a conditional function. The function signatures is provided in the editor below. The function `tracker` should return a new function which tracks all of the values it is called with which meet the condition provided in the `ConditionalFunction` function\\. This function should return all of the currently tracked values every time it is called, or an empty array if there are no tracked values yet.",
          "testCode": "test(\"`tracker` should be defined.\", () => {\n  expect(tracker).toBeDefined();\n});\n\ntest(\"`tracker` should be a function.\", () => {\n  expect(typeof tracker === \"function\").toBe(true);\n});\n\ntest(\"Every call to `tracker` should return all of the values which meet the provided conditional function.\", () => {\n  let t = tracker((x) => true);\n  expect(t(1)).toEqual([1]);\n  expect(t(2)).toEqual([1, 2]);\n  expect(t(3)).toEqual([1, 2, 3]);\n  expect(t(4)).toEqual([1, 2, 3, 4]);\n  expect(t(5)).toEqual([1, 2, 3, 4, 5]);\n\n  t = tracker((x) => x > 10);\n  expect(t(1)).toEqual([]);\n  expect(t(2)).toEqual([]);\n  expect(t(3)).toEqual([]);\n  expect(t(4)).toEqual([]);\n  expect(t(5)).toEqual([]);\n  expect(t(6)).toEqual([]);\n  expect(t(7)).toEqual([]);\n  expect(t(8)).toEqual([]);\n  expect(t(9)).toEqual([]);\n  expect(t(10)).toEqual([]);\n  expect(t(11)).toEqual([11]);\n  expect(t(12)).toEqual([11, 12]);\n  expect(t(13)).toEqual([11, 12, 13]);\n  expect(t(14)).toEqual([11, 12, 13, 14]);\n  expect(t(1)).toEqual([11, 12, 13, 14]);\n  expect(t(1)).toEqual([11, 12, 13, 14]);\n  expect(t(1)).toEqual([11, 12, 13, 14]);\n  expect(t(15)).toEqual([11, 12, 13, 14, 15]);\n\n  t = tracker((x) => x.length > 5);\n  expect(t(\"a\")).toEqual([]);\n  expect(t(\"af\")).toEqual([]);\n  expect(t(\"ae\")).toEqual([]);\n  expect(t(\"erw\")).toEqual([]);\n  expect(t(\"afgs\")).toEqual([]);\n  expect(t(\"aseqa\")).toEqual([]);\n  expect(t(\"apples\")).toEqual([\"apples\"]);\n  expect(t(\"bananas\")).toEqual([\"apples\", \"bananas\"]);\n  expect(t(\"cherries\")).toEqual([\"apples\", \"bananas\", \"cherries\"]);\n  expect(t(\"peaches\")).toEqual([\"apples\", \"bananas\", \"cherries\", \"peaches\"]);\n  expect(t(\"ae\")).toEqual([\"apples\", \"bananas\", \"cherries\", \"peaches\"]);\n  expect(t(\"erw\")).toEqual([\"apples\", \"bananas\", \"cherries\", \"peaches\"]);\n  expect(t(\"afgs\")).toEqual([\"apples\", \"bananas\", \"cherries\", \"peaches\"]);\n  expect(t(\"grapes\")).toEqual([\n    \"apples\",\n    \"bananas\",\n    \"cherries\",\n    \"peaches\",\n    \"grapes\",\n  ]);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/HpHZAOF6ZyA",
          "starterCode": "// The tracker function should return all of the tracked values\n// everytime it is called.\ntype Tracker = (value: any) => any[];\n\n// The conditional function should test a value and return true\n// if the value should be tracked.\ntype ConditionalFunction = (x: any) => boolean;\n\n// To create a tracker provided a functional which determines\n// whether values should be remember or not.\ntype CreateTracker = (conditionToRemember: ConditionalFunction) => Tracker;\n\n// Your code here",
          "solutionCode": "// The tracker function should return all of the tracked values\n// everytime it is called.\ntype Tracker = (value: any) => any[];\n\n// The conditional function should test a value and return true\n// if the value should be tracked.\ntype ConditionalFunction = (x: any) => boolean;\n\n// To create a tracker provided a functional which determines\n// whether values should be remember or not.\ntype CreateTracker = (conditionToRemember: ConditionalFunction) => Tracker;\n\n// Return a tracking function which remembers values based on some condition.\nconst tracker = (conditionToRemember: ConditionalFunction) => {\n  const values: any[] = [];\n  return (x: any) => {\n    if (conditionToRemember(x)) {\n      values.push(x);\n    }\n\n    return values;\n  };\n};\n",
          "content": ""
        },
        {
          "id": "ZVCwuWOjf",
          "type": "section",
          "title": "Algorithms Challenges",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The previous section of algorithms should be fairly easy to complete and is designed to get you very comfortable writing and solving all types of basic tasks using TypeScript. By now, you should be pretty comfortable writing simple TypeScript programs.\n\nNow, let's ramp things up to another level and start solving some more challenging questions\\!"
        },
        {
          "id": "HYVyW@eI2",
          "type": "typescript",
          "title": "The Quadratic Formula",
          "instructions": "We all remember the quadratic formula from math class. Wouldn't it be easy if we had a program to solve it for us, rather than having to solve it by hand? Let's implement the quadratic formula with code. Write a function, `quadraticFormula`, which takes an `Input` argument and returns `Roots` result which contains the two roots for the provided input argument. Recall the [quadratic formula](https://en.wikipedia.org/wiki/Quadratic_formula) from math class:\n\n```none\nx = (-b ± √b² - 4ac) / 2a\n\n```\n\nThe formula return two answers, because of the `±` symbol, which stands for \"plus\" and \"minus\". Return each answer in the `plus` and `minus` field of the `Roots` result object. Note that the plus and minus values are not necessarily positive and negative, respectively.",
          "testCode": "test(\"`quadraticFormula` should be defined.\", () => {\n  expect(quadraticFormula).toBeDefined();\n});\n\ntest(\"`quadraticFormula` should be a function.\", () => {\n  expect(typeof quadraticFormula === \"function\").toBe(true);\n});\n\ntest(\"`{ a: 5, b: 6, c: 1 }` should be return `{ plus: -0.2, minus: -1 }`.\", () => {\n  expect(quadraticFormula({ a: 5, b: 6, c: 1 })).toEqual({\n    plus: -0.2,\n    minus: -1,\n  });\n});\n\ntest(\"`{ a: 1, b: -2, c: -24 }` should be return `{ plus: 6, minus: -4 }`.\", () => {\n  expect(quadraticFormula({ a: 1, b: -2, c: -24 })).toEqual({\n    plus: 6,\n    minus: -4,\n  });\n});\n\ntest(\"`{ a: 1, b: -6, c: -16 }` should be return `{ plus: 8, minus: -2 }`.\", () => {\n  expect(quadraticFormula({ a: 1, b: -6, c: -16 })).toEqual({\n    plus: 8,\n    minus: -2,\n  });\n});\n\ntest(\"`{ a: 1, b: 6, c: 5 }` should be return `{ plus: -1, minus: -5 }`.\", () => {\n  expect(quadraticFormula({ a: 1, b: 6, c: 5 })).toEqual({\n    plus: -1,\n    minus: -5,\n  });\n});\n\ntest(\"`{ a: 1, b: -16, c: 0 }` should be return `{ plus: 16, minus: 0 }`.\", () => {\n  expect(quadraticFormula({ a: 1, b: -16, c: 0 })).toEqual({\n    plus: 16,\n    minus: 0,\n  });\n});\n\ntest(\"`{ a: 1, b: 6, c: 0 }` should be return `{ plus: 0, minus: -6 }`.\", () => {\n  expect(quadraticFormula({ a: 1, b: 6, c: 0 })).toEqual({\n    plus: 0,\n    minus: -6,\n  });\n});\n",
          "videoUrl": "https://www.youtube.com/embed/mVTo0g7yGDQ",
          "starterCode": "interface Input {\n  a: number;\n  b: number;\n  c: number;\n}\n\ninterface Roots {\n  plus: number;\n  minus: number;\n}\n\n// Your code here",
          "solutionCode": "interface Input {\n  a: number;\n  b: number;\n  c: number;\n}\n\ninterface Roots {\n  plus: number;\n  minus: number;\n}\n\n// Calculate the roots for \nconst quadraticFormula = (input: Input): Roots => {\n  const { a, b, c } = input;\n  \n  const square = Math.sqrt((b * b) - (4 * a * c));\n\n  const plus = (-b + square) / (2 * a);\n  const minus = (-b - square) / (2 * a);\n\n  return { plus, minus };\n}\n",
          "content": ""
        },
        {
          "id": "5fGAVCV6H",
          "type": "typescript",
          "title": "Every nth Value",
          "instructions": "Write a function `everyNth` which takes an array of values and a number `n` as arguments and returns every \"nth\" value in the array, in a new array. For example:\n\n```typescript\neveryNth([1,2,3,4,5,6,7,8,9,10], 3); // -> [3,6,9]\n\n```\n\nIf `n` is greater than the length of the original array, return `[]`.",
          "testCode": "test(\"A function `everyNth` should be defined.\", () => {\n  expect(everyNth).toBeDefined();\n  expect(typeof everyNth === \"function\").toBe(true);\n});\n\ntest(\"`everyNth` should return `[]` given the input `[1,2,3,4]` and `7`.\", () => {\n  expect(everyNth([1, 2, 3, 4], 7)).toEqual([]);\n});\n\ntest(\"`everyNth` should return `[]` given the input `[]` and `7`.\", () => {\n  expect(everyNth([], 1)).toEqual([]);\n});\n\ntest(\"`everyNth` should return `[3,6,9]` given the input `[1,2,3,4,5,6,7,8,9,10]` and `3`.\", () => {\n  expect(everyNth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)).toEqual([3, 6, 9]);\n});\n\ntest(\"`everyNth` should return `[5]` given the input `[1,2,3,4,5]` and `5`.\", () => {\n  expect(everyNth([1, 2, 3, 4, 5], 5)).toEqual([5]);\n});\n\ntest(\"`everyNth` should return `[1,2,3,4,5,6,7,8]` given the input `[1,2,3,4,5,6,7,8]` and `1`.\", () => {\n  expect(everyNth([1, 2, 3, 4, 5, 6, 7, 8], 1)).toEqual([\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n  ]);\n});\n\ntest(\"`everyNth` should return `[10]` given the input `[1,2,3,4,5,6,7,8,9,10]` and `10`.\", () => {\n  expect(everyNth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)).toEqual([10]);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/RE87e1Y5USc",
          "starterCode": "// Your code here",
          "solutionCode": "// Return every nth item in an array, in a new array\nconst everyNth = (list: any[], n: number): any[] => {\n  const result = [];\n\n  for (let i = n - 1; i < list.length; i += n) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\n",
          "content": ""
        },
        {
          "id": "n1X3SCvk3",
          "type": "typescript",
          "title": "Reverse In Place",
          "instructions": "You may be familiar with the `.reverse` built\\-in array method, which reverses an array's contents in place. This means the array is mutated in place: any reference to the original array will now point to the mutated version. You can of course use `.slice` to create a new copy of an array, and then reverse the contents, if you wanted to immutably reverse the contents of any array \\(slice is always a great tool to keep in mind\\).\n\nFor this challenge exercise, let's try to implement a reverse method which reverses the contents of an array in place. Your function, `reverseInPlace`, should accept an array and reverse it in place and return the same array. Any other references to the original array should be reversed. Since it is a challenge, do not use the built\\-in `.reverse` method\\!",
          "testCode": "test(\"`reverseInPlace` should be a function.\", () => {\n  expect(reverseInPlace).toBeDefined();\n  expect(typeof reverseInPlace === \"function\").toBe(true);\n});\n\ntest(\"`reverseInPlace` should reverse an array input in place.\", () => {\n  let input = [1, 2, 3];\n  let expected = input.slice().reverse();\n  let result = reverseInPlace(input);\n  expect(input === result).toBe(true);\n  expect(result).toEqual(expected);\n\n  input = [1, 2, 3, 9, 10, 18, 19, 20];\n  expected = input.slice().reverse();\n  result = reverseInPlace(input);\n  expect(input === result).toBe(true);\n  expect(result).toEqual(expected);\n\n  input = [122];\n  expected = input.slice().reverse();\n  result = reverseInPlace(input);\n  expect(input === result).toBe(true);\n  expect(result).toEqual(expected);\n\n  input = [122, 5000];\n  expected = input.slice().reverse();\n  result = reverseInPlace(input);\n  expect(input === result).toBe(true);\n  expect(result).toEqual(expected);\n\n  input = stringList;\n  expected = input.slice().reverse();\n  result = reverseInPlace(input);\n  expect(input === result).toBe(true);\n  expect(result).toEqual(expected);\n});\n\ntest(\"`reverseInPlace` does not use the built-in `.reverse` method.\", () => {\n  expect(__user_code_string__.includes(\".reverse\")).toBe(false);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ydG0StkNIW8",
          "starterCode": "// Your code here",
          "solutionCode": "// Reverse an array in place without using the\n// built-in reverse method\nconst reverseInPlace = (list: any[]): any[] => {\n\n  // Use a for loop to iterate to the middle of the list\n  for (let i = 0; i < list.length / 2; i++) {\n    // Get the last index\n    const last = list.length - i - 1;\n    \n    // Get the left and right values\n    const left = list[i];\n    const right = list[last];\n\n    // Swap the left and right values in place\n    list[i] = right;\n    list[last] = left;\n  }\n\n  // Return the original array\n  return list;\n}",
          "content": ""
        },
        {
          "id": "EAePMWB4t",
          "type": "typescript",
          "title": "Labyrinth",
          "instructions": "You start at coordinates `0, 0` in a 2D grid labyrinth maze filled with `1`s and `0`s\\. Your job is to determine if you can traverse the maze to the opposite corner. Define a function, `traverseMaze`, to do this. You can only move directly down or directly right \\(not diagonally\\). You can assume the top left cell will always be open.\n\nFor instance, given this grid:\n\n```\n[\n  [0, 0, 1],\n  [0, 1, 0],\n  [1, 0, 0],\n]\n\n// should return false\n\n```\n\nThere is no way to traverse from the top left to the bottom right. However, in this grid you could:\n\n```\n[\n  [0, 0, 0],\n  [0, 1, 0],\n  [1, 0, 0],\n]\n\n// should return true\n\n```\n",
          "testCode": "test(\"The `traverseMaze` function should be defined.\", () => {\n  expect(traverseMaze).toBeDefined();\n  expect(typeof traverseMaze === \"function\").toBe(true);\n});\n\ntest(\"`traverseMaze` returns `false` for non-traversable mazes.\", () => {\n  let maze = [\n    [0, 0, 1],\n    [0, 1, 1],\n    [1, 1, 0],\n  ];\n  expect(traverseMaze(maze)).toBe(false);\n\n  maze = [\n    [0, 0, 1, 0, 0, 0],\n    [0, 0, 1, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0, 0],\n    [0, 0, 1, 0, 1, 0],\n    [0, 0, 1, 1, 0, 0],\n    [0, 1, 1, 0, 1, 1],\n    [0, 0, 1, 0, 0, 0],\n    \n  ];\n  expect(traverseMaze(maze)).toBe(false);\n\n  maze = [\n    [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],\n    [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],\n    [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\n  ];\n  expect(traverseMaze(maze)).toBe(false);\n});\n\ntest(\"`traverseMaze` returns `true` for traversable mazes.\", () => {\n  let maze = [\n    [0, 0, 0],\n    [0, 1, 0],\n    [1, 1, 0],\n  ];\n  expect(traverseMaze(maze)).toBe(true);\n\n  maze = [\n    [0, 0, 1, 0, 0, 0],\n    [0, 0, 1, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0, 0],\n    [0, 0, 1, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0],\n    [0, 1, 1, 0, 1, 1],\n    [0, 0, 1, 0, 0, 0],\n    \n  ];\n  expect(traverseMaze(maze)).toBe(true);\n\n  maze = [\n    [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\n    [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1],\n    [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\n  ];\n  expect(traverseMaze(maze)).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/GlGzlvnHwAg",
          "starterCode": "// A cell can be 1 or 0. A 1 represents a wall you cannot cross.\ntype Cell = 1 | 0;\n\n// The grid is a 2D collection of cells.\ntype Grid = Cell[][];\n\n// Given a maze grid, return true if you can traverse from the top left\n// to the bottom right corner, or false if you cannot.\ntype TraverseMazeFunction = (maze: Grid) => boolean;\n\n// Your code here:",
          "solutionCode": "// A cell can be 1 or 0. A 1 represents a wall you cannot cross.\ntype Cell = 1 | 0;\n\n// The grid is a 2D collection of cells.\ntype Grid = Cell[][];\n\n// Given a maze grid, return true if you can traverse from the top left\n// to the bottom right corner, or false if you cannot.\ntype TraverseMazeFunction = (maze: Grid) => boolean;\n\n// Your code here:\nconst traverseMaze: TraverseMazeFunction = (maze) => {\n  let pathExists = false;\n\n  // Define x and y limits\n  const xLimit = maze[0].length - 1;\n  const yLimit = maze.length - 1;\n\n  // Recursive helper to find paths through the maze\n  const mazeHelper = (x: number, y: number) => {\n    const cell = maze[y][x];\n    // Short circuit if a path was found or we reached a wall\n    if (pathExists || cell === 1) {\n      return;\n    }\n\n    // If the opposite corner is reached, a path was found\n    if (x === xLimit && y === yLimit) {\n      pathExists = true;\n      return;\n    }\n\n    // Move right one\n    if (x < xLimit) {\n      mazeHelper(x + 1, y);\n    }\n\n    // Move down one\n    if (y < yLimit) {\n      mazeHelper(x, y + 1);\n    }\n  };\n\n  mazeHelper(0, 0);\n\n  return pathExists;\n};\n",
          "content": ""
        },
        {
          "id": "cKVb6701A",
          "type": "typescript",
          "title": "Selective Filter",
          "instructions": "You receive an arbitrarily complicated array structure. The array could contain other arrays, objects, or other values. For example: `[1, null, false, {}, [0, 2, 2], undefined, { name: \"Joe\" }, true]`. Create a function `selectiveFilter` which selectively filters items out of this array, but _also filters child arrays._\n\nFor instance, consider this example:\n\n```\n// An example input.\nconst input = [true, false, null, 1, 2, 3, [undefined, {}, 3]];\n\n// A filter function which filters values equal to 3.\nconst filterFunction = (x: any) => x === 3;\n\n// Use the function.\nconst output = selectiveFilter(input, filterFunction);\n\n// The expected result: 3 is filtered out twice.\nconst expectedOutput = [true, false, null, 1, 2, [undefined, {}]];\n\n```\n",
          "testCode": "test(\"The `selectiveFilter` function should be defined.\", () => {\n  expect(selectiveFilter).toBeDefined();\n  expect(typeof selectiveFilter === \"function\").toBe(true);\n});\n\ntest(\"`selectiveFilter` function should filter lists of values correctly.\", () => {\n  let input = [1, 2, 3, null, true, false, undefined, [2, 3, 3, 3]];\n  let expected = [1, 2, null, true, false, undefined, [2]];\n  expect(selectiveFilter(input, (x) => x === 3)).toEqual(expected);\n\n  input = [\n    1,\n    null,\n    3,\n    null,\n    true,\n    false,\n    undefined,\n    [2, 3, 3, null, [null, null, 5, null, 100]],\n  ];\n  expected = [1, 3, true, false, undefined, [2, 3, 3, [5, 100]]];\n  expect(selectiveFilter(input, (x) => x === null)).toEqual(expected);\n\n  input = [\n    1,\n    null,\n    3,\n    null,\n    true,\n    undefined,\n    [\n      2,\n      false,\n      true,\n      false,\n      [true, true, true, null, 1500],\n      3,\n      3,\n      null,\n      [null, null, 5, null, 100],\n    ],\n  ];\n  expected = [\n    1,\n    null,\n    3,\n    null,\n    undefined,\n    [2, [null, 1500], 3, 3, null, [null, null, 5, null, 100]],\n  ];\n  expect(selectiveFilter(input, (x) => typeof x === \"boolean\")).toEqual(\n    expected\n  );\n});\n",
          "videoUrl": "https://www.youtube.com/embed/eBYMWHGAtPM",
          "starterCode": "// Your code here",
          "solutionCode": "/**\n * Selectively deeply filter items out of an array using a given\n * filter function.\n */\nconst selectiveFilter = (list: any[], filterFunction: (x: any) => boolean): any[] => {\n  const result = [];\n\n  // Iterate through the list:\n  for (const x of list) {\n    // If the item is an array, recursively call selectiveFilter on the item\n    if (Array.isArray(x)) {\n      result.push(selectiveFilter(x, filterFunction));\n    } else if (!filterFunction(x)) {\n      // Otherwise push the item into the results list if it doesn't match the filter\n      result.push(x);\n    }\n  }\n\n  return result;\n}",
          "content": ""
        },
        {
          "id": "FBy3Ga7RD",
          "type": "typescript",
          "title": "Matching Anagrams",
          "instructions": "An anagram is a word or phrase which can be rearranged into another word or phrase, reusing the same letters/spaces. For instance, `silent` is an anagram of `listen`. Implement a function `isAnagram` which accepts two string arguments and returns `true` if they are anagrams of each other.",
          "testCode": "test(\"The `isAnagram` function should be defined.\", () => {\n  expect(isAnagram).toBeDefined();\n  expect(typeof isAnagram === \"function\").toBe(true);\n});\n\ntest(\"The `isAnagram` function should identify anagrams correctly.\", () => {\n  expect(isAnagram(\"silent\", \"listen\")).toBe(true);\n  expect(isAnagram(\"angered\", \"enraged\")).toBe(true);\n  // expect(isAnagram(\"evil\", \"vile\")).toBe(true);\n  // expect(isAnagram(\"pat\", \"tap\")).toBe(true);\n  // expect(isAnagram(\"forty five\", \"over fifty\")).toBe(true);\n  // expect(isAnagram(\"I am Lord Voldemort\", \"Tom Marvolo Riddle\")).toBe(true);\n\n  expect(isAnagram(\"silent\", \"list!en\")).toBe(false);\n  expect(isAnagram(\"angerhed\", \"enraged\")).toBe(false);\n  expect(isAnagram(\"eavil\", \"vile\")).toBe(false);\n  expect(isAnagram(\"pat\", \"tafp\")).toBe(false);\n  expect(isAnagram(\"forty fifve\", \"over fifty\")).toBe(false);\n  expect(isAnagram(\"I am Lord Voldemort\", \"Tom Marvolo Rfiddle\")).toBe(false);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/IsFbA1YV95g",
          "starterCode": "// Your code here:",
          "solutionCode": "/**\n * A function to identify anagrams.\n */\nconst isAnagram = (a: string, b: string): boolean => {\n  let letterCount: { [key: string]: number } = {};\n\n  // Count all the letters in a\n  for (const letter of a) {\n    letterCount[letter] = (letterCount[letter] || 0) + 1;\n  }\n\n  // Count all the letters in b against the counts in a\n  for (const letter of b) {\n    if (letter in letterCount) {\n      letterCount[letter] = letterCount[letter] - 1;\n    } else {\n      // Found a letter with no match!\n      return false;\n    }\n  }\n\n  // Review all counts: they should all be at zero\n  for (const [_, count] of Object.entries(letterCount)) {\n    // Found a mismatched letter count, invalidating the anagram\n    if (count !== 0) {\n      return false;\n    }\n  }\n\n  // Letter counts match, the inputs must be anagrams\n  return true;\n};\n",
          "content": ""
        },
        {
          "id": "ovT8@8aec",
          "type": "typescript",
          "title": "Palindromes",
          "instructions": "More fun with words\\! A _palindrome_ is a word or phrase which reads the same forwards or backwards, such as `madam` or `racecar`. Implement a function, `isPalindrome` which accepts a string and returns `true` if it is a palindrome and `false` otherwise\\.",
          "testCode": "test(\"The `isPalindrome` function should be defined.\", () => {\n  expect(isPalindrome).toBeDefined();\n  expect(typeof isPalindrome === \"function\").toBe(true);\n});\n\ntest(\"`isPalindrome` should identify palindroms correctly.\", () => {\n  expect(isPalindrome(\"\")).toBe(true);\n  expect(isPalindrome(\"racecar\")).toBe(true);\n  expect(isPalindrome(\"madam\")).toBe(true);\n  expect(isPalindrome(\"madddam\")).toBe(true);\n  expect(isPalindrome(\"xyx\")).toBe(true);\n  expect(isPalindrome(\"zzzzzzzzzz\")).toBe(true);\n\n  expect(isPalindrome(\"madamasdf\")).toBe(false);\n  expect(isPalindrome(\"maxdam\")).toBe(false);\n  expect(isPalindrome(\"maxdamzzzzzzz\")).toBe(false);\n  expect(isPalindrome(\"madam \")).toBe(false);\n  expect(isPalindrome(\"  madam \")).toBe(false);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Q6GWlmsBMWY",
          "starterCode": "// Your code here:",
          "solutionCode": "/**\n * A function to identify palindromes.\n */\nconst isPalindrome = (x: string): boolean => {\n  // Iterate to the midpoint in the string and compare the left\n  // character to the right character at the same position. If they\n  // do not match, return false immediately.\n  for (let i = 0; i < x.length / 2; i++) {\n    const left = x.charAt(i);\n    const right = x.charAt(x.length - i - 1);\n\n    if (left !== right) {\n      return false;\n    }\n  }\n\n  // All characters matched - return true.\n  return true;\n}\n",
          "content": ""
        },
        {
          "id": "KUnicitO@x",
          "type": "typescript",
          "title": "Gridspace",
          "instructions": "Given a 2D grid of `1`s and `0`s randomly spread around, reorganize it so all the `1`s are on the bottom. Fill up the rows from the bottom up, right to left. For instance:\n\n```\n// input:\n[\n  [1, 0, 0],\n  [1, 1, 0],\n  [1, 0, 1],\n]\n\n// output:\n[\n  [0, 0, 0],\n  [0, 1, 1],\n  [1, 1, 1],\n]\n\n```\n",
          "testCode": "test(\"The `gridspace` function should be defined.\", () => {\n  expect(typeof gridspace === \"function\").toBe(true);\n});\n\ntest(\"The `gridspace` function should sort grids of `1`s and `0`s correctly.\", () => {\n  let input = [\n    [1, 1, 1],\n    [0, 0, 0],\n    [0, 1, 1],\n  ];\n  let expected = [\n    [0, 0, 0],\n    [0, 1, 1],\n    [1, 1, 1],\n  ];\n  expect(gridspace(input)).toEqual(expected);\n\n  input = [\n    [1, 1, 1, 0, 0, 1],\n    [1, 0, 1, 0, 0, 1],\n    [1, 0, 1, 0, 1, 1],\n  ];\n  expected = [\n    [0, 0, 0, 0, 0, 0],\n    [0, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1],\n  ];\n  expect(gridspace(input)).toEqual(expected);\n\n  input = [\n    [1, 1],\n    [1, 0],\n  ];\n  expected = [\n    [0, 1],\n    [1, 1],\n  ];\n  expect(gridspace(input)).toEqual(expected);\n\n  input = [\n    [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1],\n    [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1],\n    [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1],\n  ];\n  expected = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n  ];\n  expect(gridspace(input)).toEqual(expected);\n});\n\n",
          "videoUrl": "https://www.youtube.com/embed/IsikDK92RdI",
          "starterCode": "// Your code here:",
          "solutionCode": "type Cell = 1 | 0;\n\n/**\n * Reorganize a grid of 1s and 0s.\n */\nconst gridspace = (grid: Cell[][]): Cell[][] => {\n  // Count of zeroes found\n  let zeroesCount = 0;\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = grid[i][j];\n      if (cell === 0) {\n        zeroesCount++;\n      }\n    }\n  }\n\n  let count = 0;\n\n  // Iterate back through the grid and update each cell\n  // based on its position and the count of zeroes\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      if (count < zeroesCount) {\n        grid[i][j] = 0;\n      } else {\n        grid[i][j] = 1;\n      }\n\n      count++;\n    }\n  }\n\n  return grid;\n};\n",
          "content": ""
        },
        {
          "id": "WeSGi$Uri",
          "type": "typescript",
          "title": "Find a Sum of Two",
          "instructions": "Given a list of numbers and a target sum, determine if any two numbers in the list can be added together to make the target sum. Assume only two such numbers exist, if they exist at all. Return these numbers as a tuple, i.e. `[number, number]`, or `null` if no such numbers exist.",
          "testCode": "test(\"The `twoSum` function should be defined.\", () => {\n  expect(twoSum).toBeDefined();\n  expect(typeof twoSum === \"function\").toBe(true);\n});\n\ntest(\"`twoSum` should return the right result.\", () => {\n  expect(twoSum([1, 4, 9], 5)).toEqual([1, 4]);\n  expect(twoSum([1, 4, 9, 10, 20], 30)).toEqual([10, 20]);\n  expect(twoSum([9, 8, 7, 12, 14, 15], 26)).toEqual([12, 14]);\n\n  expect(twoSum([2, 7, 5], 4)).toEqual(null);\n  expect(twoSum([], 1)).toEqual(null);\n  expect(twoSum([9, 8, 7], 1)).toEqual(null);\n  expect(twoSum([1, 4, 9, 10, 20], 33)).toEqual(null);\n  expect(twoSum([9, 8, 7, 12, 14, 15], 260)).toEqual(null);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/X0XSWGUjf7g",
          "starterCode": "// Matched result should be a list of the two numbers\ntype Result = [number, number];\n\n// Function signature\ntype TwoSumFunction = (list: number[], sum: number) => Result | null;\n\n// Your code here:",
          "solutionCode": "// Matched result should be a list of the two numbers\ntype Result = [number, number];\n\n// Function signature\ntype TwoSumFunction = (list: number[], sum: number) => Result | null;\n\n// Two Sum function\nconst twoSum: TwoSumFunction = (list, sum) => {\n  // Create a set to track the numbers in the list\n  let numberSet = new Set();\n\n  // Iterate through the list and determine the required number at each\n  // value needed to add to the sum\n  for (const x of list) {\n    const difference = sum - x;\n\n    // If the required number if in the numberSet, you have a pair - return them!\n    if (numberSet.has(difference)) {\n      return [difference, x];\n    }\n\n    // Add the number to the set of visited numbers\n    numberSet.add(x);\n  }\n\n  // No pairs found - return null.\n  return null;\n}",
          "content": ""
        },
        {
          "id": "sHxmXm3sR",
          "type": "typescript",
          "title": "The Pairwise Operator",
          "instructions": "A pairwise operator is an operator on a stream \\(think real\\-time list\\) of elements, which takes each successive element and groups it with the last element in the stream. For example, a pairwise operation on a stream of values: `[1, 3, 5, 7]` would output `[1, 3]`, `[3, 5]`, and `[5, 7]`.\n\nIn the editor is a `Stream` class which has some basic code setup for processing a stream of elements. The class has a `next` method which will be called to send new elements into the stream.\n\nImplement a `pairwise` operator on the `Stream` class which will provide the paired grouping behavior described above. The `pairwise` method should always return the previous pair of elements in the stream, whenever it is called. If fewer than 2 elements exist in the stream, the `pairwise` method should return `null`.",
          "testCode": "test(\"The `Stream` class should be defined.\", () => {\n  const s = new Stream();\n  expect(s).toBeDefined();\n});\n\ntest(\"The `Stream` class should have a method called `pairwise`.\", () => {\n  const s = new Stream();\n  expect(typeof s.pairwise === \"function\").toBe(true);\n});\n\ntest(\"The `pairwise` method should always return the previous two elements sent into the stream.\", () => {\n  const s = new Stream();\n  expect(s.pairwise()).toEqual(null);\n  s.next(1);\n  expect(s.pairwise()).toEqual(null);\n  s.next(2);\n  expect(s.pairwise()).toEqual([1, 2]);\n  s.next(50);\n  expect(s.pairwise()).toEqual([2, 50]);\n  s.next(432);\n  s.next(500);\n  expect(s.pairwise()).toEqual([432, 500]);\n  s.next(11);\n  expect(s.pairwise()).toEqual([500, 11]);\n  s.next(7);\n  expect(s.pairwise()).toEqual([11, 7]);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Y35HDOs-pZU",
          "starterCode": "/**\n * An class to handle processing a stream of elements.\n */\nclass Stream {\n  elements: any[] = [];\n\n  next(element: any) {\n    this.elements.push(element);\n  }\n\n  // Your code here\n}",
          "solutionCode": "/**\n * An class to handle processing a stream of elements.\n */\nclass Stream {\n  elements: any[] = [];\n\n  next(element: any) {\n    this.elements.push(element);\n  }\n\n  pairwise() {\n    // Not enough elements exist yet\n    if (this.elements.length < 2) {\n      return null;\n    } else {\n      // Get the last pair and return it\n      const len = this.elements.length;\n      const first = this.elements[len - 2];\n      const second = this.elements[len - 1];\n      return [first, second];\n    }\n  }\n}",
          "content": ""
        },
        {
          "id": "9wRw1y5V",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section, you will tackle building your first programs\\! Get ready for this important milestone\\!"
        },
        {
          "id": "iERoLsvSwW",
          "type": "typescript",
          "title": "Build a Calculator",
          "instructions": "For this first project, build a `Calculator` class\\. The calculator should provide methods `add`, `subtract`, `multiply`, and `divide`. The calculator should store a value which represents the current result of a series of calculations. The calculator methods should have a dual functionality:\n\n* The methods should have the signature: `(a: number, b?: number)`.\n* Calling the methods with _only the first argument_ applies that first argument to the existing current result.\n* Calling the methods with both arguments resets the current calculation to the result of applying that operation to the two arguments.\n\n\nThe calculator should allow method calls to be chained together. Overall, the class should support this code:\n\n```typescript\n// Require an initial value\nconst calculator = new Calculator(5);\n\n// Add 20 to the current value of 5\ncalculator.add(20);\n\n// Returns 25\ncalculator.getValue();\n\n// New operation, current value is reset to 50 - 20 = 30\ncalculator.subtract(50, 20);\n\n// Method chaining with initial value 30, add 5, add 5, and divide by 2, result = 20\ncalculator.add(5).add(5).divide(2);\n\n// Reset initial value with additional method chaining. Final result = 10\ncalculator.subtract(100, 50).add(25).add(25).divide(10);\n\n```\n\n**Hint:** To support method chain, just return `this` from each method in the class.",
          "testCode": "test(\"`Calculator` should be defined.\", () => {\n  expect(Calculator).toBeDefined();\n});\n\ntest(\"The `Calculator` throws an error if it does not receive a `number` type argument to the constructor.\", () => {\n  expect(() => new Calculator()).toThrow(\n    \"Calculator constructor should throw an error if not called with a number argument.\"\n  );\n  expect(() => new Calculator(null)).toThrow(\n    \"Calculator constructor should throw an error if not called with a number argument.\"\n  );\n  expect(() => new Calculator(\"7\")).toThrow(\n    \"Calculator constructor should throw an error if not called with a number argument.\"\n  );\n  expect(() => new Calculator(\"blegh\")).toThrow(\n    \"Calculator constructor should throw an error if not called with a number argument.\"\n  );\n  expect(new Calculator(500)).toBeDefined();\n});\n\ntest(\"An instantiated `Calculator` should have `add`, `subtract`, `multiply` and `divide` methods.\", () => {\n  const x = new Calculator(500);\n  expect(typeof x.add === \"function\").toBe(true);\n  expect(typeof x.subtract === \"function\").toBe(true);\n  expect(typeof x.multiply === \"function\").toBe(true);\n  expect(typeof x.divide === \"function\").toBe(true);\n});\n\ntest(\"The `getValue` method called after initialization should provide the value provided to the constructer.\", () => {\n  let x = new Calculator(500);\n  expect(x.getValue()).toBe(500);\n  x = new Calculator(5);\n  expect(x.getValue()).toBe(5);\n  x = new Calculator(1000.5);\n  expect(x.getValue()).toBe(1000.5);\n  x = new Calculator(10.124324);\n  expect(x.getValue()).toBe(10.124324);\n});\n\ntest(\"Calling `add` with two arguments sets the current value to the result of adding the arguments.\", () => {\n  const x = new Calculator(500);\n  expect(x.add(10, 20).getValue()).toBe(30);\n  expect(x.add(12, 28).getValue()).toBe(40);\n  expect(x.add(1000, 2000).getValue()).toBe(3000);\n  expect(x.add(0.5, 1.5).getValue()).toBe(2);\n  expect(x.add(0.5, 100).getValue()).toBe(100.5);\n});\n\ntest(\"Calling `subtract` with two arguments sets the current value to the result of subracting the arguments.\", () => {\n  const x = new Calculator(500);\n  expect(x.subtract(10, 20).getValue()).toBe(-10);\n  expect(x.subtract(12, 28).getValue()).toBe(-16);\n  expect(x.subtract(1000, 2000).getValue()).toBe(-1000);\n  expect(x.subtract(0.5, 1.5).getValue()).toBe(-1);\n  expect(x.subtract(0.5, 100).getValue()).toBe(-99.5);\n});\n\ntest(\"Calling `multiply` with two arguments sets the current value to the result of multiplying the arguments.\", () => {\n  const x = new Calculator(500);\n  expect(x.multiply(10, 20).getValue()).toBe(200);\n  expect(x.multiply(2, 8).getValue()).toBe(16);\n  expect(x.multiply(1000, 2000).getValue()).toBe(2000000);\n  expect(x.multiply(50, 50.5).getValue()).toBe(2525);\n  expect(x.multiply(99, 100).getValue()).toBe(9900);\n});\n\ntest(\"Calling `divide` with two arguments sets the current value to the result of dividing the arguments.\", () => {\n  const x = new Calculator(500);\n  expect(x.divide(10, 20).getValue()).toBe(0.5);\n  expect(x.divide(2, 2).getValue()).toBe(1);\n  expect(x.divide(1000, 2000).getValue()).toBe(0.5);\n  expect(x.divide(100, 5).getValue()).toBe(20);\n  expect(x.divide(100, 1).getValue()).toBe(100);\n});\n\ntest(\"Calling `add` with one argument should add the argument to the current stored value.\", () => {\n  const x = new Calculator(500);\n  expect(x.add(20).getValue()).toBe(520);\n  expect(x.add(28).getValue()).toBe(548);\n  expect(x.add(1000).getValue()).toBe(1548);\n  expect(x.add(0.5).getValue()).toBe(1548.5);\n  expect(x.add(0.5).getValue()).toBe(1549);\n});\n\ntest(\"Calling `subtract` with one argument should subtract the argument from the current stored value.\", () => {\n  const x = new Calculator(500);\n  expect(x.subtract(20).getValue()).toBe(480);\n  expect(x.subtract(80).getValue()).toBe(400);\n  expect(x.subtract(100).getValue()).toBe(300);\n  expect(x.subtract(300).getValue()).toBe(0);\n  expect(x.subtract(100).getValue()).toBe(-100);\n});\n\ntest(\"Calling `multiply` with one argument should multiply the argument by the current stored value.\", () => {\n  const x = new Calculator(500);\n  expect(x.multiply(2).getValue()).toBe(1000);\n  expect(x.multiply(1).getValue()).toBe(1000);\n  expect(x.multiply(5).getValue()).toBe(5000);\n  expect(x.multiply(2).getValue()).toBe(10000);\n  expect(x.multiply(1).getValue()).toBe(10000);\n});\n\ntest(\"Calling `divide` with one argument should divide the current stored value by the argument.\", () => {\n  const x = new Calculator(500);\n  expect(x.divide(2).getValue()).toBe(250);\n  expect(x.divide(5).getValue()).toBe(50);\n  expect(x.divide(10).getValue()).toBe(5);\n  expect(x.divide(5).getValue()).toBe(1);\n  expect(x.divide(1).getValue()).toBe(1);\n});\n\ntest(\"The `Calculator` class should allow method chaining to apply several operations in series to the current stored value.\", () => {\n  const x = new Calculator(5);\n  let result = x\n    .add(5)\n    .add(5)\n    .add(5)\n    .add(5)\n    .add(5)\n    .add(5)\n    .add(5);\n  expect(result.getValue()).toBe(40);\n\n  result = x\n    .subtract(500, 100)\n    .add(50)\n    .add(50)\n    .divide(100);\n  expect(result.getValue()).toBe(5);\n\n  result = x\n    .multiply(1000, 1000)\n    .divide(1000)\n    .divide(1000)\n    .add(9)\n    .subtract(20);\n  expect(result.getValue()).toBe(-10);\n\n  result = x\n    .divide(1000, 2)\n    .multiply(2)\n    .subtract(999)\n    .multiply(1);\n  expect(result.getValue()).toBe(1);\n\n  result = x\n    .divide(500, 2)\n    .multiply(4)\n    .add(999)\n    .add(1)\n    .add(2000)\n    .multiply(2);\n  expect(result.getValue()).toBe(8000);\n});\n",
          "videoUrl": "",
          "starterCode": "// Your code here\n",
          "solutionCode": "class Calculator {\n  current: number;\n\n  constructor(initialValue: number) {\n    if (!initialValue || typeof initialValue !== \"number\") {\n      throw new Error(\"Initial value is required!\");\n    }\n\n    this.current = initialValue;\n  }\n\n  add(a: number, b?: number) {\n    if (b !== undefined) {\n      this.current = a + b;\n    } else {\n      this.current = this.current + a;\n    }\n\n    return this;\n  }\n\n  subtract(a: number, b?: number) {\n    if (b !== undefined) {\n      this.current = a - b;\n    } else {\n      this.current = this.current - a;\n    }\n\n    return this;\n  }\n\n  multiply(a: number, b?: number) {\n    if (b !== undefined) {\n      this.current = a * b;\n    } else {\n      this.current = this.current * a;\n    }\n\n    return this;\n  }\n\n  divide(a: number, b?: number) {\n    if (b !== undefined) {\n      this.current = a / b;\n    } else {\n      this.current = this.current / a;\n    }\n\n    return this;\n  }\n\n  getValue() {\n    return this.current;\n  }\n}\n",
          "content": ""
        },
        {
          "id": "zweKy6cg",
          "type": "typescript",
          "title": "Tic Tac Toe",
          "instructions": "In this project, we will build Tic\\-Tac\\-Toe as a simple TypeScript program.\n\nIn the editor, you will find several types defined which present the players and game classes for a Tic\\-Tac\\-Toe game. There are also two TypeScript classes `GamePlayer` and `Game` which contain partially implemented methods.\n\nYour job is to complete the implementation of these methods \\(use the type definitions and comments as a reference\\) so that the `Game` class method `playGame` can run an entire round of Tic\\-Tac\\-Toe\\!\n\nThe `playGame` method accepts the two players in the game and executes the game logic \\(this is what you have to implement\\!\\) until a winner is reached, or the game results in a tie. This method should return the game result.\n\nGood luck\\!",
          "testCode": "test(\"The game should conclude and `playGame` should return the winner.\", () => {\n    const board = [\n        [null, null, null],\n        [null, null, null],\n        [null, null, null],\n    ];\n\n    const human = new GamePlayer(\"human\");\n    const machine = new GamePlayer(\"machine\");\n    const game = new Game(board);\n    const winner = game.playGame(human, machine);\n    expect(winner).toBe(\"human\");\n});",
          "videoUrl": "",
          "starterCode": "// Player types\ntype Human = \"human\";\ntype Machine = \"machine\";\ntype Player = Machine | Human;\n\n// Game types\ntype Tile = Player | null;\ntype Board = Tile[][];\ntype GameResult = Player | \"tie\";\n\ninterface TicTacToePlayer {\n  play: (board: Board) => Board;\n}\n\nclass GamePlayer implements TicTacToePlayer {\n  player: Player;\n\n  constructor(player: Player) {\n    this.player = player;\n  }\n\n  play(board: Board): Board {\n    // This method takes a game board and makes a move. Where will you play?\n    // [TODO]: Your code here:\n    return [];\n  }\n}\n\ninterface TicTacToeGame {\n  board: Board;\n  checkBoard: (board: Board) => GameResult | null;\n  playGame: (\n    humanPlayer: TicTacToePlayer,\n    machinePlayer: TicTacToePlayer\n  ) => GameResult;\n}\n\nclass Game implements TicTacToeGame {\n  board: Board;\n  constructor(board: Board) {\n    this.board = board;\n  }\n\n  checkBoard(board: Board): GameResult | null {\n    // This method checks the game board and returns a GameResult when the game\n    // is concluded, or null if the game is still in progress.\n    // [TODO]: Your code here:\n    return null;\n  }\n\n  playGame(\n    humanPlayer: TicTacToePlayer,\n    machinePlayer: TicTacToePlayer\n  ): GameResult {\n    // This method executes the game logic!\n    // [TODO]: Your code here:\n    return \"tie\";\n  }\n\n  printBoard() {\n    for (const row of this.board) {\n      console.log(row);\n    }\n  }\n}\n",
          "solutionCode": "/**\n * Define Game Types:\n */\ntype Machine = \"machine\";\ntype Human = \"human\";\ntype Player = Machine | Human;\ntype Tile = Player | null;\ntype Board = Tile[][];\ntype GameResult = Player | \"tie\";\n\n/**\n * Create Player and Game classes:\n */\ninterface TicTacToePlayer {\n  play: (board: Board) => void;\n}\n\n/**\n * Create the player class.\n */\nclass GamePlayer implements TicTacToePlayer {\n  player: Player;\n\n  constructor(player: Player) {\n    this.player = player;\n  }\n\n  play(board: Board) {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board.length; j++) {\n        const tile = board[i][j];\n        if (tile === null) {\n          board[i][j] = this.player;\n          return board;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Create the game class.\n */\ninterface TicTacToeGame {\n  board: Board;\n  checkBoard: (board: Board) => GameResult | null;\n  playGame: (\n    humanPlayer: TicTacToePlayer,\n    machinePlayer: TicTacToePlayer\n  ) => GameResult;\n}\n\nclass Game implements TicTacToeGame {\n  board: Board;\n  constructor(board: Board) {\n    this.board = board;\n  }\n\n  checkBoard(board: Board): GameResult | null {\n    const countNulls = (board: Board) => {\n      const nulls = board.reduce(\n        (nullCount, row) => row.reduce((c, x) => (x === null ? c + 1 : c), 0),\n        0\n      );\n      if (nulls === 0) {\n        return \"tie!\";\n      }\n    };\n\n    const checkRows = (rowIndex: number = 0): Tile => {\n      const [left, middle, right] = board[rowIndex];\n      if (left === middle && middle === right) {\n        if (left !== null) {\n          return left;\n        } else if (rowIndex < board.length - 1) {\n          return checkRows(rowIndex + 1);\n        } else {\n          return null;\n        }\n      }\n\n      return null;\n    };\n\n    const checkColumns = (columnIndex: number = 0): Tile => {\n      const top = board[0][columnIndex];\n      const middle = board[1][columnIndex];\n      const bottom = board[2][columnIndex];\n\n      if (top === middle && middle === bottom) {\n        if (top !== null) {\n          return top;\n        } else if (columnIndex < board[0].length - 1) {\n          return checkColumns(columnIndex + 1);\n        } else {\n          return null;\n        }\n      }\n\n      return null;\n    };\n\n    let winner: Tile = null;\n\n    // Check rows\n    winner = checkRows();\n    if (winner) {\n      return winner;\n    }\n\n    // Check columns\n    winner = checkColumns();\n    if (winner) {\n      return winner;\n    }\n\n    // Get coordinates for diagonal tiles\n    const topLeft = board[0][0];\n    const topRight = board[0][2];\n    const middle = board[0][0];\n    const bottomLeft = board[2][0];\n    const bottomRight = board[2][2];\n\n    // Check top left to bottom right diagonal\n    if (topLeft === middle && middle === bottomLeft) {\n      if (topLeft !== null) {\n        return topLeft;\n      }\n    }\n\n    // Check bottom left to top right diagonal\n    if (bottomLeft === middle && middle === topRight) {\n      if (bottomLeft !== null) {\n        return bottomLeft;\n      }\n    }\n\n    return null;\n  }\n\n  turn(player: TicTacToePlayer, nextPlayer: TicTacToePlayer): GameResult {\n    player.play(this.board);\n    const winner = this.checkBoard(this.board);\n    if (winner !== null) {\n      return winner;\n    } else {\n      return this.turn(nextPlayer, player);\n    }\n  }\n\n  playGame(\n    humanPlayer: TicTacToePlayer,\n    machinePlayer: TicTacToePlayer\n  ): GameResult {\n    return this.turn(humanPlayer, machinePlayer);\n  }\n\n  printBoard() {\n    for (const row of this.board) {\n      console.log(row);\n    }\n  }\n}\n\n/**\n * Instantiate game pieces:\n */\nconst board = [\n  [null, null, null],\n  [null, null, null],\n  [null, null, null],\n];\n\nconst human = new GamePlayer(\"human\");\nconst machine = new GamePlayer(\"machine\");\nconst game = new Game(board);\n\n/**\n * Play the game1\n */\nconst winner = game.playGame(human, machine);\ngame.printBoard();\n",
          "content": ""
        },
        {
          "id": "7B@lwOBb7",
          "type": "typescript",
          "title": "Game Board Navigator",
          "instructions": "For this project, we will implement a class which represents a game board. You can think of the board like a grid where each space is represented by `x` and `y` coordinates\\. The `GameBoardNavigator` should expose a method `movePlayer` which accepts a `playerId` and a direction argument. The board will track the positions of players and allow the players to move around.\n\nThe game board class should satisfy these properties:\n\n* The board can be instantiated with a size and list of players, see constructor type definition below.\n* Players can be moved using a `movePlayer` method, see definition below.\n* The definition of a player includes an `id`, `y`, and `x` fields\\. The id is unique, and the y and x values represent the player's position on the board.\n* Two players cannot occupy the same square.\n* Players cannot occupy squares outside of the board dimensions.\n* Attempting to move a player to a square which is occupied or invalid will throw an error.\n* Player ids are unique: the board constructor will throw an error if multiple players are received with the same id.\n* The game board provides a method `getPlayers` which returns all of the players currently on the board.\n\n\n```\n// Constructor method:\ntype ConstructorMethod = (boardSize: number, players: Player[]): void;\n\n// Move player method:\ntype MovePlayerFunction = (playerId: string, direction: string) => void;\n// Where direction should be \"left\", \"right\", \"up\", or \"down\".\n\n// Get players method to return all the players with their current positions on the board\ntype GetPlayersFunction = () => Player[];\n\n```\n\nYou are free to implement the class anyway you want as long as it satisfies the above constraints\\! An obvious solution is to use a 2 dimensional array. Could you build a different solution?\n\nTry to think about code organization, readability, and extensibility as you design your solution. Good luck\\!",
          "testCode": "const sortPlayers = (players) =>\n  players.slice().sort((a, b) => (a.id > b.id ? 1 : -1));\n\nconst matchPlayers = (playersA, playersB) => {\n  expect(sortPlayers(playersA)).toEqual(sortPlayers(playersB));\n};\n\ntest(\"`GameBoardNavigator` should be defined.\", () => {\n  expect(GameBoardNavigator).toBeDefined();\n});\n\ntest(\"The `GameBoardNavigator` class should provide a constructor which accepts a boardSize and a list of starting players.\", () => {\n  const game = new GameBoardNavigator(5, []);\n  expect(typeof game.movePlayer === \"function\").toBe(true);\n});\n\ntest(\"An instantiated `GameBoardNavigator` class should be expose a method `movePlayer`.\", () => {\n  const game = new GameBoardNavigator(5, []);\n  expect(typeof game.movePlayer === \"function\").toBe(true);\n});\n\ntest(\"An instantiated `GameBoardNavigator` class should be expose a method `getPlayers`.\", () => {\n  const game = new GameBoardNavigator(5, []);\n  expect(typeof game.getPlayers === \"function\").toBe(true);\n});\n\ntest(\"The `GameBoardNavigator` class should populate the board correctly with the initial list of players.\", () => {\n  let playersList = [\n    {\n      x: 1,\n      y: 2,\n      id: __id(),\n    },\n    {\n      x: 3,\n      y: 0,\n      id: __id(),\n    },\n    {\n      x: 2,\n      y: 2,\n      id: __id(),\n    },\n    {\n      x: 2,\n      y: 4,\n      id: __id(),\n    },\n  ];\n\n  let game = new GameBoardNavigator(5, playersList);\n  matchPlayers(game.getPlayers(), playersList);\n\n  playersList = [\n    {\n      x: 11,\n      y: 4,\n      id: __id(),\n    },\n    {\n      x: 1,\n      y: 4,\n      id: __id(),\n    },\n    {\n      x: 0,\n      y: 0,\n      id: __id(),\n    },\n    {\n      x: 7,\n      y: 7,\n      id: __id(),\n    },\n    {\n      x: 8,\n      y: 8,\n      id: __id(),\n    },\n    {\n      x: 13,\n      y: 13,\n      id: __id(),\n    },\n    {\n      x: 12,\n      y: 14,\n      id: __id(),\n    },\n    {\n      x: 6,\n      y: 5,\n      id: __id(),\n    },\n  ];\n\n  game = new GameBoardNavigator(15, playersList);\n  matchPlayers(game.getPlayers(), playersList);\n});\n\ntest(\"The `GameBoardNavigator` class constructor should throw an error if it receives multiple starting players with the same `id`.\", () => {\n  expect(GameBoardNavigator).toBeDefined();\n  let playersList = [\n    {\n      x: 1,\n      y: 2,\n      id: \"0asdf80adsf\",\n    },\n    {\n      x: 3,\n      y: 0,\n      id: \"0asdf80adsf\",\n    },\n  ];\n\n  expect(() => new GameBoardNavigator(15, playersList)).toThrow(\n    \"Initialization with multiple players with the same id should throw an error.\"\n  );\n\n  playersList = [\n    {\n      x: 1,\n      y: 2,\n      id: \"f7df7d7fsaf7as7f\",\n    },\n    {\n      x: 3,\n      y: 0,\n      id: \"f7df7d7fsaf7as7f\",\n    },\n  ];\n\n  expect(() => new GameBoardNavigator(15, playersList)).toThrow(\n    \"Initialization with multiple players with the same id should throw an error.\"\n  );\n});\n\ntest(\"The `GameBoardNavigator` class constructor should throw an error if any starting player is off the board.\", () => {\n  expect(GameBoardNavigator).toBeDefined();\n  let playersList = [\n    {\n      x: 0,\n      y: 7,\n      id: __id(),\n    },\n    {\n      x: 3,\n      y: 0,\n      id: __id(),\n    },\n  ];\n\n  expect(() => new GameBoardNavigator(5, playersList)).toThrow(\n    \"Initialization players can be outside of the game board boundaries.\"\n  );\n\n  playersList = [\n    {\n      x: 1,\n      y: 2,\n      id: __id(),\n    },\n    {\n      x: 3,\n      y: 25,\n      id: __id(),\n    },\n  ];\n\n  expect(() => new GameBoardNavigator(15, playersList)).toThrow(\n    \"Initialization players can be outside of the game board boundaries.\"\n  );\n\n  playersList = [\n    {\n      x: -1,\n      y: 2,\n      id: __id(),\n    },\n    {\n      x: 3,\n      y: 25,\n      id: __id(),\n    },\n  ];\n\n  expect(() => new GameBoardNavigator(15, playersList)).toThrow(\n    \"Initialization players can be outside of the game board boundaries.\"\n  );\n\n  playersList = [\n    {\n      x: 1,\n      y: 2,\n      id: __id(),\n    },\n    {\n      x: 3,\n      y: 250,\n      id: __id(),\n    },\n  ];\n\n  expect(() => new GameBoardNavigator(150, playersList)).toThrow(\n    \"Initialization players can be outside of the game board boundaries.\"\n  );\n});\n\ntest(\"The `movePlayer` method should throw an error if it receives an invalid `direction` argument\", () => {\n  let game = new GameBoardNavigator(5, [{ id: \"abc\", x: 1, y: 1 }]);\n  expect(() => game.movePlayer(\"abc\", \"somewhere\")).toThrow(\n    \"The movePlayer method should only accepts directions: left|right|up|down.\"\n  );\n\n  game = new GameBoardNavigator(5, [{ id: \"abc\", x: 1, y: 1 }]);\n  expect(() => game.movePlayer(\"abc\", 5)).toThrow(\n    \"The movePlayer method should only accepts directions: left|right|up|down.\"\n  );\n\n  game = new GameBoardNavigator(5, [{ id: \"abc\", x: 1, y: 1 }]);\n  expect(() => game.movePlayer(\"abc\", null)).toThrow(\n    \"The movePlayer method should only accepts directions: left|right|up|down.\"\n  );\n});\n\ntest(\"The `movePlayer` method should throw an error if a request is made which would move a player off the board.\", () => {\n  let game = new GameBoardNavigator(5, [{ id: \"abc\", x: 1, y: 1 }]);\n  expect(() => {\n    game.movePlayer(\"abc\", \"left\");\n    game.movePlayer(\"abc\", \"left\");\n    game.movePlayer(\"abc\", \"left\");\n  }).toThrow(\n    \"The movePlayer method should throw an error if a request would move a player off the board.\"\n  );\n\n  game = new GameBoardNavigator(5, [{ id: \"abc\", x: 1, y: 1 }]);\n  expect(() => {\n    game.movePlayer(\"abc\", \"right\");\n    game.movePlayer(\"abc\", \"right\");\n    game.movePlayer(\"abc\", \"right\");\n    game.movePlayer(\"abc\", \"right\");\n    game.movePlayer(\"abc\", \"right\");\n    game.movePlayer(\"abc\", \"right\");\n  }).toThrow(\n    \"The movePlayer method should throw an error if a request would move a player off the board.\"\n  );\n  game = new GameBoardNavigator(50, [{ id: \"abc\", x: 45, y: 45 }]);\n  expect(() => {\n    game.movePlayer(\"abc\", \"down\");\n    game.movePlayer(\"abc\", \"down\");\n    game.movePlayer(\"abc\", \"down\");\n    game.movePlayer(\"abc\", \"down\");\n    game.movePlayer(\"abc\", \"down\");\n    game.movePlayer(\"abc\", \"down\");\n  }).toThrow(\n    \"The movePlayer method should throw an error if a request would move a player off the board.\"\n  );\n});\n\ntest(\"The `movePlayer` method should throw an error if a request is made which would move a player onto an occupied square.\", () => {\n  let game = new GameBoardNavigator(5, [\n    { id: \"AAA\", x: 1, y: 1 },\n    { id: \"BBB\", x: 2, y: 2 },\n  ]);\n  expect(() => {\n    game.movePlayer(\"AAA\", \"right\");\n    game.movePlayer(\"AAA\", \"down\");\n  }).toThrow(\n    \"The movePlayer method should throw an error if a request is made which would move a player onto an occupied square.\"\n  );\n\n  game = new GameBoardNavigator(10, [\n    { id: \"AAA\", x: 1, y: 1 },\n    { id: \"BBB\", x: 5, y: 5 },\n  ]);\n  game.movePlayer(\"AAA\", \"right\");\n  game.movePlayer(\"AAA\", \"right\");\n  game.movePlayer(\"AAA\", \"right\");\n  game.movePlayer(\"AAA\", \"right\");\n  game.movePlayer(\"AAA\", \"down\");\n  game.movePlayer(\"AAA\", \"down\");\n  game.movePlayer(\"AAA\", \"down\");\n  expect(() => {\n    game.movePlayer(\"AAA\", \"down\");\n  }).toThrow(\n    \"The movePlayer method should throw an error if a request is made which would move a player onto an occupied square.\"\n  );\n\n  game = new GameBoardNavigator(10, [\n    { id: \"AAA\", x: 1, y: 1 },\n    { id: \"BBB\", x: 5, y: 5 },\n  ]);\n  game.movePlayer(\"AAA\", \"right\");\n  game.movePlayer(\"AAA\", \"right\");\n  game.movePlayer(\"AAA\", \"right\");\n  game.movePlayer(\"AAA\", \"right\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"up\");\n  expect(() => {\n    game.movePlayer(\"BBB\", \"up\");\n  }).toThrow(\n    \"The movePlayer method should throw an error if a request is made which would move a player onto an occupied square.\"\n  );\n\n  game = new GameBoardNavigator(10, [\n    { id: \"AAA\", x: 3, y: 3 },\n    { id: \"BBB\", x: 8, y: 8 },\n  ]);\n  game.movePlayer(\"AAA\", \"up\");\n  game.movePlayer(\"AAA\", \"up\");\n  game.movePlayer(\"AAA\", \"left\");\n  game.movePlayer(\"AAA\", \"left\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"left\");\n  game.movePlayer(\"BBB\", \"left\");\n  game.movePlayer(\"BBB\", \"left\");\n  game.movePlayer(\"BBB\", \"left\");\n  game.movePlayer(\"BBB\", \"left\");\n  game.movePlayer(\"BBB\", \"left\");\n  expect(() => {\n    game.movePlayer(\"BBB\", \"left\");\n  }).toThrow(\n    \"The movePlayer method should throw an error if a request is made which would move a player onto an occupied square.\"\n  );\n});\n\ntest(\"The `GameBoardNavigator` should track the movements of players correctly.\", () => {\n  let game = new GameBoardNavigator(5, [\n    { id: \"AAA\", x: 1, y: 1 },\n    { id: \"BBB\", x: 2, y: 2 },\n  ]);\n  game.movePlayer(\"AAA\", \"up\");\n  game.movePlayer(\"AAA\", \"left\");\n  game.movePlayer(\"BBB\", \"right\");\n  game.movePlayer(\"BBB\", \"right\");\n  game.movePlayer(\"BBB\", \"down\");\n  game.movePlayer(\"BBB\", \"down\");\n  let expected = [\n    { id: \"AAA\", x: 0, y: 0 },\n    { id: \"BBB\", x: 4, y: 4 },\n  ];\n  matchPlayers(game.getPlayers(), expected);\n\n  game = new GameBoardNavigator(5, [\n    { id: \"AAA\", x: 1, y: 1 },\n    { id: \"BBB\", x: 2, y: 2 },\n  ]);\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"up\");\n  game.movePlayer(\"BBB\", \"left\");\n  game.movePlayer(\"BBB\", \"left\");\n  expected = [\n    { id: \"BBB\", x: 0, y: 0 },\n    { id: \"AAA\", x: 1, y: 1 },\n  ];\n  matchPlayers(game.getPlayers(), expected);\n\n  let playersList = [\n    { id: \"A\", x: 0, y: 0 },\n    { id: \"B\", x: 1, y: 1 },\n    { id: \"C\", x: 29, y: 29 },\n    { id: \"D\", x: 27, y: 27 },\n    { id: \"E\", x: 45, y: 45 },\n    { id: \"F\", x: 35, y: 35 },\n    { id: \"G\", x: 25, y: 25 },\n    { id: \"H\", x: 20, y: 20 },\n  ];\n  game = new GameBoardNavigator(50, playersList);\n  game.movePlayer(\"A\", \"down\");\n  game.movePlayer(\"B\", \"right\");\n  game.movePlayer(\"B\", \"right\");\n  game.movePlayer(\"B\", \"right\");\n  game.movePlayer(\"B\", \"right\");\n  game.movePlayer(\"C\", \"up\");\n  game.movePlayer(\"C\", \"up\");\n  game.movePlayer(\"C\", \"up\");\n  game.movePlayer(\"C\", \"up\");\n  game.movePlayer(\"C\", \"up\");\n  game.movePlayer(\"C\", \"up\");\n  game.movePlayer(\"C\", \"up\");\n  game.movePlayer(\"C\", \"up\");\n  game.movePlayer(\"D\", \"down\");\n  game.movePlayer(\"D\", \"right\");\n  game.movePlayer(\"E\", \"up\");\n  game.movePlayer(\"E\", \"up\");\n  game.movePlayer(\"F\", \"up\");\n  game.movePlayer(\"F\", \"up\");\n  game.movePlayer(\"G\", \"up\");\n  game.movePlayer(\"G\", \"up\");\n  game.movePlayer(\"H\", \"up\");\n  game.movePlayer(\"H\", \"up\");\n\n  expected = [\n    { id: \"A\", x: 0, y: 1 },\n    { id: \"B\", x: 5, y: 1 },\n    { id: \"C\", x: 29, y: 21 },\n    { id: \"D\", x: 28, y: 28 },\n    { id: \"E\", x: 45, y: 43 },\n    { id: \"F\", x: 35, y: 33 },\n    { id: \"G\", x: 25, y: 23 },\n    { id: \"H\", x: 20, y: 18 },\n  ];\n  matchPlayers(game.getPlayers(), expected);\n\n  game = new GameBoardNavigator(50, [\n    { id: \"A\", x: 0, y: 0 },\n    { id: \"X\", x: 0, y: 49 },\n  ]);\n  let count = 0;\n  while (count < 49) {\n    game.movePlayer(\"A\", \"down\");\n    game.movePlayer(\"A\", \"right\");\n    game.movePlayer(\"X\", \"up\");\n    count++;\n  }\n  expected = [\n    { id: \"A\", x: 49, y: 49 },\n    { id: \"X\", x: 0, y: 0 },\n  ];\n  matchPlayers(game.getPlayers(), expected);\n});\n",
          "videoUrl": "",
          "starterCode": "// Your code here",
          "solutionCode": "type MoveDirection = \"left\" | \"right\" | \"up\" | \"down\";\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\ninterface Player extends Coordinate {\n  id: string;\n}\n\ntype Board = Array<Array<Player | null>>;\n\nclass GameBoardNavigator {\n  board: Board = [];\n  playerLocationMap: Map<string, Coordinate> = new Map();\n\n  constructor(boardSize: number, players: Player[]) {\n    // Set the board dimensions\n    const board = new Array(boardSize);\n    for (let i = 0; i < board.length; i++) {\n      board[i] = new Array(boardSize).fill(null);\n    }\n\n    // Set the board\n    this.board = board;\n\n    // Place all the players on the board\n    for (const player of players) {\n      const { x, y, id } = player;\n      if (this.playerLocationMap.has(id)) {\n        throw new Error(`Player already received with this id: ${id}`);\n      }\n      this.placePlayer(player, y, x);\n    }\n  }\n\n  placePlayer(player: Player, y: number, x: number) {\n    // Validate the coordinates first\n    const yValid = y < 0 || y >= this.board.length;\n    const xValid = x < 0 || x >= this.board.length;\n    if (yValid) {\n      throw new Error(\"Coordinates are off the board!\");\n    } else if (xValid) {\n      throw new Error(\"Coordinates are off the board!\");\n    }\n\n    const existing = this.board[y][x];\n    if (existing) {\n      throw new Error(\n        `Square {${y},${x}} is taken by player id: ${existing.id}!`\n      );\n    } else {\n      // Get current coordinates\n      const coordinates = this.playerLocationMap.get(player.id);\n      if (coordinates) {\n        const originalY = player.y;\n        const originalX = player.x;\n        // Reset the original player square, only if there are existing coordinates\n        this.board[originalY][originalX] = null;\n      }\n      // Update the player coordinates\n      player.y = y;\n      player.x = x;\n      // Update the player location map coordinates\n      this.playerLocationMap.set(player.id, { y, x });\n      // Update the player position on the board\n      this.board[y][x] = player;\n    }\n  }\n\n  movePlayer(playerId: string, direction: MoveDirection) {\n    const coordinates = this.playerLocationMap.get(playerId);\n    if (!coordinates) {\n      throw new Error(\"Invalid player id!\");\n    }\n\n    const player = this.board[coordinates.y][coordinates.x];\n\n    if (!player) {\n      throw new Error(\"No player found!\");\n    }\n\n    switch (direction) {\n      case \"left\": {\n        const y = player.y;\n        const x = player.x - 1;\n        this.placePlayer(player, y, x);\n        break;\n      }\n      case \"right\": {\n        const y = player.y;\n        const x = player.x + 1;\n        this.placePlayer(player, y, x);\n        break;\n      }\n      case \"up\": {\n        const y = player.y - 1;\n        const x = player.x;\n        this.placePlayer(player, y, x);\n        break;\n      }\n      case \"down\": {\n        const y = player.y + 1;\n        const x = player.x;\n        this.placePlayer(player, y, x);\n        break;\n      }\n      default: {\n        throw new Error(`Invalid direction of ${direction} received!`);\n      }\n    }\n  }\n\n  getPlayers() {\n    const players: Player[] = [];\n    this.playerLocationMap.forEach(({ y, x }) => {\n      const player = this.board[y][x];\n      if (player) {\n        players.push(player);\n      }\n    });\n    return players;\n  }\n\n  print() {\n    console.log(\"Board:\");\n    for (const x of this.board) {\n      console.log(x);\n    }\n  }\n}\n",
          "content": ""
        },
        {
          "id": "f6WLLWRXf",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section we will present guided project explanations for the programming project challenges. These are meant to serve as an illustration of what a solution to these projects can look like. Ideally, you should try to view these after solving the project yourself. However, if you have struggled with the project and cannot complete it after multiple attempts you are welcome to view the guided project to find a way to solve it."
        },
        {
          "id": "@pxmsKa7M",
          "type": "media",
          "title": "Build a Calculator Guided Project",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/F2XhvqIcvVs",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will walk through a solution for the Build a Calculator project."
        },
        {
          "id": "CktrOyVg",
          "type": "media",
          "title": "Tic Tac Toe Guided Project",
          "instructions": "ic",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/TLJeww1EQ2w",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will walk through an example of how the Tic Tac Toe project could be built."
        },
        {
          "id": "DVVxNTYmQ",
          "type": "media",
          "title": "Game Board Navigator Guided Project",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/D6N5Ks2moYE",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will walk through a solution for the Game Board Navigator project."
        },
        {
          "id": "qPDY@y0fm",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here is a collection of special topic lessons for the programming fundamentals section. These topics cover additional material which is relevant and useful to know, but either not as important to include in the core challenges or not as well suited to the testable challenge environment.\n\nIn these special topics we will cover topics such as:\n\n* JavaScript vs. TypeScript, the history/evolution of JavaScript, TypeScript, and web programming.\n* Single\\-threaded vs. multi\\-threaded programming concepts.\n* Language runtime and execution concepts \\(heap, memory, call\\-stack, etc.\\).\n* Esoteric JavaScript concepts \\(such as prototypical inheritance, `this`, etc.\\).\n* Time and space complexity.\n* How to debug problems when you don't know the answer\\!\n\n"
        },
        {
          "id": "if2EAwsyp",
          "type": "media",
          "title": "Programming Styles",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Schools of thought\n\n* How you write your software\n* How you architect it\n* How you think about it\n\n\nThat's what we're talking about today.\n# A classic dichotomy\n\nHumans have a tendency to separate complex subjects into two oversimplified groups and programmers, being human, are no different.\n\nWe often group programs under the following two banners:\n\n* Object Oriented Programming \\(OOP\\)\n   * We have a section about this: [Classes](/workspace/uyjd$DG@$)\n* Functional Programming \\(FP\\)\n   * We also have a section about this: [Functional Programming](/workspace/jxRxi1j5A)\n\n\n## A very qualitative comparison\n\nLet's take a look at some of the characteristics of the two approaches in a very qualitative way. \n|  | **OOP** | **FP** |\n|:--- |:--- |:--- |\n| Amount of code | More | Less |\n| Use of state | Maximized | Minimized |\n| Approachability | 8/10 | 5/10 |\n| Ease of testing | 5/10 | 9/10 |\n| Code Composability | 3/10 | 10/10 |\n\n#### Amount of code\n\nOOP code tends to be longer than FP code. This is because FP code is mostly functions. OOP code will have many functions too, but they will usually be methods of classes which means more code generally speaking.\n\nThis is neither good or bad. The guideline around code length is to be concise. In other words, write code that is clear and readable, and do it with as little code as possible. Clear and readable is the priority here, not the amount of code.\n\n#### Use of state\n\nAdding state makes functions less composable and less predicable, so FP code tends to try to relegate state to one part of the app and nowhere else. OOP code _tends_ to be the opposite. In TypeScript there's no need for classes unless you need state, so it stands to reason that when you already have classes everywhere you'd be more tempted to add state.\n\nClasses can be used very effectively for functional programming, so the statement that OOP maximizes state usage is a tendency but certainly not a rule.\n\n#### Approachability\n\nOOP lends itself to human intuitions about the world better than functional programming. \n\n* OOP is hierarchical. Hierarchies are a familiar concept be it from biology or workplace boss\\-employee relationships.\n* OOP is all about nouns while FP is all about verbs. In the real world we think of nouns \\(people, animals, houses, etc..\\) and verbs as closely associated. A person walks, a dog barks. In the land of FP your verbs operate on various forms of data, which is much less intuitive.\n\n\nFurthermore, OOP is more prevalent so it's more likely a new student to programming has encountered OOP in some form even without knowing it.\n\nFP isn't necessarily unintuitive to begin with, but once you start getting into [higher order functions](/workspace/jxRxi1j5A#h-higher-order-functions) and recursion there's a bit of a learning curve.\n\n#### Ease of testing\n\nWe'll get into this later in the course, but the simple truth is that it's easier to test functions that it is to test classes. Testing your code means it will break less, which means less work for Future You.\n\n#### Code composability\n\nComposition is even more powerful than simple code reusability, which often means using a function to do the same thing in more than one place in a codebase. Composability on the other hand is about reusing existing code to create new logic and new results. It's not just about avoiding extra typing, it's about building your own abstractions that can be reused in many places.\n\nThink of the array methods as an example. You have methods like `join`, `slice`, `map`, `filter`, `reduce`, etc. These can all be reused in many different ways. They core functionality is operating on an array in some way, but they don't care whats in the array.\n# Fervent Programmers\n\nWant to get into a heated argument with a programmer? Find out whether they prefer OOP or FP and start extolling the benefits of the other in front of them. Some impassioned arguments may arise.\n\nMany programmers once they've found a way they like to program will stick to it and sometimes even begin to think other ways are inferior. This is fine, everyone's welcome to their opinion, but it may come as a surprise if you thought that we were all cold logicians dispassionately pursuing truth and occasionally writing code.\n# Learn Both\n\nFor two reasons:\n\n1. You can't judge which you prefer, let alone which is better, without knowing both styles.\n1. You have to. JavaScript \\(and thus TypeScript\\) is quite flexible. You can write very OOP code and very FP code, even in the same codebase. In order to successfully [read a lot of code](/workspace/gyGd9$$SJ) you will need to understand both. \n\n"
        },
        {
          "id": "gyGd9$$SJ",
          "type": "media",
          "title": "Reading Code",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Throughout this course we've had you writing _a lot_ of code, and that's quite intentional. You need to write a lot of code to get good at programming. Repetition of the same concepts, albeit from different angles, is critical to learning programming or anything in life.\n\nThat being said, the following might surprise you:\n\n> Programmers read more code than they write. ++Much more.++\n\nAs a programmer you will _read_ **at least** an order of magnitude more code than you right. Why is this? \n# Collaborative Coding\n\nMost \\(likely **all**\\) software you interact with regularly is written by more than one person. Within a company you work together with other programmers all making contributions to the same codebase. If you can't comfortably read code you're going to be very limited in what you can accomplish. \n\nIn rare circumstances you may be the original creator of some large part of the code or even the whole codebase. In this case other people have to ready **your** code\\. Sounds great, right? Not if you want a productive team. Your coworkers will be adding code constantly, either shrinking the portion of the codebase you're comfortable with or constantly having to argue with you about changes that don't look and feel like your existing code. It's a bad situation and both you and your coworkers will be the worse for it if you don't quickly get comfortable reading other peoples code.\n# Lone Wolf Coding\n\nThis is where the only programmer working on a codebase is you, and even for professional programmers it's quite common. \n\nFor example, on many of my personal projects I'm the only programmer. This means I can do whatever I want. Sounds great, right? Well, in reality... \n\n> Even solo projects have two people working on them: ++You and Future You++ 🤯\n\nThis may sound silly, but I'm 100% serious. Future You will read some of the code you write and think \"What was this person thinking\\!\" before proceeding to rip out a handful of hair. **This will happen**, which is why it's highly desirable to _write_ clean, intelligible, coherent code in the present because Future You will be **reading** it\\.\n# Becoming Literate\n\nWhen you first start out programming reading code other people wrote can be very intimidating. Even reading your own code can be intimidating\\! You might even dread reading code you wrote previously. However, there is hope. \n\nThe pain will pass, and you will get used to it. With enough practice you can read code as well as prose. In fact, with practice you will rarely need to run code in order to know what it does. You can just look at it and you will know, or at least have a good enough idea to use the code.\n\nLiteracy in TypeScript is much like literacy in your native language: it's not an ability you were born with, you had to learn, and learning took time.\n\nThe good news is **programming languages are not nearly as complex as human languages**, so you will learn quickly.\n# If You Can Read You Can Write\n\nReading lots of code will, without a doubt, hands down, 100% make you a better programmer. There's an easy analogy here: If you want to be a better writer of prose it will help if you're also a voracious _reader_ of prose. Being \"well\\-read\" gives you a larger vocabulary, exposure to new and innovative sentence structures as well as giving you a sense of writing style. All the same applies for coding.\n\nAs a reader of code you will both develop your own personal style and learn what it is. You will find other programmers who's code you love and those who's code you can't stand. You will learn to appreciate beautiful architecture that not only works but works consistently without hundreds of `if` statements to handle edge cases.\n# Like Writing, but With Superpowers\n\nThe most important reason to read lots of code though is to learn how to build new things, or build the things you are already building better. For example:\n\n* Do you want to learn how to build a game? You can read through the source code of [Doom for free online](https://github.com/id-Software/DOOM) along with [many](https://github.com/Anuken/Mindustry) [other](https://github.com/id-Software/Quake) [open\\-source](https://github.com/simhacker/micropolis) [games](https://github.com/freeciv/freeciv). \n* Do you want to know how operating systems work? The [Linux source code is freely available](https://github.com/torvalds/linux) for you to peruse, download and learn from.\n* What about how to build a [programming language](https://github.com/python/cpython), a [web browser](https://firefox-source-docs.mozilla.org/contributing/how_to_contribute_firefox.html#clone-the-sources), a [robot](https://github.com/kiloreux/awesome-robotics)?\n\n\nThe projects linked above are all large and intimidating, but that's just to give you an idea of what's possible. \n\nYou can cals find a plethora of code online showing you how to do small, individual tasks. Like [finding the shortest path between two points](https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/dijkstra) \\(ever wonder how map apps can give you directions?\\). \n\n> **A word of caution:** Reading a lot of code will not only make you a better programmer, it will also make you a more opinionated programmer. You may start to wonder why your coworkers or other programmers online don't simply build better software. So much sloppy code\\!\n> However, it's important to remember that programming is a team sport. Be empathetic, listen, and above all keep an open mind. Having an open mind is how you will learn enough to have opinions in the first place. Don't lose that openness once you start to feel \"well read.\" \n# Conclusion\n\nRead more code, become a better programmer."
        },
        {
          "id": "$BC2mfFgY",
          "type": "media",
          "title": "Troubleshooting Problems When Coding",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/rbWv8Pnwt5Y",
          "starterCode": "",
          "solutionCode": "",
          "content": "There are a few important rules to lay down in the beginning of your journey to become a programmer:\n\n* You don't have to memorize everything.\n* It's okay to forget things.\n* You can always ask Google.\n* StackOverflow, GitHub, MDN, and technical documentation are your new best friends.\n\n---\n# The Detective Methodology\n\nOften times when programming you will find yourself in a situation where you have either forgotten some specific syntax, or, you are using a data structure or build\\-in library method which you have not used before and you know _what_ you want to do but not _how_ to do it exactly. Whenever you reach this state, you are only \\(usually\\) a few well phrased questions away from finding the answers you need.\n\nFor example, imagine you are working with a `Map` and you need to iterate through all the entries in the map but you forget exactly how to do this. Don't panic\\! Simply pause and open Google and search:\n\n> \"How to iterate through all the entries of a map in JavaScript\"\n\nOr any other concise equivalent question.\n\nYou want to formulate a question to ask Google, or your favorite search engine, which includes enough specifics for you to get the relevant answers you are looking for.\n\n* Include the ++language you are using++. Unless your question is specific to TypeScript \\(e.g. related to type definitions, or TypeScript compilation, etc.\\), we recommend using JavaScript to narrow the result selection because there are simply more answers out there for JavaScript questions because JavaScript has existed for around four times as long as TypeScript. And, of course, practically all valid code solutions you find in JavaScript will work in TypeScript.\n* Include ++specific words like method names, data structures, or keywords++ to help find exact, relevant answers.\n\n# Sifting Through the Results\n\nOnce you have some search results, we recommend looking through the top few hits and seeing if anything appears to match your query. Give more credence to the following:\n\n* [StackOverflow](https://stackoverflow.com/): The go\\-to resource for answers to programming questions online.\n* [MDN](https://developer.mozilla.org/en-US/): Mozilla web and JavaScript official technical reference documentation.\n* [W3Schools](https://www.w3schools.com/): Another useful and simple to read reference for web technologies.\n* [GitHub/GitHub Issues](https://github.com/): Source code and issues for open source software projects.\n* [npm](https://www.npmjs.com/) \\(Node Package Manager\\): Once you start installing Node modules \\(you will soon\\), npm will become another invaluable resource you visit frequently.\n\n\nThese are the big ones. As you start to advance to using other technologies, like React, NodeJS, and so on, you may find yourself browsing their documentation or GitHub issues frequently as well. You will very likely find the answer to your question in a post or document on one of the above sites.\n# On Technical Documentation\n\nThe languages, libraries, and technologies you will work with as a developer all provide technical reference material which should be the go\\-to source of truth when you have questions. Think of these like a manual. You should be able to refer to the technical documentation for accurate and up to date answers on:\n\n* How to use library APIs or language/technology features.\n* What are the best practices.\n* What are bad practices/anti\\-patterns.\n* How to upgrade when versions change.\n\n\nIn general, you should always refer to the official technical documentation for a library, package, language, or technology. Learning to \"read the docs\" is a critical skill, especially because there is no standard out there for formatting and displaying documentation\\!\n\n> There is an infamous response to many StackOverflow posts: \"RTFM\".\n> \n> It indicates the original question author should just \"read the docs\" because the question they asked is already answered by the official documentation. 😬\n\nIt's important to treat documentation as the source of truth because documentation _should be updated if the source project changes_. Therefore, it _should_ always be correct. Of course... this is not always true\\! However, the official documentation is more likely to be up to date than some 3rd party answers you may find on other sites or resources, which can easily get out of date.\n\nMany software projects which you will use are new and very popular so they undergo rapid development and many new versions releases with breaking changes\\! Because of this, you should always keep in mind that the answers you find online can become out of date quickly and the best guide is to try to follow the official reference material if you are in doubt.\n# Conclusion\n\nAs you move forward through the course, remember that's it's ok to not know everything\\! The important thing is to understand the fundamental concepts of software engineering and to know when and how to find the specific answers you are looking for online when you need to find them.\n\nTry to become comfortable with this process of searching and reading \\- you will use it often\\!"
        }
      ]
    },
    {
      "free": false,
      "id": "4IXSqQMi",
      "title": "Developer Workflow",
      "challenges": [
        {
          "free": true,
          "id": "3a4-HU8P",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "As you start your journey to become a software developer you will spend a lot of time individually writing code and staring at a blank code editor\\! This is an important part of the learning process and an important stage in your development.\n\nHowever, in the software industry software projects are usually developed by teams of engineers which use many standard practices, tools, and workflows. There are many components to working on a team beyond just knowing how to write code. In addition to learning the basics of how to program and build apps, it is important to learn these other professional skills as well. They will prepare you for working on a team of developers in the future and make you a more appealing candidate to any employer.\n\nThis module will cover the majority of these developer workflow practices and tools. For instance, we will cover:\n\n* **Git:** The version control software which is widely used as a standard for managing the software development process.\n* **GitHub:** The leading online platform which hosts open source software projects. You can use GitHub to host your own portfolio of projects.\n* **Terminal:** We will learn how to use a command line to interact directly with your computer and run various commands. This is a critical skill to learn as a developer.\n* **Local Development:** Professional developers tend to build software using IDEs \\(integrated development environments\\), code editors, and terminals on their local computer. It's important to get comfortable using this local development workflow to develop projects and run code.\n* **Deployment/Hosting:** You will need some basic familiarity with deploying your projects and apps. You will learn how to deploy your projects on the internet so you can share your portfolio of projects with the world.\n\n\nWe will also cover some additional topics, such as how developer teams are organized and how they work, how more complex software projects tend to be organized, and how these projects are developed, tested, and deployed.\n\nThe overall purpose of this module is to equip you now, at any early stage, with the tools and workflows you will use as a professional developer to build, manage, and deploy software projects. We believe it's best to start practicing these skills at an early stage so you have plenty of time to build up expertise. Moreover, any employer will expect you to have competence in these areas so it will be a big advantage if you already have a lot of practice with a professional development workflow.\n\n---\n\nAfter this module, we will move into the other major topics of this course which introduce some of the frameworks and libraries for building client and server applications, which will fully equip you to build and ship fullstack apps for your products ideas. These modules will build upon the skills you learn in this module: you will build and deploy the projects for those modules independently using the skills and tools you learn here."
        },
        {
          "id": "rji4H7upG",
          "type": "section",
          "title": "Setting Up Your Computer",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section we'll set up your computer for development. There are a few things you will need to install or set up and we'll walk you through each:\n\n* Install a terminal\n* Install Chrome\n* Install VSCode\n* Set up a Github account\n\n\n"
        },
        {
          "id": "P4LY5wdXY",
          "type": "media",
          "title": "Install Software: Mac",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/rgEscTU3szI",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this lesson we'll get set up for development on a Mac. This will be very simple because the most technical piece of software, the terminal, is already installed."
        },
        {
          "id": "RCm1HkcbQ",
          "type": "media",
          "title": "Install Software: Windows",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/pm4CKdu5K0c",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this lesson we'll set up your Windows development environment. The process is slightly more complex than on Mac, but once we've done both you'll be able to follow along with all other lessons including the ones we recorded on Mac."
        },
        {
          "id": "wC56W3elQ",
          "type": "media",
          "title": "Installing the Homebrew Package Manager",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/K4ISuRsb8l8",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Package Managers\n\nA package manager is like an app store on the command line where everything is free.\n\n> You use a package manager to install software on the command line.\n\nThis is important because lots of software, including TypeScript, won't be installed on your computer by default.\n# Homebrew \\(aka brew\\)\n\n`brew` is the package manager we'll be using in this course. Here's why:\n\n* It's widely used and well\\-supported\n* It works on Mac, Windows, and Linux\\*\n\n\n\\* Actually it just works on Mac and Linux, but since Windows can run Linux it works there too.\n# Other Package Managers\n\nPackage management is a general concept so there are more than one package managers. Some package managers are for a specific operating system or even a specific language. For example:\n\n* `apt` A general package manager used widely in the Linux world.\n* `npm` A JavaScript / TypeScript package manager, which we will use later in this course.\n* `pip` A Python\\-specific package manager.\n\n\nThere are many more. These few examples are just meant to give you an idea about what else is out there."
        },
        {
          "id": "o$vSzqvFd9",
          "type": "media",
          "title": "Github",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/-cyAqfqjmDY",
          "starterCode": "",
          "solutionCode": "",
          "content": "# What is GitHub?\n\nGitHub is a website where people share code. When you hear about \"open source\" software usually what people are actually referring to is software on GitHub. It's not the only place where you can find open source software but it's the most widely used.\n\n## Git\n\nGitHub gets its name from a tool called Git, which we'll get into in this module. Git is a tool for managing changes to text files. We have a whole section dedicated to Git later in this module.\n# What is GitHub for?\n\n* Backing up your code\n* Collaborating on code with others\n* Finding open source software\n\n\n## Backup\n\nWhen you write software you will want to back it up somewhere. Imagine you spend two weeks creating a new app and your computer dies. If you don't have a backup there's not much you can do.\n\nYou don't need GitHub to backup code of course—any USB drive or external hard\\-drive will do just fine. However, GitHub adds additional tools that make storing your software easier and more helpful. \n\n## Collaborating\n\nGit and GitHub let software engineers work together on code.\n\n> \n> #### How do software engineers collaborate?\n> \n> Have you ever thought about this question? Code is just text on a computer, but what if you and I want to work together on a project? We can't both use the same computer at the same time. Maybe we can both make changes to the code on our computers and then share the code when we're done. However, what if we both make changes to the same file... how do we decide which changes to keep and which to discard?\n> \n> Git and GitHub hold the answers to these questions.\n\n\n## Open Source Software\n\nThere's lots of software in the world that you can use for free and _a lot_ of it is hosted on Github. In this course we'll often point to GitHub as the location for some piece of third\\-party software.\n\nThe real benefit of open source software is that you don't have to write everything yourself. You can use other people's code that they've shared to solve problems in your own apps. You also get access to world class source code that you can read to help learn."
        },
        {
          "id": "5pMkqO8XP",
          "type": "section",
          "title": "Command Line Basics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/zgvorOiYX1g",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section we'll show you how to use a terminal to communicate more directly with your computer."
        },
        {
          "id": "pKGUA6U3x",
          "type": "media",
          "title": "cd: Changing Directories",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/J682C_IaIDI",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Examples\n\n```bash\n# Move up a directory\ncd ..\n\n# Move to your home directory\ncd ~\n\n# Move to the directory my/projects/ within your home directory\ncd ~/my/projects/\n\n# Move to the directory \"documents\" within the current directory\ncd documents\n\n# Move to the absolute directory /var/log\ncd /var/log\n\n```\n# Special Symbols and Variables\n\n\n## Paths\n\nChanging directories is tied closely to \"paths\" on the command line. The \"path\" is a way of describing a location on a computer's hard drive.\n\nFor example, the application Terminal.app on Mac computers is located at `/Applications/Utilities/Terminal.app`. This is an example of a path. It's an exact representation of a location on the hard drive.\n\n## Special Symbols and Variables\n\nWhen using paths there are special values that have a specific meaning. There are also variables you can use. Here are the most common:\n\n* `.` \\(a period character\\): The current directory. \n   * Example: `cd ./app` \\(Putting `.` and `/` together like this means \"The `app` directory relative to my current directory\\).\n* `..` \\(two period characters\\): The parent directory. \n   * Example `cd ..`.\n* `~` \\(a tilde character\\): Your home directory. We cover this more in the video. \n   * Example: `cd ~`.\n* `$HOME`: Also means the home directory. This is a variable. \n   * Example: `cd $HOME`.\n\n\nIf you're uncertain where a file is located but you can find it in Finder or File Explorer then you can drag the file into your terminal."
        },
        {
          "id": "b4$MsxCKEC",
          "type": "media",
          "title": "ls: View the Contents of a Directory",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/GfvDgXxK3ZU",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Examples\n\n```bash\n# View the contents of the current directory\nls\n\n# View the contents of your home directory\nls ~\n\n# View ALL the contents of the current directory,\n# including hidden files and folders\nls -a\n\n# View all the contents of the current directory\n# with additional information such as permissions\nls -la\n\n```\n\n`ls` stands for \"list\" as in \"list the contents of this directory.\"  The key takeaways for this lesson are:\n\n* You can view the contents of a directory with `ls`.\n* You can change the way `ls` works by using \"flags\" such as `-l`, `-a` and `-h`.\n* Flags can be \"combined\" by putting them all together after a single hyphen \\(`-`\\).\n* The \"long\" output of `ls` is most commonly used by programmers because it tells us a lot of information about files and folders in a concise way.\n\n"
        },
        {
          "id": "zpK@rvjLu",
          "type": "media",
          "title": "touch: Create Files",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/3q8r0UYs8cc",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Examples\n\n```bash\n# Create a new file named app.ts\ntouch app.ts\n\n# Create a new file named hello.txt\ntouch hello.txt\n\n```\n"
        },
        {
          "id": "i6IpgPJXU1",
          "type": "media",
          "title": "mv: Move or Rename Files",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/U737Q3h22tE",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Examples\n\n```bash\n# Move the file hello.txt from the current directory \n# into the subdirectory named text_files\nmv hello.txt text_files/\n\n# Rename app.ts to project.ts\nmv app.ts project.ts\n\n```\n"
        },
        {
          "id": "zXBZwIxTV",
          "type": "media",
          "title": "cp: Copy Files",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/hae7y10YbOE",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Examples\n\n```bash\n# Copy the file hello.txt from the current directory \n# into the subdirectory named text_files\ncp hello.txt text_files/\n\n# Create a copy of app.ts named project.ts\ncp app.ts project.ts\n\n```\n"
        },
        {
          "id": "FtF4qr1qpt",
          "type": "media",
          "title": "rm: Remove Files and Directories",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ohkqalnH_Fk",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Examples\n\n```bash\n# Remove the file `hello.txt`\nrm hello.txt\n\n# Remove the directory `stuff` and all its contents\nrm -r stuff\n\n```\n"
        },
        {
          "id": "YLD3gKELgK",
          "type": "media",
          "title": "mkdir: Create Directories",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/nlgtrVG1IXo",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Examples\n\n```bash\n# Create a new directory named projects\nmkdir projects\n\n# Create a new directory named stuff. If \n# the parent directory (my/) doesn't exist then \n# create that too \nmkdir -p ~/my/stuff\n\n```\n"
        },
        {
          "id": "Ub2hNjGSBX",
          "type": "media",
          "title": "cat: See the Contents of Files",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/PfuYM4fX6K4",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Examples\n\n```bash\n# View the contents of hello.txt\ncat hello.txt\n\n# Veiw the contents of project.ts located in your home directory\ncat ~/project.ts\n\n```\n"
        },
        {
          "id": "EuzJ1ZWvq",
          "type": "media",
          "title": "brew: Installing Software on the Command Line",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "You probably already know that you can install software on your computer. Things like VSCode, Firefox and Excel are all examples.\n\nYou can _also_ install software on the command line. You will just need a piece of software called a package manager. \n# Package Managers\n\nA package manager is somewhat like an app store for the command line. You use a package manager to install other software. A \"package\" is just another word for software.\n\n\n## apt: Linux \\(and therefore Windows too\\)\n\nOn Linux we have `apt`, which you will also have on Windows if you set up your system as we described earlier in this module \\(here's a [link](/workspace/RCm1HkcbQ) if you missed it\\). Linux already has a package manger installed and it's called `apt`.\n\n### Examples\n\nIn the examples below I'll use `<package>` to denote any package you might want to install. When you want a specific package be sure to replace `<package>` with the specific thing you want to install.\n\n```bash\n# Install a specific package\napt install <package>\n\n# List all the currently installed packages\napt list --installed\n\n# Show information for a specific package\napt show <package>\n\n# Search for a package\napt search <package>\n\n```\n\n> However, for the sake of simplicity, ++throughout this course we're going to be using the \\+\\+++++`brew`++ package manager\\+\\+, which you installed during setup at the beginning of this module. [Here's the link](/workspace/wC56W3elQ) in case you missed it.\n# brew\n\n`brew` is a package manager that runs on both Mac and Windows \\(via Linux\\). It's relatively simple to use and its open source. We're going to use it to install all the software we need that's not already installed on your computer.\n\n### Examples\n\nIn the examples below I'll use `<package>` to denote any package you might want to install. When you want a specific package be sure to replace `<package>` with the specific thing you want to install.\n\n```bash\n# Install a specific package\nbrew install <package>\n\n# List all the currently installed packages\nbrew list\n\n# Show information for a specific package\nbrew info <package>\n\n# Search for a package\nbrew search <package>\n\n# If you want to install typescript you can \nbrew install typescript\n\n```\n"
        },
        {
          "id": "95$rRtxch9",
          "type": "media",
          "title": "man: Get Help on the Command Line",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/rvu_4Y9-4sY",
          "starterCode": "",
          "solutionCode": "",
          "content": "`man` stands for \"manual\" and can be used to view the manual for various commands. These documents or manuals are usually referred to as \"man pages.\" \n\nUnfortunately some man pages are great and some are not so helpful. We will see other ways to get help when we talk about installing software.\n# Examples\n\n```bash\n# View the manual for the `ls` command\nman ls\n\n```\n"
        },
        {
          "id": "K8Ne9$uSp",
          "type": "media",
          "title": "Configuring Your Shell",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/PwbObSpI_60",
          "starterCode": "",
          "solutionCode": "",
          "content": "# In this lesson we cover\n\n* What the does \"shell\" mean\n* What is `bash`?\n* The `source` command\\.\n* Configuring bash via `.bashrc`.\n* Creating simple aliases.\n* Basic environment variables using the `export` command\\.\n* Configuring all config files to point to `.bashrc` via source commands\n   * We want to get `.profile` and `.bash_profile` to both point to `.bashrc`.\n   * This setup allows you to ignore the specifics of how bash loads config files, since no matter which file it loads it will ultimately load `.bashrc`.\n\n# Environment\n\nThis lesson touches briefly on your shell environment and how to set and use environment variables. For more info check out the dedicated [lesson on environment variables](/workspace/bo0s8ASKm).\n# Jargon\n\nWe're getting deeper and deeper into the territory of opaque jargon, so let's go over what some things mean:\n\n## Terminal\n\nA graphical application that lets you use a shell. Terminal is a general term like \"word processor\" or \"web browser.\" On Mac computers we use the specific app \"Terminal.app.\" On Windows computers we use \"ubuntu.exe.\" \n\n## Shell\n\nA type of application which lets you control your computer via commands. Also known as a command line. Shell is a general term like \"word processor\" or \"web browser.\" Bash is the specific shell we use in this course.\n\n## Bash\n\nThe specific shell program we use in this course. Bash lets you use commands to control your computer. Bash is a specific shell. For example, if \"shell\" is like \"web browser\" then bash is like Chrome or Firefox."
        },
        {
          "id": "4u1gnF3N6",
          "type": "media",
          "title": "Configuring Your $PATH",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/HvYBtVdnh4A",
          "starterCode": "",
          "solutionCode": "",
          "content": "# In this lesson we cover\n\n* What is the `PATH`?\n* That `$` symbol in variables.\n* How is the `$PATH` used? \n* How can we configure it?\n* Bash string interpolation \\(putting variables inside strings\\). \n\n"
        },
        {
          "id": "bo0s8ASKm",
          "type": "media",
          "title": "Environment Variables",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/A6hxf-hOyNg",
          "starterCode": "",
          "solutionCode": "",
          "content": "# In this lesson we cover environment variables\n\n* What are they?\n* How to access them? \n   * Using `env` and `echo $VAR`.\n* Why you should hide them.\n* How you can set them?\n\n"
        },
        {
          "id": "z$JF$lDjH",
          "type": "media",
          "title": "Redirecting Output",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/F5lBV_eK4PU",
          "starterCode": "",
          "solutionCode": "",
          "content": "Redirecting output is useful in many cases. However, it might not be clear why until you've used the shell for a while. For now, just check out how we use redirection and know that it exists.\n# Example\n\n```bash\n# Download example.com into a HTML file\ncurl 'http://example.com' > example.html\n\n# Concatenate two files into one (this is where\n# \"cat\" gets its name)\ncat a.txt b.txt > ab.txt\n\n# Append \"Hello Pairwise\" to the end of a file\necho \"Hello Pairwise\" >> file.txt\n\n```\n# Redirection\n\nIn a shell, the output of any command can be put into a file. This is done using the `>` character\\. If you already have a file and you want to _append_ the output of your command to it you can use `>>` instead\\.\n\n* `>` Will put your output into a file, writing over it if it already exists.\n* `>>` Will append your output to a file, preserving whatever content was there before.\n\n# curl\n\nIn this lesson we also introduce the `curl` command, which can be used to download files on the command line.\n\nMore generally, `curl` can be used to make any HTTP request. Although it may not be obvious yet, `curl` will be very handy later on. It's useful for testing your own APIs or using external APIs from the command line.\n\n## curl Examples\n\n```bash\n# Send a GET request to http://example.com\n# and show the response on screen\ncurl 'http://example.com'\n\n# Same as above but also display request info and \n# all headers. -v stands for \"verbose.\" This is \n# useful for learning about HTTP and debugging.\ncurl -v 'http://example.com'\n\n# Store the results of a request in a file. \n# In other words, download the URL into a file.\ncurl 'http://example.com' > response.html\n\n# Send a POST request along with some data to the server.\ncurl -X POST -d '{ \"name\": \"Cat\" }' 'http://example.com'\n\n```\n"
        },
        {
          "id": "gE6ayunrl",
          "type": "media",
          "title": "grep: Find Specific Code",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/jVxuYITREZI",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Examples\n\n```bash\n# Search for the word \"Hello\" within the file app.ts\ngrep \"Hello\" app.ts\n\n# Do a case-insensitive search. This means that if it finds \"Hello\" or \"hello\"\n# either one counts as a match. Note that the difference is the capital \"H\"\ngrep -i \"Hello\" app.ts\n\n# Search for the text \"Hello\" in every file within the ./src directory. \n# -R stands for recursive, meaning every file that is located within \n# the target directory will be searched.\ngrep -R \"Hello\" ./src\n\n# Combine the two flags -R and -i to recursively search without worrying about\n# case.\ngrep -R -i \"Pairwise\" ./src\n\n```\n"
        },
        {
          "id": "QZB4sqjPc",
          "type": "section",
          "title": "TypeScript and Node.js",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now we're going to get started using TypeScript: **For real.**\n\nUp until this point we've been using TypeScript within Pairwise. We've done the work of setting up TS so you that you could get started programming immediately, without worrying about setup instructions.\n\nHowever, now that you've learned some programming being able to set up TypeScript takes on new meaning. This is how you will go from being good at online coding challenges to being a programmer.\n\nIn this section we'll cover setting up TypeScript on your own computer and how to get started working with it."
        },
        {
          "id": "VxdxGx0Bq",
          "type": "media",
          "title": "Installing TypeScript and Node.js",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Gg3I0_pwz7M",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Installing Node and Yarn\n\n```none\nbrew install node yarn\n\n```\n\nNow you have the following **three** commands available:\n\n* `node`\n* `npm`\n* `yarn`\n\n\nWe'll explore these commands in the next lessons."
        },
        {
          "id": "ImMbYcJtFM",
          "type": "media",
          "title": "Node.js",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/t3fJgPEiXfU",
          "starterCode": "",
          "solutionCode": "",
          "content": "Node\\.js is a JavaScript runtime, meaning it's a program that will run your JavaScript programs. Sweet\\! Why does this matter? \n# Why Node.js is a big deal\n\nNode\\.js is important because it allows JavaScript to transcend browsers. In the past, if you wanted to run JavaScript you needed a web browser. Nothing wrong with this in theory—everyone has a web browser and browsers are all free to download if you somehow don't have one. The problem is that browsers are limited. Using a browser you cannot access the filesystem, you cannot create an HTTP server, you can't interact with the operating system. \n\n> NOTE: **This is a good thing.**\n> If it was possible for any website to access your computer you would be getting hacked ALL THE TIME. Thankfully that's not the case.\n\nNode\\.js did two very important things:\n\n* It allowed JS to run outside the browser.\n* It allowed JS to interact with the operating system.\n   * This means working with files, creating servers, etc.\n\n# Node\\.js and TypeScript\n\nSo, Node lets you run JavaScript. How does that relate to TypeScript? \n\nSince TypeScript can be compiled to JavaScript, Node implicitly lets you run TypeScript as well.\n\nIt works like this:\n\n* Write some TS code\n* Compile it to JS with `tsc`\n* Run it with `node`\n\n\nAnywhere JavaScript can go, TypeScript can also go. This means that since JavaScript can also be used for desktop and mobile apps, TypeScript can too. "
        },
        {
          "id": "@WlezDPbF",
          "type": "media",
          "title": "Installing TypeScript Tools",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/03nlh1DE1T4",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this lesson we're going to get TypeScript set up on your computer. Once set up you are basically a full developer. Installing tools on the command line, and using those tools once installed, is a big portion of the job.\n\nThe specific tools we're installing today:\n\n* `tsc`: This is the TypeScript compiler and will turn your TypeScript code into JavaScript, which can be run via `node`.\n* `ts-node`: This command is a shortcut to compile _and_ run your code in one step.\n\n"
        },
        {
          "id": "yHEh@dZbm",
          "type": "media",
          "title": "Files and TypeScript Modules",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/bzrpX0qj1nQ",
          "starterCode": "",
          "solutionCode": "",
          "content": "In all the previous challenges we kept our code to a single file. This is simple, but not always practical. Most apps will be at least a few thousand lines of code and there's no limit to how large a codebase can get. \n\nAs your codebase grows you will want to start organizing it into separate files. TypeScript is happy to let us do this, but we need to learn some new syntax.\n# Import and Export\n\nWhen working on a TypeScript file you can `import` code from other files and `export` code for other files to use. Let's consider an example. We have two files, `app.ts` and `math.ts`. Both files are in the same directory.\n\n### app\\.ts\n\n```typescript\nimport { add, subtract } from \"./math\";\n\nconsole.log(`1 + 1 is ${add(1, 1)}`); // 1 + 1 is 2\nconsole.log(`1 - 1 is ${subtract(1, 1)}`); // 1 - 1 is 0\n\n```\n\n### math\\.ts\n\n```typescript\nexport const add = (a: number, b: number) => {\n  return a + b;\n};\n\nexport const subtract = (a: number, b: number) => {\n  return a - b;\n};\n\n```\n\n`app.ts` is able to `import` the two functions exported from `math.ts` using the special syntax for importing.\n# Syntax\n\nLet's describe the import and export syntax formally.\n\n## Import\n\nTo import from another file use:\n\n1. The `import` keyword followed by a space.\n1. The `{` character followed by the names of exports from the target file separated by commas and a closing `}` character\\. In our example this was `{ add, subtract }`.\n1. The `from` keyword\\.\n1. A string representing the path to another TS file _without_ the `.ts` file extension.In our example this was `./math`.\n\n\n## Export\n\nTo export from a file use:\n\n1. The `export` keyword placed in front of any top\\-level values in your file.\n\n\nSome more examples are in order:\n\n```typescript\n// Export a number\nexport const WIDTH = 1200;\n\n// Export a boolean\nexport const bool = true;\n\n// Export a string\nexport const name = \"Pairwise\";\n\n// Export arrays and objects\nexport const cats = [\n  { name: \"Maomi\", job: \"Sleeping\" },\n  { name: \"Larper\", job: \"Roleplay\" },  \n];\n\n// Export a function\nexport const toUpper = (s: string) => {\n  return s.toUpperCase();\n};\n\n```\n\nUsually you can just add the `export` keyword before existing values in your files in order to export them.\n# Special Cases\n\nNow we've explored the most common import/export usage let's look at some other patterns you'll find in the wild.\n\n## Default Imports and Exports\n\nIt is possible to define a \"default\" value to be exported from a file. Let's look at the syntax. Imagine we wanted to put each of our math functions into their own file. We could do the following:\n\n### add\\.ts\n\n```typescript\nconst add = (a: number, b: number) => a + b;\nexport default add;\n\n```\n\n### subtract\\.ts\n\n```typescript\nconst subtract = (a: number, b: number) => a - b;\nexport default subtract;\n\n```\n\nWe use the special `export default` syntax rather than simply the `export` keyword\\. This allows the importing file to avoid using bracket syntax:\n\n### app\\.ts\n\n```typescript\nimport add from \"./add\";\nimport subtract from \"./subtract\";\n\nconsole.log(`1 + 1 is ${add(1, 1)}`); // 1 + 1 is 2\nconsole.log(`1 - 1 is ${subtract(1, 1)}`); // 1 - 1 is 0\n\n```\n\nNotice that the file does exactly the same thing as `app.ts` from the beginning of this lesson, but the syntax for importing is slightly different.\n\n## index\\.ts\n\nAnother special case you will encounter is the special file `index.ts`. This file is special because you can import from it in a slightly different way than other files.\n\nAs another example, let's say you have a `./lib` directory in your project and within that directory you have an `index.ts` file\\. It's contents will be the same as our `math.ts` file from above.\n\n### index\\.ts\n\n```typescript\nexport const add = (a: number, b: number) => {\n  return a + b;\n};\n\nexport const subtract = (a: number, b: number) => {\n  return a - b;\n};\n\n```\n\nNow, if we want to import these functions rather than importing form `./lib/index` we would actually just import from `./lib`.\n\n### app\\.ts\n\n```typescript\nimport { add, subtract } from \"./lib\";\n\nconsole.log(`1 + 1 is ${add(1, 1)}`); // 1 + 1 is 2\nconsole.log(`1 - 1 is ${subtract(1, 1)}`); // 1 - 1 is 0\n\n```\n\nWhy? The filename `index.ts` is special. When you import from a **directory** rather than an individual file TypeScript will check for an `index.ts` file within that directory. If it finds it, that file will be used as the import."
        },
        {
          "id": "hMGEFmhp7",
          "type": "media",
          "title": "Working With External Modules",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/YiNCiZVYEPY",
          "starterCode": "",
          "solutionCode": "",
          "content": "# External Modules\n\nThis is just a fancy way of saying \"code that already exists\" or even \"other people's code.\" The latter description is less accurate though, since you can write your own modules and use them in other projects. In other words you can use external modules that you created.\n\n## Why?\n\nThe benefit of using external modules is that you gain access to an entire world of code that's already written and often well\\-tested. This means you can be way, **WAY** more productive than if you had to write everything yourself.\n# How to use external modules\n\nFirst, install something you want to use. In the video here we use the module [got,](https://github.com/sindresorhus/got) which is a TypeScript module that will let you make requests, similar to using `curl` from the command line.\n\nOn the command line install the module:\n```\nnpm install got\n\n```\n\nIn your TypeScript file import the module:\n```typescript\nimport got from \"got\";\n\n```\n\nNote that importing an external file will use a path, such as `./path/to/file` while importing a module will simply be the module name, such as `got`.\n\nAside from the modules we will recommend throughout this course, you can search for modules in multiple ways:\n\n* Using Google. This may be obvious, but Google \\(or any search engine\\) can be helpful in finding modules.\n* [NPMS\\.io.](https://npms.io/) NPMS tries to be an actual search engine for modules, creating their own relevance criteria and trying to show modules relevant to keywords. It's not perfect, but it helps.\n   * Both Yarn and NPM have module \"search\" features but they aren't very useful. As of this writing you can't use them for keyword search, only name search. So if you don't know the name of what you're looking for you probably won't find it. This largely defeats the purpose of searching.\n* Other people's code. When you read the source code of external modules they will almost always import even more modules. This way you can often find modules that might be hard to discover otherwise.\n\n"
        },
        {
          "id": "NvWDlHv9Z",
          "type": "section",
          "title": "Git",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/kyJhObSKzJw",
          "starterCode": "",
          "solutionCode": "",
          "content": "The time has come to sit down and have a frank discussion about Git, a piece of software that is both extremely useful and extremely opaque from the outside.\n\nSo let's start with some questions:\n\n* How do I keep different versions of my code?\n* How do I know what changed between two files, or two versions of the same file? \n* How do I ensure my code is backed up in case I accidentally delete it or Apple accidentally wipes my drive? \n* How do I collaborate with other programmers? \\(And what if we both edit the same file?\\)\n* If I accidentally break my app \\(this _will_ happen\\) how do I revert it back to a working version?\n\n\nNaturally, since we're talking about Git, Git is the answer to these questions. It's also why it's often hard to talk about Git—it has many uses. \n\nAlso, there is _even more_ Git can do than what I listed here. \n\n> Git is the epitome of a professional tool: Hard to learn but extremely useful.\n\nTo start out, let's just make sure you have a recent version of Git: \n\n```bash\nbrew install git\n\n```\n\nNow, let's see a few example commands.\n# Examples\n\n```bash\n# Download all the TypeScript source code.\n# This works with any Github project.\ngit clone 'https://github.com/microsoft/TypeScript.git'\n\n# Initialize git in a new project.\ngit init\n\n# Create a new branch with the name \"my-new-feature\"\ngit checkout -b \"my-new-feature\"\n\n# Add all changes in the current directory.\ngit add .\n\n# Open your text editor to create a commit message.\n# The changes will be committed once you close the window.\ngit commit\n\n```\n"
        },
        {
          "id": "0hH1Ze2Og",
          "type": "media",
          "title": "Getting Started with Git",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/HA7n9MwdH3E",
          "starterCode": "",
          "solutionCode": "",
          "content": "Today we're going to learn about these commands. Let's jump in to it.\n\n```bash\ngit init\ngit status\ngit add .\ngit commit -m \"Sup\"\n\n```\n# Creating Your First Repository\n\nRepo\\! You've probably never used this word much in the past but you're going to be hearing it a lot from here on out. Today we're talking about creating your first Git repo, which is short for repository.\n\nAs you're learning programming and specifically `git` you will be creating quite a few repos. Here's what the workflow usually looks like. \n\nOn the command line:\n```bash\nmkdir my-new-project\ncd my-new-project\n\n# Here we go...\ngit init\n\n# Now let's add a file\necho \"My new project\" > readme.md\n\n# \"Stage\" all the files using `.`\ngit add .\n\n# Now \"commit\" your first code\ngit commit -m \"Initial commit\"\n\n```\n# Staging\n\nGit uses the idea of a multi\\-stage process to write your code. \n\nFirst, you simply write the code. At this stage your code is either \"untracked\" or \"modified.\" \n\nOnce you've made some discrete progress on your code you \"stage\" it by using `git add`. The reason for this middle stage is so that you can mark things as done while still working on other files that will be part of the same commit.\n\nFinally you \"commit\" your code by attaching a message to it. At first, this may seem like a lot of extra work just to change a few things, and you're not wrong. It is indeed more work to use git that simply to edit files and hit save. However, the benefits of using git are so significant that you will be very happy git exists once you understand it and how to use it.\n\nTo reiterate, the three stages are:\n\n* Write code\n* Stage code\n* Commit code\n\n# Committing\n\nIn practice, you will usually stage and commit at the same time. It's very common to write some code and immediately stage and the commit it.\n\nTherefor lets focus on committing. \n\n## The idea\n\nWhen you change code you want to organize your changes. For example, if I'm working on the Pairwise website and I want make all the text larger I can simply edit one file, stage it and commit it. One and done.\n\nMy commit message might be:\n\n```bash\ngit commit -m \"Increase default font size\"\n\n```\n\nHowever, what if I want to change the way we render code on mobile? It's possible that making this change can be done in only one file, but I may need to edit multiple files. This type of situation is very common. \n\nIn this case I would modify all the files one by one and sometimes flipping back and fourth between them. When everything was complete I would stage and commit. Similar to the font size change, I will just have one commit with a short message:\n\n```bash\ngit commit -m \"Improve mobile rendering performance\"\n\n```\n\n\n### One \"change\" one commit\n\nThis is the core idea here. Every time you change something in the general sense you write a commit message. You do **not** write a commit message every time you change a file, only every time you've completed a discrete chunk of work to accomplish some goal.\n\n### Why?\n\nA few reasons:\n\n* If you wrote a commit message every time you changed a file it would become very, very tedious. In fact you would either stop committing altogether or write meaningless commit messages like `Update stuff...`.\n* When you \\(or your teammates\\) decide to look back at some changes they can already see all the specific changes in a file. Git tracks all your changes, so if you were writing commit messages for every small change you would be adding meaningless information \\(aka noise\\).\n\n\nThe point of a commit message is to give a broader summary of what changed, something you cannot get simply by looking at the changes in git. Imagine your friend asks you \"What will these changes do?\" You might respond \"They will ... `improve mobile rendering performance`\" or \"These changes will `increase the default font size`.\" See the pattern? \n\nCommit messages should complete the statement  \"These changes will... \"\n"
        },
        {
          "id": "G41KVNbH9",
          "type": "media",
          "title": "Git Log",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/RynL7-FzWe0",
          "starterCode": "",
          "solutionCode": "",
          "content": "Have I ever mentioned that git will track your changes?? Yes? OK, good. Then you've probably guessed that git will also show you changes it tracked in the past. `git log` is the command that lets us do that.\n# Logging\n\nThe basic command is very simple: `git log`. \n\nUsing this command you will be able to see all your history so far. If you just created the repository there won't be much there, but you can see much more if you clone a repository from Github.\n\n`git log` also has many different flags \\(aka options\\) you can pass to change the output. Here's a more advanced example:\n\n```bash\ngit log --color --graph --abbrev-commit\n\n```\n\nOr how about this one?\n\n```bash\ngit log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\n\n```\n\nDon't worry about remembering any of these. You can experiment with what log format works best for you and then create an alias for it in your `.bashrc` file\\. For example, mine has that long command above aliases to `glog`, so whenever I'm in a repository I can just type `glog` and use that long command.\n\n## How to use git log\n\nThe git log is a powerful thing, but one of the most common use cases for `git log` is to find out _why_ someone wrote some code.\n\nFor every single line of code in a file git can show you the commit associated with it. In fact this use case is so common that there's a whole separate command for it.\n# Blaming\n\nEver wondered who in your company was responsible for some blunder or failure? Well, you can wonder all you want but it might be hard to find an answer.\n\nHowever, when it comes to code you can find an answer. The answer lies within `git blame`.\n\nRemember, git tracks every change to every character of code in your codebase. This means that for every line of code you can see _who write it_ and _why_ they wrote it. \n\n\n## Lets not be negative\n\nDespite the playful name, `git blame` is not about finding fault with others. It's simply about finding out who wrote some code and why. \n\nFor example, as you write more and more code over longer periods of time you may come across some really nasty code. You run git blame and... WHAT?\\! In the future when you look back on the code you are writing now you may be astounded at how bad it looks.\n\nAlternatively, you may find some really elegant code and wonder who wrote it. `git blame` can tell you.\n\n## The catch\n\nThe catch here is simple: If you don't write good commit messages your git history will not be helpful. If you run `git blame` to see why some line of code was changed and the commit message says `\"Update files\"` you haven't gained any knowledge. \n\nThis means you have to maintain a certain degree of discipline with your commit messages. It can be tempting to just write something useless, hit commit and be done. However, your future self will thank you if you take the time to write more meaningful commit messages."
        },
        {
          "id": "h6loohjUm",
          "type": "media",
          "title": "Git Status",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/_8jNeV-sMLA",
          "starterCode": "",
          "solutionCode": "",
          "content": "How do you know what's going on with your git repository? You can simply ask git. Run\n\n```\ngit status\n\n```\n\nSimple\\! Or is it? Let's say you run `git status` and you see this. What does it mean?\n\n```none\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n    deleted:    package.json\n    modified:   yarn.lock\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    new-file.ts\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n```\n\nLets add a flag to `git status` and see if it makes things any clearer. We can run `git status --short` and we will see:\n\n```none\n D package.json\n M yarn.lock\n?? new-file.ts\n\n```\n\nIt's definitely more concise, but probably still unclear. \n# How git thinks about your files\n\nIn the world of git, a file is in one of these states:\n\n* `untracked`: This means git found a file that it know about. Usually this happens when you add a new file to your project. Git calls it \"untracked\" because once you commit a file git starts \"tracking\" it.\n* `modified`: This means a file has changed since last commit. You will see this all the time. After all, you're a programmer. Modifying text files is a big part of your job.\n* `deleted`: This means a file was previously commit but has been deleted. Does that odd? How does git know about a file that doesn't exist?\\!\n   * This is part of git's power. Even if you delete entire files you can bring them back later using git. Once you've commit something it can almost always be recovered.\n* Ignored:  Git never tells you it's ignoring a file because otherwise it wouldn't be true. You can tell git to ignore files you don't want tracked. \n   * For example, when you compile your TS code it produces a bunch of JS code. However, since the JS code is entirely generated from the TS code you don't actually want to track it. There's no need to track it. To get that JS code all you need is the TS code, so you will ignore the JS code.\n   * Using git you can ignore things by adding them to a special file called `.gitignore` \\(Note the dot in the filename\\).\n\n\n\n## Git Status\n\nNow let's look at that output from before again:\n\n```none\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n    deleted:    package.json\n    modified:   yarn.lock\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    new-file.ts\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n```\n\nLet's ignore the first two lines because we will address them in later lessons. Focus on everything _after_ `Changes not staged for commit:`.\n\nGit is trying to be helpful here. It's saying you can use `add` or `rm` to update what files will be included in the next commit. You can also use `restore` to discard changes you've made.\n\nNow it tells us about our individual files:\n\n```none\ndeleted:    package.json\nmodified:   yarn.lock\n\n```\n\nIt's saying we've deleted the file `package.json` and modified the file `yarn.lock`.\n\nContinuing down we see:\n\n```none\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n    new-file.ts\n\n```\n\nHere git is telling us there is a new file named `new-file.ts` which we have neither commit nor ignored. We can add it to the next commit using `git add`.\n\n## The short form\n\nTry not to be intimidated by all that text. If you read through it line by line you will notice that git is generally trying to give you hints as to how to proceed depending on what you want to do.\n\nHowever, if you prefer to just know about the files themselves you can use the short form from earlier: `git status --short`.\n\n```none\n D package.json\n M yarn.lock\n?? new-file.ts\n\n```\n\nThis is giving us the same information about the file but in much shorter form. Feel free to use this if you find it easier to read. You can even created an alias \\(maybe `gs`?\\) if you find it too long to type.\n# Conclusion\n\n* Use `git status` to find out the status of your project.\n* You will quickly get used to reading this output because you will see it a lot.\n\n"
        },
        {
          "id": "jLByUSItW",
          "type": "media",
          "title": "Git Branching",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/gAevvD0g0Bg",
          "starterCode": "",
          "solutionCode": "",
          "content": "```\ngit branch\ngit checkout\ngit checkout -b\ngit merge\n\n```\n"
        },
        {
          "id": "kaZw2eUl0",
          "type": "media",
          "title": "SSH — Files as Passwords",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/DerhqfToY4c",
          "starterCode": "",
          "solutionCode": "",
          "content": "# SSH\n\nMuch like git, SSH is a foundational command. However, depending on what work you do as a developer you may not use it nearly as often. For this reason we've not dedicated a large portion of the module to SSH. \n\nIn this lesson we're just showing you how to get SSH set up for use with Github.\n# What is it for? \n\nSSH is a \"remote login program,\" which just means it lets you log in to computers on the internet—computers that are not physically present in your home or office. In other words: Servers. \n\nSSH is a tool you can use to remotely log in to servers.\n\nIn order to let you log in SSH of course has to support authentication. This can be done by simply typing in a password but more commonly it's done using a \"password file\" called an SSH key.\n\nUsing SSH as an authentication mechanism, other services like Github allow you to do things on their platform that only you should be able to do. Such as create new repositories on your account.\n\nThis is why we cover SSH here—it enables you to seamlessly work with Github from the command line.\n# There's More\n\nAs I mentioned, SSH is useful for logging in to remote servers. Depending on how much work you do with servers you will end up using SSH quite a bit.\n\nWe'll discuss this feature of SSH more when we cover deploying servers.\n"
        },
        {
          "id": "z3oxFVeAK",
          "type": "media",
          "title": "Git Remotes and Github",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/vEpvJx3ZyXU",
          "starterCode": "",
          "solutionCode": "",
          "content": "Today we'll cover the following commands.\n\n```bash\ngit clone <url>\ngit remote add origin <url>\ngit push\ngit push -u origin master\ngit fetch\n\n```\n# Cloning\n\nIn plain English `git clone`  means \"Download this repository to my computer.\"\n\nFor example, you can clone \\(download\\) all the code from the TypeScript repo like this:\n\n```bash\ngit clone https://github.com/microsoft/TypeScript.git\n\n```\n\nNow you will have a directory \\(folder\\) on your computer named `TypeScript`, the same as the repository name.\n\nTypeScrips is a pretty big project though. Let's clone something simpler—the [got](https://github.com/sindresorhus/got.git) library for making requests:\n\n```bash\ngit clone https://github.com/sindresorhus/got.git\n\n```\n\nNow you will have a `got` directory on your computer with all the code inside.\n\n## Finding the URL\n\nYou can clone either of those projects just fine, but how do you find the clone URL on your own? You can get it form the Github page of a project. It looks like:\n\n![Copy the URL in order to clone the repo.](/assets/z3oxFVeAK/556c169f17876fc7d607fef8d2300646_git-clone.png)\n# Origin and Master\n\nThese might seem like strange words in this context, and they are. If you're in the industry these words seem perfectly normal, but if you're new to programming they sound quite odd indeed. Let's talk about what these terms mean.\n\n## Origin\n\nWe've mentioned before that git is very useful for collaboration, but \"useful for collaboration\" is very abstract. Now we get to see _how_ git is actually used to collaborate. The key is \"remotes.\"\n\nHere the word \"remote\" means \"distant,\" \"not here.\" You can think of it as meaning \"not on my computer.\"\n\nA remote is simply a git repository on another computer. Usually that \"other computer\" is a server controlled by Github. The name of that remote repository is called \"origin\" by convention. Having a remote git repo means that you and I can share code. How? \n\nIf I am working on some code and you want to work with me you could connect to my computer and download the code. Whenever you update some code on your computer you could upload the changes to my computer. However, what if my computer is turned off? What if we both work in different timezones and I'm asleep, or vice versa?\n\nIf we reverse the situation and I'm downloading and uploading files to and from your computer we have all the same problems.\n\nThe solution is to have a **remote** git repository on a third computer that never turns off—a server.\n\nThe general name for these servers is \"remotes\" and Github is the most popular and widely used remote in the world. \n\n\"origin\" is just a name that people give their remote server. It's a convention.\n\n## Master\n\nThe first branch you create in a new git repository will be named `master`. Why? I'm not sure, but it's not necessary to know in order to use git effectively. \n\nSo, `master` is simply the name of a branch in your git repository. Because it's created by default almost all git projects have a `master` branch and it's often used as the \"main\" branch that every other branch ultimately merges into. \n# Push and Pull\n\nIf you're not already confused, git isn't done yet. We still need to talk about uploading code to a server and downloading it from a server. \n\n* `push` = upload\n* `pull` = download\n\n\nWith these terms in hand we can finally construct a valid git command.\n\n## Pushing\n\n```bash\ngit push origin master\n\n```\n\nThis command is telling git to `push` \\(upload\\) your current branch to the `master` branch in the remote named `origin`. If that seems like a lot to type just to upload some code, you're probably right. But think about it from git's perspective.\n\nIf you say:\n\n```bash\ngit push\n\n```\n\nGit understands you want to push the code in your current branch, so you don't have to tell it that. However, you can have multiple remote servers so git is wondering \"Which remote should I push to?\"\n\nNow you say:\n\n```bash\ngit push origin\n\n```\n\nWe're getting somewhere, but git is still confused. It knows you want to `push` your current branch to the remote named `origin`, but `origin` can have many different branches so git is thinking \"Which branch on `origin` do you want me to push to?\"\n\nFinally you say:\n\n```bash\ngit push origin master\n\n```\n\nGit is satisfied and it happily uploads your code.\n\n### Remembering How to Push\n\nThat's still a lot to type every time you want to `push` some code, so you can tell git to remember your decision. That's what the `-u` flag is for. \n\n```bash\ngit push -u origin master\n\n```\n\nNow that you've done this once the next time you can simply type:\n\n```bash\ngit push\n\n```\n\nHooray\\!\n\nHowever, you will have to do this again if you want to push a different branch. For example, if you create a `mobile-nav` branch and want to push it up to `origin` you will have to again say so at least once:\n\n```bash\ngit checkout -b mobile-nav # Now we're on the mobile-nav branch\ngit push -u origin mobile-nav # Now we push the mobile-nav branch\n\n```\n\n## Pulling\n\nPulling \\(downloading\\) is usually simpler to set up because when you `clone` a repo you're automatically set up to download from the remote `origin`. This means for the most part you can just say:\n\n```bash\ngit pull\n\n```\n\nGit will understand you.\n\nWhen you create a new branch you can also just type `git pull` and either it will either:\n\n* If the branch name exists on `origin` it will automatically pull from the branch.\n* If the branch name doesn't exist on `origin` it will just fail, since there's nothing to download from.\n   * This is totally fine and won't affect any of your code.\n\n\n## Fetching: How to Sync with Origin\n\nAs it turns out there's one more command you'll want to be familiar with when it comes to working with remotes: \n\n```\ngit fetch\n\n```\n\nA more intuitive name might be \"git sync,\" because this command will synchronize the git repo on your computer with the remote. \n\nWhat? \n\nLet's use another example. Let's say I'm working on the Pairwise codebase to add a new \"drawing\" feature so you can scribble notes anywhere on scree. At the same time Sean is working on a new challenge type that will demonstrate how to build mobile apps.\n\nWe're both working on the same codebase at the same time.\n\nWhen I run `git status` I see this:\n\n```bash\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\n```\n\nGit is telling me that my branch, `master`, is \"ahead of\" `origin/master` \\(the `master` branch on `origin`\\) by 1 commit. In other words \"You've made some changes, but nothing else on the remote has changed.\"\n\nHowever, this is not true. While I've been coding Sean has been pushing new code. I don't know this because git hasn't told me. Why hasn't git told me? Git is _out of sync_ and needs to be synced. \n\n```bash\ngit fetch\n\n```\n\nNow when I run `git status` git knows that Sean has pushed some changes in the meantime:\n\n```bash\nOn branch master\nYour branch and 'origin/master' have diverged,\nand have 1 and 7 different commits each, respectively.\n  (use \"git pull\" to merge the remote branch into yours)\n\n```\n\nThat's different\\! Now git is telling me that I've created one commit which I haven't yet pushed, but also Sean has created 7 commits that are already pushed to the remote. To sync up I can just run `git pull`.\n\nHowever, we're done with the example. What `git fetch` did is synced up the git repo on my computer with the one on the server. Running `git fetch` will never change your code, it will just make sure `git status` is giving you the right information. Therefor it's a good idea to run `git fetch` often if you're working with other people."
        },
        {
          "id": "Hm4V0Ulo5",
          "type": "media",
          "title": "Reviewing Git History",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/1EJ-y-_DrNw",
          "starterCode": "",
          "solutionCode": "",
          "content": "Let's review some commands:\n\n```bash\ngit log\ngit blame\ngit show\n\n```\n# How are these commands used?\n\n\n## Log\n\n`git log` shows you chronological history of the project. It answers the general question \"What happened?\"\n\n## Blame\n\n`git blame` shows you who changed specific code and why. It answers the specific question \"What happened _here_?\" \n\nThink of `git blame` as a mapping from code to commit messages.\n\n## Show\n\n`git show` shows you all the changes introduced by a specific commit. It answers the specific question \"What code did this commit change?\"\n\nThink of `git show` as a mapping from commit messages to code."
        },
        {
          "id": "WaUGSSi$m",
          "type": "media",
          "title": "Git Diffs",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/WKNb_QTQVok",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this lesson we're finally focusing on the differences, the specific changes we make to our files. All this talk of git's amazing ability to track changes and we've barely looked at the actual changes\\! Let's git into it. Today we're focusing on one command:\n\n```none\ngit diff\n\n```\n"
        },
        {
          "id": "tKcyGPzpL",
          "type": "media",
          "title": "More Git Commits",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/StglOBN3OR0",
          "starterCode": "",
          "solutionCode": "",
          "content": "Let's revisit the `git commit` command and see what else it has to offer.\n\n```\ngit commit\ngit commit --amend\n\n```\n"
        },
        {
          "id": "MFHICu5@8",
          "type": "media",
          "title": "Going Beyond Git Basics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "We've created this section to give you the bare minimum you need to be effective with Git. Why not more? Two reasons:\n\n* It's simply such a large tool that an entire course could be dedicated to it.\n* It would get boring.\n\n\nThat second point is key—it would get boring\\! Meaning ++it would not be useful++. In fact, it might be counterproductive. \n\nIf we try to teach you everything many of you, our students, will simply stop learning. This may not be you specifically but many will. We've seen it happen. It happened to me\\! That's not an interesting story though so I'll omit it. \n\nWhat's relevant is that it's your job with our help to strike a balance between learning everything and staying interested.\n\n> Aside: To all the skeptics thinking \"There's already been a lot of boring stuff in this course...\" the difference is some things are absolutely necessary. On the other hand, some things can be skipped over completely and you can learn them on the job when you need them.\n# Just a Tool\n\nRemember, Git is not useful on its own. It's useful as a tool to manage a codebase. So learn as much as you need to get started and learn more as you need it.\n# Advanced Git\n\nStill here? Are you sure you want to read more? You can skip the rest of this lesson entirely if you want to. Alright, since you're still here let's look at some more advanced Git uses.\n\n## git rebase\n\nThis is similar to `git merge` in that it combines two commit histories into one, however it will do so without a merge commit. This means your git history will be much more linear. This is useful when your changes logically are linear. \n\nFor example, when two developers work on completely separate features we can pretend they worked in sequence. Developer A pushes some commits, then Developer B pushes more commits on top of that. In practice they were working at the same time, but we can use `git rebase` to make our git history linear.\n\n## git bisect\n\n`bisect` tells git to help you search for a bug on your code. The gist is this:\n\n* Identify how to reproduce a bug in your code. This could be running an automated test, clicking a button, etc. Figure out how to make the bug happen consistently.\n* Run git bisect.\n\n\nNow the following will happen until the bug is found:\n\n* Git will  `checkout` a past branch.\n* Tell git whether or not the bug exists.\n   * If a bug exists, git will check out a branch further in the past.\n   * If the bug does not exist, git will check out a branch further in the future.\n* The process will repeat until git has helped you identify exactly which commit introduced the bug.\n\n\nWhat this does is automatically isolates the commit that introduced the bug. This is useful because you can look at the diff of that commit and greatly limit the code you have to look at. It's an extremely useful command, with a slight drawback:\n\n> `git bisect` relies on a meaningful git history to work.\n\nWhat this means is if you have a single commit with 5000 lines of changes, and that commit introduces a bug, `git bisect` doesn't help that much—5000 lines is still a lot to look through. The way to avoid this and produce a meaningful commit history is to bias towards smaller commits more often. \n\n## git reset\n\n`git reset` will revert changes. It's considered \"advanced\" simply because it can actually delete things and you won't be able to get them back. \n\nIf you delete a file or some code using your editor, git will keep track of those deletions. However, if you use `git reset --hard` you are telling git to revert changes _and_ completely discard them. This is a useful command, just like `rm` is a useful command, but if you're not careful you may end up deleting more than you want.\n# Ask Your Coworkers\n\nIf you end up working in a company, chances are there's at least one person \\(maybe only one person\\) who is an absolute Git Wizard™. These people are very valuable resources because you can ask them obscure questions that are hard to search for online.\n\nAs with everything we're teaching you, never be afraid to ask for help or look ignorant. Acknowledging you don't know is the first step towards knowing. \n\nMost likely you don't have coworkers you can ask yet, but this course teaches you everything you need to know to get a job.\n# More Git Resources\n\n* [Learn Git Branching](https://learngitbranching.js.org/) — A free online Git tutorial with visualizations. Highly recommended if you want to go deeper.\n* [Pro Git](https://git-scm.com/book/en/v2) — A free online book that really goes deep. It's a full textbook on Git.\n* [Git Docs](https://git-scm.com/docs) — A comprehensive list of reference material. Check out the \"Guides\" section for some more distilled knowledge.\n\n"
        },
        {
          "id": "$EcZq5Ecg",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section, you will learn how to build applications on your own computer\\! You will learn how to download the software you need, manage a codebase using version control, Git, and GitHub, and deploy your software projects for the world to see\\!"
        },
        {
          "id": "l$ZcH5bp5",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here is the special topics section for Developer Workflow where we will cover some additional content you may find interesting. Remember, the special topics contain optional material, but are recommended\\!"
        },
        {
          "id": "mkw5rDUzXB",
          "type": "media",
          "title": "Third-Party Software on the Command Line",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "You probably already know that you can install software on your computer. Things like VSCode, Firefox and Excel are all examples.\n\nYou can _also_ install software on the command line. You will just need a piece of software called a package manager. \n# Package Managers\n\nA package manager is somewhat like an app store for the command line. You use a package manager to install other software. A \"package\" is just another word for software.\n\n\n## apt: Windows and Linux\n\nOn Linux we have `apt`, which you will also have on Windows if you set up your system as we described earlier in this module \\(here's a [link](/workspace/RCm1HkcbQ) if you missed it\\). Linux already has a package manger installed and it's called `apt`.\n\n### Examples\n\nIn the examples below I'll use `<package>` to denote any package you might want to install. When you want a specific package be sure to replace `<package>` with the specific thing you want to install.\n\n```bash\n# Install a specific package\napt install <package>\n\n# List all the currently installed packages\napt list --installed\n\n# Show information for a specific package\napt show <package>\n\n# Search for a package\napt search <package>\n\n```\n\n## brew: Mac\n\nOn a Mac, things are not so simple. We have to install a third\\-party package manager called Homebrew. The latest instructions to install Homebrew can be found on their site: [https://brew.sh/](https://brew.sh/)\n\nAs of this writing the installation command is:\n\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n\n```\n\nHomebrew uses a command called `brew`. Once you have `brew` installed you can start using it much like `apt`.\n\n### Examples\n\nIn the examples below I'll use `<package>` to denote any package you might want to install. When you want a specific package be sure to replace `<package>` with the specific thing you want to install.\n\n```bash\n# Install a specific package\nbrew install <package>\n\n# List all the currently installed packages\nbrew list\n\n# Show information for a specific package\nbrew info <package>\n\n# Search for a package\nbrew search <package>\n\n```\n"
        },
        {
          "id": "CLkUN2Zhg",
          "type": "media",
          "title": "ln: Linking",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Sometimes you want the same file or directory in several places at once. How does that work? With links. Specifically, symbolic links. \"Sym links\" for short.\n# Symbolic Links\n\nThe `ln` command will create links. This command is a bit odd though, because we _always_ use it with the `-s` flag, which means symbolic.\n\nLet's say you have a `Photos/` directory located at `/Users/me/Documents/Archive/Photos`. This is where you keep all your photos because the parent directory, `Archive/` is automatically backed up. However, that path is sort of long and annoying to use. What do you do? \n\nCreate a symbolic link\\!\n\nLet's create a link to that file from your Desktop.\n\n```bash\nln -s /Users/me/Documents/Archive/Photos /Users/me/Desktop/Photos\n\n```\n\nNow you can access your photos right from your desktop, but the files haven't moved. They are all still in the `Archive/` directory and will all still be backed up like before. In other words, it's as if your files are in two places at once.\n\nThis is what Symbolic Links let you do.\n# Shortcuts and Aliases\n\nIn fact, this whole \"files in multiple places\" idea is so common that you're probably already familiar with it as either a \"shortcut\" or an \"alias\" depending on your operating system.\n\n* Windows uses \"Shortcuts\"\n* Mac uses \"Aliases\n\n\nThey are the same thing, a \"link\" from one location on your file system to another.\n# Why is this useful?\n\nThere is at least one very common use cases for symbolic links:\n\n* You want your code in a repo somewhere on your computer, but you also want it in your `$PATH` so it can be run or used in some way.\n\n\nFor example, when we solve the Dotfiles project we'll be using sym links to keep our actual code in a repo but still pretend our files are located directly in the user directory. "
        }
      ]
    },
    {
      "free": false,
      "id": "N3xExLt4",
      "title": "Async Programming & APIs",
      "challenges": [
        {
          "free": true,
          "id": "SfvRE0Ai",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/YzZw84Eco0U",
          "starterCode": "",
          "solutionCode": "",
          "content": "Asynchronous or \"async\" programming introduces the concept of _time_ into a computer program. Computer executes programs sequentially, line by line, in the exact order they were written. However, sometimes an operation has to make a request to some other software program, or another computer, and it must wait for the \"next instruction\" before it can continue.\n\nFor instance, perhaps a user submits an order to buy a product online. The order must be sent to a server and processed. It could fail\\! The client application \\(a webpage, a mobile app, etc.\\) must _wait for the response_ from the request before it can proceed. Depending on the response, the program may take different actions.\n\nThis is what \"async\" programming refers to. More generally, it refers to the concept in programming of allowing units of work to be separated and run in parallel. The e\\-commerce app in the above example could still function and perform other tasks if necessary while waiting for the transaction to succeed or fail.\n\nHere's an example of a simple asynchronous program in TypeScript:\n\n```typescript\n// Define an interface for products\ninterface Product {\n    id: string;\n    amount: number;\n}\n\n// Submit a transaction to buy a product\nconst submitTransaction = async (product: Product) => {\n    try {\n        // Send request to the server API\n        const result = await API.sendBuyRequestToServer(product);\n        return result;\n    } catch (err) {\n        return \"Request failed!\";\n    }\n};\n\n// Create a product\nconst pairwise: Product = {\n    id: \"sad98f7\",\n    amount: 5.00,\n}\n\n// Submit a purchase request for the product\nconst purchaseResult = submitTransaction(pairwise);\n\n// See the result\nconsole.log(purchaseResult);\n\n```\n\nTry to read through the code, but don't worry if you don't understand all of it\\!\n\nThe last thing to mention in this introduction is the idea of an _API\\._ This stands for \"Application Programming Interface\" and it's a big phrase to refer to something simple: the rules for talking to a program from the outside.\n\nProgramming languages define strict rules for how to communicate instructions to computers. Computer programs must also define strict rules if other computer programs can interact with them. That's all an API is. An API defines the rules for how you can make requests to another program.\n\nFor example, in our hypothetical e\\-commerce store above, the server presents some API which allows you to purchase a product. This API requires a `Product` with an `id` and `amount`, and in the example is represented by the function `API.sendBuyRequestToServer`. In a real program, this function would make a network request to a server. Some seconds would pass while this is happening, before the result comes back and the program continues executing.\n\nYou will find that APIs and asynchronous programming are indispensable for building modern software applications. Apps simply just have to talk to other apps to get data and perform actions\\! This module is all about teaching you how to write asynchronous code and interact with APIs. Let's get started\\!"
        },
        {
          "id": "AXxCZ1lxi",
          "type": "section",
          "title": "Timers",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "We will start out the Asynchronous Programming section with a few challenges which use timers.  We will see the TypeScript method `setTimeout` and `setInterval`. Timers are a great way to learn about async programming because they allow you to build programs which use delays, or timeouts, or intervals, to cause actions to occur in the future.\n\nLater, we will explore more advanced topics like promises, callbacks, async/await, APIs, network requests, and error handling. But to start out we are going to look at timers because these are a nice way to introduce the concept of asynchronous program execution.\n\nConsider this code for instance:\n\n```\n// Log starting message\nconsole.log(\"Starting the program...\");\n\n// Run a function after a 1 second delay\nsetTimeout(() => {\n  // Watch the console output carefully when running the code!\n  console.log(\"You will see me after a 1 second delay!\");\n}, 1000);\n\n// Log finishing message\nconsole.log(\"Finishing the program...\");\n\n```\n\nThis will result in the following console output:\n\n```\n\"Starting the program...\"\n\"Finishing the program...\"\n// After a 1 second delay:\n\"You will see me after a 1 second delay!\"\n\n```\n\nThe `setTimeout` keyword sets a timer which runs the callback function after a delay. So this code basically gets scheduled and executed in the future, rather then immediately. The result is the log messages come in a different order than they are written in the actual program.\n\nHopefully this example is clear to understand\\! Generally, it can be hard to wrap your head around asynchronous program execution, but async programming is one of the core building blocks to build up more complex applications."
        },
        {
          "id": "tsJf@hZ50z",
          "type": "typescript",
          "title": "Set a Timeout",
          "instructions": "Asynchronous programming involves calling functions or executing code which will complete _some time in the future_. This is in contrast to normal code execution, in which every line of code is executed immediately and produces a result right away.\n\nHere, we demonstrate the idea of asynchronous code using the built\\-in `setTimeout` function, which runs some code after a delay in time.",
          "testCode": "test(\"The log message text in the `setTimeout` should change `1` to `3`.\", async () => {\n  const result = await checkBoxAsync(__secret_log_box, `[\"You will see me after a 3 second delay!\"]`, 3500);\n  expect(result).toBeTruthy();\n});\n\ntest(\"The `setTimeout` delay should be changed from `1000` milliseconds to `3000` milliseconds.\", async () => {\n  expect(__user_code_string__.includes(3000)).toBeTruthy();\n  const result = await checkBoxAsync(__secret_log_box, `[\"You will see me after a 3 second delay!\"]`, 2000);\n  expect(result).toBeFalsy();\n});",
          "videoUrl": "https://www.youtube.com/embed/JWrC97oFLQQ",
          "starterCode": "// Log starting message\nconsole.log(\"Starting the program...\");\n\n// Run a function after a 1 second delay\nsetTimeout(() => {\n  // Watch the console output carefully when running the code!\n  console.log(\"You will see me after a 1 second delay!\");\n}, 1000);\n\n// Log finishing message\nconsole.log(\"Finishing the program...\");",
          "solutionCode": "// Log starting message\nconsole.log(\"Starting the program...\");\n\n// Run a function after a 1 second delay\nsetTimeout(() => {\n  // Watch the console output carefully when running the code!\n  console.log(\"You will see me after a 3 second delay!\");\n}, 3000);\n\n// Log finishing message\nconsole.log(\"Finishing the program...\");",
          "content": ""
        },
        {
          "id": "pniSO@f2r",
          "type": "typescript",
          "title": "Interval Training",
          "instructions": "Timers are a good way to start learning about asynchronous code. Timers allow you to run some code later in the future, or in an interval. In the last challenge we saw `setTimeout`, here we will take a look at `setInterval`, which lets you run some code repeatedly in an interval. The code below runs some code in an interval. It currently stops after 25 repetitions. Change it to stop after 10 instead.\n\n++NOTE:++ Both `setTimeout` and `setInterval` are built\\-in language features you can use anytime.",
          "testCode": "const messages = [\n  `[\"Current Interval: 1\"]`,\n  `[\"Current Interval: 2\"]`,\n  `[\"Current Interval: 3\"]`,\n  `[\"Current Interval: 4\"]`,\n  `[\"Current Interval: 5\"]`,\n  `[\"Current Interval: 6\"]`,\n  `[\"Current Interval: 7\"]`,\n  `[\"Current Interval: 8\"]`,\n  `[\"Current Interval: 9\"]`,\n  `[\"Current Interval: 10\"]`,\n];\n\ntest(\"The code should log the interval message every `500` milliseconds until the `interval` is equal to `10` and then stop.\", async () => {\n  const checkBoxAsync = async () => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let count = 0;\n        let result = true;\n\n        for (const message of messages) {\n          if (!result) {\n            continue;\n          }\n\n          result = inBox(__secret_log_box, message);\n        }\n\n        for (const x of __secret_log_box) {  \n          if (x.includes(\"Current Interval: \")) {\n            count++;\n          }\n        }\n\n        const solved = result && count === 10;\n        resolve(solved);\n      }, 5500);\n    });\n  };\n  const result = await checkBoxAsync();\n  expect(result).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/kMFgpHRvIbU",
          "starterCode": "let interval = 0;\n\nconsole.log(\"Interval Started!\");\n\nconst intervalTraining = setInterval(() => {\n\n  interval++;\n  console.log(`Current Interval: ${interval}`);\n\n  if (interval === 25) {\n    console.log(\"Interval Stopped!\")\n    clearInterval(intervalTraining);\n  }\n\n}, 500);",
          "solutionCode": "let interval = 0;\n\nconsole.log(\"Interval Started!\");\n\nconst intervalTraining = setInterval(() => {\n\n  interval++;\n  console.log(`Current Interval: ${interval}`);\n\n  if (interval === 10) {\n    console.log(\"Interval Stopped!\")\n    clearInterval(intervalTraining);\n  }\n\n}, 500);",
          "content": ""
        },
        {
          "id": "Vm5CE7v6d",
          "type": "typescript",
          "title": "Poll for the Response",
          "instructions": "In the last challenge we saw a usage of `setInterval` to create an interval to run some code every interval of time. In this challenge, write your own `setIterval` from scratch to check the `data` field of the `response` object\\. Once `data` is no longer `null` \\(this will change sometime after your run the code... and it will happen in less than 2 seconds...\\) set this new value to the `result` variable which is also defined in the interval. Once this occurs, clear the interval so it stops running.\n\nFor instance, you can think of the sequence of events like this:\n\n1. The code is run.\n1. The interval starts checking the `response.data` value\\.\n1. This value is update sometime later, in less than 2 seconds.\n1. The interval notices the value has changed, and sets the result to the `result` variable\\.\n1. The interval is cancelled.\n\n",
          "testCode": "test(\"The `result` variable should be updated to contain the value in `response.data` once this is changed from `null` to any other value.\", async () => {\n  await wait(1250);\n  const data = \"The value changed! 😬\";\n  response.data = data;\n  await wait(1000);\n  expect(result).toBe(data);\n});\n\ntest(\"The code should use `setInterval` to check the `response.data` value, and `clearInterval` to clear the interval once the value is set.\", async () => {\n  const code = __user_code_string__;\n  expect(code.includes(\"setInterval\")).toBeTruthy();\n  expect(code.includes(\"clearInterval\")).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/3Q7NB-qf-1M",
          "starterCode": "const response = { data: null };\n\nlet result: any;\n\n// Your code here:",
          "solutionCode": "const response = { data: null };\n\nlet result: any;\n\nconst interval = setInterval(() => {\n  // Check if the response.data field changes, when it does\n  // clear the interval and update the result variable with\n  // the response data.\n  if (response.data !== null) {\n    clearInterval(interval);\n    result = response.data;\n  }\n}, 250);\n\n",
          "content": ""
        },
        {
          "id": "Xgg$kgzsN",
          "type": "typescript",
          "title": "Timed Delay",
          "instructions": "In this challenge, write a function called `timedDelay` which uses the built\\-in `setTimeout` method to update the `result` variable to the provided argument after waiting for the amount of time specified in the `delay` argument\\.",
          "testCode": "test(\"The `timedDelay` function should be defined.\", () => {\n  expect(timedDelay).toBeDefined();\n  expect(typeof timedDelay).toBe(\"function\");\n});\n\ntest(\"The `timedDelay` function should update the `result` variable to the `value` argument after waiting for the amount of time specified by the `delay` argument.\", async () => {\n  // timedDelay called from user code only to prevent user from affecting test result\n  expect(result).toBe(undefined);\n  await wait(250);\n  expect(result).toBe(undefined);\n  await wait(250);\n  expect(result).toBe(undefined);\n  await wait(250);\n  expect(result).toBe(undefined);\n  await wait(500);\n  expect(result).toBe(value);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/XT0FPFgVNEY",
          "starterCode": "// The function should accept a value and delay argument, and after\n// waiting for the amount of time specified by the delay argument it\n// should update the result variable to the value argument.\ntype TimedDelayFunction = <T extends any>(value: T, delay: number) => void;\n\nlet result;\nconst value = \"SUPER!\";\nconst delay = 1000; // do not change this line!\n\n// Your code here:\n\n\n// uncomment the next line to call the function and pass the 2nd test\n// timedDelay(value, delay);",
          "solutionCode": "// The function should accept a value and delay argument, and after\n// waiting for the amount of time specified by the delay argument it\n// should update the result variable to the value argument.\ntype TimedDelayFunction = <T extends any>(value: T, delay: number) => void;\n\nlet result;\nconst value = \"SUPER!\";\nconst delay = 1000; // do not change this line!\n\n// Your code here:\nconst timedDelay: TimedDelayFunction = (value, delay) => {\n  setTimeout(() => {\n    result = value;\n  }, delay);\n}\n\n// uncomment the next line to call the function and pass the 2nd test\ntimedDelay(value, delay);",
          "content": ""
        },
        {
          "id": "@KFuMXp$c",
          "type": "typescript",
          "title": "Cancelling Timers",
          "instructions": "You may wonder what the `setTimeout` and `setInterval` functions return. They return number ids, which are used to represent those timer objects in the environment they exist in. These ids are used to uniquely identify these timers and can be used to cancel them externally. For instance, you can use the methods `clearInterval` or `clearTimeout` and pass in one of these ids to clear the respective interval or timeout.\n\nIn this challenge, we will see this in action. An interval and timer are setup. The interval will running every 1/2 second. The timeout should the cancel the interval after waiting 2.75 seconds. Your job is to complete the `setTimeout` callback to cancel the interval.",
          "testCode": "test(\"The `setTimeout` should be cancel the `interval` using the `clearInterval` method, after 2.75 seconds.\", async () => {\n  await wait(3500);\n  const messages = [\n    `[\"Running the interval... count: 1\"]`,\n    `[\"Running the interval... count: 2\"]`,\n    `[\"Running the interval... count: 3\"]`,\n    `[\"Running the interval... count: 4\"]`,\n    `[\"Running the interval... count: 5\"]`,\n  ];\n\n  let result;\n  \n  for (const message of messages) {\n    result = inBox(__secret_log_box, message);\n    expect(result).toBeTruthy();\n  }\n\n  result = inBox(__secret_log_box, `[\"Running the interval... count: 6\"]`);\n  expect(result).toBeFalsy();\n\n  result = inBox(__secret_log_box, `[\"Running the interval... count: 7\"]`);\n  expect(result).toBeFalsy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/csH3flT3hNc",
          "starterCode": "// [NOTE]: Do not modify the interval code\nlet count = 0;\nconst interval = setInterval(() => {\n  count++;\n  console.log(`Running the interval... count: ${count}`);\n}, 500);\n\nconst timeout = setTimeout(() => {\n  // Your code here:\n}, 2750);\n\nconsole.log(\"Interval id: \", interval);\nconsole.log(\"Timeout id:  \", timeout);\nconsole.log(\"------------------------\");",
          "solutionCode": "// [NOTE]: Do not modify the interval code\nlet count = 0;\nconst interval = setInterval(() => {\n  count++;\n  console.log(`Running the interval... count: ${count}`);\n}, 500);\n\nconst timeout = setTimeout(() => {\n  // Your code here:\n  clearInterval(interval);\n}, 2750);\n\nconsole.log(\"Interval id: \", interval);\nconsole.log(\"Timeout id:  \", timeout);\nconsole.log(\"------------------------\");",
          "content": ""
        },
        {
          "id": "1tpHfrO1u",
          "type": "section",
          "title": "Async/Await",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now that we've gotten the basics of asynchronous programming with a few challenges using timers, we're going to dive straight into the modern language syntax which allows us to write asynchronous functions: async/await. The async/await syntax is a newer language feature which allows us to very easily work with asynchronous code.\n\nWith async/await, you can write asynchronous code which \"appears\" synchronous. The result is it is much easier to write and reason about the execution of the code and the possible results.\n\nFor instance, consider this code snippet:\n\n```\nconst handleFetchUser = async () => {\n    try {\n        // This next line executes asynchronously\n        const user = await fetchUserAsync();\n        console.log(\"Got user: \", user);\n    } catch (err) {\n        console.log(\"Error fetching the user \", err);\n    }\n}\n\n```\n\nThe only new elements here are the `async` and `await` keywords\\. The rest should be familiar to you. The only difference here is that the `fetchUserAsync` function \\(not defined\\) is an _asynchronous_ function which makes some request and returns a result sometime later in the future. You don't know _when_ that will happen. And, the request could fail\\! If it fails, you also don't know _when_ that will happen.\n\nHowever, with the async/await syntax you can write the above code _as if_ it is actually synchronously. That is to say, by using the `await` keyword, the program will wait for the result from the `fetchUserAsync` function and once it gets the result that will be stored in the `user` variable\\. Alternatively, if it fails and throws and error you can catch this error with a normal `try/catch` construction\\.\n\nThis might seem very straightforward... and it is\\! Just wait until you see how asynchronous code was written before the async/await syntax was built into the language.\n\nSo, moving forward we will cover the async/await syntax in this section and get some practice writing asynchronous functions. Later, we will cover other language features and patterns related to handling asynchronous code: promises and callbacks."
        },
        {
          "id": "Yxp0jYtX2",
          "type": "typescript",
          "title": "Async Function Syntax",
          "instructions": "The async/await syntax is used to transform a regular function into a function which can handle \"waiting for\" future values. Creating an async function is as easy as adding the `async` keyword to a function definition. Consider the following two async functions:\n\n```\nconst asyncArrowFunction = async () => {\n    // Handle some async operations...\n};\n\nasync function asyncRegularFunction() {\n    // Handle some async operations...\n};\n\n\n```\n\nThe addition of the `async` keyword allows these functions to handle asynchronous values. In the code editor is a regular function. Convert this to a an async function using the `async` keyword\\!",
          "testCode": "test(\"`pleaseTransformMeIntoAnAsyncFunction` should be an `async` function.\", async () => {\n  expect(pleaseTransformMeIntoAnAsyncFunction).toBeDefined();\n  expect(typeof pleaseTransformMeIntoAnAsyncFunction).toBe(\"function\");\n  expect(__user_code_string__.includes(\" async \")).toBeTruthy();\n});\n\ntest(\"`pleaseTransformMeIntoAnAsyncFunction` should directly return whatever argument is provided to it.\", async () => {\n  const value = \"Hello!\";\n  const result = await pleaseTransformMeIntoAnAsyncFunction(new Promise(r => r(value)));\n  expect(result).toBe(value);\n\n  expect(typeof pleaseTransformMeIntoAnAsyncFunction()).toBe(\"object\");\n  expect(pleaseTransformMeIntoAnAsyncFunction() === value).toBeFalsy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/lwtOFe3nQcw",
          "starterCode": "// This function should be converted to an asynchronous function...\nconst pleaseTransformMeIntoAnAsyncFunction = (args: any) => {\n  // Return whatever arguments are provided...\n  return args;\n};",
          "solutionCode": "// This function should be converted to an asynchronous function...\nconst pleaseTransformMeIntoAnAsyncFunction = async (args: any) => {\n  // Return whatever arguments are provided...\n  return args;\n};",
          "content": ""
        },
        {
          "id": "5wHvxCBaG",
          "type": "typescript",
          "title": "The Await Keyword",
          "instructions": "In this challenge, there is a function `makePromise` which returns a promise. Don't worry too much about the details of promises yet, for now this is just a helpful function for us to continue working with the async/await syntax. The `makePromise` function will return a future value or throw an error depending on the `shouldResolve` argument provided to it.\n\nThe other function, `fulfillThePromise`, needs to be converted to an `async` function\\. Then, you need to use the `await` keyword to wait for the result of calling `makePromise`.",
          "testCode": "const asyncNotInCommentRegex = /(?<!^(?:\\s?\\*|\\/\\*|\\/\\/).*)async/m;\nconst awaitNotInCommentRegex = /(?<!^(?:\\s?\\*|\\/\\*|\\/\\/).*)await/m;\n// ^^ will not match if keyword is in line which starts with comment (//, /*, or *)\n\ntest(\"`fulfillThePromise` should be an `async` function which `await`s and returns the resolved value from the `makePromise` function.\", async () => {\n  expect(__user_code_string__).toMatch(asyncNotInCommentRegex);\n  expect(__user_code_string__).toMatch(awaitNotInCommentRegex);\n  const result = await fulfillThePromise(true);\n  expect(result).toBe(\"I promised!\");\n});\n\ntest(\"`fulfillThePromise` should return the resolved promise if `promiseShouldResolve` is true.\", async () => {\n  expect(__user_code_string__).toMatch(asyncNotInCommentRegex);\n  expect(__user_code_string__).toMatch(awaitNotInCommentRegex);\n  const result = await fulfillThePromise(true);\n  expect(result).toBe(\"I promised!\");\n});\n\ntest(\"`fulfillThePromise` should return the rejected promise if `promiseShouldResolve` is false.\", async () => {\n  const result = await fulfillThePromise(false);\n  expect(result).toBe(\"Promise rejected!\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/1JFMCFJ_4ak",
          "starterCode": "/**\n * A function which makes a new promise and resolve or rejects\n * the promise based on the provided argument. Don't worry about\n * the details of promises yet!\n */\nconst makePromise = (shouldResolve: boolean) => {\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(\"I promised!\");\n    } else {\n      reject(\"Promise rejected!\");\n    }\n  });\n}\n\n/**\n * A function which calls the makePromise function to get the\n * resolved promise value. This function needs to use async/await\n * and return the fulfilled promise's result or rejection value.\n */\nconst fulfillThePromise = (promiseShouldResolve: boolean) => {\n  try {\n    console.log(\"Fulfilling the promise...\");\n    const resolutionValue = makePromise(promiseShouldResolve);\n    console.log(\"The resolution value is: \", resolutionValue);\n    return resolutionValue;\n  } catch (rejectionValue) {\n    console.log(\"The rejection value is: \", rejectionValue);\n    return rejectionValue;\n  }\n};\n\n// Change true to false to see the result of the promise being rejected:\nfulfillThePromise(true);",
          "solutionCode": "/**\n * A function which makes a new promise and resolve or rejects\n * the promise based on the provided argument. Don't worry about\n * the details of promises yet!\n */\nconst makePromise = (shouldResolve: boolean) => {\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(\"I promised!\");\n    } else {\n      reject(\"Promise rejected!\");\n    }\n  });\n}\n\n/**\n * A function which calls the makePromise function to get the\n * resolved promise value. This function needs to use async/await\n * and return the fulfilled promise's result or rejection value.\n */\nconst fulfillThePromise = async (promiseShouldResolve: boolean) => {\n  try {\n    console.log(\"Fulfilling the promise...\");\n    const resolutionValue = await makePromise(promiseShouldResolve);\n    console.log(\"The resolution value is: \", resolutionValue);\n    return resolutionValue;\n  } catch (rejectionValue) {\n    console.log(\"The rejection value is: \", rejectionValue);\n    return rejectionValue;\n  }\n};\n\n// Change true to false to see the result of the promise being rejected:\nfulfillThePromise(true);",
          "content": ""
        },
        {
          "id": "EoK0U8Q$0",
          "type": "typescript",
          "title": "Fetching Data Asynchronously",
          "instructions": "Now that you are familiar with the basics of the async/await syntax, let's use it to actually do something more useful. Let's fetch some data from a GitHub profile, like we saw in the Async intro video\\!\n\nThe `fetchGitHubProfileAsync` function is using the fetch API to fetch data from GitHub. The [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) is  a built\\-in tool in the browser environment used to make network requests \\- we will see more on this later. For now, try to convert the `fetchGitHubProfileAsync`  into an async function and then await the result of calling the fetch method. You will also need to await the result of calling `response.json()` as well, because this also returns a promise.\n\nThe TypeScript editor type checking should help you make the changes. Try hovering the red underlines to see hints and suggestions.",
          "testCode": "test(\"The `fetchGitHubProfileAsync` function should using `async/await` syntax and return the GitHub profile user data for whatever `username` is supplied to it.\", async () => {\n  let result = await fetchGitHubProfileAsync(\"bonham000\");\n  expect(result.id).toBe(18126719);\n\n  result = await fetchGitHubProfileAsync(\"torvalds\");\n  expect(result.id).toBe(1024025);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/m7BUkjQbmeY",
          "starterCode": "// An asynchronous function to fetch a user's information from GitHub.\nconst fetchGitHubProfileAsync = (username: string) => {\n  try {\n    const url = `https://api.github.com/users/${username}`;\n    console.log(`Fetching user: ${username}...`);\n    const response = fetch(url);\n    const result = response.json();\n    console.log(\"\\nResult:\");\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.log(\"Error fetching user!\");\n    console.log(err);\n  }\n}\n\n// Fetch a user, trying adding your username here:\nconst user = \"torvalds\";\nfetchGitHubProfileAsync(user);",
          "solutionCode": "// An asynchronous function to fetch a user's information from GitHub.\nconst fetchGitHubProfileAsync = async (username: string) => {\n  try {\n    const url = `https://api.github.com/users/${username}`;\n    console.log(`Fetching user: ${username}...`);\n    const response = await fetch(url);\n    const result = await response.json();\n    console.log(\"\\nResult:\");\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.log(\"Error fetching user!\");\n    console.log(err);\n  }\n}\n\n// Fetch a user, trying adding your username here:\nconst user = \"torvalds\";\nfetchGitHubProfileAsync(user);",
          "content": ""
        },
        {
          "id": "fjksTEhuVf",
          "type": "typescript",
          "title": "Handling Async Errors",
          "instructions": "An important rule of thumb anytime you are working with asynchronous code is that the code could fail. In fact, it's not a bad idea to _always assume_ asynchronous code may be fail and try to handle failure scenarios. Unhandled errors could completely crash or disrupt your program\\!\n\nFortunately, the async/await syntax makes this very easy\\! You can simply wrap `await` statements in a regular `try/catch`. This will result in any errors being caught, where you can handle them. In the code editor we have created a helper function which will return a promise which will throw an error 1 second after it is created.\n\nModify the `safeAsync` function to catch this error and log it out to the console\\!",
          "testCode": "// Write your tests here:\ntest(\"`safeAsync` should handle the error thrown by `waitAndThrowError`.\", async () => {\n  // Verify safeAsync does not throw an error\n  try {\n    await safeAsync();\n    expect(inBox(__secret_log_box, `[\"Here is the error! 💣\"]`)).toBeTruthy();\n\n    safeAsync();\n    await wait(1500);\n  } catch (e) {\n    fail();\n  }\n\n  // Verify waitAndThrowError throws an error:\n  try {\n    await waitAndThrowError();\n    fail();\n  } catch (e) {\n    pass();\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Sag6_p5tvyU",
          "starterCode": "// A helper function which returns a promise which rejects after\n// waiting 1 second using setTimeout.\nconst waitAndThrowError = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(\"Here is the error! 💣\");\n    }, 1000);\n  })\n};\n\n// Transform this to an async/await function, and use a try/catch to\n// handle the error:\nconst safeAsync = () => {\n  waitAndThrowError();\n}\n\nsafeAsync();",
          "solutionCode": "// A helper function which returns a promise which rejects after\n// waiting 1 second using setTimeout.\nconst waitAndThrowError = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(\"Here is the error! 💣\");\n    }, 1000);\n  })\n};\n\n// Transform this to an async/await function, and use a try/catch to\n// handle the error:\nconst safeAsync = async () => {\n  try {\n    await waitAndThrowError();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nsafeAsync();",
          "content": ""
        },
        {
          "id": "rShMOVugA",
          "type": "typescript",
          "title": "Quote of the Day",
          "instructions": "In this challenge, let's get some practice writing an async function from scratch. Use the `fetch` method we saw in one of the previous challenges to fetch a quote of the day from a quotes API:\n\n```\n// Fetch the Quote of the Day:\nfetch(\"https://quotes.rest/qod\");\n\n```\n\nAs in the previous challenge, you will need to wrap `fetch` in an `async/await` function, and we recommend you also use `try/catch` to handle any possible errors\\! Create a function `quoteOfTheDay` to do this. The function should return the asynchronous result of calling the quotes API provided above.\n\n++NOTE:++ You can check out the [quotes API documentation here](https://quotes.rest/).",
          "testCode": "test(\"The `quoteOfTheDay` function should be defined.\", () => {\n  expect(quoteOfTheDay).toBeDefined();\n  expect(typeof quoteOfTheDay).toBe(\"function\");\n});\n\ntest(\"The `quoteOfTheDay` function returns the result of using `fetch` to call the `https://quotes.rest/qod` API.\", async () => {\n  const solutionFn = async () => {\n    try {\n      const response = await fetch(\"https://quotes.rest/qod\");\n      const result = await response.json();\n      return result;\n    } catch (err) {\n      return null;\n    }\n  };\n\n  const expected = await solutionFn();\n  const result = await quoteOfTheDay();\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7-bHIKUbxYs",
          "starterCode": "// Your code here:",
          "solutionCode": "/**\n * Fetch the quote of the day.\n */\nconst quoteOfTheDay = async () => {\n  try {\n    const response = await fetch(\"https://quotes.rest/qod\");\n    const result = await response.json();\n    return result;\n  } catch (err) {\n    console.log(\"Error fetching data... \", err);\n  }\n};\n",
          "content": ""
        },
        {
          "id": "Uw81b70ca",
          "type": "section",
          "title": "Promises and Callbacks",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section we will take a look at the more fundamental building block used to work with asynchronous code: _promises_. A promise is a language construct which is used to represent some future value. Promises can exist in one of three states:\n\n1. **Pending state:** waiting for eventual completion of the future value.\n1. **Fulfilled/Resolved state:** the operation the promise was waiting on his completed successfully.\n1. **Rejected/Failed state:** the operation the promise was waiting on failed.\n\n\nYou can create a promise using the `Promise` constructor:\n\n```\n// The \"...\" are required arguments\nconst myPromise = new Promise(...);\n\n```\n\nThe `Promise` constructor accepts a callback function as an argument. This callback function will be used when the promise reaches its completion or failed state in the future. We have seen callback functions in earlier lessons, but here we will introduce them more explicitly. A \"callback\" or callback function is a function you provide in different scenarios which is then executed by other code. For instance, we have seen callbacks in the context of `map` `filter` and `reduce`:\n\n```typescript\nconst names = [\"Sam\", \"Joe\", \"Ben\"];\n\nconst upperCaseNames = names.map((name: string) => {\n    return name.toUpperCase();\n});\n\n```\n\nThe function supplied to `.map` is a \"callback\" function. The `.map` implementation will call this function for every item in the `names` array\\. Callback functions have a wide variety of uses, but they are especially important when working with asynchronous code.\n\nIn the case of promises, you supply a callback function to the `Promise` constructor which is used to handle the completion or failure of the promise. For instance:\n\n```\nconst promiseCallback = (resolve, reject) => {\n    resolve(\"Promise resolved!\");\n}\n\nconst myPromise = new Promise(promiseCallback);\n\n```\n\nThe `promiseCallback` is the callback function which is supplied to the `Promise` constructor\\. This callback function accepts two arguments, which are also functions\\! These are typically named `resolve` and `reject`. These functions are used to handle the completion states of the promise.\n\nCalling the `resolve` method and passing in a value will cause the promise to fulfill and resolve to whatever value is passed in to the `resolve` function\\. Conversely, calling the `reject` function will cause the promise to reject \\(throw an error\\) and the error will contain whatever argument is passed to the `reject` function\\.\n\nThis may feel a little confusing \\- don't worry\\! We will get plenty of practice working with promises directly in the next few challenges\\! Promises inherently involve \"waiting\" for operations to complete in the future, and the syntax is a little more challenging to understand. That's why we are introducing promises now, after we have already discussed async/await.\n\nFundamentally, async/await allows you to write functions which handle promise\\-like values. Whenever you `await` a value, beneath the surface you are awaiting the result of a promise fulfilling or rejecting. This should give you a good frame of reference to dig in deeper and understand promises more directly.\n\nLet's get started\\!"
        },
        {
          "id": "NGb50$Chj",
          "type": "typescript",
          "title": "Constructing Promises",
          "instructions": "Define a new `Promise` in the code editor. Remember, a `Promise` can be created using the `new` keyword and you must pass in a callback function. The callback function signature is provided in the code editor. It may look confusing but it is just a function which takes 2 arguments: each argument is another function which accepts a single argument.\n\nTry to write a simple function which fits the `PromiseExecutorFunction` definition\\. Inside this function, simply call the `resolve` function with any value you like. Then, use this callback function to construct a new promise. Name your promise `myPromise`.",
          "testCode": "test(\"`myPromise` should be defined and should be a promise.\", () => {\n  expect(myPromise).toBeDefined();\n});\n\ntest(\"`myPromise` should resolve to some value (not `undefined`).\", async () => {\n  const result = await myPromise;\n  expect(result !== undefined).toBe(true);\n});",
          "videoUrl": "https://www.youtube.com/embed/16M_H5X1FLc",
          "starterCode": "type PromiseExecutorFunction = (\n    resolve: (value?: unknown) => void, reject: (reason?: any) => void,\n) => void;\n\n// Your code here:\n",
          "solutionCode": "type PromiseExecutorFunction = (\n    resolve: (value?: unknown) => void, reject: (reason?: any) => void,\n) => void;\n\n// Your code here:\n\nconst promiseCallback: PromiseExecutorFunction = (resolve, reject) => {\n    resolve(\"Resolved!\");\n};\n\nconst myPromise = new Promise(promiseCallback);\n",
          "content": ""
        },
        {
          "id": "MEjox@iw0",
          "type": "typescript",
          "title": "Rejecting Promises",
          "instructions": "The callback function supplied to the `Promise` constructor is important to understand. This callback is used to \"complete\" the promise. This callback provides two additional functions: a \"resolve\" and \"reject\" function, which are used to handle the promise wrapped operation by either resolving or rejecting.\n\nCreate a function `getPromise` which returns a new promise. This time, the promise should use the second function to reject\\! Pass in some argument to the `reject` method \\(e.g. this can represent an error message for why the rejection occurred\\).",
          "testCode": "test(\"`getPromise` should be a function.\", () => {\n  expect(typeof getPromise === \"function\").toBe(true);\n});\n\ntest(\"`getPromise` should return a promise which rejects to some value (not `undefined`).\", async () => {\n  expect(typeof getPromise === \"function\").toBe(true);\n\n  try {\n    await getPromise();\n    fail();\n  } catch (err) {\n    expect(err !== undefined).toBe(true);\n    pass();\n  }\n});",
          "videoUrl": "https://www.youtube.com/embed/7Il-a1-2VLg",
          "starterCode": "type PromiseExecutorFunction = (\n  resolve: (value?: unknown) => void, reject: (reason?: any) => void,\n) => void;\n\n// Your code here:\n",
          "solutionCode": "type PromiseExecutorFunction = (\n  resolve: (value?: unknown) => void,\n  reject: (reason?: any) => void\n) => void;\n\n// Your code here:\n\nconst promiseCallback: PromiseExecutorFunction = (resolve, reject) => {\n  return reject(\"Rejected!\");\n};\n\nconst getPromise = () => {\n  const myPromise = new Promise(promiseCallback);\n  return myPromise;\n};\n",
          "content": ""
        },
        {
          "id": "0Phhgr1T$d",
          "type": "typescript",
          "title": "Resolve a Promise in the Future",
          "instructions": "The promises we've created so far did not actually resolve to some value later in the future. Instead, they just resolved immediately when we called the `resolve` or `reject` callback functions. That doesn't make them _synchronous_, it just means we didn't really wait very long for the value to arrive.\n\nNow, let's construct a new promise from scratch \\- just like before. This time, inside the promise, use `setTimeout` to wait 1 second _and then_ call the `resolve` function\\. Pass in the string `I waited for 1 second!` to the `resolve` function\\. Using `setTimeout` like this is an easy way to construct an asynchronous value, which we can use promises to wait for\\!",
          "testCode": "test(\"`myPromise` should be defined and should be a promise.\", () => {\n  expect(myPromise).toBeDefined();\n});\n\ntest(\"`myPromise` should resolve after 1 second and produce the string value: `I waited for 1 second!`.\", async () => {\n  const now = Date.now();\n  const result = await myPromise;\n  const then = Date.now();\n  const time = then - now;\n  expect(time > 900).toBeTruthy();\n  expect(time < 1100).toBeTruthy();\n  expect(result).toBe(\"I waited for 1 second!\");\n});",
          "videoUrl": "https://www.youtube.com/embed/DRcQsNoG8vI",
          "starterCode": "// Your code here",
          "solutionCode": "// Your code here\nconst promiseCallback = (resolve: (value?: any) => void) => {\n  setTimeout(() => resolve(\"I waited for 1 second!\"), 1000);\n};\n\nconst myPromise = new Promise(promiseCallback);",
          "content": ""
        },
        {
          "id": "hYluq2vKOo",
          "type": "typescript",
          "title": "Return a Promise from a Function",
          "instructions": "Let's continue building up from the last challenge. Now, create a new function `promiseFactory`. The function signature is provided for you in the editor below. This function should accept two arguments and return a promise which resolves or rejects after a time limit based on the arguments provided.\n\n++NOTE:++ You can pass any value you like to the `resolve` and `reject` methods\\.",
          "testCode": "test(\"The `promiseFactory` function should be defined.\", () => {\n  expect(typeof promiseFactory === \"function\").toBe(true);\n});\n\ntest(\"`promiseFactory` should return a promise which resolves if the `shouldResolve` argument is `true`.\", async () => {\n  try {\n    await promiseFactory(true, 500);\n    pass();\n  } catch (err) {\n    fail();\n  }\n});\n\ntest(\"`promiseFactory` should return a promise which rejects if the `shouldResolve` argument is `false`.\", async () => {\n  expect(promiseFactory).toBeDefined();\n  try {\n    await promiseFactory(false, 500);\n    fail();\n  } catch (err) {\n    pass();\n  }\n});\n\ntest(\"`promiseFactory` should resolve or reject after the time provided by the `timeLimit` argument.\", async () => {\n  const now = Date.now();\n  await promiseFactory(true, 1350);\n  const then = Date.now();\n  const time = then - now;\n  expect(time > 1200).toBeTruthy();\n  expect(time < 1500).toBeTruthy();\n});",
          "videoUrl": "https://www.youtube.com/embed/odoH5CXh0gg",
          "starterCode": "type PromiseFactoryFunction = (\n  // Whether the promise should resolve or reject\n  shouldResolve: boolean,\n  // How long the promise should wait before resolving or rejected\n  timeLimit: number\n) => Promise<any>;\n\n// Your code here:\n",
          "solutionCode": "type PromiseFactoryFunction = (\n  // Whether the promise should resolve or reject\n  shouldResolve: boolean,\n  // How long the promise should wait before resolving or rejected\n  timeLimit: number\n) => Promise<any>;\n\n// Your code here:\nconst promiseFactory: PromiseFactoryFunction = (shouldResolve, timeLimit) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(\"Resolved!\");\n      } else {\n        reject(\"Rejected!\");\n      }\n    }, timeLimit);\n  });\n};\n",
          "content": ""
        },
        {
          "id": "sUGjCBSnI",
          "type": "typescript",
          "title": "Handling Promises with an Async Function",
          "instructions": "Now let's go one step further. We can improve on the `promiseFactory` from the last challenge by also supplying two more arguments: resolve and reject values. Create another `promiseFactory` following the type signature in the editor below.\n\nThen, create a function `handlePromiseAsync` which accepts a promise as an argument and handles fulfilling the promise using `async/await`. This function should return whatever value the promise resolves or rejects to.",
          "testCode": "test(\"`promiseFactory` and `handlePromiseAsync` are both defined and are functions.\", () => {\n  expect(typeof promiseFactory === \"function\").toBe(true);\n  expect(typeof handlePromiseAsync === \"function\").toBe(true);\n});\n\ntest(\"`promiseFactory` should return a promise which resolves or rejects based on the `shouldResolve` argument.\", async () => {\n  expect(promiseFactory).toBeDefined();\n\n  try {\n    await promiseFactory({\n      resolveValue: \"resolved!\",\n      rejectValue: \"rejected!\",\n      shouldResolve: true,\n      timeLimit: 500,\n    });\n    pass();\n  } catch (err) {\n    fail();\n  }\n\n  try {\n    await promiseFactory({\n      resolveValue: \"resolved!\",\n      rejectValue: \"rejected!\",\n      shouldResolve: false,\n      timeLimit: 500,\n    });\n    fail();\n  } catch (err) {\n    pass();\n  }\n});\n\ntest(\"`promiseFactory` should resolve or reject after the time provided by the `timeLimit` argument.\", async () => {\n  const now = Date.now();\n  await promiseFactory({\n    resolveValue: \"resolved!\",\n    rejectValue: \"rejected!\",\n    shouldResolve: true,\n    timeLimit: 500,\n  });\n  const then = Date.now();\n  const time = then - now;\n  expect(time > 400).toBeTruthy();\n  expect(time < 600).toBeTruthy();\n});\n\ntest(\"The `handlePromiseAsync` function should handle fulfilling promises creating by the `promiseFactory` and should return the value the promise resolves or rejects to.\", async () => {\n  let promise = promiseFactory({\n    resolveValue: \"resolved!!! --- !!!\",\n    rejectValue: \"rejected!!! --- !!!\",\n    shouldResolve: true,\n    timeLimit: 500,\n  });\n  let result = await handlePromiseAsync(promise);\n  expect(result).toBe(\"resolved!!! --- !!!\");\n\n  promise = promiseFactory({\n    resolveValue: \"resolved!!! --- !!!\",\n    rejectValue: \"rejected!!! --- !!!\",\n    shouldResolve: false,\n    timeLimit: 500,\n  });\n  result = await handlePromiseAsync(promise);\n  expect(result).toBe(\"rejected!!! --- !!!\");\n});",
          "videoUrl": "https://www.youtube.com/embed/xHazgwoQcLc",
          "starterCode": "interface PromiseFactoryConfig {\n  // The value which should be provided if the promise resolves\n  resolveValue: any;\n  // The value which should be provided if the promise rejects\n  rejectValue: any;\n  // Whether the promise should resolve or reject\n  shouldResolve: boolean;\n  // How long the promise should wait before resolving or rejected\n  timeLimit: number;\n}\n\ntype PromiseFactoryFunction = (args: PromiseFactoryConfig) => Promise<any>;\n\ntype HandlePromiseAsyncFunction = (promise: Promise<any>) => Promise<any>;\n\n// Your code here:\n",
          "solutionCode": "interface PromiseFactoryConfig {\n  // The value which should be provided if the promise resolves\n  resolveValue: any;\n  // The value which should be provided if the promise rejects\n  rejectValue: any;\n  // Whether the promise should resolve or reject\n  shouldResolve: boolean;\n  // How long the promise should wait before resolving or rejected\n  timeLimit: number;\n}\n\ntype PromiseFactoryFunction = (args: PromiseFactoryConfig) => Promise<any>;\n\ntype HandlePromiseAsyncFunction = (promise: Promise<any>) => Promise<any>;\n\n// Your code here:\n\nconst promiseFactory: PromiseFactoryFunction = (config) => {\n  const { resolveValue, rejectValue, shouldResolve, timeLimit } = config;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(resolveValue);\n      } else {\n        reject(rejectValue);\n      }\n    }, timeLimit);\n  });\n};\n\nconst handlePromiseAsync: HandlePromiseAsyncFunction = async (promise) => {\n  try {\n    const result = await promise;\n    return result;\n  } catch (err) {\n    return err;\n  }\n};\n",
          "content": ""
        },
        {
          "id": "8yGhkw2o5",
          "type": "typescript",
          "title": "The .then and .catch Promise Methods",
          "instructions": "Async/await syntax is very nice because you can write asynchronous code which is simple to understand and work with. However, the async/await syntax was not always part of the language.\n\nPromises have another way of dealing with fulfillment: the `.then` and `.catch` methods\\. These are methods that exist on the `Promise` object itself and you can use them to handle the resolution or rejection of the wrapped promise value. Take a look at the code editor to see what we mean\\!",
          "testCode": "test(\"The `resolve` promise value should be logged to the console in the `.then` callback.\", async () => {\n  await wait(250);\n  const result = inBox(__secret_log_box, `[\"This promise value resolved!\"]`);\n  expect(result).toBeTruthy();\n});\n\ntest(\"The `reject` promise value should be logged to the console in the `.catch` callback.\", async () => {\n  await wait(250);\n  const result = inBox(__secret_log_box, `[\"This promise value rejected!\"]`);\n  expect(result).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/HX_CDaNRb1U",
          "starterCode": "// A quick shorthand to get a resolved promise value:\nconst resolve = Promise.resolve(\"This promise value resolved!\");\n\nresolve.then((resolvedValue) => {\n  console.log(\"Calling .then on a Promise gives us the resolved value:\");\n  // TODO: Log out the resolvedValue here:\n\n});\n\n// A quick shorthand to get a rejected promise value:\nconst reject = Promise.reject(\"This promise value rejected!\");\n\nreject.catch((rejectedValue) => {\n  console.log(\"Calling .catch on a Promise gives us the rejected value:\");\n  // TODO: Log out the rejectedValue here:\n\n});\n",
          "solutionCode": "// A quick shorthand to get a resolved promise value:\nconst resolve = Promise.resolve(\"This promise value resolved!\");\n\nresolve.then((resolvedValue) => {\n  console.log(\"Calling .then on a Promise gives us the resolved value:\");\n  // TODO: Log out the resolvedValue here:\n  console.log(resolvedValue);\n});\n\n// A quick shorthand to get a rejected promise value:\nconst reject = Promise.reject(\"This promise value rejected!\");\n\nreject.catch((rejectedValue) => {\n  console.log(\"Calling .catch on a Promise gives us the rejected value:\");\n  // TODO: Log out the rejectedValue here:\n  console.log(rejectedValue);\n});\n",
          "content": ""
        },
        {
          "id": "$AiChoqCt",
          "type": "typescript",
          "title": "Using .then and .catch with Promises",
          "instructions": "You may wonder what the `.then` and `.catch` methods return. Confusingly, they also return promises\\! Additionally, you can chain these methods together:\n\n```typescript\nconst promise = new Promise((resolve, reject) => resolve(\"done!\"));\n\npromise.then(result => {\n    console.log(result);\n}).catch(err => {\n    console.log(err);\n});\n\n```\n\nThe `.then` method is called whenever the promise resolves and the `.catch` method is called whenever the promises rejects. Remember: only one of these future states can happen. A promise must _either_ resolve or reject.\n\nIn the editor below, modify the `handlePromise` method to use `.then` and `.catch` on the provided `promise` argument\\. In each callback, return the result argument \\(i.e. the resolved or rejected value\\). Then, return the entire result of calling these methods on the `promise` argument to return the fulfilled result.",
          "testCode": "test(\"`fulfillThePromise` should return the resolved value of the promise provided to it.\", async () => {\n  const result = await fulfillThePromise(Promise.resolve(\"hi\"));\n  expect(result).toBe(\"hi\");\n});\n\ntest(\"`fulfillThePromise` should return the rejected value of the promise provided to it.\", async () => {\n  const result = await fulfillThePromise(Promise.reject(\"bleg\"));\n  expect(result).toBe(\"bleg\");\n});\n\ntest(\"`handlePromise` should use `.then` and `.catch`.\", async () => {\n  expect(__user_code_string__.includes(\".then\")).toBeTruthy();\n  expect(__user_code_string__.includes(\".catch\")).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/80-rTWLfLaQ",
          "starterCode": "/**\n * Handle the promise fulfillment using the then/catch\n * methods on the promise object.\n */\nconst handlePromise = (promise: Promise<any>) => {\n  // Your code here:\n};\n\n/**\n * Handle fulfilling a provided promise using the handlePromise\n * funciton. Return the result.\n */\nconst fulfillThePromise = async (promise: Promise<any>) => {\n  try {\n    const result = await handlePromise(promise);\n    return result;\n  } catch (err) {\n    return err;\n  }\n};\n",
          "solutionCode": "/**\n * Handle the promise fulfillment using the then/catch\n * methods on the promise object.\n */\nconst handlePromise = (promise: Promise<any>) => {\n  return promise.then(value => {\n    return value;\n  }).catch(err => {\n    return err;\n  });\n};\n\n/**\n * Handle fulfilling a provided promise using the handlePromise\n * funciton. Return the result.\n */\nconst fulfillThePromise = async (promise: Promise<any>) => {\n  try {\n    const result = await handlePromise(promise);\n    return result;\n  } catch (err) {\n    return err;\n  }\n};\n",
          "content": ""
        },
        {
          "id": "sbfx9w1qI",
          "type": "typescript",
          "title": "Handling Multiple Promises",
          "instructions": "The `Promise` object provides a few additional methods which are useful for handling future values. In this challenge, let's take a look at the `Promise.all` method which is useful when you have multiple promises you want to handle together.\n\nWe have our `promiseFactory` helper again here, and we are using it to create an array of promises, the `promises` array\\. Create a function, `resolveAll`, which can accept a list of promises and returns an array of their resolved values. Try to use [Promise\\.all](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) to do this\\!",
          "testCode": "const __promiseFactoryUtil = (shouldResolve, timeLimit) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Resolved in ${timeLimit} time`);\n      } else {\n        reject(`Rejected in ${timeLimit} time`);\n      }\n    }, timeLimit);\n  });\n};\n\ntest(\"The `resolveAll` function should be defined.\", () => {\n  expect(typeof resolveAll).toBe(\"function\");\n});\n\ntest(\"The `resolveAll` function should accept an array of promises and use async/await and `Promise.all` to return an array containing all of the resolved values from the list of promises.\", async () => {\n  const promises = [\n    __promiseFactoryUtil(true, 5),\n    __promiseFactoryUtil(true, 100),\n    __promiseFactoryUtil(true, 500),\n    __promiseFactoryUtil(true, 750),\n    __promiseFactoryUtil(true, 50),\n    __promiseFactoryUtil(true, 1),\n    __promiseFactoryUtil(true, 900),\n    __promiseFactoryUtil(true, 1500),\n    __promiseFactoryUtil(true, 35),\n    __promiseFactoryUtil(true, 2000),\n    __promiseFactoryUtil(true, 15),\n    __promiseFactoryUtil(true, 13),\n    __promiseFactoryUtil(true, 17),\n    __promiseFactoryUtil(true, 123),\n    __promiseFactoryUtil(true, 63),\n    __promiseFactoryUtil(true, 123),\n    __promiseFactoryUtil(true, 153),\n    __promiseFactoryUtil(true, 133),\n    __promiseFactoryUtil(true, 42),\n    __promiseFactoryUtil(true, 123),\n  ];\n\n  const expected = [\n    \"Resolved in 5 time\",\n    \"Resolved in 100 time\",\n    \"Resolved in 500 time\",\n    \"Resolved in 750 time\",\n    \"Resolved in 50 time\",\n    \"Resolved in 1 time\",\n    \"Resolved in 900 time\",\n    \"Resolved in 1500 time\",\n    \"Resolved in 35 time\",\n    \"Resolved in 2000 time\",\n    \"Resolved in 15 time\",\n    \"Resolved in 13 time\",\n    \"Resolved in 17 time\",\n    \"Resolved in 123 time\",\n    \"Resolved in 63 time\",\n    \"Resolved in 123 time\",\n    \"Resolved in 153 time\",\n    \"Resolved in 133 time\",\n    \"Resolved in 42 time\",\n    \"Resolved in 123 time\",\n  ];\n\n  const result = await resolveAll(promises);\n  expect(result).toEqual(expected);\n});\n\ntest(\"If any promise rejects, the `resolveAll` function should return `null`.\", async () => {\n  const promises = [\n    __promiseFactoryUtil(true, 5),\n    __promiseFactoryUtil(true, 100),\n    __promiseFactoryUtil(true, 500),\n    __promiseFactoryUtil(false, 750),\n    __promiseFactoryUtil(true, 50),\n  ];\n\n  const result = await resolveAll(promises);\n  expect(result).toBe(null);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/j-0NZZ_RUtQ",
          "starterCode": "type PromiseFactoryFunction = (\n  shouldResolve: boolean,\n  timeLimit: number\n) => Promise<any>;\n\nconst promiseFactory: PromiseFactoryFunction = (shouldResolve, timeLimit) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Resolved in ${timeLimit} time`);\n      } else {\n        reject(`Rejected in ${timeLimit} time`);\n      }\n    }, timeLimit);\n  });\n};\n\nconst promises = [\n  promiseFactory(true, 5),\n  promiseFactory(true, 100),\n  promiseFactory(true, 500),\n  promiseFactory(true, 750),\n  promiseFactory(true, 50),\n  promiseFactory(true, 1),\n  promiseFactory(true, 900),\n  promiseFactory(true, 1500),\n  promiseFactory(true, 35),\n  promiseFactory(true, 2000),\n];\n\n// Your code here\n",
          "solutionCode": "type PromiseFactoryFunction = (\n  shouldResolve: boolean,\n  timeLimit: number\n) => Promise<any>;\n\nconst promiseFactory: PromiseFactoryFunction = (shouldResolve, timeLimit) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Resolved in ${timeLimit} time`);\n      } else {\n        reject(`Rejected in ${timeLimit} time`);\n      }\n    }, timeLimit);\n  });\n};\n\nconst promises = [\n  promiseFactory(true, 5),\n  promiseFactory(true, 100),\n  promiseFactory(true, 500),\n  promiseFactory(true, 750),\n  promiseFactory(true, 50),\n  promiseFactory(true, 1),\n  promiseFactory(true, 900),\n  promiseFactory(true, 1500),\n  promiseFactory(true, 35),\n  promiseFactory(true, 2000),\n];\n\n// Your code here\nconst resolveAll = async (promiseList: Promise<any>[]) => {\n  try {\n    const result = await Promise.all(promiseList);\n    return result;\n  } catch (err) {\n    return null;\n  }\n};\n",
          "content": ""
        },
        {
          "id": "6ZEqoWu6i",
          "type": "typescript",
          "title": "Settling All the Promises",
          "instructions": "In contrast to `Promise.all`, its counterpart `Promise.allSettled` allows a series of promises to all fully complete. This means it will allow all the promises to reject or resolve, and return an array of the results. In contrast, `Promise.all` will reject whenever _any_ individual promises rejects.\n\nIn this challenge, update your solution from the last challenge to use `Promise.allSettled` instead\\.",
          "testCode": "const __promiseFactoryUtil = (shouldResolve, timeLimit) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Resolved in ${timeLimit} time`);\n      } else {\n        reject(`Rejected in ${timeLimit} time`);\n      }\n    }, timeLimit);\n  });\n};\n\ntest(\"The `resolveAll` function should be defined.\", () => {\n  expect(typeof resolveAll).toBe(\"function\");\n});\n\ntest(\"The `resolveAll` function should accept an array of promises and return an array containing all of the resolved values from the list of promises.\", async () => {\n  const promises = [\n    __promiseFactoryUtil(true, 5),\n    __promiseFactoryUtil(true, 100),\n    __promiseFactoryUtil(true, 500),\n    __promiseFactoryUtil(true, 750),\n    __promiseFactoryUtil(true, 50),\n    __promiseFactoryUtil(true, 1),\n    __promiseFactoryUtil(true, 900),\n    __promiseFactoryUtil(true, 1500),\n    __promiseFactoryUtil(true, 35),\n    __promiseFactoryUtil(true, 2000),\n    __promiseFactoryUtil(true, 15),\n    __promiseFactoryUtil(true, 13),\n    __promiseFactoryUtil(true, 17),\n    __promiseFactoryUtil(true, 123),\n    __promiseFactoryUtil(true, 63),\n    __promiseFactoryUtil(true, 123),\n    __promiseFactoryUtil(true, 153),\n    __promiseFactoryUtil(true, 133),\n    __promiseFactoryUtil(true, 42),\n    __promiseFactoryUtil(true, 123),\n  ];\n\n  const expected = [\n    \"Resolved in 5 time\",\n    \"Resolved in 100 time\",\n    \"Resolved in 500 time\",\n    \"Resolved in 750 time\",\n    \"Resolved in 50 time\",\n    \"Resolved in 1 time\",\n    \"Resolved in 900 time\",\n    \"Resolved in 1500 time\",\n    \"Resolved in 35 time\",\n    \"Resolved in 2000 time\",\n    \"Resolved in 15 time\",\n    \"Resolved in 13 time\",\n    \"Resolved in 17 time\",\n    \"Resolved in 123 time\",\n    \"Resolved in 63 time\",\n    \"Resolved in 123 time\",\n    \"Resolved in 153 time\",\n    \"Resolved in 133 time\",\n    \"Resolved in 42 time\",\n    \"Resolved in 123 time\",\n  ].map(x => ({\n    status: \"fulfilled\",\n    value: x,\n  }));\n\n  const result = await resolveAll(promises);\n  expect(result).toEqual(expected);\n});\n\ntest(\"The `resolveAll` function should return a list of all the values of the promises, whether they we resolved or rejected.\", async () => {\n  const promises = [\n    __promiseFactoryUtil(true, 5),\n    __promiseFactoryUtil(true, 100),\n    __promiseFactoryUtil(true, 500),\n    __promiseFactoryUtil(false, 750),\n    __promiseFactoryUtil(false, 50),\n    __promiseFactoryUtil(false, 150),\n  ];\n\n  const a = [\n    \"Resolved in 5 time\",\n    \"Resolved in 100 time\",\n    \"Resolved in 500 time\",\n  ].map(x => ({\n    status: \"fulfilled\",\n    value: x,\n  }));\n\n  const b = [\n    \"Rejected in 750 time\",\n    \"Rejected in 50 time\",\n    \"Rejected in 150 time\",\n  ].map(x => ({\n    status: \"rejected\",\n    reason: x,\n  }));\n\n  const expected = [...a, ...b];\n  const result = await resolveAll(promises);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/CxppRha7vaw",
          "starterCode": "type PromiseFactoryFunction = (\n  shouldResolve: boolean,\n  timeLimit: number\n) => Promise<any>;\n\nconst promiseFactory: PromiseFactoryFunction = (shouldResolve, timeLimit) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Resolved in ${timeLimit} time`);\n      } else {\n        reject(`Rejected in ${timeLimit} time`);\n      }\n    }, timeLimit);\n  });\n};\n\nconst promises = [\n  promiseFactory(true, 5),\n  promiseFactory(true, 100),\n  promiseFactory(true, 500),\n  promiseFactory(true, 750),\n  promiseFactory(true, 50),\n  promiseFactory(true, 1),\n  promiseFactory(true, 900),\n  promiseFactory(true, 1500),\n  promiseFactory(true, 35),\n  promiseFactory(true, 2000),\n];\n\n// Your code here\n",
          "solutionCode": "type PromiseFactoryFunction = (\n  shouldResolve: boolean,\n  timeLimit: number\n) => Promise<any>;\n\nconst promiseFactory: PromiseFactoryFunction = (shouldResolve, timeLimit) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Resolved in ${timeLimit} time`);\n      } else {\n        reject(`Rejected in ${timeLimit} time`);\n      }\n    }, timeLimit);\n  });\n};\n\nconst promises = [\n  promiseFactory(true, 5),\n  promiseFactory(true, 100),\n  promiseFactory(true, 500),\n  promiseFactory(true, 750),\n  promiseFactory(true, 50),\n  promiseFactory(true, 1),\n  promiseFactory(true, 900),\n  promiseFactory(true, 1500),\n  promiseFactory(true, 35),\n  promiseFactory(true, 2000),\n];\n\n// Your code here\nconst resolveAll = async (promiseList: Promise<any>[]) => {\n  return Promise.allSettled(promiseList);\n};\n",
          "content": ""
        },
        {
          "id": "Rz5BD8Php",
          "type": "typescript",
          "title": "Racing Promises",
          "instructions": "Another rare, but useful, promise utility to be aware of is the `Promise.race` method\\. As you might guess, `Promise.race` allows you to race two promises against each other\\! [Promise\\.race](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race) accepts an iterable of promises, and resolves or rejects with the value from the _first_ promise to resolve or reject.\n\nImplement a function `racer` which accepts a list of promises and uses `Promise.race` to return the result of the first promise which resolves or rejects.",
          "testCode": "const __promiseFactoryUtil = (shouldResolve, timeLimit) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`Resolved in ${timeLimit} time`);\n      } else {\n        reject(`Rejected in ${timeLimit} time`);\n      }\n    }, timeLimit);\n  });\n};\n\ntest(\"The `racer` function is defined.\", () => {\n  expect(typeof racer === \"function\").toBe(true);\n});\n\ntest(\"The `racer` function accepts a list of promises and returns the result value from the first promise to resolve or reject.\", async () => {\n  let promises = [\n    __promiseFactoryUtil(true, 50),\n    __promiseFactoryUtil(true, 150),\n    __promiseFactoryUtil(true, 500),\n    __promiseFactoryUtil(true, 1000),\n    __promiseFactoryUtil(true, 2000),\n  ];\n\n  let result = await racer(promises);\n  expect(result).toBe(\"Resolved in 50 time\");\n\n  promises = [\n    __promiseFactoryUtil(true, 50),\n    __promiseFactoryUtil(true, 150),\n    __promiseFactoryUtil(true, 500),\n    __promiseFactoryUtil(true, 1000),\n    __promiseFactoryUtil(false, 2),\n  ];\n\n  result = await racer(promises);\n  expect(result).toBe(\"Rejected in 2 time\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/e4NgbANr3qU",
          "starterCode": "// Your code here",
          "solutionCode": "// Your code here\nconst racer = async (promiseList: Promise<any>[]) => {\n  try {\n    const result = await Promise.race(promiseList);\n    return result;\n  } catch (err) {\n    return err;\n  }\n};\n",
          "content": ""
        },
        {
          "id": "2o@y8Hx6oD",
          "type": "section",
          "title": "HTTP and Networking",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nNow that you have learned a lot of the basics of working with asynchronous code, we'll get into more of the useful things you can start to use these skills for. This starts with making network requests using the hypertext transfer protocol \\(HTTP\\). You are probably familiar with HTTP, or it's more secure counterpart HTTPS, having seen it in many web URLs, e.g. `https://app.pairwise.tech`.\n\nWhen you type a web URL like this into a web browser and hit enter, the web browser is using the HTTP/HTTPS protocol to fetch the resource stored at that URL. The web browser makes a network request and the protocol resolves the request and returns a response, which is usually an HTML document for that URL. The HTML document will often contain links to other resources, like CSS and JS files which will then be downloaded. These together constitute a website and this entire process occurs asynchronously using networking and HTTP.\n# Client Server Model\n\nHTTP follows the client server model, which is to say that communication requests are always initiated by a client \\(think: user, like you or me\\). Then, that request is propagated across a network \\(in our case, the web/internet\\) and eventually reaches some destination server, which is another computer running a server application which can handle processing the request and issuing a response.\n\nThe important points to understand here are the idea that the client always initiates the communication, the communication is asynchronous by nature, and the server handles processing the request and responding to clients.\n\nA typical interaction could be loading a webpage which then makes a `GET` request using HTTP to a server to fetch a user, using the path `/user`. The server then receives this request, checks the authentication state of the request, retrieves the associated user profile from a database, and then returns a response to the request containing the user information. Then, the webpage does something with this user information. The code which initiated the original `GET` request then receives this response data, and the roundtrip made possible by HTTP is complete.\n# Network Requests and HTTP\n\nThese network based communications are ubiquitous in our world. They are made in the dozens by all the machines in our lives: smart phones, smart watches, tablets, desktops, laptops. These requests are made possible because of HTTP, which is a protocol for transmitting documents across the web. There is a huge amount of information you could dig into regarding internet protocols but here we will focus on the application layer HTTP protocol which allows you to send network requests.\n\n> We highly recommend browsing through the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP) on the HTTP protocol. It covers some of the important details really well, and it's useful to have some more in depth knowledge on this important topic.\n\nPractically, as a developer, you will use HTTP all the time to make requests to servers.\n# HTTP Components\n\nHTTP is a standardized protocol in which requests contain specific components which are used to define what actions should occur. The main components of an _HTTP request_ are:\n\n* The **HTTP method**, which is usually a verb which signifies the \"type\" of request. The most common HTTP methods are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`.\n* The **resource path**, such as `/user` or `/api`. This is basically like a URL path, and it allows a server application to map an HTTP request to a specific handler \\(think: function\\) which is responsible for processing the request and issuing a response.\n* The **HTTP version,** which is just the version of the HTTP protocol the client is using. HTTP, like almost all software, is versioned.\n* **Request headers, **which are optional but can contain some additional metadata, content, or instructions relevant to the request or response. For example, you may send authentication or caching parameters in HTTP headers.\n* A **request body**, which is optional but can include some payload of data sent to a server.\n\n\n_HTTP responses_ also contain several common components \\(also including the HTTP version and response headers\\):\n\n* **Status code**: a numeric code representing the request status. See a [full list here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\n* **Status message:** a short description of the status code.\n* An optional **response body**, which contains the data or content relevant to the response.\n\n# AJAX\n\nAn important point \\(partially historical\\) to note here is the notion of [AJAX](https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started): Asynchronous JavaScript and XML. Historically, web requests were made by a browser which would load a web page by fetching resources and that was it\\! Any further interactions would generally require a new web resource to be fetched and the page would need to go through a full reload to show any updates or changes. Imagine that as a user\\!\n\nThis was a big disadvantage in the early days of the internet, and gradually technologies were developed to improve this experience. That's where AJAX came in, which started to appear in Google applications \\(Gmail and Google Maps\\) in 2004 and 2005 and then become solidified by the W3C as a web standard in 2006.\n\nWith AJAX, you can write JavaScript code which can make a network request using HTTP and receive response data and update an HTML webpage dynamically without having to reload the page. This was a major improvement and opened the doors to the great proliferation of web applications and technologies we have seen over the past 1\\-2 decades.\n# This Section\n\nIn this section, we will get our hands dirty making some HTTP requests and handling HTTP responses. We \\(the client\\) will use TypeScript \\(JavaScript\\) to initiate HTTP requests using the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to a Pairwise server. We will get to apply our asynchronous programming skills we learned in the past few challenges and learn about how to use HTTP to make network requests\\!\n\nAs mentioned, we will be interacting with a server. Cool\\! We have created and deployed a simple server for this purpose. The [repo is public and you can find it here](https://github.com/pairwise-tech/pairwise-example-http-api). We encourage you to take a look\\! We will cover this in more detail in the Backend Programming module, but this serves as a nice preview of what's to come.\n\nJust for the sake of understanding, the repo contains a server application which is just a TypeScript program. What it does, when run, is start a server listening on a port. What's a server? It's just an application which is setup to process network requests via HTTP\\! Our server exposes a few different endpoints, or \"APIs\", which we can interact with here, using HTTP.\n\nOk, with all of that out of the way, let's dive in\\!"
        },
        {
          "id": "qIaveTrGu",
          "type": "typescript",
          "title": "GET Request",
          "instructions": "The server we deployed is running at [https://pairwise\\-example\\-http\\-api.appspot.com](https://pairwise-example-http-api.appspot.com/). If you view that URL, you will see some text rendered in your browser. The browser is making a `GET` request to the index route `/` and displaying the response, which is that text.\n\nThe HTTP `GET` method is used to retrieve a resource, or, simply, to \"get\" some data. Browsers use GET requests to load webpages, but we can also make GET requests directly using the Fetch API. This is as simple as passing in the URL to the `fetch` method\\.\n\nWe have added an `/api` route to the server URL shown above. Make a `GET` request to this `/api` route, and return the response from the function in the editor.\n\n++NOTE:++ The server will return text. To transform the response object into just this text, you will need to call `response.text()`. That returns a promise, so you will need to `await` it\\! The function should return the resulting text from the response.",
          "testCode": "test(\"`getRequest` should be a function.\", () => {\n  expect(typeof getRequest).toBe(\"function\");\n});\n\ntest(\"`getRequest` returns the text from the response from making a GET request to the `/api` route at the `https://pairwise-example-http-api.appspot.com` URL.\", async () => {\n  const solution = async () => {\n    const response = await fetch(\"https://pairwise-example-http-api.appspot.com/api\");\n    return response.text();\n  };\n\n  const result = await getRequest();\n  const expected = await solution();\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/n_RTDAnSgUs",
          "starterCode": "const getRequest = async () => {\n  // Your code here:\n}",
          "solutionCode": "const getRequest = async () => {\n  try {\n    // Make the GET request\n    const response = await fetch(\n      \"https://pairwise-example-http-api.appspot.com/api\"\n    );\n\n    // Retrieve the text from the response\n    const result = await response.text();\n\n    // Return the text result\n    return result;\n  } catch (err) {\n    // Log any errors\n    console.log(err.message);\n  }\n};\n",
          "content": ""
        },
        {
          "id": "@kclY2ckQ",
          "type": "media",
          "title": "A Brief Tangent into JSON",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "You may have seen the term \"JSON\" before, or it may be new to you\\! We need to introduce it here. JSON is short for \"JavaScript Object Notation\" and it is basically a way to serialize_ and _deserialize data. What does this mean?\n\nComputers need a way to \"package\" up data to transmit it. Think of it like sending a letter to a friend. You don't just put the letter in the mail, you need to \"package\" it in an envelope to send. Ok... it's not the best analogy in the history of the world, but the main point is that data needs to be transformed to another format before it is sent in a request to a server.\n\nJSON is a universally used data format for this purpose. JSON is a data format which is \"like\" JavaScript objects, hence the name. And, in JavaScript/TypeScript, you have a global utility object called `JSON` which we can use to convert objects to JSON and convert JSON back to regular objects.\n\nConsider the following:\n\n```typescript\nconst data = {\n  list: [1, 2, 3, 4, 5],\n  isTrue: true,\n  isFalse: false,\n  isNull: null,\n  myObject: {\n    name: \"Sam\",\n    level: 100,\n  },\n};\n\n```\n\nThis is just a simple object containing some data. What is the JSON representation of this object? We can get it by using the `JSON.stringify` function:\n\n```\nconst json = JSON.stringify(data);\n\n// json:\n// \"{\"list\":[1,2,3,4,5],\"isTrue\":true,\"isFalse\":false,\"isNull\":null,\"myObject\":{\"name\":\"Sam\",\"level\":100}}\"\n\n```\n\nYou can see the result is a simple string of text, which does resemble the original object. This makes JSON ideal as a data transmission format. It is language agnostic but follows some simple conventions for serializing and deserializing data. How could we deserialize this JSON data? With the `JSON.parse` method:\n\n```\n// The data variable will contain the original parsed data object again:\nconst data = JSON.parse(json);\n\n```\n\nWhy is JSON important?\n\nJSON is the canonical way to send data between clients and servers. It is language agnostic so it doesn't matter if your server is written in TypeScript, Python, Go, or Java, or if your client is a JavaScript web app or an iOS mobile app written in Swift \\- all of these can use JSON as a data transmission format for sending data back and forth.\n\nIn a moment, we will use the `PUT` and `POST` HTTP methods to send data to a server. As you may expect, we will need to convert our data to JSON before sending it\\!\n\nIn the next lesson, we will get some practicing serializing and deserializing data. If you're interested, we recommend taking a quick look at the [MDN JSON reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON), which provides a more detailed picture."
        },
        {
          "id": "Jn4aBfdYt",
          "type": "typescript",
          "title": "Working with JSON",
          "instructions": "`JSON` is a global object which you can use to convert data to JSON format, and convert JSON data back to regular objects. Let's try it here\\! Complete the two methods in the editor: `toJSON` and `fromJSON`.",
          "testCode": "test(\"The `toJSON` function should be defined.\", () => {\n  expect(typeof toJSON).toBe(\"function\");\n});\n\ntest(\"The `fromJSON` function should be defined.\", () => {\n  expect(typeof fromJSON).toBe(\"function\");\n});\n\ntest(\"`toJSON` should convert data to a JSON string.\", () => {\n  const data = {\n    list: [1, 2, 3, 4, 5],\n    isTrue: true,\n    isFalse: false,\n    isNull: null,\n    myObject: {\n      name: \"Sam\",\n      level: 100,\n    },\n  };\n  const result = toJSON(data);\n  const expected = JSON.stringify(data);\n  expect(result).toBe(expected);\n});\n\ntest(\"`fromJSON` should convert data from JSON to an object.\", () => {\n  const data = {\n    list: [1, 2, 3, 4, 5],\n    isTrue: true,\n    isFalse: false,\n    isNull: null,\n    myObject: {\n      name: \"Sam\",\n      level: 100,\n    },\n  };\n  const json = JSON.stringify(data);\n  const result = fromJSON(json);\n  expect(result).toEqual(data);\n});",
          "videoUrl": "https://www.youtube.com/embed/KdN9NGPVfgw",
          "starterCode": "const toJSON = (data: any): string => {\n  // Serialize arbitrary data to JSON format:\n};\n\nconst fromJSON = (json: string): any => {\n  // Deserialize JSON back to an object\n};\n",
          "solutionCode": "const toJSON = (data: any): string => {\n  // Serialize arbitrary data to JSON format:\n  return JSON.stringify(data);\n};\n\nconst fromJSON = (json: string): any => {\n  // Deserialize JSON back to an object\n  return JSON.parse(json);\n};\n",
          "content": ""
        },
        {
          "id": "TFgdPCNyW",
          "type": "typescript",
          "title": "POST Request",
          "instructions": "While a `GET` request is used to retrieve a data, a `POST` request is a common way to send data to a server. Conventionally, a `POST` request usually corresponds to a \"create\" operation. For example, when you send a message in a chat or messaging application, that data in the message will often be sent via a `POST` request to a server, to \"create\" a new message. If you were editing a message, a `PUT` or `PATCH` request may be used instead.\n\nWe can send a `POST` request using the `fetch` API\\. To do this, we will need to supply a second argument to the fetch method after passing in the url we want to `POST` to as the first argument. The second argument is the optional [RequestInit](https://microsoft.github.io/PowerBI-JavaScript/interfaces/_node_modules_typedoc_node_modules_typescript_lib_lib_dom_d_.requestinit.html) argument, which supplies additional parameters to the fetch method, such as the HTTP method type, headers, caching policy, and so on.\n\nTo `POST` data, we need to specify fetch to use the `POST` method\\. Then, we need to add a `Content-Type` header to indicate we are sending JSON data, and finally we need to supply the data we want to POST as the `body` property\\. An example might look like this:\n\n```\nfetch(\"my-api/\", {\n    // Set the HTTP method for the request\n    method: \"post\",\n    // Include headers to specify the content type\n    headers: {\n        \"Content-Type\": \"application/json\",\n    },\n    // data is some data you want to POST (converted to JSON!):\n    body: JSON.stringify({ data }),\n});\n\n```\n\nThe response we get as a result will include a `json` method we can call to convert the response body from JSON to an object we can view directly.\n\nIn the editor below, finish the implementation of the `postRequest` method to make a `POST` request to our sample API \\(base url: [https://pairwise\\-example\\-http\\-api.appspot.com](https://pairwise-example-http-api.appspot.com)\\). Then, return the response data using the `.json` method\\. Good luck\\!\n\n++NOTE:++ for the purposes of this challenge, once converted to JSON, the body of the request should take the form of `\"{ \"data\": <some payload> }\"` where \"some payload\" is a any primitive type or object \\(as long as it is valid JSON\\), e.g. `\"{ \"data\": true }\"`.",
          "testCode": "test(\"`postRequest` should be a function.\", () => {\n  expect(typeof postRequest).toBe(\"function\");\n});\n\ntest(\"`postRequest` returns the json from the response from making a POST request to the `/api` route at the `https://pairwise-example-http-api.appspot.com` URL.\", async () => {\n  const solutionFn = async (data) => {\n    const url = \"https://pairwise-example-http-api.appspot.com/api\";\n    const options = {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ data }),\n    };\n    const response = await fetch(url, options);\n    const result = await response.json();\n    return result;\n  };\n\n  const data = { text: \"hello\", data: [1, 2, 3, 4, 5] };\n  const result = await postRequest(data);\n  const expected = await solutionFn(data);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/vsHWL0dMwzM",
          "starterCode": "/**\n * Make a POST request. The data argument to this function should\n * be sent in a POST requeset to the /api route in the server.\n * See NOTE in instructions.\n */\nconst postRequest = async (data: any) => {\n  // Your code here:\n};\n\nconst makeRequest = async (data: any) => {\n  const result = await postRequest(data);\n  console.log(\"Result:\");\n  console.log(result);\n};\n\n// Uncomment to test out your function and see the API's response!\n// Try passing different types of data to makeRequest.\n// makeRequest(\"Hello POST!\");",
          "solutionCode": "/**\n * Make a POST request. The data argument to this function should\n * be sent in a POST requeset to the /api route in the server.\n */\nconst postRequest = async (data: any) => {\n  try {\n    // URL to POST to\n    const url = \"https://pairwise-example-http-api.appspot.com/api\";\n\n    // Fetch options\n    const options = {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ data }),\n    };\n\n    // Make the POST request\n    const response = await fetch(url, options);\n\n    // Retrieve the response JSON\n    const result = await response.json();\n\n    // Return the text result\n    return result;\n  } catch (err) {\n    // Log any errors\n    console.log(err.message);\n  }\n};\n",
          "content": ""
        },
        {
          "id": "u374HXzhc",
          "type": "typescript",
          "title": "PUT Request",
          "instructions": "A `PUT` request is similar to a `POST` request in that they both submit data to a server. The unique aspect of a `PUT` request is that it is supposed to be idempotent. What does this mean?\n\nIdempotence is an important concept to understand. An _idempotent_ operation is one in which you should get the same outcome regardless of how many times the operation is applied.\n\nConsider updating a user's name in a database. This operation should be idempotent because the result should always be the same regardless of if you make the request 1 time or 1,000 times. However, consider placing an order in an e\\-commerce store. This operation is probably not idempotent, because each successive request places an additional order for the customer.\n\nThis is the general distinction between `PUT` and `POST` requests\\. You should be aware, however, that enforcing idempotence is not guaranteed simply by using a `PUT` request \\- it depends largely on the backend server implementation handling the request and the type of operation.\n\nSo, this is a more of a semantic distinction within HTTP where a `PUT` request has the added meaning/context that the operation _should_ be idempotent.\n\nAside from this distinction, a `PUT` request is otherwise very similar to a `POST` request\\. Try to create one in the editor now\\!\n\n++NOTE:++ for the purposes of this challenge, once converted to JSON, the body of the request should take the form of `\"{ \"data\": <some payload> }\"` where \"some payload\" is a any primitive type or object \\(as long as it is valid JSON\\), e.g. `\"{ \"data\": true }\"`.",
          "testCode": "test(\"`putRequest` should be a function.\", () => {\n  expect(typeof putRequest).toBe(\"function\");\n});\n\ntest(\"`putRequest` returns the json from the response from making a POST request to the `/api` route at the `https://pairwise-example-http-api.appspot.com` URL.\", async () => {\n  const solutionFn = async (data) => {\n    const url = \"https://pairwise-example-http-api.appspot.com/api\";\n    const options = {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ data }),\n    };\n    const response = await fetch(url, options);\n    const result = await response.json();\n    return result;\n  };\n\n  const data = { text: \"hello\", data: [1, 2, 3, 4, 5] };\n  const result = await putRequest(data);\n  const expected = await solutionFn(data);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/DyuV5S-BSJA",
          "starterCode": "/**\n * Make a PUT request. The data argument to this function should\n * be sent in a PUT requeset to the /api route in the server.\n * See NOTE in instructions.\n */\nconst putRequest = async (data: any) => {\n  // Your code here:\n};\n",
          "solutionCode": "/**\n * Make a PUT request. The data argument to this function should\n * be sent in a PUT requeset to the /api route in the server.\n */\nconst putRequest = async (data: any) => {\n  try {\n    // URL to PUT to\n    const url = \"https://pairwise-example-http-api.appspot.com/api\";\n\n    // Fetch options\n    const options = {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ data }),\n    };\n\n    // Make the PUT request\n    const response = await fetch(url, options);\n\n    // Retrieve the response JSON\n    const result = await response.json();\n\n    // Return the text result\n    return result;\n  } catch (err) {\n    // Log any errors\n    console.log(err.message);\n  }\n};\n",
          "content": ""
        },
        {
          "id": "TC7HwcXRc",
          "type": "typescript",
          "title": "DELETE Request",
          "instructions": "The HTTP `DELETE` method is used to delete a specified resource. This operation, like a `PUT` request, should also be idempotent \\(regardless of how many times you request to delete a resource the result is always the same: the resource is deleted\\).\n\nThe conventional way to use the `DELETE` HTTP method is to supply some `id` of the element you wish to delete. For instance, the path `/users/:id` indicates that you can call the `/users` endpoint and pass in an `id` as an additional parameter, e.g. `/users/5698asdf95as69ff689sad7`. Doing so with a `DELETE` request indicates you want to delete the user with that `id`.\n\nYou can make a `DELETE` request to our server following this pattern. Call the `/api` route and then supply any string you like after that, which will be inferred as the resource id you wish to delete. Typically, as in this case, `DELETE` requests do not have a body.\n\nIn the challenge below, the id of the resource to delete is provided by the `id` parameter of the `deleteRequest` function\\.",
          "testCode": "test(\"`deleteRequest` should be a function.\", () => {\n  expect(typeof deleteRequest).toBe(\"function\");\n});\n\ntest(\"`deleteRequest` returns the json from the response from making a DELETE request to the `/api` route at the `https://pairwise-example-http-api.appspot.com` URL.\", async () => {\n  const solutionFn = async (id) => {\n    const url = `https://pairwise-example-http-api.appspot.com/api/${id}`;\n    const options = {\n      method: \"delete\",\n    };\n    const response = await fetch(url, options);\n    const result = await response.json();\n    return result;\n  };\n\n  const id = \"sad98f7a09s78fd90as7f0as9d\";\n  const result = await deleteRequest(id);\n  const expected = await solutionFn(id);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/hNpbxI45wh4",
          "starterCode": "/**\n * Make a DELETE request. The function takes an id parameter\n * which should be specified in the url of the DELETE operation.\n */\nconst deleteRequest = async (id: string) => {\n  // Your code here:\n};\n",
          "solutionCode": "/**\n * Make a DELETE request. The function takes an id parameter\n * which should be specified in the url of the DELETE operation.\n */\nconst deleteRequest = async (id: string) => {\n  try {\n    // URL to make the DELETE request to\n    const url = `https://pairwise-example-http-api.appspot.com/api/${id}`;\n\n    // Fetch options\n    const options = {\n      method: \"delete\",\n    };\n\n    // Make the DELETE request\n    const response = await fetch(url, options);\n\n    // Retrieve the response JSON\n    const result = await response.json();\n\n    // Return the text result\n    return result;\n  } catch (err) {\n    // Log any errors\n    console.log(err.message);\n  }\n};\n",
          "content": ""
        },
        {
          "id": "A12jr6EIC",
          "type": "media",
          "title": "A Comment on HTTP Methods",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "So far we have seen the HTTP methods `GET`, `POST`, `PUT`, and `DELETE`. There also exists a `PATCH` method and a [few others](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods) as well. What's with all of these different methods and when should you use one or the other?\n\nEach of these methods do have a general semantic meaning which should reflect the underlying operation:\n\n```none\nGET: Fetch a resource\nPOST: Create a new resource\nPUT: Replace (fully update a resource)\nPATCH: Update a resource\nDELETE: Delete a resource\n\n```\n\nIn an ideal scenario, the HTTP method you use should reflect the type of operation which is occurring, more or less according to the above guidelines. However, there are two big problems with this:\n\n1. Simply using a specific method does not enforce anything regarding the operation which occurs. When you send an HTTP `GET` request to a server, the server decides what happens when it handles that request. There's nothing to stop a backend developer programming a `GET` request handler to _delete_ some resource. That would be a total violation of HTTP\\! However, nothing in HTTP prevents deviations like this from happening. Moreover, deleting a resource when handling a `GET` request is a pretty dramatic example, but it's very common for servers to use `POST` requests for creating, updating, and even deleting resources. Again, this does not strictly follow HTTP, but you will find this in practice when working with servers and making HTTP requests.\n1. If you are a client consuming some external API you don't control, you have no choice but to adhere to whatever HTTP methods that API enforces \\(more on APIs later \\- for now just think of it as these HTTP handlers which exist on servers\\). If a server has an HTTP API exposed to update a record using a `POST` request, if you want to update that record you have no choice but to send a `POST` request \\- no matter that `POST` should be used for creating resources and `PUT` or `PATCH` for updating.\n\n\nThe takeaway here is that in practice you will find that the actual servers and APIs you interact with may not have a consistent usage of the HTTP methods we have seen so far. We also did not cover all the HTTP methods which are available in these challenges \\- but we did cover the most common: `GET`, `POST`, `PUT`, and `DELETE`.\n\nIt's useful to be aware of the others, and understand that each has a specific intended meaning, but also remember that you may find many deviations from the rules in practice."
        },
        {
          "id": "9H3df@@nF",
          "type": "typescript",
          "title": "HTTP Request Headers",
          "instructions": "[Headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) are additional optional data which you can include in an HTTP request. A common use of headers is to include information on caching policy or to send additional request information, such as authorization data.\n\nWe can use the [OAuth 2.0 standard bearer token](https://swagger.io/docs/specification/authentication/bearer-authentication/), which is quite common to use for authentication. You will need to supply a token in the `Authorization` header in a string, with the format: `Bearer {token}`. For instance, if your token was `\"as9d8f7as\"` then header would be: `Bearer as9d8f7as`.\n\nThis token is intended to be an opaque string which is granted once a client successfully logins to a system. The client then provides this token in subsequent requests to continue to prove it has access to the resources/APIs it is requesting.\n\nOur server has an `/api/headers` endpoint setup for this challenge. Make a `GET` request and be sure to include the `Authorization` header correctly. Try out the request using the `testRequest` function in the editor below. Modify the token you are sending based on the response from the server\\!\n\n++NOTE:++ The response from our server will be plain text. Process it using the `.text` method on the response\\!",
          "testCode": "test(\"`sendAuthorizationHeader` should be a function.\", () => {\n  expect(typeof sendAuthorizationHeader).toBe(\"function\");\n});\n\ntest(\"`sendAuthorizationHeader` returns the response from making a `GET` request to the `/api/headers` route at the `https://pairwise-example-http-api.appspot.com` URL and adds an `Authorization` header.\", async () => {\n  const solutionFn = async (id) => {\n    const url = `https://pairwise-example-http-api.appspot.com/api/headers`;\n    const options = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    const response = await fetch(url, options);\n    const result = await response.text();\n    return result;\n  };\n\n  const token = \"as7d68f89sa6f98as67fd98as6f9\";\n\n  const result = await sendAuthorizationHeader(token);\n  const expected = await solutionFn(token);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/N12-OaCvvPM",
          "starterCode": "/**\n * Make a GET request passing in an Authorization header with\n * a Bearer token.\n */\nconst sendAuthorizationHeader = async (token: string) => {\n  // Your code here:\n};\n\nconst testRequest = async () => {\n  const result = await sendAuthorizationHeader(\"abc\");\n  console.log(\"Result:\");\n  console.log(result);\n};\n\n// Uncomment to test out your function! Try to modify the token\n// based on the results:\n// testRequest();",
          "solutionCode": "/**\n * Make a GET request passing in an Authorization header with\n * a Bearer token.\n */\nconst sendAuthorizationHeader = async (token: string) => {\n  try {\n    // URL to make the request to\n    const url = `https://pairwise-example-http-api.appspot.com/api/headers`;\n\n    // Fetch options\n    const options = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    // Make the DELETE request\n    const response = await fetch(url, options);\n\n    // Retrieve the response text\n    const result = await response.text();\n\n    // Return the text result\n    return result;\n  } catch (err) {\n    // Log any errors\n    console.log(err.message);\n  }\n};\n\nconst testRequest = async () => {\n  const result = await sendAuthorizationHeader(\"as7d68f89sa6f98as67fd98as6f9\");\n  console.log(\"Result:\");\n  console.log(result);\n};\n\n// Uncomment to test out your function! Try to modify the token\n// based on the results:\n// testRequest();",
          "content": ""
        },
        {
          "id": "crFGCiQkX",
          "type": "media",
          "title": "HTTP Responses",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The result of an HTTP request is an HTTP response. The response contains the result of the request and other relevant information, for example the status of the request, the status code, response headers, etc. Understanding and working with HTTP responses is an important part of working with HTTP and APIs.\n# Response Status\n\nOne of the most important aspects of the response object is its status code. [HTTP status codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) are used to represent the \"state\" of a response to a request. This is basically how you know if the request was successful or not. Don't forget \\- if you are ever making a network request the request could fail for 1,001 different reasons\\!\n\nThere are 5 main status code categories, \"one hundred\" level status codes, i.e. `100`, `101`, or `102`, \"two hundred\" level codes such as `200`, `201`, etc. and then `3.x.x`, `4.x.x`, and `5.x.x`. Generally, each level has a specific meaning:\n\n* `100`: Information response.\n* `200`: Success response.\n* `300`: Redirection response.\n* `400`: Client error \\(e.g. bad request or unauthorized\\).\n* `500`: Server error \\(the server failed to process the request for some reason\\).\n\n\nWithin each \"hundred\" level of status codes, a particular code is used to convey a specific reason/context in the response, e.g. `400` is used to represent that something was wrong with the client's request whereas `401` is used to indicate the client's request could not be fulfilled because the client does not have access or is unauthorized to make that request.\n\nOne of these codes will be included in the response object \\(e.g. the [Fetch Response object](https://developer.mozilla.org/en-US/docs/Web/API/Response)\\) in the result of making an HTTP request. For instance:\n\n```typescript\nconst makeRequest = async (url: string) => {\n    const response = await fetch(url);\n    // The status information is present on the response object:\n    const { status, statusText } = response;\n    console.log(status);\n    console.log(statusText);\n};\n\n```\n\nThe `statusText` is additional text associated with the response.\n\nThe response will also contain additional information, as mentioned above, such as response headers and the response type \\- feel free to read on the details more if you are interested.\n\nFor our purposes here, the main takeaway is to learn how to interpret HTTP response status codes. We will get some practice with that in the next challenge."
        },
        {
          "id": "8h2qN7py$",
          "type": "typescript",
          "title": "Response Status Codes",
          "instructions": "In this challenge, we want to get some experience inspecting the response status codes for HTTP requests. Our server has an API endpoint for demoing some different HTTP response status codes. The endpoint is `/api/status/:code` where the `:code` parameter represents an HTTP status code. The valid options for you to supply are `200`, `300`, `400`, and `500` \\(we will omit the `100` level status code here\\). The API will return a response with a corresponding status code.\n\nIn the challenge here, complete the `populate` function to return a `StatusCodeResults` object according to the `StatusCodeResults` interface provided in the editor.",
          "testCode": "test(\"`populate` should be a function.\", () => {\n  expect(typeof populate).toBe(\"function\");\n});\n\ntest(\"`populate` returns a `StatusCodeResults` object based on the result of calling the `/api/status/:code` route at the `https://pairwise-example-http-api.appspot.com` URL whith each of the different status code options.\", async () => {\n  const solutionFn = async () => {\n    const __getCode = async (code) => {\n      try {\n        const url = `https://pairwise-example-http-api.appspot.com/api/status/${code}`;\n        const response = await fetch(url);\n        const text = await response.text();\n        return text;\n      } catch (err) {\n        return err.message;\n      }\n    };\n\n    const [a, b, c, d] = await Promise.all([\n      __getCode(200),\n      __getCode(300),\n      __getCode(400),\n      __getCode(500),\n    ]);\n\n    const statusCodeResults = {\n      200: a,\n      300: b,\n      400: c,\n      500: d,\n    };\n\n    return statusCodeResults;\n  };\n\n  const result = await populate();\n  const expected = await solutionFn();\n\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/AxwBJJ1WUSQ",
          "starterCode": "/**\n * key: the status code supplied in the request.\n * value: the string statusText in the response.\n */\ninterface StatusCodeResults {\n  100: string;\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n}\n\n/**\n * Populate this with the result statusText for calling the\n * /api/status/:code API with each of the different status\n * code inputs.\n */\nconst populate = async (): Promise<StatusCodeResults> => {\n  // Your code here:\n};\n",
          "solutionCode": "/**\n * key: the status code supplied in the request.\n * value: the string statusText in the response.\n */\ninterface StatusCodeResults {\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n}\n\n/**\n * Helper to query the API.\n */\nconst getResponseCodeStatusText = async (code: number): Promise<string> => {\n  try {\n    // URL to make the request to\n    const url = `https://pairwise-example-http-api.appspot.com/api/status/${code}`;\n\n    // Make the request\n    const response = await fetch(url);\n    const text = await response.text();\n    return text;\n  } catch (err) {\n    // Log any errors\n    console.log(err.message);\n    return err.message;\n  }\n};\n\n/**\n * Populate this with the result statusText for calling the\n * /api/status/:code API with each of the different status\n * code inputs.\n */\nconst populate = async (): Promise<StatusCodeResults> => {\n  const [two, three, four, five] = await Promise.all([\n    getResponseCodeStatusText(200),\n    getResponseCodeStatusText(300),\n    getResponseCodeStatusText(400),\n    getResponseCodeStatusText(500),\n  ]);\n\n  const statusCodeResults: StatusCodeResults = {\n    200: two,\n    300: three,\n    400: four,\n    500: five,\n  };\n\n  return statusCodeResults;\n};\n",
          "content": ""
        },
        {
          "id": "jso8aTAKQ",
          "type": "typescript",
          "title": "The XMLHttpRequest Object",
          "instructions": "Let's now take a look at the [XMLHttpRequest object](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest). The `XMLHttpRequest` object allows you to interact with servers. This object was commonplace for AJAX communication prior to the development and standardization of the `fetch` API and other higher level libraries. You will probably never use this directly, but it's helpful to be aware of its existence and history.\n\nThe `XMLHttpRequest` works by adding event listeners to a newly created request object which handles updates as the request is processed and returned with the response. To see what we mean take a look at the code in the editor. Complete the `fetchWithXMLHttpRequest` function so it resolves the returned promise with the `responseText` from the successful HTTP request. Currently, it logs this response text to the console but we also want to return it from the `fetchWithXMLHttpRequest` function\\.",
          "testCode": "test(\"The `fetchWithXMLHttpRequest` function should exist.\", () => {\n  expect(typeof fetchWithXMLHttpRequest).toBe(\"function\");\n});\n\ntest(\"The `fetchWithXMLHttpRequest` function returns the response text from calling the `/api` endpoint on the Pairwise HTTP server.\", async () => {\n  const solutionFn = async () => {\n    const result = await fetch(\"https://pairwise-example-http-api.appspot.com/api\");\n    return result.text();\n  };\n\n  const result = await fetchWithXMLHttpRequest();\n  const expected = await solutionFn();\n  expect(result).toBe(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/DJfkm5HEuPs",
          "starterCode": "/**\n * Make a GET Request with the XMLHttpRequest object.\n */\nconst fetchWithXMLHttpRequest = async () => {\n  return new Promise((resolve, reject) => {\n    // Create a new XMLHttpRequest\n    const xml = new XMLHttpRequest();\n\n    // The \"load\" event fires when the request completes successfully\n    xml.addEventListener(\"load\", function () {\n      // Log out some result information\n      console.log(xml.status);\n      console.log(xml.statusText);\n      console.log(xml.responseText);\n\n      // resolve the promise with the responseText\n      resolve(\"Fix me!\");\n    });\n\n    // The \"error\" event fires if the request encountered an error\n    xml.addEventListener(\"error\", function () {\n      // Log out some result information\n      console.log(\"Request Failed!\");\n      console.log(xml.status);\n      console.log(xml.statusText);\n    });\n\n    // Initiate a new request to a URL\n    xml.open(\"GET\", \"https://pairwise-example-http-api.appspot.com/api\");\n\n    // Send the request to the server\n    xml.send();\n  });\n};\n\nfetchWithXMLHttpRequest();",
          "solutionCode": "/**\n * Make a GET Request with the XMLHttpRequest object.\n */\nconst fetchWithXMLHttpRequest = async () => {\n  return new Promise((resolve, reject) => {\n    // Create a new XMLHttpRequest\n    const xml = new XMLHttpRequest();\n\n    // The \"load\" event fires when the request completes successfully\n    xml.addEventListener(\"load\", function () {\n      // Log out some result information\n      console.log(xml.status);\n      console.log(xml.statusText);\n      console.log(xml.responseText);\n\n      // Resolve the promise\n      resolve(xml.responseText);\n    });\n\n    // The \"error\" event fires if the request encountered an error\n    xml.addEventListener(\"error\", function () {\n      // Log out some result information\n      console.log(\"Request Failed!\");\n      console.log(xml.status);\n      console.log(xml.statusText);\n\n      // Reject the promise\n      reject(\"Request Failed!\");\n    });\n\n    // Initiate a new request to a URL\n    xml.open(\"GET\", \"https://pairwise-example-http-api.appspot.com/api\");\n\n    // Send the request to the server\n    xml.send();\n  });\n};\n\nfetchWithXMLHttpRequest();",
          "content": ""
        },
        {
          "id": "hx0KMlQN2",
          "type": "media",
          "title": "HTTP Fetch Library Options",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "So far we have been primarily using the built\\-in `fetch` API to make network requests. This is handy and easy because it's built in to the JavaScript browser environment as a global method you can call at anytime. You can simply open a browser console and call `fetch` with an URL to quickly make a `GET` request\\.\n\nBut in the last challenge we also saw the underlying `XMLHttpRequest` object, which also allows us to interact with servers. The `XMLHttpRequest` is more low level and a lot more difficult to use compared to `fetch`, however.\n\nBut these are not the only utilities available to you to make network requests\\! Let's introduce a few other libraries which you can use.\n# NodeJS\n\nIf you are working in NodeJS \\(outside of the browser\\) the `fetch` API won't be available anymore. NodeJS has a built in `http` module \\([documentation here](https://nodejs.org/api/http.html)\\) which you can use, but, it's more likely you will  install a node module to do this. Here are two good options:\n\n* [node\\-fetch](https://www.npmjs.com/package/node-fetch): A light\\-weight module that brings `window.fetch` to NodeJS.\n* [axios](https://www.npmjs.com/package/axios): Promise based HTTP client for the browser and NodeJS.\n\n# NodeJS/Browsers\n\nIf you are working purely in a browser, `fetch` is probably your best option. But, if you're building an app for a browser where you can install node modules, we recommend using axios. Axios, all around is a great library for making HTTP requests.\n# Axios\n\nUsing `axios` is as simple as installing it:\n\n```bash\nyarn add axios\n\n```\n\nImporting it:\n\n```\nimport axios from \"axios\";\n\n```\n\nAnd using it:\n\n```\nconst getUsers = async () => {\n  try {\n    const response = await axios.get('/users');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n```\n\nIt's as easy as that\\! It's also easy to add headers and making other types of requests is simple with `axios.put` or `axios.post`, etc. We recommend trying axios anytime when you need to work with asynchronous code. Feel free to try it out in the projects for this module."
        },
        {
          "id": "FkgTjFf5x",
          "type": "media",
          "title": "Application Programming Interfaces",
          "instructions": "You may have heard the term \"API\" before.",
          "testCode": "test(\"Placeholder test\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Finally, we can introduce this confusing term \"Application Programming Interface\" or \"API\" for short.\n# What is an \"API\"?\n\nAn API is simply the rules for interacting with a system. Most ordinary objects and tools have the equivalent of an \"API\". For instance, the API of an oven is the knobs, timer, and settings you use to set the temperature and use the oven. The API of a car is how you use the key, steering wheel, and pedals to drive and stop the car.\n\nAn API is simply the rules for how you interact with some mechanical or computerized system to get that system to do things you want.\n\nIf you want a car to move, you have to get in, turn it on with the key, and press the gas pedal. This is the \"API\" for interacting with a car.\n# APIs in Software\n\n\"API\" is a very common term thrown around in software. People talk about that API of a library, or the API of some class, or a server API, or a database API, or system APIs, and so on.\n\nWhenever you are building software, you will always have to interact with other code and other software systems. How these interactions occur is dictated by the API, or application programming interface, between these pieces of code or software systems.\n# A Practical Example\n\nIn the last few lessons we made a few HTTP requests to our sample Pairwise HTTP server. That server exposes a simple HTTP API which we have been using in these challenges. The API comprises a few endpoints under the `/api` path which you can make HTTP requests to. It's very simple, but that is, in fact, an API.\n\nWhen you work on other systems, as a client you will have backend server APIs you have to interact with. For instance, the Pairwise application you are using is interacting with backend APIs in one of our servers to handle authenticating you, storing your progress in the course, and making other updates.\n# APIs as Interfaces\n\nAPIs are basically just the interfaces between different aspects of software and programs. Here's a few more examples:\n\n* You want to save data in the local storage of a browser. You will use the browser `localStorage` API for this.\n* You want to fetch data from some server which has data about the current weather \\- you will need to use the server's API to make these requests.\n* You are building a mobile app and want to take advantage of the gestures or positioning sensors of the phone \\- you will need to make use of some built\\-in APIs to do this.\n\n\nGenerally, there are two main categories you can think about for APIs:\n\n1. **External Server APIs:** These refer to the API for interacting with some other server and require actually sending network requests. These could be a server you control, or some external server someone else controls.\n1. **\"Software/Code\" APIs:** These refer to interacting with other code, functions, classes, libraries, software etc. For instance, people may take about the \"ReactJS API\", or the \"Fetch API\", or \"that class has a really bad API\" \\(referring to some class in the codebase you're working on\\).\n\n\nThe term API has the same abstract meaning, but in either case what it directly refers to is different.\n# API Documentation\n\nWhen you use an API, it likely means you are using some code or software you didn't write and you don't have control over. How do you know how to use it?\n\nYou have to read the manual of course\\!\n\nAll good software should come with well written and up to date documentation describing how exactly to use it. This is sometimes referred to as the \"manual\", but more often just as documentation, API documentation, or the \"docs\".\n\nIf you are using an API for some external service, they will provide some API documentation for what endpoints they expose, how to use them, and what data to expect in response. For example, take a look at the [OpenWeather API documentation](https://openweathermap.org/api). On the other hand, if you are using the ExpressJS library to build a server and you want to look up how to handle `GET` requests you can find this information in [their documentation](https://expressjs.com/en/api.html). Or, maybe you are using a language like TypeScript and you are confused about the \"language API\" for creating types or interfaces. You can find some helpful guidelines in the [TypeScript language docs](https://www.typescriptlang.org/docs/).\n# The Importance of APIs\n\nIt's a pretty common skill to get used to reading and using API documentation to understand how to interact with and use APIs. In fact, this is a major aspect of working as a developer. Modern software applications are complex and typically interact with many other systems. This means asynchronous interactions, possible errors, and troubleshooting/debugging external APIs. It's an important skill to master\\!\n\nWe will get some more practice working with external APIs in the projects for this module."
        },
        {
          "id": "vyLlvTKfW",
          "type": "section",
          "title": "Practice with APIs",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section we will get some practice working directly with APIs. We've selected 5 relatively simple public APIs which you can use which do not require any account, registration, or authentication. This is very useful from a practice perspective\\!\n\nIf you are interested in finding other free and pubic APIs, [here is a comprehensive list](https://github.com/public-apis/public-apis).\n\nEach challenge will give a short preview of what API will be used and describe what needs to be done. You will need to check out the linked documentation for that API and then build a function to handle making a request to that API.\n\nThe challenges should be easy to solve, but they should start to get you familiar with the process of working with APIs and reading their documentation.\n\nAll right, let's dive in\\!"
        },
        {
          "id": "CgstSAbnS",
          "type": "typescript",
          "title": "Advice Slip",
          "instructions": "Let's write a class to provide some encouraging advice whenever you need it. The handy [Advice Slip API](https://api.adviceslip.com/) can do this for us\\!\n\nTake a look at the linked Advice Slip documentation page to see how to use it. Then, create a class `AdviceSlip` which implements the `AdviceSlipClass` interface in the editor below.\n\n++HINT:++ You will need to call `.json()` on the response data to get the JSON response.",
          "testCode": "test(\"The `AdviceSlip` class should be defined.\", () => {\n  const x = new AdviceSlip();\n  expect(x).toBeDefined();\n});\n\ntest(\"The `AdviceSlip` class should implement the `AdviceSlipClass` interface.\", () => {\n  const x = new AdviceSlip();\n  expect(typeof x.getRandomAdvice).toBe(\"function\");\n});\n\ntest(\"The `getRandomAdvice` method should return a random advice.\", async () => {\n  const x = new AdviceSlip();\n  const { id, advice } = await x.getRandomAdvice();\n  expect(typeof id).toBe(\"number\");\n  expect(typeof advice).toBe(\"string\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/hLDagf_hXWw",
          "starterCode": "interface Advice {\n  id: number;\n  advice: string;\n}\n\ninterface AdviceSlipClass {\n  getRandomAdvice(): Promise<Advice>;\n}\n\n// Your code here:\n",
          "solutionCode": "interface Advice {\n  id: number;\n  advice: string;\n}\n\ninterface AdviceSlipClass {\n  getRandomAdvice(): Promise<Advice>;\n}\n\n// Your code here:\nclass AdviceSlip implements AdviceSlipClass {\n  private url = \"https://api.adviceslip.com/advice\";\n\n  async getRandomAdvice() {\n    try {\n      const result = await fetch(this.url);\n      const data = await result.json();\n      return data.slip;\n    } catch (err) {\n      throw new Error(`Error fetching advice, error message: ${err.message}`);\n    }\n  }\n}\n",
          "content": ""
        },
        {
          "id": "yYHjlEO$4",
          "type": "typescript",
          "title": "SpaceX API",
          "instructions": "Let's play with an API to retrieve some truly futuristic information\\! Take a look at this cool [GitHub repository](https://github.com/r-spacex/SpaceX-API) which provides an API for information on SpaceX missions and data.\n\nLet's build a simple class which exposes some methods to consume various SpaceX APIs. Take a look at the [v4 documentation](https://github.com/r-spacex/SpaceX-API/blob/master/docs/v4/README.md) which we will be relying on. Use the documentation page as a reference and then write a class `SpaceX` which implements the interface provided in the editor below.",
          "testCode": "test(\"The `SpaceX` class should be defined.\", () => {\n  const x = new SpaceX();\n  expect(x).toBeDefined();\n});\n\ntest(\"The `SpaceX` class should implement the `SpaceXClass` interface and contain all of its methods.\", () => {\n  const x = new SpaceX();\n  expect(typeof x.getCrew).toBe(\"function\");\n  expect(typeof x.getLaunchpads).toBe(\"function\");\n  expect(typeof x.getLandpads).toBe(\"function\");\n  expect(typeof x.getRockets).toBe(\"function\");\n  expect(typeof x.getShips).toBe(\"function\");\n  expect(typeof x.getStarlink).toBe(\"function\");\n});\n\nconst __fetchHelper = async (path) => {\n  const response = await fetch(`https://api.spacexdata.com/v4/${path}`);\n  const data = await response.json();\n  return data;\n};\n\nconst __compareHelper = (a, b) => {\n  expect(Object.keys(a)).toEqual(Object.keys(b));\n}\n\ntest(\"The `getCrew` method should return the data from call the `/crew` endpoint.\", async () => {\n  const expected = await __fetchHelper(\"crew\");\n  const x = new SpaceX();\n  const result = await x.getCrew();\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getLaunchpads` method should return the data from call the `/launchpads` endpoint.\", async () => {\n  const expected = await __fetchHelper(\"launchpads\");\n  const x = new SpaceX();\n  const result = await x.getLaunchpads();\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getLandpads` method should return the data from call the `/landpads` endpoint.\", async () => {\n  const expected = await __fetchHelper(\"landpads\");\n  const x = new SpaceX();\n  const result = await x.getLandpads();\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getRockets` method should return the data from call the `/rockets` endpoint.\", async () => {\n  const expected = await __fetchHelper(\"rockets\");\n  const x = new SpaceX();\n  const result = await x.getRockets();\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getShips` method should return the data from call the `/ships` endpoint.\", async () => {\n  const expected = await __fetchHelper(\"ships\");\n  const x = new SpaceX();\n  const result = await x.getShips();\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getStarlink` method should return the data from call the `/starlink` endpoint.\", async () => {\n  const expected = await __fetchHelper(\"starlink\");\n  const x = new SpaceX();\n  const result = await x.getStarlink();\n  __compareHelper(expected, result);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7g1vmxuA7kA",
          "starterCode": "// 'any' response type... feel free to write exact response\n// types if you dare 😏\ninterface SpaceXClass {\n  getCrew(): Promise<any>;\n  getLaunchpads(): Promise<any>;\n  getLandpads(): Promise<any>;\n  getRockets(): Promise<any>;\n  getShips(): Promise<any>;\n  getStarlink(): Promise<any>;\n}\n\n// Your code here:",
          "solutionCode": "// 'any' response type... feel free to write exact response\n// types if you dare 😏\ninterface SpaceXClass {\n  getCrew(): Promise<any>;\n  getLaunchpads(): Promise<any>;\n  getLandpads(): Promise<any>;\n  getRockets(): Promise<any>;\n  getShips(): Promise<any>;\n  getStarlink(): Promise<any>;\n}\n\n// Your code here:\nclass SpaceX implements SpaceXClass {\n  private url = \"https://api.spacexdata.com/v4\";\n\n  async getCrew() {\n    try {\n      const result = await fetch(`${this.url}/crew`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred\";\n    }\n  }\n\n  async getLaunchpads() {\n    try {\n      const result = await fetch(`${this.url}/launchpads`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred\";\n    }\n  }\n\n  async getLandpads() {\n    try {\n      const result = await fetch(`${this.url}/landpads`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred\";\n    }\n  }\n\n  async getRockets() {\n    try {\n      const result = await fetch(`${this.url}/rockets`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred\";\n    }\n  }\n\n  async getShips() {\n    try {\n      const result = await fetch(`${this.url}/ships`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred\";\n    }\n  }\n\n  async getStarlink() {\n    try {\n      const result = await fetch(`${this.url}/starlink`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred\";\n    }\n  }\n}",
          "content": ""
        },
        {
          "id": "hbAfMbUAT0",
          "type": "typescript",
          "title": "The API of Ice and Fire",
          "instructions": "There are APIs for everything. Let's take a look at an [API for Game of Thrones](https://anapioficeandfire.com/) 🏰.\n\nYou know the drill\\! Take a look at the interface we've provided and the linked documentation and implement a class `OfIceAndFire` to complete the challenge\\!",
          "testCode": "test(\"The `OfIceAndFire` class should be defined.\", () => {\n  const x = new OfIceAndFire();\n  expect(x).toBeDefined();\n});\n\ntest(\"The `OfIceAndFire` class should implement the `OfIceAndFireClass` interface and contain all of its methods.\", () => {\n  const x = new OfIceAndFire();\n  expect(typeof x.getBooks).toBe(\"function\");\n  expect(typeof x.getHouses).toBe(\"function\");\n  expect(typeof x.getCharacters).toBe(\"function\");\n  expect(typeof x.getBookById).toBe(\"function\");\n  expect(typeof x.getHouseById).toBe(\"function\");\n  expect(typeof x.getCharacterById).toBe(\"function\");\n});\n\nconst __fetchHelper = async (path) => {\n  const response = await fetch(`https://anapioficeandfire.com/api/${path}`);\n  const data = await response.json();\n  return data;\n};\n\nconst __compareHelper = (a, b) => {\n  expect(Object.keys(a)).toEqual(Object.keys(b));\n}\n\ntest(\"The `getBooks` method should return books data.\", async () => {\n  const expected = await __fetchHelper(\"books\");\n  const x = new OfIceAndFire();\n  const result = await x.getBooks();\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getHouses` method should return houses data.\", async () => {\n  const expected = await __fetchHelper(\"houses\");\n  const x = new OfIceAndFire();\n  const result = await x.getHouses();\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getCharacters` method should return characters data.\", async () => {\n  const expected = await __fetchHelper(\"characters\");\n  const x = new OfIceAndFire();\n  const result = await x.getCharacters();\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getBookById` method should return a book by its `id`.\", async () => {\n  const expected = await __fetchHelper(\"books/5\");\n  const x = new OfIceAndFire();\n  const result = await x.getBookById(5);\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getHouseById` method should return a house by its `id`.\", async () => {\n  const expected = await __fetchHelper(\"houses/7\");\n  const x = new OfIceAndFire();\n  const result = await x.getHouseById(7);\n  __compareHelper(expected, result);\n});\n\ntest(\"The `getCharacterById` method should return a character by its `id`.\", async () => {\n  const expected = await __fetchHelper(\"characters/8\");\n  const x = new OfIceAndFire();\n  const result = await x.getCharacterById(8);\n  __compareHelper(expected, result);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/4dQ74k1xsEQ",
          "starterCode": "/**\n * For a more difficult challenge, write response types\n * to replace the 'any' values below.\n */\ninterface OfIceAndFireClass {\n  getBooks(): Promise<any>;\n  getHouses(): Promise<any>;\n  getCharacters(): Promise<any>;\n  getBookById(id: string): Promise<any>;\n  getHouseById(id: string): Promise<any>;\n  getCharacterById(id: string): Promise<any>;\n}\n\n// Your code here:\n",
          "solutionCode": "/**\n * For a more manageable challenge, write response types\n * to replace the 'any' values below.\n */\ninterface OfIceAndFireClass {\n  getBooks(): Promise<any>;\n  getHouses(): Promise<any>;\n  getCharacters(): Promise<any>;\n  getBookById(id: string): Promise<any>;\n  getHouseById(id: string): Promise<any>;\n  getCharacterById(id: string): Promise<any>;\n}\n\n// Your code here:\nclass OfIceAndFire implements OfIceAndFireClass {\n  private url = \"https://anapioficeandfire.com/api\";\n\n  async getBooks() {\n    try {\n      const result = await fetch(`${this.url}/books`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred.\";\n    }\n  }\n\n  async getHouses() {\n    try {\n      const result = await fetch(`${this.url}/houses`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred.\";\n    }\n  }\n\n  async getCharacters() {\n    try {\n      const result = await fetch(`${this.url}/characters`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred.\";\n    }\n  }\n\n  async getBookById(id: string) {\n    try {\n      const result = await fetch(`${this.url}/books/${id}`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred.\";\n    }\n  }\n\n  async getHouseById(id: string) {\n    try {\n      const result = await fetch(`${this.url}/houses/${id}`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred.\";\n    }\n  }\n\n  async getCharacterById(id: string) {\n    try {\n      const result = await fetch(`${this.url}/characters/${id}`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred.\";\n    }\n  }\n}\n",
          "content": ""
        },
        {
          "id": "RBkHLlPHT",
          "type": "typescript",
          "title": "Micro URL API",
          "instructions": "Micro URLs are short concise URLS which redirect to some longer URL. They are great for sharing and you have probably seen them a lot when sharing links from social media sites.\n\nThe way micro URLs or URL shorteners work is that some service takes a long URL and produces an arbitrary short URL from it. It then stores the association between these two URLs, probably in a database. When you make a request to the short URL, the service can use its database record to find the original URL and then redirect the request to that URL.\n\nThe [Relink Service](https://rel.ink/) provides an API to do this, which you can easily try out on their website. Take a look at their service and then implement a class which makes use of their API to shorten URLs \\- very handy\\! Good luck\\!",
          "testCode": "test(\"The `MicroUrl` class should exist.\", () => {\n  const x = new MicroUrl();\n  expect(x).toBeDefined();\n});\n\ntest(\"The `MicroUrl` class implements the `MicroUrlClass` interface.\", () => {\n  const x = new MicroUrl();\n  expect(typeof x.shorten).toBe(\"function\");\n  expect(typeof x.lookupById).toBe(\"function\");\n});\n\nconst __getShort = async (url) => {\n  try {\n    const data = { url };\n    const body = JSON.stringify(data);\n    const options = {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body,\n    };\n    const result = await fetch(\"https://rel.ink/api/links/\", options);\n    const link = await result.json();\n    return link;\n  } catch (err) {\n    return \"An error occurred.\";\n  }\n};\n\nconst __lookup = async (hashid) => {\n  try {\n    const result = await fetch(`https://rel.ink/api/links/${hashid}`);\n    const data = await result.json();\n    return data;\n  } catch (err) {\n    return \"An error occurred.\";\n  }\n};\n\ntest(\"The `MicroUrl` class `shorten` method should accept a URL and return the shortened version's URL data using the Relink API.\", async () => {\n  const x = new MicroUrl();\n  const url =\n    \"https://app.pairwise.tech/workspace/hyOjHRwi/creating-local-scope-with-a-function\";\n  const short = await x.shorten(url);\n  expect(typeof short.hashid).toBe(\"string\");\n  expect(typeof short.url).toBe(\"string\");\n  expect(typeof short.created_at).toBe(\"string\");\n  const lookup = await __lookup(short.hashid);\n  expect(lookup.url).toBe(url);\n});\n\ntest(\"The `MicroUrl` class `lookupById` method lookup URLs by their `hashid` and return the URL data.\", async () => {\n  const x = new MicroUrl();\n  const url =\n    \"https://app.pairwise.tech/workspace/hyOjHRwi/creating-local-scope-with-a-function\";\n  const short = await x.shorten(url);\n  expect(typeof short.hashid).toBe(\"string\");\n  expect(typeof short.url).toBe(\"string\");\n  expect(typeof short.created_at).toBe(\"string\");\n  const lookup = await x.lookupById(short.hashid);\n  expect(typeof lookup.hashid).toBe(\"string\");\n  expect(typeof lookup.url).toBe(\"string\");\n  expect(typeof lookup.created_at).toBe(\"string\");\n  expect(lookup.url).toBe(url);\n});\n\ntest('The `MicroUrl` class `shorten` method checks the response data and returns the string `\"An error occurred.\"` for anything other than a successful response.', async () => {\n  const x = new MicroUrl();\n  const url =\n    \"hts://app.pairwise.tech/workspace/hyOjHRwi/creating-local-scope-with-a-function\";\n  const short = await x.shorten(url);\n  expect(short).toBe(\"An error occurred.\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/wnKaxvVnkAo",
          "starterCode": "interface MicroUrlData {\n  hashid: string;\n  url: string;\n  created_at: string;\n}\n\ninterface MicroUrlClass {\n  shorten(url: string): Promise<MicroUrlData | string>;\n  lookupById(hashid: string): Promise<MicroUrlData | string>;\n}\n\n// Your code here:\n",
          "solutionCode": "interface MicroUrlData {\n  hashid: string;\n  url: string;\n  created_at: string;\n}\n\ninterface MicroUrlClass {\n  shorten(url: string): Promise<MicroUrlData | string>;\n  lookupById(hashid: string): Promise<MicroUrlData | string>;\n}\n\n// Your code here:\nclass MicroUrl implements MicroUrlClass {\n  private url = \"https://rel.ink/api/links/\";\n\n  async shorten(url: string) {\n    try {\n      const data = { url };\n      const body = JSON.stringify(data);\n      const options: RequestInit = {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body,\n      };\n      const result = await fetch(this.url, options);\n      const link = await result.json();\n\n      if (!link.hashid) {\n        throw new Error(\"Invalid response received\");\n      }\n\n      return link;\n    } catch (err) {\n      return \"An error occurred.\";\n    }\n  }\n\n  async lookupById(hashid: string) {\n    try {\n      const result = await fetch(`${this.url}${hashid}`);\n      const data = await result.json();\n      return data;\n    } catch (err) {\n      return \"An error occurred.\";\n    }\n  }\n}\n",
          "content": ""
        },
        {
          "id": "aC5pqM5B6",
          "type": "typescript",
          "title": "Hacker News API",
          "instructions": "You may have heard of [Hacker News](https://news.ycombinator.com/) before\\. If not, it's a leading site for news related to tech, computer science, and entrepreneurship. Many software engineers start their days reading HN\\! And, like many things tech focused, they have an API \\- check out the [documentation here](https://github.com/HackerNews/API).\n\nWrite a function `hackerNewsTopStories` to fetch the top 10 stories from Hacker News. Use the types defined in the editor as a guide.\n\n++HINT++: This will require a slightly more creative use of the Hacker News API to solve\\! You will have to make use of multiple APIs to get the final result.",
          "testCode": "test(\"The `hackerNewsTopStories` function should exist.\", () => {\n  expect(typeof hackerNewsTopStories).toBe(\"function\");\n});\n\nconst __hackerNewsTopStories = async () => {\n  const baseURL = \"https://hacker-news.firebaseio.com/v0\";\n\n  // Helper to fetch top story ids\n  const topStories = async () => {\n    try {\n      const url =\n        `${baseURL}/topstories.json?print=pretty`;\n      const result = await fetch(url);\n      const data = await result.json();\n      return data.slice(0, 10);\n    } catch (err) {\n      return [];\n    }\n  };\n\n  // Helper to lookup a story by id\n  const lookupStory = async (id) => {\n    try {\n      const url = `${baseURL}/item/${id}.json?print=pretty`;\n      const response = await fetch(url);\n      const story = await response.json();\n      return story;\n    } catch (err) {\n      return null;\n    }\n  };\n\n  const topStoryIds = await topStories();\n  const stories = await Promise.all(topStoryIds.map(lookupStory));\n  return stories;\n};\n\ntest(\"The `hackerNewsTopStories` function should return the top 10 stories from Hacker News.\", async () => {\n  const result = await hackerNewsTopStories();\n  const expected = await __hackerNewsTopStories();\n  // They are probably always equivalent...\n  expect(result).toEqual(expected);\n});",
          "videoUrl": "https://www.youtube.com/embed/sG46fy6GyCk",
          "starterCode": "interface TopStory {\n  id: number;\n  score: number;\n  time: string;\n  title: string;\n  url: string;\n  by: string;\n}\n\ntype HackerNewsTopStoriesFunction = () => Promise<TopStory[]>;\n\n// Your code here:",
          "solutionCode": "interface TopStory {\n  id: number;\n  score: number;\n  time: string;\n  title: string;\n  url: string;\n  by: string;\n}\n\ntype HackerNewsTopStoriesFunction = () => Promise<TopStory[]>;\n\n// Your code here:\nconst hackerNewsTopStories: HackerNewsTopStoriesFunction = async () => {\n  const baseURL = \"https://hacker-news.firebaseio.com/v0\";\n\n  // Helper to fetch top story ids\n  const topStories = async () => {\n    try {\n      const url =\n        `${baseURL}/topstories.json?print=pretty`;\n      const result = await fetch(url);\n      const data = await result.json();\n      return data.slice(0, 10);\n    } catch (err) {\n      return [];\n    }\n  };\n\n  // Helper to lookup a story by id\n  const lookupStory = async (id: number): Promise<TopStory | null> => {\n    try {\n      const url = `${baseURL}/item/${id}.json?print=pretty`;\n      const response = await fetch(url);\n      const story = await response.json();\n      return story;\n    } catch (err) {\n      return null;\n    }\n  };\n\n  const topStoryIds = await topStories();\n  const stories = await Promise.all<TopStory>(topStoryIds.map(lookupStory));\n  return stories;\n};\n",
          "content": ""
        },
        {
          "id": "Ak2JW7U45",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now we will build some simple projects which make use of your new asynchronous programming abilities\\!\n\nThese projects will require you to build simple NodeJS programs which you can run on the command line. They will involve various aspects of asynchronous programming we have learned about, such as querying APIs and working with asynchronous code. They will also require you to write a command line program which accepts user input.\n\nAccepting user input from a program is a topic we have not covered a lot yet, but it is inherently also an asynchronous type of operation. It is asynchronous in the sense that the user input arrives at some undetermined time in the future."
        },
        {
          "id": "KCmZ1fjHG",
          "type": "project",
          "title": "Current Weather Tool",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Overview\n\nBuild a command line tool to allow a user to query the Open Weather API and fetch current weather information for some location.\n\nYou can use the [Weatherstack](https://weatherstack.com/) free public API for this project. They do have paid plans, but if you look at their [pricing model](https://weatherstack.com/product) they provide a free plan as long as you use less than 1,000 calls per month. This is a very common approach for API providers. A free tier provides limited functionality which allows developers to try out the service, and then paid tiers provide more advanced features or unlimited usage.\n\nTo use their API, you will have to sign up and obtain an \\_api key, \\_which in this case they refer to as an _access\\_key_. Basically, this is just a unique key you must obtain to use their API. To obtain it you can follow the steps in the [Getting Started Documentation](https://weatherstack.com/documentation). This key allows their service to authenticate your requests, and, if you have a paid plan, ensure you have access to the paid features.\n\nIt may feel tedious to read through their documentation and sign up for an account to get this API key, but in fact you will find that this process is an integral aspect of working as a developer \\- and this is one of the major lessons and takeaways from this module on Async Programming and APIs. You will very frequently have to work with 3rd party systems, and, if you are using or building production services, you often have to register and authenticate with the APIs you are consuming, just like we are doing here\\!\n\nThat's one reason why we chose this challenge. It's an easy introduction to this process of working with 3rd party APIs which enforce authentication logic. Now, on to the project details\\!\n# User Stories\n\nHere are some user stories for the project. They are relatively short and to the point:\n\n* As a user, I can run a program on the command line to fetch current weather details for some location.\n* As a user, I can pass in the location I want to search using an argument, e.g.\n   * Sample command: `node weather.js --location=Tokyo`.\n\n\nThat's it\\! You just have to build a simple NodeJS program which can be run on the command line and accepts an argument for the location you want to search the weather for. The program should then output the current weather information using the weather API we described above.\n\nAs in the other projects, build your project and push your code to GitHub. Then enter your project URL in this page to complete the project.\n# Hints\n\n* Take a look at the \"Current Weather\" API provided by Weatherstack and the \"Query Parameter\" section on how to provide a weather location. All of this information is in the [API Documentation](https://weatherstack.com/documentation).\n* There are a few libraries to help with reading command line arguments for NodeJS programs. While NodeJS has the built\\-in [process\\.argv](https://nodejs.org/docs/latest/api/process.html#process_process_argv), which you are free to explore, two other node modules you can use are:\n   * [yargs](https://www.npmjs.com/package/yargs)\n   * [command\\-line\\-args](https://www.npmjs.com/package/command-line-args)\n   * Take your pick from these, or search around and find another option\\!\n\n# Challenge\n\nIf you are interested in a challenge here's a few suggestions:\n\n* The Weatherstack API also provides some other options in addition to the current weather, such as historical weather and weather forecast. Take a look at these other APIs and consider adding some more options to your CLI tool to allow users to query these APIs as well.\n* Currently the program accepts a location argument. Modify your program to make the location argument optional. If it is not provided, the program should provide a prompt for the user to enter a location. Once a location is searched, the prompt should reappear so the user can search another location. Add error handling in case the location is invalid or the API request failed. In this case, the user should see some error output and be able to enter another location.\n\n"
        },
        {
          "id": "vIQNdGED5",
          "type": "project",
          "title": "Rock Paper Scissors",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Overview\n\nBuild a command line game of [Rock Paper Scissors](https://en.wikipedia.org/wiki/Rock_paper_scissors). The game should allow a user to choose \"rock\" \"paper\" or \"scissors\" and play against a computer player.\n# User Stories\n\nHere are some user stories to define the project:\n\n* As a user, I can run the game on the command line \\(e.g `node game.js`\\).\n* As a user, I can see three options when I start the game: \"View Scores\", \"Play Game\", and \"Quit\".\n   * Choosing \"View Scores\" shows the current session scores against the computer player.\n   * Choosing \"Play Game\" starts a round of Rock Paper Scissors.\n   * Choosing \"Quit\" exits the program.\n* As a user, I can play a game of Rock Paper Scissors against a computer player.\n   * A game consists of 3 rounds where the user and computer each select Rock Paper or Scissors. The outcome is decided by the rules of the game:\n      * Rock beats scissors.\n      * Paper beats rock.\n      * Scissors beat paper.\n   * If a round ends in a tie, the round repeats.\n   * The first player to win 2 out of 3 rounds wins the game.\n   * The winner's score increases by one.\n* As a user, I can play multiple games against the computer player. The computer player should always randomly choose Rock Paper or Scissors to make the game fair.\n\n# Completing the Project\n\nBuild your program as a NodeJS project. We recommend using the regular project setup we have outlined in the course. Your program should have a `README.md` document which describes how to build and run the program in order to play the game.\n\nCommit your progress and when you are finished push your project to GitHub. Add the link to your project repository here to complete the project challenge.\n# Hints\n\nNodeJS has a built\\-in [readline](https://nodejs.org/api/readline.html) utility which can help you read input from the command line. But like many things in software, other developers have built and open sourced their own libraries which provide higher level abstractions with great APIs for you to do simple things like this. Check out the [Prompts](https://www.npmjs.com/package/prompts) library for a good option for easily reading user input. Good luck\\!"
        },
        {
          "id": "u$qJVfDfE",
          "type": "project",
          "title": "Build an Interactive Dictionary",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Overview\n\nBuild a command line tool which allows you to view definitions and synonyms for English words.\n\nYou can use the [WordsAPI](https://www.wordsapi.com/) for this project. Like the Weatherstack API from the other challenge, you will need to sign up and get an access key to use this API. To do that, you will need to signup via [RapidAPI](https://rapidapi.com/) \\(which is actually a great service which will give you access to a number of other API providers as well\\).\n# User Stories\n\nYour command line program should allow a user to lookup words and view synonyms for words.\n\n* As a user, I am greeted with a prompt when I run the program which allows me to enter a word. When I type a word and press \"enter\" I see a list of definitions for that word \\(use the `/definitions` API\\).\n* As a user, after searching a word I have an option to view synonyms \\(use the `/synonyms` API\\), or search for another word.\n* As a user, errors from searching for invalid words are handled correctly and allow me to search for another word.\n\n\nOnce you have completed your project and pushed it to GitHub, enter your repository URL here to complete the challenge. Good luck\\!\n# Challenge\n\n* The WordsAPI provides a lot of different options. Consider enriching your program's functionality with some of the other API features like antonyms, rhymes, examples, frequency, etc.\n* Display the synonyms for words as selectable command line options which a user can navigate through using the up and down arrow keys and then select with the \"enter\" key. Selecting a synonym should then search and display the definition for that synonym.\n* Maintain a history of word searches the user has performed while the program is running. A user can view this history of words at any time as a list of selectable options and navigate to any word and view that definition again.\n* The program should cache results while it is running, so if a user selects or searches the same word more than once the program should return the cached result instead of making another request to the API.\n\n"
        },
        {
          "id": "WdG@C4ceE",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module we covered the basics of working with asynchronous code in TypeScript and the fundamentals of APIs and making network requests with HTTP. The core concepts presented so far will take you a long way in building real world applications.\n\nHowever, the subject of asynchronous programming and APIs goes well beyond what we covered here. In these special topics we will cover a few additional content areas and tools:\n\n* A history of async in JavaScript\n* How to debug network requests with Chrome devtools\n* Postman: a useful tool for API development\n* GraphQL: a new and popular API design methodology\n* RPC: an alternative to REST APIs\n* Generators: a cool JavaScript feature which combines the ideas of iterators and functions\n* Swagger: a commonly used API documentation tool\n\n"
        },
        {
          "id": "tZ$XMrxzK",
          "type": "media",
          "title": "\"Callback Hell\" - A History of Async",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Callbacks\n\nThe historical approach used in JavaScript to handle asynchronous programming was with promises and callbacks. A callback is basically just a convention of writing functions where you pass a function in as an argument to another function, which can then be called when some result occurs later.\n\nThis approach does work, but it can lead to major problems with code readability and it makes it hard to write more complex asynchronous logic. Overuse/misuse of callbacks leads to the so\\-called \"callback hell\" problem, which, is best understood with a quick trip to [http://callbackhell.com/.](http://callbackhell.com/)\n\nCallback Hell:\n\n```\nfs.readdir(source, function (err, files) {\n  if (err) {\n    console.log('Error finding files: ' + err)\n  } else {\n    files.forEach(function (filename, fileIndex) {\n      console.log(filename)\n      gm(source + filename).size(function (err, values) {\n        if (err) {\n          console.log('Error identifying file size: ' + err)\n        } else {\n          console.log(filename + ' : ' + values)\n          aspect = (values.width / values.height)\n          widths.forEach(function (width, widthIndex) {\n            height = Math.round(width / aspect)\n            console.log('resizing ' + filename + 'to ' + height + 'x' + height)\n            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {\n              if (err) console.log('Error writing file: ' + err)\n            })\n          }.bind(this))\n        }\n      })\n    })\n  }\n})\n\n```\n\nCallback hell results in having various nested function calls which continue to require callback functions to handle deeper and deeper logical steps in a series of asynchronous operations. And, don't forget you will need to handle error cases as well. The result is this \"pyramiding\" style of code which becomes very hard to read and reason about.\n# Promises\n\nCallbacks were the original JavaScript construct to handle asynchronous logic. In the early days, that's all there was. Later, promises were developed and officially added to the JavaScript spec. Promises were a major step forward in terms of writing asynchronous logic. Instead of passing callbacks around, you could leverage the `then` and `catch` methods of a promise. In addition, you could also use utility functions to transform callback style code into promise based code, to use the improved syntax. The NodeJS [promisify](https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original) util is an example of this:\n\n```\nconst util = require('util');\nconst fs = require('fs');\n\nconst stat = util.promisify(fs.stat);\n\nstat('.')\n  .then((stats) => {\n    // Do something with `stats`\n  }).catch((error) => {\n   // Handle the error.\n  });\n\n```\n\nThe `(...).then(...).catch(...)` syntax is much more friendly than the callback equivalent.\n# Async/Await\n\nFinally, the modern async/await syntax was formalized and officially added to JavaScript with EcmaScript 2017, and is now supported by most modern versions of web browsers and NodeJS. This introduced the async/await syntax which we learned in this module.\n\nAsync/await allows you to write code which reads sequentially but executes asynchronously. This makes code more readable, easier to reason about and simpler to organize and compose together. Here is the same `stat` function from above written with async/await:\n\n```\nconst util = require('util');\nconst fs = require('fs');\n\nconst stat = util.promisify(fs.stat);\n\nasync function callStat() {\n  try {\n    const stats = await stat('.');\n    // Do something with `stats`\n  } catch (err) {\n    // Handle the error\n  }\n}\n\n```\n\nThis code is very clear and easy to read, and would also be easy to refactor or change in the future.\n# Takeaways\n\nEven though async/await is definitely the preferred choice for handling asynchronous code in JavaScript/TypeScript, it's important to be aware of all of the constructs mentioned above:\n\n* Callbacks\n* Promises\n* Async/Await\n\n\nYou will probably encounter each at some point in your programming journey. For instance, perhaps you end up working on a legacy codebase which still has some promise\\-based or callback style code laying around, and you decide to refactor it using the modern async/await syntax."
        },
        {
          "id": "3sKGSQZoE",
          "type": "media",
          "title": "The Chrome Devtools Network Tab",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ghNPPvoiFr4",
          "starterCode": "",
          "solutionCode": "",
          "content": "The Chrome devtools provide many useful debugging features, some of which we have seen already. One such feature is the network tab, which monitors HTTP network requests and other types of requests made to and from the current webpage. This tab allows you to inspect a lot of information about the requests, such as the request headers, the request body, the request response, and the response status. Learning how to use the network tab is a great skill to debug and troubleshoot issues with network requests.\n\n++NOTE:++ You can open the Chrome devtools by selecting _View \\> Developer \\> Developer Tools_.\n\n![The Chrome Devtools Network tab inspecting the /courses request for the Pairwise app](/assets/3sKGSQZoE/73d5d3acef9231dc64e5e2c6032b5124_devtools.png)\n\nThe above shows an example of inspecting a webpage \\(the Pairwise app\\) using the Chrome devtools. On the Network tab, we can see details about network requests the page made. This is an easy way to see what services a webpage may be talking to. You can then select any specific request to see additional details, such as the request and response headers and the response status and data.\n\nThe network tab also provides a lot of other information, such as how long it took requests to load \\(this can be helpful for identifying performance bottlenecks or slow APIs\\). The network devtools also allow you to change various settings related to networking. You can simulate slower connection environments, disable the cache, preserve the network log across page reload or redirect actions, and so on.\n\nAs a client application developer, your apps will always be in communication with various backend services and the API layer is a key place where things can go wrong. Being able to debug these issues is an important skill, and the Chrome devtools network tab is a great tool to use for this."
        },
        {
          "id": "OGthmtfif",
          "type": "media",
          "title": "Postman",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/IUZhJSzu-Ag",
          "starterCode": "",
          "solutionCode": "",
          "content": "[Postman](https://www.postman.com/) is a useful tool for working with HTTP based REST APIs. Postman provides many features, the most basic of which is provide a simple interface which allows you to send HTTP requests to a given API.\n\nHere is a screenshot of using Postman to send a POST request to the Pairwise HTTP API server we used for the challenges earlier in this module:\n\n![An example of sending a POST request using Postman.](/assets/OGthmtfif/ace5929898fa7b2fc8359212c64bd521_postman.png)\n\nYou can see we can easily add the request URL, the HTTP request type, the request body, and then submit the request and see the response in the lower panel. This allows you to easily send network requests to test out if a server is working or if the APIs you have designed are functioning as intended. You can use it against servers deployed on the internet or running locally on `localhost`, which is useful for local server and API development.\n\nWe would recommend downloading and trying to use Postman as you work with 3rd party APIs or develop your own APIs. This is a great tool to have available in your toolkit."
        },
        {
          "id": "9X5FTdXbQ",
          "type": "media",
          "title": "GraphQL",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Odk2fzi3jfU",
          "starterCode": "",
          "solutionCode": "",
          "content": "# The Rise of GraphQL\n\n[GraphQL](https://graphql.org/) is a structured, statically\\-typed query language for APIs. GraphQL has emerged as an open source tool from Facebook after being developed internally at Facebook as a solution to some of their data and API problems faced by client developers and it has since grown very rapidly in usage and popularity.\n\nWe can see from the [State of JS survey from 2019](https://2019.stateofjs.com/data-layer/) that over 50% of respondents have heard of GraphQL and would like to learn it, and over 38% have used it and would use it again.\n\n![Popularity of GraphQL and Apollo (a GraphQL client).](/assets/9X5FTdXbQ/7576fb19e8ec8f830d25b65ab7c262c1_state-of-js.png)\n\nAlso, note that Apollo is a client for GraphQL. GraphQL is rising so quickly that we did consider including it as a primary topic in the async/APIs module, however for now we will just cover it in this special topic lesson. We may expand the GraphQL content in the future.\n# What is GraphQL?\n\nGraphQL provides a declarative query language for data. To explain what this means let's dive right into an example:\n\n```\nimport gql from 'graphql-tag';\n\nconst query = gql`\n    {\n        user {\n            name\n            email\n            avatar\n        }\n    }\n`;\n\n```\n\nThis is an example of a GraphQL query, using the [graphql\\-tag library](https://www.npmjs.com/package/graphql-tag). This query is declaring we want to retrieve the `user` data and within the user the `name`, `email`, and `avatar` fields\\. If the response is successful, we will receive an object matching the shape declared by the query.\n\nThis approach to an API is fundamentally different compared to the REST based approach. In GraphQL, the API is first defined using a schema document. The schema defines what data is available, and what type the data is. This second point is important: a GraphQL is a typed API \\(just liked TypeScript is a typed programming language\\). Here's an example of a schema for the above `user` query:\n\n```\nquery user {\n    name: String!\n    email: String!\n    avatar: String!\n    address: String!\n    friends: [Friend!]!\n}\n\n```\n\nThe schema defines all of the fields which are available to query on the `user` and specifies their return type. The `!` indicates that the fields are not nullable. The `Friend` type you see there is not a special type, it would just represent a `Friend` object which would need to be defined elsewhere in the schema.\n\nAn important observation is that the schema provides more data than the query above is asking for. That's one of the cool features of GraphQL, you only ask for the data you need.\n# A Statically Typed API\n\nAs described above, GraphQL is a statically typed API. This is very important and powerful. What this means is that queries and responses can undergo validation according to the GraphQL API schema which then enforces any response adheres to the type definitions in the schema. What this means is that for a given `user` query \\(still building on the above example\\), if you got a successful response you could be sure that the `name`, `email`, and `avatar` field were all strings.\n\nContrast this to a REST API, where nothing inherently enforces the type definitions in the response data. You may have an agreement with backend engineers, or you may faithfully read some 3rd party API documentation, but nothing exists to enforce the response types match what you expect them to be at runtime. This presents a failure point which is bound to occur at some point in time.\n\nWith GraphQL, on the other hand, you know without any doubt that if a response is returned successfully its data matches the type definitions defined by the associated GraphQL schema. This provides guarantees which you can leverage to improve the type accuracy of your overall codebase and it helps to cover one major source of bugs and errors: the API/data layer.\n\nIn addition, with tools like [GraphQL Code Generator](https://graphql-code-generator.com/), you can autogenerate TypeScript type definitions and other boilerplate code directly from a GraphQL schema document. This tooling allows you to maintain a GraphQL schema as a source of truth and then build a lot of other code around that which leverages the API definitions in the schema document.\n# GraphQL Tooling\n\nGraphQL also comes with a lot of tooling, documentation, and other helper libraries which make working with it very productive. GraphQL Code Generator is one, which is mentioned above.\n\nBecause the schema file basically serves as a source of truth for the API, it means that [GraphQL](https://github.com/graphql/graphiql) is effectively a self\\-documenting API. As a result, you can use the handy GraphiQL tool to introspect a GraphQL schema and view information about what data is available to you in a GraphQL API. You can also use GraphiQL to actually submit requests \\(much like you can with Postman—which also supports GraphQL\\).\n\nHere is an example of GraphiQL in action \\([try it yourself here](https://graphql.org/swapi-graphql)\\):\n\n![GraphiQL example.](/assets/9X5FTdXbQ/322b18126aee6a1f325a69fee29b997b_graphiql.png)\n\nGraphiQL provides auto\\-completion, API documentation, and an easy interface to actually dispatch queries and view response data. GraphiQL makes building and working with GraphQL APIs easy and very productive.\n# Client Libraries: Apollo\n\nTo actually incorporate GraphQL into a client application, you will need to use a GraphQL client library. [Apollo Client](https://www.apollographql.com/docs/react/) has emerged as the best choice in this regard. Apollo Client gives you an easy way to integrate GraphQL and dispatch queries from a frontend application. Apollo has produced a lot of other libraries and resources around GraphQL, including [Apollo Server Express library](https://www.apollographql.com/docs/apollo-server/v1/servers/express/) which you can use to quickly bootstrap a new GraphQL server with Express.\n\n---\n# Takeaways\n\nThere's a lot more to GraphQL, such as:\n\n* Using variables\n* Handling pagination\n* Schema types: e.g. union types, fragments, etc.\n* Mutations \\(the equivalent of POST requests\\)\n* Caching and the data loader concept\n\n\nAnd many other topics, including a lot of details around Apollo Client. Feel free to experiment more with GraphQL if it sounds interesting to you. The easiest option would be play around with an example GraphiQL interface \\(like the one [linked above](https://graphql.org/swapi-graphql)\\) to get a feel for how a GraphQL API works. If you like what you find, try to build a GraphQL API in a simple client/server project of your own."
        },
        {
          "id": "L8fsnMhzg",
          "type": "media",
          "title": "Remote Procedure Call (RPC)",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "RPC stands for [Remote Procedure Call](https://en.wikipedia.org/wiki/Remote_procedure_call) and is another type of client\\-server interaction which involves remotely invoking a subroutine or function on another computer or network. RPC APIs were perhaps more common historically for distributed networks prior to the development of the internet, but they are still used in a variety of systems today.\n\n> RPC basically makes a remote service call which looks like a local procedure call.\n\nMany RPC implementations execute service calls and then effectively block execution until a response is received, thus appearing to act synchronously even though the request is actually made to a remote service. However, asynchronous RPC operations are also possible.\n\nRPC APIs are often constructed using protocol buffers, which are basically a language and platform neutral format for describing how to serialize structured data. Google original developed [protocol buffers](https://developers.google.com/protocol-buffers) and now many of the most commonly used RPC libraries, such as [gRPC](https://grpc.io/), are based on work from Google.\n\nProtocol buffers define \"proto\" files which essentially provide type definitions for the data available in an API \\(this is very similar to the GraphQL schema covered in the GraphQL lesson\\). Here is an example proto file:\n\n```none\nmessage Person {\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n}\n\n```\n\nYou can then generate or build client and server code in your preferred target language for the given proto definitions.\n\nIn NodeJS, you can use the [node\\-grpc\\-client](https://www.npmjs.com/package/node-grpc-client) for interacting with gRPC APIs:\n\n```\nconst path = require('path');\nconst PROTO_PATH = path.resolve(__dirname, '../example.proto');\n\nconst GRPCClient = require('node-grpc-client');\n\nconst myClient = new GRPCClient(PROTO_PATH, 'packageservice', 'Theservice', 'localhost:3000');\n\nconst dataToSend = {\n    id: 'abc123',\n    text: 'Hello world'\n};\n\nmyClient.runService('Task1', dataToSend, (err, res) => {\n    console.log('Service response ', res);\n});\n\n```\n\nRPC is an efficient and performant method of client/server communication, which is especially useful in distributed computing. In an environment where you have many distributed services which need to communicate back and forth, RPC is a good option to provide for efficient and modular communication. However, no universal standard exists for RPC which is a disadvantage. For most web\\-based client/server systems, REST based APIs are preferred, since REST was designed for web\\-based systems. [This is a great answer](https://softwareengineering.stackexchange.com/a/345271) which compares and contrasts REST with RPC to explain this distinction more clearly.\n\nYou will probably not encounter RPC APIs very frequently unless you are working with a backend system in which various services need to communicate. Nevertheless, it's still an important topic worth being aware of in the context of asynchronous programming and APIs."
        },
        {
          "id": "eyuFfQ1t5W",
          "type": "typescript",
          "title": "Generators",
          "instructions": "Generators are a special JavaScript construct which allow you to create functions whose execution is not continuous. A generator function, which is created using the special syntax `function*`, when called does not execute but instead returns a special kind of iterator called a generator.\n\nA generator function can be written to return values using the `yield` keyword\\. Each yielded value can be obtained by calling the `next` method on the generator itself.\n\nFor an example of how this works, try to solve the challenge in the editor by completing the `yieldResults` function\\. This function should accept a generator and then obtain all of the values yielded from this generator and return the results in an array.",
          "testCode": "test(\"The `yieldResults` function should be defined.\", () => {\n  expect(typeof yieldResults).toBe(\"function\");\n});\n\ntest(\"The `yieldResults` function accepts a generator and returns an array of all of the result values yielded by that generator.\", () => {\n  function* __generator() {\n    yield 1000;\n    yield 2000;\n    yield 3000;\n    yield 4000;\n    yield 5000;\n  }\n\n  const results = yieldResults(__generator());\n  const expected = [\n    {\n      value: 1000,\n      done: false,\n    },\n    {\n      value: 2000,\n      done: false,\n    },\n    {\n      value: 3000,\n      done: false,\n    },\n    {\n      value: 4000,\n      done: false,\n    },\n    {\n      value: 5000,\n      done: false,\n    },\n  ];\n\n  expect(results).toEqual(expected);\n});\n",
          "videoUrl": "",
          "starterCode": "/**\n * This is a generator function.\n *\n * When called, instead of executing it returns a generator\n * object which functions like an iterator and contains a\n * 'next' method which yields the values within the generator\n * function.\n */\nfunction* generator() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n}\n\n/**\n * This function accepts a generator and should return an array\n * of all of the results yield from the given generator.\n */\nconst yieldResults = (generator: Generator<any, any, any>) => {\n  // Your code here:\n};\n\nconst gen = generator();\nconst results = yieldResults(gen);\nconsole.log(results);\n",
          "solutionCode": "/**\n * This is a generator function.\n *\n * When called, instead of executing it returns a generator\n * object which functions like an iterator and contains a\n * 'next' method which yields the values within the generator\n * function.\n */\nfunction* generator() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n}\n\n/**\n * This function accepts a generator and should return an array\n * of all of the results yield from the given generator.\n */\nconst yieldResults = (generator: Generator<any, any, any>) => {\n  let result = generator.next();\n\n  let results = [];\n\n  while (!result.done) {\n    results.push(result);\n    result = generator.next();\n  }\n\n  return results;\n};\n\nconst gen = generator();\nconst results = yieldResults(gen);\nconsole.log(results);\n",
          "content": "For more context on generators, MDN provides a few resources:\n\n* [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n* [Generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n* [function\\*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*)\n\n\n---\n\nGenerators are a rather odd but interesting programming construct. What can they be used for?\n\nOne good example of where generators are currently used in JavaScript is in the [Redux Saga library](https://redux-saga.js.org/). Redux Saga is a Redux middleware layer which handles dispatching actions and performing asynchronous operations with Redux. Redux is a state management library commonly used with React \\(we will cover these topics in the next module on frontend programming\\). Here is an example of what some action dispatchers in Redux Saga look like, taken from [their documentation](https://redux-saga.js.org/docs/introduction/BeginnerTutorial.html):\n\n```\nimport { put, takeEvery } from 'redux-saga/effects'\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\n\n// ...\n\n// Our worker Saga: will perform the async increment task\nexport function* incrementAsync() {\n  yield delay(1000)\n  yield put({ type: 'INCREMENT' })\n}\n\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\nexport function* watchIncrementAsync() {\n  yield takeEvery('INCREMENT_ASYNC', incrementAsync)\n}\n\n```\n\nFor the most part, generators do not have a large range of use or application in regular JavaScript programming. However, you may come across them from time to time and they are definitely an interesting topic to be aware of. Perhaps they will find additional interesting applications in the future."
        },
        {
          "id": "3XSAaJhTB",
          "type": "media",
          "title": "Swagger",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "[Swagger](https://swagger.io/) is an API documentation tool which is commonly used to document REST APIs. You may encounter it as you interact with other APIs in the future or if you build your own APIs.\n\nSwagger provides a suite of tools for API design and documentation, the most prominent of which is an API documentation tool which takes a set of API endpoints and then produces a UI for browsing through and inspecting the endpoints which are available.\n\n![The Swagger UI for the Petstore server.](/assets/3XSAaJhTB/c8d685a4c1a3f1f0c1c6cf29f1955af8_swagger.png)\n\nThe above screenshot represents the Swagger UI documentation for a [sample Petstore server](https://petstore.swagger.io/). Take a look and scroll through the page to see what's available. Each endpoint includes an example for the request body and also example response types, including error responses. You can also dispatch actual requests from the Swagger UI to tests out the different API endpoints.\n\nYou may find yourself relying on Swagger in the future to inspect a 3rd party API you are working with, or even the internal server API for a product you are working on. Most popular server frameworks include tools for generating swagger documentation automatically, for instance the [swagger\\-ui\\-express library](https://www.npmjs.com/package/swagger-ui-express) provides this for Express and NestJS also provides [built\\-in support](https://docs.nestjs.com/openapi/introduction) for generating Swagger documentation.\n\n> A separate project, the [OpenAPI Initiative](https://en.wikipedia.org/wiki/OpenAPI_Specification), emerged out of Swagger in 2016 and is working to provide more standardization for RESTful web services.\n\nWe have not covered building servers yet, but once we do in the later server programming module try to add Swagger documentation to one of your servers\\!"
        }
      ]
    },
    {
      "free": false,
      "id": "ZdkSjC9P",
      "title": "Frontend Development",
      "challenges": [
        {
          "free": true,
          "id": "TpAkjWcr",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "### Congratulations\\!\n\nNow you have learned all of the fundamental basics of programming. You know the ins and outs of a popular programming language, you have a set of tools to work as a modern developer, and you understand how to write code which interacts with other computer systems. This is an important milestone in your learning journey\\!\n\nWhat you have learned so far will be transferrable to any other programming language you decide to learn in the future\\! Take a moment to congratulate yourself, and get ready to dive further down the rabbit hole.\n---\n\n### Enter React\n\nNow we will embark on the journey of the learning numerous tools, libraries, and frameworks which will equip you to build modern, real\\-world applications. Software engineers do not write everything from scratch. Instead, they use existing software as much as possible. React is the first tool like this for you to learn.\n\nReact is a library for building user interfaces.\n\nThe site you are looking at right now is built with React. React is built and open sourced by Facebook, and if you use any of the Facebook products you have used applications powered by React. React is very popular and the leading choice for building user interfaces. In the software development industry, React is one of the most in demand skills. In addition, it's very versatile. You can write web apps, mobile apps, and even desktop apps using React.\n\nBut what is a user interface library, exactly?\n\nIt's a tool which let's you build the frontend, or user interface, of an application very easily. It provides abstractions to handle common tasks and operations efficiently, safely, and easily. For example, consider this code:\n\n```typescript\nconst Greeting = (name?: string) => {\n    return (\n        <div>\n            <h1>\n                {name ? `Hello, ${name}` : \"Hello and welcome!\"}\n            </h1>\n        </div>\n    );\n};\n\n```\n\nThis code may look strange, and slightly \\(un\\)familiar to you. It may look like TypeScript. Or it may remind you of HTML. Or it may resemble a mishmash of both together. Well, it's exactly that\\! Another name for it is JSX \\(a syntax extension of JavaScript\\), but you will come to recognize this simply as _React\\._\n\nWhat it does is simple. It's a function which greets you by `name`, if you provide the function with a `name` argument, otherwise it displays a default greeting. React allows you to build HTML directly with the power of a programming language.\n\nIn this module, we will learn all about it\\!"
        },
        {
          "id": "50f7f8sUV",
          "type": "react",
          "title": "Create a Controlled Input",
          "instructions": "There is a React Component below. Complete it so in includes a controlled input which allows user's to type.",
          "testCode": "test(\"Renders a `<h1>` tag with the text 'Hello, React!'\", () => {\n  const container = document.createElement(\"div\");\n  ReactTestUtils.act(() => {\n    ReactDOM.render(<Main />, container);\n  });\n  const label = container.querySelector(\"h1\");\n  return label.textContent === \"Hello, React!\";\n});\n\ntest(\"Renders a controlled `<input />` using React state\", () => {\n  const container = document.createElement(\"div\");\n  ReactTestUtils.act(() => {\n    ReactDOM.render(<Main />, container);\n  });\n  const inputEl = container.querySelector(\"input\");\n  const testValue = \"giraffe\";\n  ReactTestUtils.Simulate.change(inputEl, { target: { value: testValue } });\n  return inputEl.value === testValue;\n});\n",
          "videoUrl": "",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface IState {\n  value: string;\n}\n\nclass App extends React.Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render(): JSX.Element {\n    const welcome: string = \"Hello, React!\";\n    console.log(\"Hello from React!!!\");\n    return <div></div>;\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface IState {\n  value: string;\n}\n\nclass App extends React.Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render(): JSX.Element {\n    const welcome: string = \"Hello, React!\";\n    console.log(\"Hello from the iframe!!!\");\n    return (\n      <div>\n        <h1>{welcome}</h1>\n        <input value={this.state.value} onChange={this.handleChange} />\n      </div>\n    );\n  }\n\n  handleChange = (e: any) => {\n    this.setState({ value: e.target.value });\n  };\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));",
          "content": ""
        },
        {
          "id": "wmBDaJz5Q",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In the React projects section you will build some real\\-world projects using React. Get ready, this will be your first major projects to showcase in your portfolio\\!"
        },
        {
          "id": "iJAcbGybh",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "One of the reasons for React's success is its simplicity. Then again, over last few years React has become a broad topic. Even the React library itself has become more complicated with newer features like Hooks and Suspense.\n\nIn these special topics lessons, we will cover some of the more advanced features of React, in addition to other supplementary topics related to frontend app architecture and technology trends."
        }
      ]
    },
    {
      "free": false,
      "id": "EmSvFhW8",
      "title": "Backend Development",
      "challenges": [
        {
          "free": true,
          "id": "kUvFiQmw",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "To build a fullstack application you need two pieces: a frontend and backend. You've already learned how to build a frontend user interface with React \\- now we will dive into building servers on the backend.\n\nA server fulfills the role of handling requests from applications and storing application data. For instance, the server for Pairwise receives numerous requests as you work through the course. The client frontend sends updates on your progress which the server processes and records. When you signup and login the server handles these requests and creates a user entry for you in a database which the server can access. It stores your progress in association with this user. And, it does this for all the users who access Pairwise. The server is \\(should be\\) always available to handle requests from client applications.\n\nServers may seem daunting\\! But don't worry, they are just computer programs and you learned everything you need to write computer programs in the first course modules. Servers are just composed of functions, classes, and data structures.\n\nIn general, a typical server exposes an API for clients to send it requests. It then has a layer of business logic which handles processing client requests, storing and updating data. Then, finally, it has another layer which is responsible for interacting with a database and persisting or retrieving data.\n\nAs you might imagine, there are many tools and libraries for writing server applications which provide some of the common scaffolding and features modern servers require.\n\nIn this module, we will learn about some of these tools and get some practice building and thinking about some of the common components servers use. By the end you will be writing and deploying your own servers. Get excited, let's go\\!"
        },
        {
          "id": "WkU2mKHxZ",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For these projects we will actually write and deploy a server application. Get ready, this is going to be fun\\!"
        },
        {
          "id": "hY2nZf$si",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The world of building severs is vast and fascinating. There are many topics to learn about, from design patterns to scaling to security and so on and so forth. We will try to give you a taste of some of these different topics here, to broaden your  knowledge and give you an idea of how diverse and deep the world of backend development is."
        }
      ]
    },
    {
      "free": false,
      "id": "f0pDYSOV",
      "title": "Databases",
      "challenges": [
        {
          "free": true,
          "id": "LO2nn_8O",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module you will learn about databases, the technology responsible for storing all of the data used by modern software applications. Databases are crucial to building modern software applications. They are responsible for storing and backing up the data which makes your applications valuable. Whether it's user profiles, chat messages, transaction records, inventory, or anything else, these are all stored and persisted in a database.\n\nAt a basic level, a database is just a hard disk on a computer where information is stored. As we will see, there are several different types of databases, which are all used for different purposes. Like many things in software engineering, there are tradeoffs to choosing one database type over another.\n\nThe two most common types of databases are relational and non\\-relational. SQL is the canonical relational database, which you may have heard of before.  A SQL database defines a strict schema for what data and relationships between data look like. If you are using a SQL database you can rely on the database schema to enforce integrity for your data.\n\nOn the other hand, a non\\-relational database doesn't have a strict schema like a SQL database does. Non\\-relational databases are great when you have unstructured data, data in inconsistent formats, data with an unknown format, or other types of flexible requirements. Common non\\-relational databases are MongoDB and Redis, along with several others.\n\nIn this module, we will learn the basics for these different types of databases and get some practice working directly writing, reading, and updating data. This will give you the core skillset required to build a CRUD app \\(Create Read Update Delete\\).\n\nLet's get started\\!"
        },
        {
          "id": "uDMmWREE8",
          "type": "section",
          "title": "Relational Databases: SQL",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nYou can think of relational databases like excel spreadsheets. They consist of columns, which define what types of data can exist, and rows which contain actual data entries. Relational databases represent data with pre\\-defined relationships. These relationships are defined by a database schema. The concept is not too dissimilar from using types in a programming language like TypeScript. For instance, a database schema could define a column for a user's name which must be a string\\-like value up to a specific length.\n# Relational vs. Non\\-Relational\n\nFirst let's setup the distinction between relational and non\\-relational databases. This is probably the highest level distinction for different types of databases.\n\n* **Relational/SQL**: structured data with pre\\-defined types and relationships.\n   * Data is stored in tables.\n   * Examples include MySQL, PostgreSQL, Oracle.\n* **Non\\-relational/NoSQL**: unstructured data, with flexible types and relationships.\n   * Data is usually stored as documents, e.g. as JSON.\n   * Examples include MongoDB, Cassandra, Redis. \n\n\nIn this section, we will be covering relational databases, specifically [PostgreSQL](https://www.postgresql.org/) which is a very widely used open\\-source SQL database. In the next section, we will provide an overview of non\\-relational databases, such as MongoDB.\n\nIn brief, SQL databases are the right choice we you know in advance what your data will look like. Generally, SQL databases are the right choice for many types of applications. NoSQL databases on the other hand, are a great choice if you genuinely do not know what the data you will be storing will look like, or if there are very flexible or variable data requirements. NoSQL databases essentially allow you to store unstructured data without knowing in advance what it looks like.\n# A Quick Example\n\nHere is a simple representation of what some relational database entries might look like:\n\n```none\nid   | name     | username     | email         | created_id\n------------------------------------------------------------------------------------\n1    | Joe      | joe_coder    | joe@mail.com  | 2020-10-23 02:37:59.655231\n2    | Ryan     | ryan_z       | ryan@mail.com | 2020-11-15 14:42:21.111234\n3    | Sara     | sara         | sara@mail.com | 2020-11-23 22:13:59.112321\n\n```\n\nThis table might be created with an initial SQL query like this:\n\n```\nCREATE TABLE IF NOT EXISTS users (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(100),\n  username VARCHAR(100),\n  email VARCHAR(100) UNIQUE NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n```\n# Structured Query Language: SQL\n\n[SQL](https://en.wikipedia.org/wiki/SQL) stands for \"Structured Query Language\" and is a query language for interacting with the structured data in relational database management systems. Broadly, these are also often referred to as SQL databases. As you can see from the above SQL example, SQL is a command\\-like language. Queries succeed or fail according to strict rules.\n\nThe above query interacts with a SQL database and creates a new table called users, only if that table does not yet exist. A SQL database can contain multiple tables, which are basically ways to separate and organize data. In the Excel spreadsheet analogy, tables are basically sheets. And, like in Excel, tables can contain references to other tables. For example, let's say we were building a chat application. We may have a `users` table such as we have defined above and then separately a `messages` table\\. The messages table could contain a column which references the users table, to indicate who is the author and recipient for each message.\n\nThe above SQL query for the `users` table defines certain rules and constraints for the data in the table. For instance, the `NOT NULL` constraint means that any data stored in a \"not null\" column cannot be `null`. If you tried to insert data into such a column with a `null` value, the transaction would fail. Likewise, the `UNIQUE` constraint on the `email` column constrains the `email` value for each row to be unique. If you try to insert a user with an email address which matches an email already held by another user, that query will fail.\n\nThe ability to defined data constraints like this is one of the powerful features of a SQL databases. It provides the developer with a high degree of control and is one of the many ways to ensure data integrity.\n# Properties of SQL Databases\n\nSQL databases provide certain features or properties which are important to be aware of:\n\n* **SQL:** they support SQL which allows tables and data to be created, updated, and removed.\n* **Data integrity:** SQL databases adhere to many data integrity rules, such that you can define types and constraints for values and relationships \\(such as the `NOT NULL` constraint above.\n* **Transaction support:** SQL databases support transactions, which are effectively a logical grouping of SQL statements which either occur in their entirety or not at all. SQL transactions are [ACID](https://en.wikipedia.org/wiki/ACID) compliant\\.\n\n\nThe data stored by a software application is usually incredibly important and valuable. SQL databases allow you to store data in a structured way which conforms to predefined constraints and relationships. This means you can have a high degree of certainty around the validity of the data stored in a SQL database.\n# Basic SQL Statements\n\nIn this section, we will cover some basic SQL query statements which are useful for performing simple operations on an SQL database. We will learn how to insert, update, and remove data, and also see how to create and alter tables and even databases."
        },
        {
          "id": "2W$NOg9P@",
          "type": "typescript",
          "title": "The SQL SELECT Statement",
          "instructions": "A `users` table exists in a SQL database. To query data in a table, you can use the `SELECT` statement\\. The basic syntax for the select statement is:\n\n```\nSELECT column1, column2, ... FROM table_name;\n\n```\n\nWhere you must name the columns you wish to select from the table, or, you can use the catch all `*` to select all the columns at once.\n\n> ++NOTE:++ The `SQL` query in the editor will be executed against a database within which a `users` table exists. Simply fill in the query as you see fit to solve the challenge, running the code will execute the query against this database.\n",
          "testCode": "test(\"The `SQL` value contains a `SELECT` statement which selects all the rows and columns from the `users` table.\", async () => {\n  try {\n    const INSERT =\n      \"DELETE FROM users; INSERT INTO users (name, email) VALUES ('Ryan', 'ryan@mail.com'), ('Jim', 'jim@mail.com'), ('Fred', 'fred@mail.com');\";\n    const result = await executePostgresQuery(INSERT, SQL, SQL);\n\n    const first = result.rows[0];\n    expect(first.name).toBe(\"Ryan\");\n    expect(first.email).toBe(\"ryan@mail.com\");\n\n    const second = result.rows[1];\n    expect(second.name).toBe(\"Jim\");\n    expect(second.email).toBe(\"jim@mail.com\");\n\n    const third = result.rows[2];\n    expect(third.name).toBe(\"Fred\");\n    expect(third.email).toBe(\"fred@mail.com\");\n  } catch (err) {\n    throw err;\n  }\n});\n",
          "videoUrl": "",
          "starterCode": "// Your SQL here:\nconst SQL = \"\";\n",
          "solutionCode": "// Your SQL here:\nconst SQL = \"SELECT * FROM users\";\n",
          "content": ""
        },
        {
          "id": "ogGvBc5sl",
          "type": "typescript",
          "title": "The SQL INSERT INTO Statement",
          "instructions": "We can insert new data into a SQL table with the `INSERT INTO` SQL statement. Like the `SELECT` statement, inserting data adheres to a simple syntax:\n\n```\nINSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n\n```\n\nWhere the column values refer to the column names, and the `VALUES` refer to the actual values you wish to insert \\(these need to be quoted\\). Try to insert an entry into our `users` table for a user with name `'Ryan'` and email `'ryan@mail.com'`.",
          "testCode": "test(\"A user named Ryan with email ryan@mail.com should be created using a SQL `INSERT INTO` statement.\", async () => {\n  try {\n    const DROP = \"DELETE FROM users;\";\n    const SELECT = \"SELECT * FROM users\";\n    const result = await executePostgresQuery(DROP, SQL, SELECT);\n    console.warn(\"[QUERY RESULT FROM TEST ENVIRONMENT]:\");\n    console.log(result);\n    const first = result.rows[0];\n    expect(first.name).toBe(\"Ryan\");\n    expect(first.email).toBe(\"ryan@mail.com\");\n  } catch (err) {\n    throw err;\n  }\n});\n",
          "videoUrl": "",
          "starterCode": "// Your SQL here:\nconst SQL = \"\";\n",
          "solutionCode": "// Your SQL here:\nconst SQL = \"INSERT INTO users (name, email) VALUES ('Ryan', 'ryan@mail.com');\";\n",
          "content": ""
        },
        {
          "id": "Q6wrmX6TN",
          "type": "typescript",
          "title": "The SQL UPDATE Statement",
          "instructions": "To update an existing database entry, we can use the `UPDATE` statement:\n\n```\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n\n```\n\nThe \"condition\" is basically a clause you must supply so the SQL statement knows how to match the entry you are updating. For instance, if we are updating a user with name Fred, the condition could be `where name = 'Fred'`. In the editor below, write a SQL statement to change the email address of a user using an `UPDATE` statement\\.",
          "testCode": "test(\"A user named Vance with email `vance@gmail.com` exists. Let's update his email address to `vance500@gmail.com`.\", async () => {\n  try {\n    const INSERT =\n      \"DELETE FROM users; INSERT INTO users (name, username, email) VALUES ('Vance', 'vance-guy', 'vance@gmail.com');\";\n    const SELECT = \"SELECT * FROM users\";\n    const result = await executePostgresQuery(INSERT, SQL, SELECT);\n    console.warn(\"[QUERY RESULT FROM TEST ENVIRONMENT]:\");\n    console.log(result);\n    const first = result.rows[0];\n    expect(first.name).toBe(\"Vance\");\n    expect(first.email).toBe(\"vance500@gmail.com\");\n  } catch (err) {\n    throw err;\n  }\n});\n",
          "videoUrl": "",
          "starterCode": "// Your SQL here:\nconst SQL = \"\";\n",
          "solutionCode": "// Your SQL here:\nconst SQL =\n  \"UPDATE users SET email = 'vance500@gmail.com' where email = 'vance@gmail.com'\";\n",
          "content": ""
        },
        {
          "id": "LzZJLUJI0",
          "type": "typescript",
          "title": "The SQL DELETE Statement",
          "instructions": "To remove a row from a SQL database, we can use the `DELETE` statement, also supplying a `WHERE` condition, as follows:\n\n```\nDELETE FROM table_name WHERE condition;\n\n```\n\nWe have our same `Vance` user in the database, now with our updated email: `vance500@gmail.com`. Let's remove him with a `DELETE` statement\\!",
          "testCode": "test(\"A user named Vance with email `vance500@gmail.com` exists. Let's remove him using a SQL `DELETE` statement.\", async () => {\n  try {\n    const INSERT =\n      \"DELETE FROM users; INSERT INTO users (name, username, email) VALUES ('Vance', 'vance-guy', 'vance500@gmail.com');\";\n    const SELECT = \"SELECT * FROM users\";\n    const result = await executePostgresQuery(INSERT, SQL, SELECT);\n    console.warn(\"[QUERY RESULT FROM TEST ENVIRONMENT]:\");\n    console.log(result);\n    expect(result.rows.length).toBe(0);\n  } catch (err) {\n    throw err;\n  }\n});\n",
          "videoUrl": "",
          "starterCode": "// Your SQL here:\nconst SQL = \"\";",
          "solutionCode": "// Your SQL here:\nconst SQL = \"DELETE from users WHERE email = 'vance500@gmail.com'\";\n",
          "content": ""
        },
        {
          "id": "GgJrDl$br",
          "type": "media",
          "title": "Managing Databases and Tables",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "We have covered the main SQL statements which exist to query, insert, update, and delete data in a SQL database. There are a few other SQL statements to be aware of, in addition to these basic ones. We can also use SQL to create and alter tables, and to create and remove databases.\n\nA SQL database server can support multiple \"databases\", each of which can contain multiple tables. Database administrator users will be able to create and remove databases, and can access specific rights and privileges to other users with regard to make database and table updates.\n# SQL Database Commands\n\nIn SQL, we can create a new database with a command like:\n\n```\nCREATE DATABASE databasename;\n\n```\n\nAssuming your user has the rights to create a database, this command will create a database with the `databasename` you provided in the query.\n# SQL Table Commands\n\nLet's assume we create a new database called `testdatabase`.\n\n```\nCREATE DATABASE testdatabase;\n\n```\n\nThen, we want to add a table to it called `users`:\n\n```\nCREATE TABLE IF NOT EXISTS users (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(100),\n  email VARCHAR(100) UNIQUE NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n\n```\n\nNow, let's say we want to add a new column for a `username`:\n\n```\nALTER TABLE users\nADD username VARCHAR(100);\n\n```\n# Removing Databases and Tables\n\nFinally, let's say we want to drop the table and then drop the database as well:\n\n```\nDROP TABLE users\nDROP DATABASE test_database\n\n```\n\nAs you can see, it is fairly straightforward to implement these basic operations with the direct, declarative syntax of SQL. Other operations can be achieved with some variations of the above, e.g. dropping columns from tables:\n\n```\nALTER TABLE users\nDROP COLUMN username;\n\n```\n"
        },
        {
          "id": "zrf$D7rpQ",
          "type": "section",
          "title": "Non-Relational Databases",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nIn this section, we will introduce non\\-relational databases, which, in contrast to SQL databases, are better suited for storing unstructured documents of data. SQL databases are \"row\\-oriented\" where all of the entities in each row have fixed attributes and types. SQL databases are ideal for datasets with known structure and relationships and also for datasets which are easy to represent in a row\\-oriented format. For instance, a database containing a list of users, or products, or courses, or <insert your list of things here\\>, is a great fit for a SQL database.\n# Types of Non\\-Relational Databases\n\nSometimes you have unstructured data or data with relationships which could change or are not fixed or known. Or, you may have a dataset which is better modeled by a different type of database \\(i.e. SQL is not a good fit\\). This is where \"non\\-SQL\" databases come into play. Non\\-relational, or NoSQL, is a broad term for the class of \"non\\-SQL\" databases which are useful in circumstances where SQL is not a great fit. In general, noSQL databases can be broken into 4 broad categories:\n\n* **Key\\-Value Databases: **This is the simplest type of non\\-relational database and is conceptually like a JavaScript object or Map which you can store key/value pairs of data in. This type of database generally imposes no constraints on the type of values being stored and is a great option for caching. Key\\-value stores usually provide very fast lookup. Examples of key\\-value databases include [Redis](https://redis.io/) and [DynamoDB](https://aws.amazon.com/dynamodb/).\n* **Document Databases: **Databases like [MongoDB](https://www.mongodb.com/) and [CouchDB](https://couchdb.apache.org/) can be used to store documents of data. You can think of documents like unstructured or structured JSON. Document databases can support a schema which defines the type of data being stored, and are often useful for storing data which makes less sense to break apart and store in a relational database schema.\n* **Column\\-oriented Databases: **This database type is similar to a row\\-oriented SQL database but one in which all rows are indexed and not all rows have to have the same columns. The tradeoff is additional storage and write size but increased lookup performance. Column\\-oriented databases can be useful when performance is important, e.g. realtime analytics data. Some examples include [Cassandra](https://cassandra.apache.org/) and [Clickhouse](https://clickhouse.tech/).\n* **Graph Databases: **A graph database stores entities in the form of a graph data structure. Graph data structures are composed of nodes and edges between nodes and are ideal for representing datasets where the underlying data relationship resembles a network. For example, a social network of relationships between individuals \\(LinkedIn, Facebook, etc.\\) is easy to represent as a graph. A popular graph database is [Neo4j](https://neo4j.com/).\n\n\nAs you can see, there are a few different types of non\\-relational databases and for each type there are different implementations to choose from. This is one of the major differences between SQL and NoSQL—with SQL you have a pretty standard and widely used database pattern with slight variations between different implementations. Learning SQL goes a long way. For non\\-relational databases, the commonality is mainly in principle only, with large differences between different implementations.\n# This Module\n\nIn this module, we will cover a introduce some of the major types of non\\-relational databases. The main takeaway is to become familiar with some of the different variations available and when to use one over another."
        },
        {
          "id": "wf9ggEKbq",
          "type": "typescript",
          "title": "MongoDB Intro Challenge",
          "instructions": "Let's insert a user into a MongoDB collection using the `insertOne` method\\. A [MongoDB collection](https://docs.mongodb.com/manual/reference/method/js-collection/) is available for you to use under the name `usersCollection`. Good luck\\!",
          "testCode": "test(\"A user named Joe with email joe@mail.com should be created using MongoDB `insertOne` query.\", async () => {\n  const name = \"Joe\";\n  const email = \"joe-blega-blogga@mail.com\";\n  await insertUser({ name, email });\n  const args = usersCollection.getArgs();\n  const result = await executeMongoDBQuery(args);\n\n  console.log(result);\n  expect(result.name).toBe(name);\n  expect(result.email).toBe(email);\n  expect(typeof result._id).toBe(\"string\");\n});\n",
          "videoUrl": "",
          "starterCode": "interface User {\n  name: string;\n  email: string;\n}\n\nconst insertUser = (user: User) => {\n  // Your code here:\n}",
          "solutionCode": "interface User {\n  name: string;\n  email: string;\n}\n\nconst insertUser = async (user: User) => {\n  try {\n    const result = await usersCollection.insertOne(user);\n    return result;\n  } catch (err) {\n    console.log(\"An error occurred...\");\n  }\n};\n",
          "content": ""
        },
        {
          "id": "K9UYTfwcy",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now let's get some practice working with real databases."
        },
        {
          "id": "RJQvHawqD",
          "type": "project",
          "title": "Setup a PostgreSQL Database",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, write some SQL scripts to create a PostgreSQL database to represent an e\\-commerce store from scratch which defines tables according to the following requirements:\n\n* 3 Tables exist for products customers, and orders.\n* The `Customers` table should contain customer entries.\n* The `Products` table should contain entries for products in the store.\n* The `Orders` table should reference the product and customer for an order. Assume an order only references a single product.\n* The tables schema adhere to the following pseudocode definitions:\n\n\n```\nProduct {\n    id           // Unique id for product\n    name         // Product name\n    description  // Product description\n    price        // Product price (a number, e.g. 100 = $100.00).\n}\n\nCustomer {\n    id           // Unique id for customer\n    username     // Customer username\n    email        // Customer email address\n    address      // Customer address\n}\n\nOrder {\n    date         // Date type for when the order occurred\n    product      // Reference to the product contained in the order\n    customer     // Reference to the customer the order belongs to\n}\n\n```\n\n"
        },
        {
          "id": "qe2LFM0mp",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these special topics we will cover a lot of supplementary topics related to databases. As you might guess database engineering is a broad and vast topic, with a lot of room for specialization. Here, we will cover some other popular database technologies and discuss other topics such as performance and scalability."
        }
      ]
    },
    {
      "free": false,
      "id": "D1JR2EXa",
      "title": "Mobile Development",
      "challenges": [
        {
          "free": true,
          "id": "BfciawyS",
          "type": "media",
          "title": "Intro to React Native",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/EsMrt6tWkOc",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module you will learn the basics of building mobile apps. Specifically, this module will cover [React Native](https://reactnative.dev/docs/getting-started), a cross\\-platform technology which allows developers to build iOS and Android apps with a single codebase.\n# A Brief History of Mobile Apps\n\nFirst, a quick word of introduction and history about mobile apps.\n\nMobile apps began to exist with the invention of the iPhone in 2007. Since then, smart phones and mobile apps have grown tremendously. Traditionally mobile app development has required app developers to develop separate applications for different platforms. This is because the dominant platforms, iOS and Android, are totally different and therefore apps on these platforms are built using different technologies and programming languages which are specialized for those devices.\n\nTraditionally, \"native\" mobile apps are written using Objective\\-C or Swift on iOS, and Java or Kotlin on Android. However, product teams want their apps to provide a consistent experience across both platforms, but this can be challenging for engineering teams which must build and maintain completely separate codebases in different languages which attempt to duplicate the same features, functionality, and user experiences on multiple devices.\n\nIt breaks one of the fundamental rules of programming: **Don't Repeat Yourself.**\n# Cross Platform Mobile Frameworks\n\nIn the past few years, several \"cross\\-platform frameworks\" have emerged which allow developers to write mobile apps using a single codebase and language. These apps are then compiled to run on the specific target device, whether that is iOS or Android, or some other target \\(e.g. web, or desktop\\).\n\nThis provides huge benefits: engineering teams can focus on maintaining a single codebase which runs on both platforms. Product teams can move more quickly iterating product ideas and building new features. However, the drawback is that these frameworks tend to experience some disadvantages compared to writing a native app. For instance, native apps tend to have better performance, more seamless user device interactions, and can use some native device APIs more effectively. Moreover, the native ecosystems have had 5\\-10 years to develop and mature, whereas many of these cross\\-platform frameworks are new and less fully developed.\n# React Native\n\nReact Native is one of the leading cross\\-platform solutions for building mobile apps for iOS and Android. It works by running a JavaScript application directly on the mobile device and then transforming React's UI updates to update the UI on the phone \\(instead of the HTML UI of a webpage\\). We will get into the details of how React Native works later in this module. The beautiful thing is you don't have to understand the implementation details in order to use the framework effectively. You can basically just write the same React code you are familiar with in the context of the web and see it work seamlessly on a mobile device.\n\nThere are also a few other frameworks like React Native, another popular one is Flutter. We will cover a few of these in brief detail later as well.\n# Learning React Native in Pairwise\n\nHere, we will get some experience with React Native. You will find that writing React Native apps requires learning almost nothing new if you already know React\\! This is really powerful. There are some specific device APIs which exist for mobile apps which are not present on the web, but other than that your existing knowledge is fully transferrable to the world of mobile.\n\nThe React Native challenges in the Pairwise workspace utilize [React Native Web](https://github.com/necolas/react-native-web), which is a library that makes it possible to use React Native components and APIs on the web. This library has its own uses, but here it allows us to preview React Native components in the context of a web browser. We've also added a mobile browser UI around the preview, so it appears to be a mobile device. This is all just for simulation though, you will be viewing HTML and CSS rendered in a web browser, not a genuine React Native UI\\! Keep that in mind and also know that it means some aspects of React Native will not work in the Pairwise workspace environment.\n\nLater in this module, we will introduce [Expo](https://expo.io/) which is a toolkit for developing and publishing React Native apps. With Expo you will be equipped to develop and preview React Native apps—you can even preview them natively on your phone\\! Once we cover this you will be ready to try out all the features React Native has to offer and even build and deploy your own mobile apps.\n\nWith all of that out of the way let's get started with the challenges\\!"
        },
        {
          "id": "Vomr8zKdY",
          "type": "section",
          "title": "React Native UI Components",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "This section will cover the important UI components in React Native. Unlike using React for the web, there is no HTML or DOM in React Native. As a result, React Native provides [custom platform\\-agnostic UI components](https://reactnative.dev/docs/intro-react-native-components) for rendering basic elements such as containers, text, text input, buttons, lists, and so on. We will learn all about these in this section.\n# React Native UI Primitives\n\nThe basic React Native UI components cover all of the fundamental building blocks you need to create a UI. Unlike HTML, which, to some extent evolved on an ad\\-hoc basis along with the development of the internet itself, React Native was able to start from scratch and design basic UI primitives with a better understanding of what UI developers will need.\n\nSome of the basic components we will cover are:\n\n* `View`**: **A basic \"container\" component which is analogous to a div in HTML.\n* `Text`**:** A component used for rendering text. This is analogous to a p tag in HTML, and can be styled in React Native to resemble a title \\(heading\\) or any other type of text you would like.\n* `TextInput`**: **A component used for inputing text.\n* `Button`**: **A basic button component, which is designed to render nicely on any platform.\n* `Switch`**: **A boolean input which renders as a toggle.\n* `TouchableOpacity`**: **A generic component which captures touch gestures and allows for more flexible customization beyond the normal Button component.\n* `ScrollView`**: **A component which specifically supports scrolling views.\n* `FlatList`**: **A component designed to handle lists of items.\n\n# React Native Styling\n\nIn React Native, styles are applied through JavaScript using an adapted version of CSS. Layout is primarily achieved through flexbox. In React Native, a `StyleSheet` component exists to make it easier to organize styles. In addition, you can use CSS\\-in\\-JS libraries to easily wrap up specific styles with components. With a prior knowledge of CSS, you will find implementing styles in React Native very straightforward. We will gradually introduce styling in this section, and cover it more specifically in the next section on styling and layout.\n"
        },
        {
          "id": "5sRkVVPmD",
          "type": "react",
          "title": "Introducing React Native",
          "instructions": "Hello, and welcome to React Native\\! It turns out that React Native is very similar to React. So similar, in fact, that having completed the React challenges earlier in this course you are already prepared to get started\\! Explore the code below and failing tests to complete the challenge.",
          "testCode": "test('A `Text` element should be rendered with the text `\"Welcome to React Native!\"`.', () => {\n  expect(reactNativeTextExists(\"Welcome to React Native!\")).toBe(true);\n});\n\ntest('A `Button` element should be rendered with `title` prop of `\"Press the Button!\"`.', () => {\n  expect(reactNativeButtonWithTextExists(\"Press the Button!\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Q7RHYrIoIGc",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View, Button } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  componentDidMount() {\n    console.log(\"React Native app mounted.\");\n  }\n\n  render(): JSX.Element {\n    return (\n      <View style={styles}>\n        <Text style={{ marginBottom: 8 }}>Hi</Text>\n        <Button title=\"...\" onPress={this.handleButtonPress} />\n      </View>\n    );\n  }\n\n  handleButtonPress = () => {\n    console.log(\"Handling button press...\");\n  };\n}\n\nconst styles = {\n  flex: 1,\n  height: \"100vh\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  background: \"turquoise\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View, Button } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  componentDidMount() {\n    console.log(\"React Native app mounted.\");\n  }\n\n  render(): JSX.Element {\n    return (\n      <View style={styles}>\n        <Text style={{ marginBottom: 8 }}>Welcome to React Native!</Text>\n        <Button title=\"Press the Button!\" onPress={this.handleButtonPress} />\n      </View>\n    );\n  }\n\n  handleButtonPress = () => {\n    console.log(\"Handling button press...\");\n  };\n}\n\nconst styles = {\n  flex: 1,\n  height: \"100vh\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  background: \"turquoise\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "YlDhTn1D$",
          "type": "react",
          "title": "The View Component",
          "instructions": "The first UI primitive to introduce is the `View` component\\. You can think of the `View` component as an HTML `div`, or more generally a flexible UI container you can put things in or use to build a layout. Use the `View` component as your basic UI building block. Views support layout and styling, touch events, accessibility controls, and can contain zero to multiple children elements.",
          "testCode": "test(\"The `App` component is defined.\", () => {\n  expect(typeof App).toBe(\"function\");\n});\n\ntest(\"The `App` component should render at least one `View` component.\", () => {\n  const views = document.getElementsByTagName(\"div\");\n  expect(views.length > 1).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/G6tOFQ8sZoQ",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element | null {\n    return null;\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element | null {\n    return <View />;\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "suP7NeFUKc",
          "type": "react",
          "title": "The Text Component",
          "instructions": "In React Native, the canonical way to render any text is through the `Text` component\\. Unlike in HTML, where many heading components exist in addition to the paragraph tag, in React Native any text must be render through a `Text` component\\.",
          "testCode": "test('A `Text` element should be rendered with the text `\"This is a React Native Text component!\"`.', () => {\n  const text = \"This is a React Native Text component!\";\n  expect(reactNativeTextExists(text)).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/iXDqoFQrF6c",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return <View />;\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View>\n        <Text>This is a React Native Text component!</Text>\n      </View>\n    );\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "zKZu8XMJz",
          "type": "react",
          "title": "Style Some Text in React Native",
          "instructions": "We will cover styling and layout in more detail in the next section, but as a quick preview try to style the `Text` component `red`. In React Native, CSS styles are [applied in JavaScript as inline styles](https://reactnative.dev/docs/style). Components which support styling support a `style` prop, which is just a plain object of JavaScript styles.",
          "testCode": "test(\"The `App` component should render the text `This text should be red.`.\", () => {\n  const text = \"This text should be red.\";\n  expect(reactNativeTextExists(text)).toBe(true);\n});\n\ntest(\"The text `This text should be red.` should be styled `red`.\", () => {\n  const cssRed = cssColor(\"red\");\n  const text = \"This text should be red.\";\n  const containers = document.getElementsByTagName(\"div\");\n\n  let passed = false;\n  for (const div of containers) {\n    if (div.innerHTML === text) {\n      const color = div.style.color;\n      expect(cssColor(color)).toBe(cssRed);\n      passed = true;\n    }\n  }\n\n  if (!passed) {\n    throw new Error(\"The text should be styled red.\");\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/mRr7cxa6PYs",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return <View />;\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View>\n        <Text style={{ color: \"red\" }}>This text should be red.</Text>\n      </View>\n    );\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "I7N8njKZh",
          "type": "react",
          "title": "The TextInput Component",
          "instructions": "Instead of using HTML `input` and `textarea` elements, if you want to accept user input in React Native you can use the `TextInput` component\\. Add a [TextInput component](https://reactnative.dev/docs/textinput) to the rendered UI in the editor. Add a value to be tracked by component state to render as the TextInput's value. Use the `onChangeText` prop to handle input change events.\n\n> ++NOTE:++ By default the `TextInput` component may not be easy to see. Try to give it some styles so you can see it more easily\\!\n",
          "testCode": "test(\"The `App` component should be defined.\", () => {\n  expect(typeof App).toBe(\"function\");\n});\n\ntest(\"A `TextInput` component should be rendered.\", () => {\n  const inputs = document.getElementsByTagName(\"input\");\n  expect(inputs.length >= 1).toBe(true);\n  expect(__user_code_string__.includes(\"TextInput\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/A3UaZVd9btA",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, TextInput, View, Button } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View>\n        <Text>An example of a TextInput:</Text>\n      </View>\n    );\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, TextInput, View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  constructor() {\n    super();\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render(): JSX.Element {\n    return (\n      <View>\n        <Text>An example of a TextInput:</Text>\n        <TextInput\n          style={{ border: \"1px solid black\" }}\n          value={this.state.value}\n          onChangeText={this.handleChangeText}\n        />\n      </View>\n    );\n  }\n\n  handleChangeText = (text: string) => {\n    this.setState({ value: text });\n  };\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "61iScTEvN",
          "type": "react",
          "title": "The Button Component",
          "instructions": "In React Native, you can render [native\\-styled buttons](https://reactnative.dev/docs/button) with the `Button` component\\. This component renders buttons as you are used to seeing them on iOS and Android. The `Button` accepts on `onPress` callback to handle press events, which are the equivalent of \"click\" events for web buttons.\n\nIn the editor is some React Native code. Update it to render a `Button` which randomizes the app background when pressed.",
          "testCode": "test('A `Text` element should be rendered with the text `\"Welcome to the Background Randomizer App.\"`.', () => {\n  expect(\n    reactNativeTextExists(\"Welcome to the Background Randomizer App.\")\n  ).toBe(true);\n});\n\ntest('A `Button` element should be rendered with `title` prop of `\"Randomize Background!\"`.', () => {\n  expect(reactNativeButtonWithTextExists(\"Randomize Background!\")).toBe(true);\n});\n\ntest(\"Pressing the `Button` element should change the background color.\", () => {\n  const getBackgroundColor = () => {\n    const containers = document.getElementsByTagName(\"div\");\n    for (const x of containers) {\n      const background = x.style.background;\n      if (background !== \"\") {\n        return background;\n      }\n    }\n  };\n\n  const getButton = () => {\n    const buttons = document.querySelectorAll('[role=\"button\"]');\n    for (const button of buttons) {\n      if (button.firstChild.innerHTML === \"Randomize Background!\") {\n        return button;\n      }\n    }\n  };\n\n  const button = getButton();\n  const initialBackground = getBackgroundColor();\n  button.click();\n  const secondBackground = getBackgroundColor();\n  expect(initialBackground !== secondBackground).toBe(true);\n\n  button.click();\n  const thirdBackground = getBackgroundColor();\n  expect(thirdBackground !== secondBackground).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/y6LgI5KsMsQ",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View, Button } = ReactNativeWeb;\n\nconst randomColor = () => {\n  return Math.floor(Math.random() * Math.floor(250));\n};\n\nclass App extends React.Component<{}, {}> {\n  constructor() {\n    super();\n\n    this.state = {\n      background: \"rgb(35, 195, 125)\",\n    };\n  }\n\n  render(): JSX.Element {\n    const { background } = this.state;\n    return (\n      <View style={{ ...styles, background }}>\n        <Text style={{ marginBottom: 8 }}>\n          Welcome to the Background Randomizer App.\n        </Text>\n      </View>\n    );\n  }\n\n  setRandomColor = () => {\n    const [r, g, b] = [randomColor(), randomColor(), randomColor()];\n    const background = `rgb(${r},${g},${b}`;\n    this.setState({ background });\n  };\n}\n\nconst styles = {\n  flex: 1,\n  padding: 25,\n  height: \"100vh\",\n  textAlign: \"center\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View, Button } = ReactNativeWeb;\n\nconst randomColor = () => {\n  return Math.floor(Math.random() * Math.floor(250));\n};\n\nclass App extends React.Component<{}, {}> {\n  constructor() {\n    super();\n\n    this.state = {\n      background: \"rgb(35, 195, 125)\",\n    };\n  }\n\n  render(): JSX.Element {\n    const { background } = this.state;\n    return (\n      <View style={{ ...styles, background }}>\n        <Text style={{ marginBottom: 8 }}>\n          Welcome to the Background Randomizer App.\n        </Text>\n        <Button onPress={this.setRandomColor} title=\"Randomize Background!\" />\n      </View>\n    );\n  }\n\n  setRandomColor = () => {\n    const [r, g, b] = [randomColor(), randomColor(), randomColor()];\n    const background = `rgb(${r},${g},${b}`;\n    this.setState({ background });\n  };\n}\n\nconst styles = {\n  flex: 1,\n  padding: 25,\n  height: \"100vh\",\n  textAlign: \"center\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "MlmUHOQfwZ",
          "type": "react",
          "title": "The Switch Component",
          "instructions": "In React Native, you can use the [Switch component](https://reactnative.dev/docs/switch) to render native\\-styled switches for toggling settings. Render a `Switch` component beneath the `Text` component below. Pressing the `Switch` should toggle the enabled property in the `App` component state. Watch the `Switch` update when the state changes\\!",
          "testCode": "test(\"A `Text` element should be rendered with the text `Here is a React Native Switch:`.\", () => {\n  expect(reactNativeTextExists(\"Here is a React Native Switch:\")).toBe(true);\n});\n\ntest(\"A `Switch` element should be rendered and can be toggled on and off.\", () => {\n  const inputs = document.getElementsByTagName(\"input\");\n  let checkboxExists = false;\n  let toggle = null;\n\n  for (const input of inputs) {\n    if (input.type === \"checkbox\") {\n      checkboxExists = true;\n      toggle = input;\n    }\n  }\n\n  expect(checkboxExists).toBe(true);\n\n  let initalState = toggle.checked;\n  toggle.checked = !initalState;\n  let newState = toggle.checked;\n  expect(initalState !== newState).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/qOwdOVAGoSs",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View, Switch } = ReactNativeWeb;\n\ninterface IState {\n  enabled: boolean;\n}\n\nclass App extends React.Component<{}, IState> {\n  constructor() {\n    super();\n\n    this.state = {\n      enabled: false,\n    };\n  }\n\n  render(): JSX.Element {\n    return (\n      <View style={styles}>\n        <Text>Here is a React Native Switch:</Text>\n      </View>\n    );\n  }\n\n  toggleSwitch = () => {\n    this.setState((ps: IState) => ({\n      enabled: !ps.enabled,\n    }));\n  };\n}\n\nconst styles = {\n  flex: 1,\n  height: \"100vh\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View, Switch } = ReactNativeWeb;\n\ninterface IState {\n  enabled: boolean;\n}\n\nclass App extends React.Component<{}, IState> {\n  constructor() {\n    super();\n\n    this.state = {\n      enabled: false,\n    };\n  }\n\n  render(): JSX.Element {\n    return (\n      <View style={styles}>\n        <Text>Here is a React Native Switch:</Text>\n        <Switch\n          style={{ marginTop: 12 }}\n          value={this.state.enabled}\n          onValueChange={this.toggleSwitch}\n          trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\n          thumbColor={this.state.enabled ? \"#f5dd4b\" : \"#f4f3f4\"}\n        />\n      </View>\n    );\n  }\n\n  toggleSwitch = () => {\n    this.setState((ps: IState) => ({\n      enabled: !ps.enabled,\n    }));\n  };\n}\n\nconst styles = {\n  flex: 1,\n  height: \"100vh\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "33dM@rwpL",
          "type": "react",
          "title": "The TouchableOpacity Component",
          "instructions": "A more generic component exists for handling touch events in React Native. If you want to create a button with custom styles, you will want to use one of the [Touchable components](https://reactnative.dev/docs/handling-touches#touchables). In this challenge, render a [TouchableOpacity component](https://reactnative.dev/docs/touchableopacity) to create a button element. Style the button however you like by passing in a styles object for the `style` prop\\. Give your `TouchableOpacity` an `onPress` callback, this can perform an action you want.",
          "testCode": "test(\"The `App` component is defined.\", () => {\n  expect(typeof App).toBe(\"function\");\n});\n\ntest(\"The `App` component should render a `TouchableOpacity` with the text `This is a touchable button!`\", () => {\n  const code = __user_code_string__;\n  expect(\n    code.includes(\"<TouchableOpacity\") && code.includes(\"</TouchableOpacity>\")\n  ).toBe(true);\n  expect(reactNativeTextExists(\"This is a touchable button!\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/nTPd7r9bsjc",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View, TouchableOpacity } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View style={centered}>\n        <Text>\n          Touchable components are useful when you need a button-like element\n          with more customization.\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst centered = {\n  flex: 1,\n  padding: 8,\n  background: \"coral\",\n  height: \"100vh\",\n  textAlign: \"center\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View, TouchableOpacity } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View style={centered}>\n        <Text>\n          Touchable components are useful when you need a button-like element\n          with more customization.\n        </Text>\n        <TouchableOpacity onPress={this.handleTouch} style={touchableStyles}>\n          <Text>This is a touchable button!</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  handleTouch = () => {\n    alert(\"TouchableOpacity is working.\");\n  };\n}\n\nconst touchableStyles = {\n  width: 100,\n  height: 100,\n  marginTop: 12,\n  borderRadius: 5,\n  textAlign: \"center\",\n  justifyContent: \"center\",\n  background: \"MediumSpringGreen\",\n};\n\nconst centered = {\n  flex: 1,\n  padding: 8,\n  background: \"coral\",\n  height: \"100vh\",\n  textAlign: \"center\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "sOqagboEbz",
          "type": "react",
          "title": "The ScrollView Component",
          "instructions": "In React Native we have to use a specific component if we want to enable scrolling behavior on a `View`, the [ScrollView component](https://reactnative.dev/docs/scrollview). The `ScrollView` component requires a bounded height to work correctly, which is usually achieved by passing the `flex: 1` style in a parent.\n\n> ++NOTE:++ Since we are previewing React Native here on web using `react-native-web`, a regular `View` component is in fact scrollable. Web browsers by default allow overflow content to be scrollable. However, if this was React Native you would need to use the `ScrollView` component \\(or one of the `ListView` components—see next challenge\\).\n> \n> Also note that in the `ScrollView` docs \\(and this challenge\\), the components are nested within the `SafeAreaView` component, a component which is used to render elements within the safe boundaries of the device. [Read more about that here](https://reactnative.dev/docs/safeareaview).\n",
          "testCode": "test(\"The `App` component is defined.\", () => {\n  expect(typeof App).toBe(\"function\");\n});\n\ntest(\"The `App` component should render the `text` using a `ScrollView` component.\", () => {\n  const code = __user_code_string__;\n  expect(code.includes(\"<ScrollView\") && code.includes(\"</ScrollView>\")).toBe(\n    true\n  );\n  expect(reactNativeTextExists(text)).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Py3E1yteIGY",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, SafeAreaView, ScrollView } = ReactNativeWeb;\n\nconst text = `\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ligula odio, tempus in iaculis vitae, commodo non metus. Proin rhoncus nibh placerat erat dignissim blandit. Curabitur venenatis convallis ex non cursus. Ut auctor magna massa, vestibulum accumsan lectus ornare ac. Curabitur imperdiet, odio et scelerisque tincidunt, nunc elit interdum ex, eu faucibus felis tortor a dolor. Vivamus laoreet sagittis metus id ultrices. Nulla vehicula felis tortor, vel sagittis leo semper at. Etiam convallis et enim euismod rutrum. Nam ultricies, arcu sit amet accumsan facilisis, urna enim ultricies justo, at egestas purus ante a lacus. In ac libero a purus sodales elementum. Nunc bibendum dolor vel justo tincidunt convallis id id nisl. Praesent porta urna sed volutpat ullamcorper.\n\nIn eleifend quam ipsum, in egestas felis commodo eget. Phasellus ultricies ante diam, et aliquet augue vulputate id. Nullam hendrerit imperdiet elit, eu laoreet elit laoreet eget. In maximus dictum vestibulum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed viverra felis nisl, in porttitor eros facilisis et. Phasellus aliquam convallis auctor. Pellentesque lobortis ipsum sed mi interdum vulputate sed eu sem. Morbi quis velit in lectus auctor auctor eu non felis.\n\nAliquam in lorem mauris. Aliquam justo lacus, pellentesque et felis eu, lobortis eleifend purus. Aliquam est augue, ullamcorper quis pulvinar eget, imperdiet eu dui. Nulla vitae risus tempus, hendrerit turpis et, porttitor lorem. Quisque sit amet eros neque. Curabitur non tincidunt nunc. In luctus vulputate libero, at elementum purus dapibus at. Donec volutpat purus eu elit scelerisque, ac tristique erat bibendum. Aliquam a feugiat erat. Curabitur quis lacus fermentum, iaculis nunc sed, finibus ante. Nunc facilisis aliquet lacus, non ultricies lectus dapibus eget. Aliquam erat volutpat. Proin volutpat varius nulla, eget pellentesque metus euismod quis. Duis in nibh a libero ultrices ultrices.\n\nNullam eget turpis accumsan, ultrices mi nec, dapibus enim. Etiam bibendum ex fermentum blandit venenatis. Donec tincidunt id velit a aliquet. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla in eros dui. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed quis volutpat ex. Mauris diam quam, euismod et hendrerit tincidunt, lobortis a ipsum.\n\nVestibulum eget purus quis enim finibus tempor ac vel ante. Mauris porta sollicitudin pulvinar. Sed sed sagittis est, vitae rutrum erat. Ut cursus dui tortor, eget egestas odio hendrerit a. Maecenas finibus quis augue sed elementum. Suspendisse blandit dapibus elit vel aliquam. Nam mattis tristique purus non tincidunt. Morbi tempus aliquet ultrices. Quisque dapibus scelerisque facilisis. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer.\n`;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <SafeAreaView style={container}>\n        <Text style={{ marginBottom: 4, fontWeight: 500 }}>\n          This is a long string of auto-generated lorum ipsum text:\n        </Text>\n        <Text>{text}</Text>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst container = {\n  flex: 1,\n  padding: 12,\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, SafeAreaView, ScrollView } = ReactNativeWeb;\n\nconst text = `\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ligula odio, tempus in iaculis vitae, commodo non metus. Proin rhoncus nibh placerat erat dignissim blandit. Curabitur venenatis convallis ex non cursus. Ut auctor magna massa, vestibulum accumsan lectus ornare ac. Curabitur imperdiet, odio et scelerisque tincidunt, nunc elit interdum ex, eu faucibus felis tortor a dolor. Vivamus laoreet sagittis metus id ultrices. Nulla vehicula felis tortor, vel sagittis leo semper at. Etiam convallis et enim euismod rutrum. Nam ultricies, arcu sit amet accumsan facilisis, urna enim ultricies justo, at egestas purus ante a lacus. In ac libero a purus sodales elementum. Nunc bibendum dolor vel justo tincidunt convallis id id nisl. Praesent porta urna sed volutpat ullamcorper.\n\nIn eleifend quam ipsum, in egestas felis commodo eget. Phasellus ultricies ante diam, et aliquet augue vulputate id. Nullam hendrerit imperdiet elit, eu laoreet elit laoreet eget. In maximus dictum vestibulum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed viverra felis nisl, in porttitor eros facilisis et. Phasellus aliquam convallis auctor. Pellentesque lobortis ipsum sed mi interdum vulputate sed eu sem. Morbi quis velit in lectus auctor auctor eu non felis.\n\nAliquam in lorem mauris. Aliquam justo lacus, pellentesque et felis eu, lobortis eleifend purus. Aliquam est augue, ullamcorper quis pulvinar eget, imperdiet eu dui. Nulla vitae risus tempus, hendrerit turpis et, porttitor lorem. Quisque sit amet eros neque. Curabitur non tincidunt nunc. In luctus vulputate libero, at elementum purus dapibus at. Donec volutpat purus eu elit scelerisque, ac tristique erat bibendum. Aliquam a feugiat erat. Curabitur quis lacus fermentum, iaculis nunc sed, finibus ante. Nunc facilisis aliquet lacus, non ultricies lectus dapibus eget. Aliquam erat volutpat. Proin volutpat varius nulla, eget pellentesque metus euismod quis. Duis in nibh a libero ultrices ultrices.\n\nNullam eget turpis accumsan, ultrices mi nec, dapibus enim. Etiam bibendum ex fermentum blandit venenatis. Donec tincidunt id velit a aliquet. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla in eros dui. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed quis volutpat ex. Mauris diam quam, euismod et hendrerit tincidunt, lobortis a ipsum.\n\nVestibulum eget purus quis enim finibus tempor ac vel ante. Mauris porta sollicitudin pulvinar. Sed sed sagittis est, vitae rutrum erat. Ut cursus dui tortor, eget egestas odio hendrerit a. Maecenas finibus quis augue sed elementum. Suspendisse blandit dapibus elit vel aliquam. Nam mattis tristique purus non tincidunt. Morbi tempus aliquet ultrices. Quisque dapibus scelerisque facilisis. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer.\n`;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <SafeAreaView style={container}>\n        <Text style={{ marginBottom: 4, fontWeight: 500 }}>\n          This is a long string of auto-generated lorum ipsum text:\n        </Text>\n        <ScrollView>\n          <Text>{text}</Text>\n        </ScrollView>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst container = {\n  flex: 1,\n  padding: 12,\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "Uqjk2fj3p8",
          "type": "react",
          "title": "The FlatList Component",
          "instructions": "There is another type of UI which tends to require scrolling: lists. React Native provides special components for rendering lists too, the `FlatList` and the `SectionList`. Each of these are implementations of the more generic but rarely used [VirtualizedList component](https://reactnative.dev/docs/virtualizedlist) which improves list performance by maintaining a finite rendering window for visualizing the current area of the list in view. The FlatList component is the best option for rendering regular lists of data, and in this challenge we can use it to render the `list` of names in the editor below.\n\nThe component requires a few specific props to render the list correctly. Take a look at the [FlatList docs](https://reactnative.dev/docs/flatlist) to see an example and try to complete this challenge with what you learned\\!",
          "testCode": "test(\"The `App` component is defined.\", () => {\n  expect(typeof App).toBe(\"function\");\n});\n\ntest(\"The `App` component should render the `list` of names using a `FlatList` component.\", () => {\n  const code = __user_code_string__;\n  expect(code.includes(\"<FlatList\")).toBe(true);\n  expect(code.includes(\"data=\")).toBe(true);\n  expect(code.includes(\"renderItem=\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/80w85tEaf_M",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { SafeAreaView, FlatList, Text } = ReactNativeWeb;\n\nconst list = [\n  \"Liam\",\n  \"Noah\",\n  \"Oliver\",\n  \"William\",\n  \"Elijah\",\n  \"James\",\n  \"Benjamin\",\n  \"Lucas\",\n  \"Mason\",\n  \"Ethan\",\n  \"Alexander\",\n  \"Henry\",\n  \"Jacob\",\n  \"Michael\",\n  \"Daniel\",\n  \"Logan\",\n  \"Jackson\",\n  \"Sebastian\",\n  \"Jack\",\n  \"Aiden\",\n  \"Owen\",\n  \"Samuel\",\n  \"Matthew\",\n  \"Joseph\",\n  \"Levi\",\n  \"Mateo\",\n  \"David\",\n  \"John\",\n  \"Wyatt\",\n  \"Carter\",\n  \"Julian\",\n  \"Luke\",\n  \"Grayson\",\n  \"Isaac\",\n  \"Jayden\",\n  \"Theodore\",\n  \"Gabriel\",\n  \"Anthony\",\n  \"Dylan\",\n  \"Leo\",\n  \"Lincoln\",\n];\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <SafeAreaView style={container}>\n        <Text>\n          In React Native, we can render long lists of items using the FlatList\n          component:\n        </Text>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst container = {\n  flex: 1,\n  padding: 8,\n  height: \"100vh\",\n  background: \"Moccasin\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { SafeAreaView, FlatList, Text } = ReactNativeWeb;\n\nconst list = [\n  \"Liam\",\n  \"Noah\",\n  \"Oliver\",\n  \"William\",\n  \"Elijah\",\n  \"James\",\n  \"Benjamin\",\n  \"Lucas\",\n  \"Mason\",\n  \"Ethan\",\n  \"Alexander\",\n  \"Henry\",\n  \"Jacob\",\n  \"Michael\",\n  \"Daniel\",\n  \"Logan\",\n  \"Jackson\",\n  \"Sebastian\",\n  \"Jack\",\n  \"Aiden\",\n  \"Owen\",\n  \"Samuel\",\n  \"Matthew\",\n  \"Joseph\",\n  \"Levi\",\n  \"Mateo\",\n  \"David\",\n  \"John\",\n  \"Wyatt\",\n  \"Carter\",\n  \"Julian\",\n  \"Luke\",\n  \"Grayson\",\n  \"Isaac\",\n  \"Jayden\",\n  \"Theodore\",\n  \"Gabriel\",\n  \"Anthony\",\n  \"Dylan\",\n  \"Leo\",\n  \"Lincoln\",\n];\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <SafeAreaView style={container}>\n        <Text style={{ fontWeight: 600, marginBottom: 8 }}>\n          In React Native, we can render long lists of items using the FlatList\n          component:\n        </Text>\n        <FlatList\n          data={list}\n          renderItem={this.renderItem}\n          keyExtractor={(x: string) => x}\n        />\n      </SafeAreaView>\n    );\n  }\n\n  renderItem = ({ item }: { item: string }) => {\n    return <Text>{item}</Text>;\n  };\n}\n\nconst container = {\n  flex: 1,\n  padding: 8,\n  height: \"100vh\",\n  background: \"Moccasin\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "HvmlmMwCf",
          "type": "react",
          "title": "Create a Simple Mobile UI",
          "instructions": "Now let's bring together everything we've learned so far. Below is a blank canvas. Complete it by creating any mobile UI you can imagine and render the following components: a `View`, `Text`, `Button`, and either a `ScrollView` or `FlatList` component\\. Try to get creative with styling as well\\!",
          "testCode": "test(\"The `App` component should be defined.\", () => {\n  expect(typeof App).toBeDefined();\n});\n\ntest(\"The `App` component should render at least one `View` component.\", () => {\n  expect(__user_code_string__.includes(\"<View\")).toBe(true);\n});\n\ntest(\"The `App` component should render at least one `Text` component.\", () => {\n  expect(__user_code_string__.includes(\"<Text\")).toBe(true);\n});\n\ntest(\"The `App` component should render at least one `Button` component.\", () => {\n  expect(__user_code_string__.includes(\"<Button\")).toBe(true);\n  const buttons = document.querySelectorAll('[role=\"button\"]');\n  expect(buttons.length >= 1).toBe(true);\n});\n\ntest(\"The `App` component should render at least one `ScrollView` or `FlatList` component.\", () => {\n  const code = __user_code_string__;\n  expect(code.includes(\"<ScrollView\") || code.includes(\"<FlatList\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/8C_DvfIYIyI",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element | null {\n    return null;\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View, TextInput, Button, FlatList } = ReactNativeWeb;\n\ninterface IState {\n  item: string;\n  todos: string[];\n}\n\nclass App extends React.Component<{}, IState> {\n  constructor() {\n    super();\n\n    const initialTodos = [\n      \"Learn to code\",\n      \"Build an app\",\n      \"Create a portfolio\",\n      \"Practice for interviews\",\n      \"Get a job\",\n      \"TODO: Allow items to be removed from this list. :)\",\n    ];\n\n    this.state = {\n      item: \"\",\n      todos: initialTodos,\n    };\n  }\n\n  render(): JSX.Element | null {\n    const { item, todos } = this.state;\n    return (\n      <View style={container}>\n        <Title>To-Do List App.</Title>\n        <TextInput\n          value={item}\n          style={inputStyles}\n          placeholder=\"...\"\n          onChangeText={this.handleChangeText}\n        />\n        <Button title=\"Add To-Do Item\" onPress={this.handleAddNewItem} />\n        <Text style={subtitle}>Current Todos:</Text>\n        <FlatList\n          data={todos}\n          renderItem={this.renderTodo}\n          keyExtractor={(x: string) => x}\n        />\n      </View>\n    );\n  }\n\n  renderTodo = ({ item }: { item: string }) => {\n    return (\n      <View style={todoStyle}>\n        <Text>• {item}</Text>\n      </View>\n    );\n  };\n\n  handleChangeText = (text: string) => {\n    this.setState({ item: text });\n  };\n\n  handleAddNewItem = () => {\n    if (this.state.item !== \"\") {\n      this.setState((s: IState) => ({\n        item: \"\",\n        todos: s.todos.concat(s.item),\n      }));\n    }\n  };\n}\n\nconst Title = ({ children }: { children: string }) => (\n  <Text style={title}>{children}</Text>\n);\n\nconst title = {\n  fontSize: 24,\n  fontWeight: 500,\n};\n\nconst subtitle = {\n  fontSize: 18,\n  marginTop: 6,\n  marginBottom: 4,\n  fontWeight: 500,\n};\n\nconst inputStyles = {\n  padding: 2,\n  marginTop: 6,\n  marginBottom: 6,\n  border: \"1px solid black\",\n  placeholderTextColor: \"black\",\n};\n\nconst todoStyle = {\n  marginTop: 3,\n};\n\nconst container = {\n  flex: 1,\n  padding: 8,\n  height: \"100vh\",\n  background: \"coral\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "NC@Y7um$f",
          "type": "media",
          "title": "Handling Gestures & Navigation",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Mobile apps allow users to directly interact with the screen using gestures, which provides for different interactions than the mouse\\-based interactions native to web, and also handle navigation and routing very differently from web experiences.\n# Handling Gestures\n\nSo far, we've seen some React Native elements which natively allow us to handle various gesture events. These are the `Button`, `Touchable`, and the `ScrollView` and related list views. Each of these supports a specific gesture interaction by default, whether that is a simple press event or a scroll/swipe event. React Native provides [these components out of the box](https://reactnative.dev/docs/handling-touches), and also a more detailed [gesture responder system](https://reactnative.dev/docs/gesture-responder-system) for handling customized gestures and behavior.\n\nFor most use cases, the basic React Native components will provide the gesture support you need.\n# Navigating Between Screens\n\nAnother common use of gestures is for navigation between different views and screens on mobile devices. This is a very common user experience shared by many apps, and each platform \\(iOS and Android\\) tends to follow a standard pattern for navigating between different screens.\n\nThe standard way to [handle navigation in React Native](https://reactnative.dev/docs/navigation) is to rely on the community supported library [React Navigation](https://reactnavigation.org/), which provides an easy to use API for declaratively adding multiple screens with navigation to your app. Here is a simple example:\n\n```typescript\nfunction DetailsScreen() {\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createStackNavigator();\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n```\n\nReact Navigation provides support for common navigation schemes, such as the [tab](https://reactnavigation.org/docs/tab-based-navigation) and [drawer](https://reactnavigation.org/docs/drawer-based-navigation) based navigation systems. These will by default support the common gestures users are accustomed to using for screen navigation, such as swiping to open the side drawer in a drawer based navigation system.\n\nReact Navigation provides many other features for additional customization, such as passing parameters to screens on navigation, nested navigators, header support, deep\\-linking to specific screens, and more. We encourage you to try to use React Navigation in your own apps in the projects later in this section. As a React library, it's fairly easy to use. The main challenge is wrapping your head around the conceptual difference of app navigation on mobile compared to web."
        },
        {
          "id": "TYwQkwqXTs",
          "type": "media",
          "title": "React Native UI Kit Libraries",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "When building React applications for web, it's often wise to use a UI Kit library so you can avoid building and styling more complex UI components from scratch. The same is true for React Native. You may want to build and style your own specific set of components. But, if you are optimizing for productivity and reducing the amount of code you have to write from scratch, using a UI kit library is a great option.\n\nOne such choice for React Native is [React Native Paper](https://callstack.github.io/react-native-paper/) which provides a cross\\-platform set of [Material Design](https://material.io/design/introduction) components for React Native.\n\nThis library is a great option if you are looking to get off the ground quickly prototyping or building a new app.\n\nHere's an example of some of the React Native Paper components from their website:\n\n![A example of a few React Native Paper components.](/assets/TYwQkwqXTs/1dec07c4f06cb10dee7a8adb9f6aaa47_react-native-paper.png)"
        },
        {
          "id": "Qw5lX@ehl",
          "type": "section",
          "title": "Layout & Styling in React Native",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "[Layout and styling for React Native](https://reactnative.dev/docs/style) is very similar to using CSS on the web. This is one of the features of React Native which makes it especially easy for web developers to quickly transition to React Native and start building apps productively.\n# Styling with CSS\n\nIn React Native styles are applied through JavaScript. There are no separate `.css` files\\. We've seen a preview of this in the last section. This is how to style some text red and increase the font size, for instance:\n\n```typescript\nconst RedTitle = (text: string) => (\n    <Text style={{ color: \"red\", fontSize: 24 }}>\n        {text}\n    </Text>\n);\n\n```\n\nPretty straightforward\\!\n\nIn general, the majority of the styles you are familiar with using in CSS will work the same way in React Native. One different is that all of the property names are written using camel casing instead of hyphens, e.g. `fontSize` instead of `font-size`. The majority of the React Native UI primitives accept a `style` prop which is an object of CSS styles.\n# Layout\n\nHandling layout in React Native is also fairly easy. Here, you will primarily rely on flexbox. You can also provide fixed `width` and `height` values to most components to give them fixed dimensions.\n\nIn general, flexbox works the same on mobile as it does on web except the default values are different. On mobile, the `flexDirection` value defaults to column instead of row. This makes sense, when you consider that most mobile layouts are more \"top to bottom\" rather than \"left to right\". In addition to this, the `flex` parameter only supports a single number rather than multiple numbers.\n\nWhen you want a view to take up the full space available to it, simply provide `flex: 1`. From here, you can use a combination of `flexDirection`, `alignItems`, and `justifyContent` to achieve the desired layout.\n\nTake a look at the React Native docs on [Layout with Flexbox](https://reactnative.dev/docs/flexbox) for a more thorough breakdown of how it works.\n# Style and Layout on Mobile\n\nYou may find that layout on mobile is easier to achieve than on web. While it is true that mobile devices vary slightly in dimension, they are all quite similar and you cannot manually resize the viewing window like you can on a desktop or laptop. Moreover, there is less screen space available on mobile so this tends to simplify the UI for any particular view. Once you get some practice building mobile UIs, you may find you like it more than web\\!"
        },
        {
          "id": "LITUB9VZ6",
          "type": "react",
          "title": "Use CSS to Style React Native",
          "instructions": "Using CSS in React Native is very similar to using CSS on the web. Let's get some practice adding some styles here. Give the text in the UI a new color and size, and change the style of the background. See the tests for details\\!",
          "testCode": "test(\"The `Text` element should have a `color` of `gold` and `fontSize` of `28`.\", () => {\n  const containers = document.getElementsByTagName(\"div\");\n\n  let passed = false;\n  for (const div of containers) {\n    if (div.style.fontSize === \"28px\") {\n      passed = true;\n      expect(cssColor(div.style.color)).toBe(cssColor(\"gold\"));\n    }\n  }\n\n  if (!passed) {\n    throw new Error(\n      \"The text should be styled gold and have a larger font size.\"\n    );\n  }\n});\n\ntest(\"The `View` element should have a `background` of `RoyalBlue`.\", () => {\n  const containers = document.getElementsByTagName(\"div\");\n\n  let passed = false;\n  for (const div of containers) {\n    const x = div.style.background;\n    if (cssColor(x) === cssColor(\"RoyalBlue\")) {\n      passed = true;\n    }\n  }\n\n  expect(passed).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/IuvpAWialvE",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View>\n        <Text>\n          Try to color this text red and increase the font size to 28.\n        </Text>\n      </View>\n    );\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View style={view}>\n        <Text style={text}>\n          Try to color this text red and increase the font size to 28.\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst view = {\n  flex: 1,\n  padding: 4,\n  height: \"100vh\",\n  background: \"RoyalBlue\",\n};\n\nconst text = {\n  color: \"gold\",\n  fontSize: 28,\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "U1p0pxHGO",
          "type": "react",
          "title": "Layout in React Native with Flexbox",
          "instructions": "Flexbox is the standard way to build layouts in React Native. The rules for flexbox are basically the same as the rules for flexbox in web, except that some of the default values are different. For this challenge, change the flex rules for the `View` which contains the colored boxes so that their layout is horizontal, rather than vertical. In addition to this, allow the elements to wrap so that they are all visible within the device window.\n\nOnce you are finished, try adding some different flex values to see how the layout changes.",
          "testCode": "test(\"The UI should contain 8 colored boxes.\", () => {\n  const containers = document.getElementsByTagName(\"div\");\n  let passed = false;\n  for (const div of containers) {\n    if (div.childElementCount === 8) {\n      passed = true;\n    }\n  }\n  if (!passed) {\n    throw new Error(\"The UI should contain 8 colored boxes.\");\n  }\n});\n\ntest(\"The container for the colored boxes uses flexbox to render the boxes in rows and wraps them.\", () => {\n  const containers = document.getElementsByTagName(\"div\");\n\n  for (const div of containers) {\n    if (div.childElementCount === 8) {\n      const flexDirection = div.style.flexDirection;\n      const flexWrap = div.style.flexWrap;\n      expect(flexDirection).toBe(\"row\");\n      expect(flexWrap).toBe(\"wrap\");\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/x1yMDkQJU40",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View style={{ flex: 1 }}>\n        <Text>\n          In React Native, FlexBox is the best way to achieve any layout you\n          want.\n        </Text>\n        <View style={flex}>\n          <View\n            style={{ height: 100, width: 100, background: \"midnightblue\" }}\n          />\n          <View style={{ height: 100, width: 100, background: \"salmon\" }} />\n          <View style={{ height: 100, width: 100, background: \"violet\" }} />\n          <View style={{ height: 100, width: 100, background: \"turquoise\" }} />\n          <View style={{ height: 100, width: 100, background: \"skyblue\" }} />\n          <View\n            style={{ height: 100, width: 100, background: \"springgreen\" }}\n          />\n          <View style={{ height: 100, width: 100, background: \"tomato\" }} />\n          <View style={{ height: 100, width: 100, background: \"peachpuff\" }} />\n        </View>\n      </View>\n    );\n  }\n}\n\nconst flex = {\n  flex: 1,\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { Text, View } = ReactNativeWeb;\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View style={{ flex: 1 }}>\n        <Text>\n          In React Native, FlexBox is the best way to achieve any layout you\n          want.\n        </Text>\n        <View style={flex}>\n          <View\n            style={{ height: 100, width: 100, background: \"midnightblue\" }}\n          />\n          <View style={{ height: 100, width: 100, background: \"salmon\" }} />\n          <View style={{ height: 100, width: 100, background: \"violet\" }} />\n          <View style={{ height: 100, width: 100, background: \"turquoise\" }} />\n          <View style={{ height: 100, width: 100, background: \"skyblue\" }} />\n          <View\n            style={{ height: 100, width: 100, background: \"springgreen\" }}\n          />\n          <View style={{ height: 100, width: 100, background: \"tomato\" }} />\n          <View style={{ height: 100, width: 100, background: \"peachpuff\" }} />\n        </View>\n      </View>\n    );\n  }\n}\n\nconst flex = {\n  flex: 1,\n  flexWrap: \"wrap\",\n  flexDirection: \"row\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "fkx7YqjKA",
          "type": "react",
          "title": "Centering Elements with Flexbox",
          "instructions": "We can also use flexbox to center elements. In the editor is some code which just renders a circle. Add flex styling to the parent `View` so that this circle is centered within the device screen.",
          "testCode": "test(\"The `App` component should be defined.\", () => {\n  expect(typeof App).toBe(\"function\");\n});\n\ntest(\"The `Circle` component should be centerd in the UI by adding flex styling to the parent `View`.\", () => {\n  const containers = document.getElementsByTagName(\"div\");\n\n  const expectedBorderStyle = css(\"border-radius\", \"50px\");\n\n  let passed = false;\n  for (const div of containers) {\n    const style = getStyle(div, \"border-radius\");\n    if (style === expectedBorderStyle) {\n      const parent = div.parentElement;\n      expect(parent.style.alignItems).toBe(\"center\");\n      expect(parent.style.justifyContent).toBe(\"center\");\n      passed = true;\n    }\n  }\n\n  if (!passed) {\n    throw new Error(\n      \"The `Circle` component should be centerd in the UI by adding flex styling to the parent `View`\"\n    );\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/w1EY5SbbKjM",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { View } = ReactNativeWeb;\n\nconst Circle = () => (\n  <View\n    style={{\n      width: 75,\n      height: 75,\n      borderRadius: 50,\n      background: \"gold\",\n    }}\n  />\n);\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View style={{ background: \"tomato\", flex: 1, height: \"100vh\" }}>\n        <Circle />\n      </View>\n    );\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactNativeWeb from \"react-native\";\n\nconst { View } = ReactNativeWeb;\n\nconst Circle = () => (\n  <View\n    style={{\n      width: 75,\n      height: 75,\n      borderRadius: 50,\n      background: \"gold\",\n    }}\n  />\n);\n\nclass App extends React.Component<{}, {}> {\n  render(): JSX.Element {\n    return (\n      <View style={centered}>\n        <Circle />\n      </View>\n    );\n  }\n}\n\nconst centered = {\n  flex: 1,\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  height: \"100vh\",\n  background: \"tomato\",\n};\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "content": ""
        },
        {
          "id": "P4xfaI7wn8",
          "type": "media",
          "title": "CSS-in-JS Libraries with React Native",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# React Native Stylesheet\n\nReact Native provides a [StyleSheet component](https://reactnative.dev/docs/stylesheet) you can use which makes it easier to separate your CSS styles from your UI code:\n\n```\nimport React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\n\nconst App = () => (\n  <View style={styles.container}>\n    <Text style={styles.title}>React Native</Text>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: \"#eaeaea\"\n  },\n  title: {\n    marginTop: 16,\n    paddingVertical: 8,\n    borderWidth: 4,\n    borderColor: \"#20232a\",\n    borderRadius: 6,\n    backgroundColor: \"#61dafb\",\n    color: \"#20232a\",\n    textAlign: \"center\",\n    fontSize: 30,\n    fontWeight: \"bold\"\n  }\n});\n\nexport default App;\n\n```\n\nThis is one way to organize and name your different styles, however, another great option is with CSS\\-in\\-JS libraries.\n# CSS\\-in\\-JS Libraries\n\nA trend in UI programming of recent years is the concept of \"CSS\\-in\\-JS\" which was probably first pioneered by React's ability to use inline styles directly with React's declarative JSX components. Initially, this was looked at with some apprehension by the community, because the notion of \"Separation of Concerns\" implied the markup, style, and logic should be separated into independent technical concerns, i.e. HTML, CSS, and JavaScript. However, as React's evolution has proven, this organization may not make as much sense.\n\nInstead, the trend has been the reverse: multiple concerns have tended to become consolidated into the UI code itself, i.e React components. This actually makes a lot of sense, if you stop to think about it. If you have some code for a form, it makes sense that the logic and styling for that form is in the same place as the markup for the form. The result is more modular, well\\-organized code. You no longer have to try to track down where some style is being applied by searching through CSS class hierarchies and/or inspecting the DOM to see which parent element a style has been inherited from.\n---\n\nThere are now a few different libraries to choose from for implementing CSS\\-in\\-JS styles:\n\n* [Styled Components](https://styled-components.com/)\n* [Emotion](https://emotion.sh/docs/introduction)\n\n\nAnd, all of these can generally be used with React Native as well. In fact, we recommend using libraries like this as a great way to modularize your styles and improve your code readability. We prefer them over the `StyleSheet` component\\. For example, here is an [example of using Styled Components with React Native](https://styled-components.com/docs/basics#react-native):\n\n```typescript\nimport React from 'react'\nimport styled from 'styled-components/native'\n\nconst StyledView = styled.View`\n  background-color: papayawhip;\n`\n\nconst StyledText = styled.Text`\n  color: palevioletred;\n`\n\nclass MyReactNativeComponent extends React.Component {\n  render() {\n    return (\n      <StyledView>\n        <StyledText>Hello World!</StyledText>\n      </StyledView>\n    )\n  }\n}\n\n```\n\nAs you can see, what you have learned and use with web programming translates very directly into React Native\\! We encourage you to try to integrate one of these libraries when working on the projects later in this module."
        },
        {
          "id": "JVwMY$VT@",
          "type": "section",
          "title": "Mobile & Platform APIs",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Mobile apps support various features which simply do not exist or have any analogous equivalent on the web. In addition, when developing for mobile you have to support both iOS and Android devices, which are inherently different. A good example of this is the Android hardware back button, iOS simply has no equivalent of this feature. Another example is push notifications, which are a basic feature of mobile apps but typically not present in web apps. This section will cover some of the mobile and platform specific features and APIs which you should be aware of when developing with React Native.\n\nIn particular, we will cover:\n\n* The `Platform` module\\.\n* The `ActivityIndicator` component\\.\n* The `StatusBar` component\\.\n* The `InputAccessoryView` component\\.\n* The `SafeAreaView` component\\.\n* The `KeyboardAvoidingView` component\\.\n* The `AsyncStorage` module\\.\n* The splash screen.\n* The Android back handler.\n* The `Alert` dialog\\.\n* Supporting accessibility.\n* Handling push notifications.\n\n\nThere are definitely more topics beyond what we've listed here, which if you explore React Native further you are bound to run into. But this should cover some of the most important basics and also give you a better understanding of some of the ways React Native development does differ from React web development.\n"
        },
        {
          "id": "fzlZJE$BPP",
          "type": "media",
          "title": "The Platform Module",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The `Platform` module is a specific import from React Native which provides information about the current device the app is running on.\n# Determining the Platform\n\nOne of the key reasons to use a cross\\-platform framework like React Native is to avoid re\\-writing the same code twice for two platforms. However, sometimes you have to make exceptions or accommodations which are platform specific. The `Platform` module is one tool for this purpose.\n\nHere is an example from the [React Native Platform module docs](https://reactnative.dev/docs/platform-specific-code#platform-module) on rendering some styles differently depending on the platform the app is running on:\n\n```typescript\nimport { Platform, StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  height: Platform.OS === 'ios' ? 200 : 100\n});\n\n```\n\nAs you can see, you can use the `Platform.OS` value to determine if the app is running on an iOS or Android device.\n\nYou can also detect the device version with `Platform.Version`.\n# Platform Specific File Extensions\n\nDetecting the platform to create diverging code paths works great for smaller pieces of code, however sometimes you may have larger components which need to be rendered different on each platform. For this, the React Native bundler allows you to provide platform\\-specific file extensions.\n\nFor instance, let's say you have an unique `PlatformButton` component which requires specific logic or styling on each platform. You can create two files, one for each platform, and name them as follows:\n\n```bash\nPlatformButton.ios.js\nPlatformButton.android.js\n\n```\n\nThe [React Native Metro bundler](https://facebook.github.io/metro/) will detect these two files and bundle them into the appropriate app build if you are building your app for iOS or Android. This is a useful feature if you have larger pieces of code you need to keep separate.\n# Native Modules\n\nOf course, sometimes you cannot achieve what you want in React Native and have to fallback to using native code. This means writing pieces of your application in Java \\(for Android\\) or Swift \\(for iOS\\). React Native supports this, but the need to do it is rare, and diminishing with time as React Native matures. If you are interested in incorporating native code into your React Native app, you can [read more about it here](https://reactnative.dev/docs/native-modules-ios). We will also cover this topic a bit more later in this module."
        },
        {
          "id": "Y9To6lsUC",
          "type": "media",
          "title": "The ActivityIndicator Component",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Handling loading states is a common requirement for frontend applications. Data is often loading and you need to show your users an appropriate indication of this.\n\nOn the web, every application and designer tends to have its own unique style of indicating loading. On mobile, however, each platform tends to have a canonical loading indicator. It is usually preferable to use this standard loading  indicator to provide a more consistent experience for users.\n\nReact Native provides a component just for this: the [ActivityIndicator component](https://reactnative.dev/docs/activityindicator), which you can use with a few simple options:\n\n```typescript\nimport { ActivityIndicator } from \"react-native\";\n\nconst App = () => (\n  <View>\n    <ActivityIndicator />\n    <ActivityIndicator size=\"large\" />\n    <ActivityIndicator size=\"small\" color=\"#0000ff\" />\n    <ActivityIndicator size=\"large\" color=\"#00ff00\" />\n  </View>\n);\n\n```\n\nThis will display the native loading indicator you are used to seeing on either iOS or Android."
        },
        {
          "id": "n4uliz1i@p",
          "type": "media",
          "title": "The StatusBar Component",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The [StatusBar component](https://reactnative.dev/docs/statusbar) is a custom component which allows you to control the app status bar. What is the \"status bar\" you might ask?\n\n![iOS Status Bar](/assets/n4uliz1i@p/bb15f11a8346151eea1dda5c8a86abce_status-bar.png)\n\nThe status bar is just the bit of UI at the top of the screen where some details about the phone are displayed. Typically, you want the status bar to match the current UI/theme of the screen you are viewing. For instance, if the screen UI is dark, you probably want the status bar to also be dark.\n\nThe `StatusBar` component lets you control these details. The component accepts a few different props to give you control over the status bar, but the simplest usage is just to display the two default variations for light and dark themed screens:\n\n```\nconst Screen = (\n    <View>\n        <StatusBar barStyle={theme === \"dark\" ? \"dark-content\" : \"light-content\"} />\n    </View>\n);\n\n```\n\nAssuming you have a `theme` valued defined above, this code will result in a status bar rendered with dark content when the theme is `dark` and light content otherwise.\n\nTake a look at the [StatusBar docs](https://reactnative.dev/docs/statusbar#barstyle) to learn more about the different customization which is supported."
        },
        {
          "id": "2aowggDDr",
          "type": "media",
          "title": "The InputAccessoryView Component",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The [InputAccessoryView](https://reactnative.dev/docs/inputaccessoryview) is a special component which is rendered on iOS above the keyboard whenever a text input is focused for typing.\n\n![iOS InputAccessoryView](/assets/2aowggDDr/caa05c9aba65e57dabc913b14eacfe48_input-accessory-view.png)\n\nYou can use this component to render custom controls within the input accessory view or modify its styles:\n\n```typescript\n<InputAccessoryView nativeID={inputAccessoryViewID}>\n  <Button\n    onPress={() => setText(initialText)}\n    title=\"Reset Text\"\n  />\n</InputAccessoryView>\n\n```\n"
        },
        {
          "id": "SMGZcHuhn$",
          "type": "media",
          "title": "The SafeAreaView Component",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The [SafeAreaView component](https://reactnative.dev/docs/safeareaview) is a component which renders content within a safe viewing area of the device. We covered this briefly in some of the previous challenges involving the `ScrollView` and lists.\n\nAs explained by the React Native docs:\n\n> SafeAreaView renders nested content and automatically applies padding to reflect the portion of the view that is not covered by navigation bars, tab bars, toolbars, and other ancestor views. Moreover, and most importantly, Safe Area's paddings reflect the physical limitation of the screen, such as rounded corners or camera notches \\(i.e. the sensor housing area on iPhone X\\).\n\nHowever, this component is only supported on iOS versions 11 and up \\(no support on Android\\)."
        },
        {
          "id": "5a1J0wk0$",
          "type": "media",
          "title": "The KeyboardAvoidingView",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "An interesting aspect of mobile is that the keyboard appears on the screen, displacing the UI. On desktops, your keyboard is a hardware component which is totally separate from the screen. This difference means that mobile UIs must be responsive/adaptive to the keyboard—that's what the [KeyboardAvoidingView](https://reactnative.dev/docs/keyboardavoidingview) can help you to achieve.\n\nYou can wrap your UI code in the `KeyboardAvoidingView` to enable a responsive UI which avoids the device keyboard when it comes into view:\n\n```javascript\nimport React from 'react';\nimport { View, KeyboardAvoidingView, TextInput, StyleSheet, Platform, TouchableWithoutFeedback, Button, Keyboard  } from 'react-native';\n\nconst KeyboardAvoidingComponent = () => {\n  return (\n    <KeyboardAvoidingView\n      behavior={Platform.OS == \"ios\" ? \"padding\" : \"height\"}\n      style={styles.container}\n    >\n      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\n        <View>\n          <TextInput placeholder=\"Username\" />\n          <Button title=\"Submit\" onPress={() => null} />\n        </View>\n      </TouchableWithoutFeedback>\n    </KeyboardAvoidingView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n});\n\nexport default KeyboardAvoidingComponent;\n\n```\n\nNotice how all of the UI is wrapped in the `KeyboardAvoidingView` and also a `TouchableWithoutFeedback` component which triggers a `Keyboard.dismiss` method\\. This causes the keyboard to dismiss if a user taps the screen above the keyboard, while the keyboard is visible."
        },
        {
          "id": "7j7zL2aRW",
          "type": "media",
          "title": "The AsyncStorage Module",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In the same way that web browsers provide a `localStorage` module to allow applications to store site\\-specific data in the form of key/value pairs, mobile applications also provide an analogous storage utility.\n\nIn React Native, this the [AsyncStorage module](https://github.com/react-native-async-storage/async-storage), which has been moved out of React Native core to a community owned project.\n\nThis module provides a straightforward API for storing and reading data:\n\n```\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst storeData = async (value) => {\n  try {\n    const jsonValue = JSON.stringify(value)\n    await AsyncStorage.setItem('@storage_Key', jsonValue)\n  } catch (e) {\n    // saving error\n  }\n}\n\nconst getData = async () => {\n  try {\n    const value = await AsyncStorage.getItem('@storage_Key')\n    if(value !== null) {\n      // value previously stored\n    }\n  } catch(e) {\n    // error reading value\n  }\n}\n\n```\n\nThis allows your apps to store and retrieve data locally. One downside, however, is that Async Storage is unencrypted. If you need an encrypted alternative, take a look at the [React Native Encrypted Storage library](https://www.npmjs.com/package/react-native-encrypted-storage), but note that this requires linking native code \\(we will cover this later in more detail\\)."
        },
        {
          "id": "hpxztrtI6",
          "type": "media",
          "title": "The Splash Screen",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Another feature common to mobile apps which is not shared with the web is the \"splash screen\" which is basically the default loading screen/image which is displayed when an app is launching. On the web this is of course just a blank webpage, but for mobile apps most apps display a default app screen or image during launch.\n\nIf you develop you app using Expo \\(we cover this in the next section\\), it is easy to add and configure a splash screen. Adding a splash screen image is as simple as referencing an image file in your `app.json` configuration file \\([see more details here](https://docs.expo.io/guides/splash-screens/)\\).\n\nFrom there, you can also customize the splash screen behavior using Expo to optimize your app's launch experience. [See more details on that here](https://docs.expo.io/versions/latest/sdk/splash-screen/).\n\nThis is one of the many subtle details of mobile development which can really elevate your app from an average to an excellent level of user experience."
        },
        {
          "id": "WQz01T8sI",
          "type": "media",
          "title": "The Android Back Handler",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Android devices have a hardware button which is used to trigger \"back\" navigation events on the device. This only exists in Android, and React Native provides supports for handling the back handler events. You can use the `BackHandler` component to attach event listeners which then allow you to manually respond to back handler press events.\n\nHere's an example of some code which pauses to prompt the user if they intend to exit the app after pressing the back button:\n\n```\nimport { BackHandler } from \"react-native\";\nimport AppRoutes from \"./AppRoutes\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    BackHandler.addEventListener(\"hardwareBackPress\", () => {\n      if (this.canCloseApp()) {\n        if (!this.state.tryingToCloseApp) {\n          this.setState(\n            {\n              tryingToCloseApp: true,\n            },\n            () => this.setToastMessage(\"Press again to close app\"),\n          );\n          /**\n           * When true is returned the event will not be bubbled up\n           * & no other back action will execute\n           */\n          return true;\n        } else {\n          return this.setState(\n            {\n              tryingToCloseApp: false,\n            },\n            BackHandler.exitApp,\n          );\n        }\n      }\n\n      /**\n       * Returning false will let the event to bubble up & let other event listeners\n       * or the system's default back action to be executed.\n       */\n      return false;\n    });\n  }\n\n  componentWillUnmount(): void {\n    /**\n     * Remove listeners and clear any existing timeout.\n     */\n    BackHandler.removeEventListener(\"hardwareBackPress\", () => {\n      return;\n    });\n  }\n\n  render() {\n    return <AppRoutes />;\n  }\n}\n\n```\n\nSee the [React Native docs](https://reactnative.dev/docs/backhandler) to learn more about how to use the Android `BackHandler`. If you are using React Navigation, the back handler should be handled by default to navigate \"back\" to previous screen views."
        },
        {
          "id": "NjMBCc51t",
          "type": "media",
          "title": "The Alert Dialog",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The Alert module allows you to display a native alert dialog after some action occurs in your app. You can customize the alert behavior and handle the user interaction with the provided controls.\n\nOn iOS, this would render the standard iOS alert dialog:\n\n![iOS Alert Dialog.](/assets/NjMBCc51t/d3992f07bd9e7caf0d27560e23b95d60_ios-alert.png)\n\nYou can attach custom handlers for each action taken.\n\nHere is an example usage taken from the [React Native docs](https://reactnative.dev/docs/alert):\n\n```\n// Works on both Android and iOS\nAlert.alert(\n  'Alert Title',\n  'My Alert Msg',\n  [\n    {\n      text: 'Ask me later',\n      onPress: () => console.log('Ask me later pressed')\n    },\n    {\n      text: 'Cancel',\n      onPress: () => console.log('Cancel Pressed'),\n      style: 'cancel'\n    },\n    { text: 'OK', onPress: () => console.log('OK Pressed') }\n  ],\n  { cancelable: false }\n);\n\n```\n"
        },
        {
          "id": "Qe8LlJ8ft",
          "type": "media",
          "title": "Supporting Accessibility in React Native",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Accessibility is an important consideration for building web and mobile apps and ensures that your apps can accommodate all users. Both iOS and Android platforms provide support for interacting with assistive technologies such as screen readers, and React Native provides support for allowing your apps to integrate with these technologies.\n\nThe basic approach for handling accessibility in React Native involves passing a variety of props to UI elements which need to be accessible. [Here are the docs covering this in detail](https://reactnative.dev/docs/accessibility#accessibility-actions). The most common props are present in the following example:\n\n```typescript\n<TouchableOpacity\n  accessible={true}\n  accessibilityLabel=\"Go back\"\n  accessibilityHint=\"Navigates to the previous screen\"\n  onPress={onPress}>\n  <View style={styles.button}>\n    <Text style={styles.buttonText}>Back</Text>\n  </View>\n</TouchableOpacity>\n\n```\n\nThe `accessible` prop tells React Native that the element should interact with assistive devices and the `accessibilityLabel` communicates the intention of interacting with the element.\n\nThe other basic React Native primitives may be partially accessible by default. For instance, a `Button` is accessible but you may need to provide your own `accessibilityLabel` to indicate the intent of the button:\n\n```\n<Button\n  onPress={onPressLearnMore}\n  title=\"Learn More\"\n  color=\"#841584\"\n  accessibilityLabel=\"Learn more about this purple button\"\n/>\n\n```\n\nAnother important prop is the `accessibilityRole` prop, which is used to indicate the \"role\" of a specific UI element. This must conform to a [set list of roles](https://reactnative.dev/docs/accessibility#accessibilityrole), such as alert, button, header, menu, link, and so on.\n\nImplementing these props where appropriate can go a long way toward enabling your applications for all users, but there is a lot more to accessibility\\! We encourage you to browse through the full page in the React Native docs as a starting point if you want to learn more."
        },
        {
          "id": "9SOBO4pBb",
          "type": "media",
          "title": "Handling Push Notifications",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Push notifications are another important feature of mobile apps which do not really have a corollary on web. Push notifications basically require you to be able to send data to a mobile app. On the web, this type of \"server to client\" communication can be achieved via web sockets, but not with HTTP \\(although you could simulate it by using polling\\).\n\nFor mobile apps, push notification support requires integration with Apple's Push Notification service or Firebase Cloud Messaging. You could send notifications to your app via web sockets, just like in web, but the key difference with push notifications is that they are a custom UI notification displayed on the device itself. To achieve this you must follow the rules prescribed by each platform.\n\nLuckily, if you build and deploy your app with Expo \\(we will cover this in the next section\\) adding support for push notifications is extremely easy. Basically, you simply retrieve a unique Expo push token within your app \\(this token is unique to each user's app installation\\) and then make a request to Expo's Push API with this token and the notification you wish to send. It's exceptionally easy.\n\nIn your app, you can also add custom logic to handle receiving or listening for notifications.\n\nFor more details, see the [Expo documentation on push notifications here](https://docs.expo.io/push-notifications/overview/)."
        },
        {
          "id": "dQU0hN@EF",
          "type": "section",
          "title": "App Development with Expo",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/FWdCKhC7bcg",
          "starterCode": "",
          "solutionCode": "",
          "content": "Over the past few years [Expo](https://expo.io/) has emerged as the standard solution to develop and publish React Native apps. React Native even encourages Expo directly now.\n\nExpo is a versatile toolkit for developing, building, and publishing apps built with React Native. The Expo ecosystem provides a number of use tools which can empower you as a React Native development, such as:\n\n* [Expo Client](https://expo.io/tools#client): an app which allows you to seamlessly preview and develop React Native apps directly on a mobile device.\n* [Expo Snack](https://expo.io/tools#snack): a simple way for sharing experiences built with React Native.\n* [Expo CLI](https://expo.io/tools#cli): the Expo command line tool for running the build server, compiling app bundles, and uploading them to the app stores.\n* [Expo Push API](https://docs.expo.io/push-notifications/sending-notifications/): Expo's build\\-in service for handling push notifications.\n\n\nIf you work with React Native, you will quickly start to appreciate the breadth of utility Expo offers you. In this section, we will walk through the main steps in the React Native app development lifecycle with Expo:\n\n* Developing apps locally using the Expo CLI and other tools.\n* Building and publishing React Native apps.\n* Handling upgrades.\n* Debugging React Native apps.\n* Integrating native code.\n\n\nIf you find yourself curious to learn more about Expo, this [page is a great resource](https://docs.expo.io/workflow/how-expo-works/) in addition to the rest of the Expo documentation."
        },
        {
          "id": "TJGD6$Oox",
          "type": "media",
          "title": "Developing Apps with Expo",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Installation and Setup\n\nDeveloping React Native apps with Expo is quite easy and straightforward. The first step is to [install the Expo CLI](https://docs.expo.io/workflow/expo-cli/):\n\n```bash\nnpm install --global expo-cli\n\n```\n\nOnce it's complete, create your new app:\n\n```\nexpo init my-react-native-app\n\n```\n\nYou will see some interactive options, probably similar to this:\n\n```\n? Choose a template: (Use arrow keys)\n  ----- Managed workflow -----\n❯ blank                 a minimal app as clean as an empty canvas\n  blank (TypeScript)    same as blank but with TypeScript configuration\n  tabs (TypeScript)     several example screens and tabs using react-navigation and TypeScript\n  ----- Bare workflow -----\n  minimal               bare and minimal, just the essentials to get you started\n  minimal (TypeScript)  same as minimal but with TypeScript configuration\n\n```\n\nWe recommended starting with the Managed workflow and of course choosing TypeScript. Once you select an option Expo will proceed to install dependencies and bootstrap starter code. Once it's finished, you can `cd` into your new project directly.\n# Development\n\nOnce you have your project bootstrapped, you can start the Expo development server in your project root directory with the `yarn start` command or by just running the Expo CLI command directly: `expo start`. This will launch the Expo development server and present you with a few options for how to open your app. You can either open it with the iOS simulator \\(only on Mac\\), with an Android emulator \\(see more [details on setting that up here](https://docs.expo.io/workflow/android-studio-emulator/)\\), on web, or on a mobile device using [Expo Client](https://expo.io/tools#client).\n\nIf you are working on a Mac, the iOS simulator is a good choice for local development and you can select from several different iPhone versions. You will need to go through the [iOS simulator instructions](https://docs.expo.io/workflow/ios-simulator/).\n\nThe Expo Client app is a mobile app you install on your phone which allows you to connect to the Expo development server you are running locally and immediately preview your app as you develop it. This is one of the best options for really getting a genuine look and feel for how your app will behave. We encourage you to try this out.\n\nOnce you have Expo Client installed, open it and find an option to scan the QR code which should be present in your terminal where the Expo development server is running.\n# Practice\n\nIf you've made it this far, we encourage you to continue with the [basic tutorial in the Expo docs](https://docs.expo.io/tutorial/text/). This will reiterate many of the concepts we introduced earlier in this module, but it will be great to try them out locally on your own computer in a real React Native environment. Play around with the result until you are comfortable working with the Expo development environment\\!"
        },
        {
          "id": "YQXDYc85O",
          "type": "media",
          "title": "Errors and Debugging with React Native",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Errors in Development\n\nOf course, you will run into errors with React Native like any other software and knowing how to debug and troubleshoot these is a critical skill.\n\nReact Native and Expo provide a helpful experience for debugging. That is to say, they make it very obvious when an error has happened. Here is what an uncaught error looks like when running the app locally on the iOS simulator:\n\n![The UI of a React Native Error](/assets/YQXDYc85O/7e0d3e35168b62a14f7d15a2ca897442_error-expo.png)\nThe Expo development server, whether you are viewing it through the command line or in the web UI, will display a stacktrace of the error and a more readable stacktrace will be displayed on the device itself. This makes debugging errors pretty easy, and it's hard to miss when errors occur\\! You can read more about errors and debugging [here](https://docs.expo.io/get-started/errors/).\n\nThis works pretty well when you are developing apps locally. But what about in production?\n# Errors in Production\n\nIn production, errors are more troublesome. By default, Expo will reload your app in production if the app experiences a fatal JS error. If the error occurs quickly after your app loads, it will crash and will not recover. In addition to this, you should be aware that a React Native app is a combination of JavaScript code and native code. If an error occurs in the native code, this could also cause your app to crash.\n\nWe recommend tracking and reporting errors in production with a tool like Sentry. Expo also provides utilities for detecting app crash events and reporting them. You can read more about these details [here](https://docs.expo.io/guides/errors/)."
        },
        {
          "id": "Vqpm0PM9D",
          "type": "media",
          "title": "Deploying React Native Apps",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Building a Standalone App Binary\n\nReact Native uses a special build tool called the [React Native Metro Bundler](https://facebook.github.io/metro/), a custom JavaScript build tool developed by Facebook and used for building React Native apps. Expo uses the Metro bundler for its development server and for app builds. When you are ready to build an app and publish it to the app stores, you will first need to complete a standalone app build.\n\nWe can do this with Expo CLI \\([full instructions here](https://docs.expo.io/distribution/building-standalone-apps/)\\) with the `expo build` command:\n\n```bash\nexpo build:ios # Runs a build for iOS\nexpo build:android # Runs a build for Android\n\n```\n\nBuilding the app is fairly straightforward. If you do get as far as building an app and choose to submit it to the app stores, we recommend reviewing the Expo documentation at that time and following it closely. Their guide will be more exact, and this information can change over time. You will need to adhere to various guidelines from the app stores to perform an actual app submission and pass their review process.\n\nThe build process will generate a standalone app `.ipa` \\(iOS\\) or `.apk` \\(Android\\) binary file, which represents the executable application code which can then be submitted to the app stores for review and also installed and run on a real device.\n\nTo see more details on app store submissions, you can see [Expo's guide here](https://docs.expo.io/distribution/app-stores/).\n\nIf you choose to build for Android, you can manually download and install the `.apk` binary directly on an Android phone. This makes it easier to test out your build on Android without going through the app store submission process.\n\nWhen you complete a build for your app, Expo will also publish an update. What does this mean? It turns out the JavaScript application can be updated without rebuilding and re\\-installing the application. This is a unique feature of React Native apps, which is made very easy to use by Expo. We will cover this in the next section on handling app updates."
        },
        {
          "id": "ezpnF$rQ2",
          "type": "media",
          "title": "Handling App Upgrades",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Publishing and OTA Updates\n\nYou may be getting curious by now how React Native really works. To keep things simple for now, let's just say there are two main parts to a React Native app:\n\n* The JavaScript application \\(largely what you spend time writing\\).\n* The React Native core code which handles interfacing with the native device APIs, rendering and running your app.\n\n\nThe core React Native code is involved in bridging between the JavaScript runtime where React is running and the native APIs which render the UI you actually see on the device. All of this is handled by native code, and this is all bundled into the binary which is compiled when you run `expo build`. The JavaScript application code is separate from this, however. It is compiled and minified by the Metro bundler, but when your app actually runs it downloads the JavaScript application from a CDN served by Expo.\n\nThis is what allows for the unique updating feature of React Native apps: [OTA updates](https://docs.expo.io/guides/configuring-ota-updates/).\n\nWhen you launch an app built with Expo, the app first checks to see if there is a new compatible JavaScript version available for it. If the answer is yes, it will load this in the background and then load this new application the next time the user launches the app. You can also override this behavior to pause and load the new version by default. Every time you run a build with Expo, it will publish a new version of that JavaScript build. This then becomes available to any clients with your app already installed. [Read more about publishing here](https://docs.expo.io/workflow/publishing/#what-version-of-the-app-will-my).\n\nYou may have noticed we said \"compatible JavaScript version\" above. What do we mean by compatible? Well, for one it has to match the platform the app is on. It can also be further configured by version and Expo's release channels. Release channels are basically a way for you to specifically target releases or stage deployments. For instance, you could have a specific release channel for internal testing and a different one for the production release. See here to learn more about [Expo's release channels](https://docs.expo.io/distribution/release-channels/).\n\nSo, to recap and try to simplify things, a full deployment might look like this:\n\n1. Build a standalone version of your app with `expo build`.\n1. Submit this to the app stores.\n1. Assume the app stores accept the submission and the app goes live.\n1. Download the app to your device from the app stores.\n1. Make some updates and then run `expo publish` \\(or you can `build` again, publishing is a side effect of a build\\).\n1. Open the installed app is on your phone, it should download the new update \\(no update from the app store is required\\!\\).\n\n\nThis allows you to have a more seamless update experience and a much faster iteration cycle, since updates can be submitted very frequently and no longer have to go through the app store review process which can take up to a few days.\n# Updating the Expo SDK\n\nThere will of course be times when you need to submit a new build which will result in an app update becoming available in the app stores. The most likely reason for this is because Expo has released a new SDK version which you need to update to. These always require full app builds and upgrades, and, famously, the Expo team moves incredibly quickly so SDK updates happen somewhat often. Fortunately, they provide excellent documentation and upgrade instructions for you to follow step by step.\n\nHere is an example of one of their [latest release notes for Expo SDK 39](https://blog.expo.io/expo-sdk-39-is-now-available-4c10aa825e3f), for instance.\n\nFor these upgrades, we recommend going through their instructions step by step. Then, once complete you should test out your app manually to ensure there are no breaking changes introduced. If everything looks good, perform another app build with `expo build` and then submit an app update to the app stores."
        },
        {
          "id": "WdzIz2LKv",
          "type": "media",
          "title": "Integrating Native Modules",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "You may recall from the initial setup step with `expo init` that there were two options: a \"Managed\" and \"Bare\" workflow. The \"Bare\" workflow gives you more direct control over everything but you lose some of Expo's support system. The main reason you might choose to do this is if you need access to underlying native modules or code. Using the managed workflow with Expo, this is not possible unless you are using the bare workflow.\n\nIf you know you need to do this, you can start a bare workflow from the beginning. If you encounter it later, you can \"eject\" from a managed Expo project to the bare workflow using the `expo eject` command\\.\n\nIf you are curious, here is some [more information](https://reactnative.dev/docs/native-modules-setup) on implementing native code manually from the React Native docs.\n\nIt's unlikely you will need to do this, especially for simple apps. But it's important to understand that it's possible and be aware of what some of this terminology means. If you do find some npm library for React Native which requires \"linking\" in the installation instructions, e.g. running `react-native link <library-name>` \\([more on linking here](https://reactnative.dev/docs/linking-libraries-ios)\\), this library provides native code which must be linked and therefore requires your app to be setup for this to be enabled.\n\nAs an example, let's say you wanted to use the [encrypted async storage library](https://www.npmjs.com/package/react-native-encrypted-storage) we mentioned earlier. If you look at their installation instructions, you will see this step:\n\n```bash\nreact-native link react-native-encrypted-storage\n\n```\n\nWhich indicates the library requires native code to be linked. To use this library, you would need to be the bare Expo workflow for linking to work. Keep in mind that Expo links many native modules by default and then exposes these as Expo libraries for you to use. It's possible that they choose to support additional native libraries in the future as Expo continues to develop."
        },
        {
          "id": "6D9jc3AZi",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now we will get some experience building and deploying your own mobile apps\\! You can install these on your own mobile phone and use them wherever you go. This projects are open\\-ended and can be simple or as complex as you want. We encourage you to explore the following as you work on these projects:\n\n* Add navigation using [React Navigation](https://reactnavigation.org/).\n* Integrate a CSS\\-in\\-JS library such as [Styled Components](https://styled-components.com/) or [Emotion](https://emotion.sh/docs/introduction).\n* Preview and develop the app on your own phone using [Expo Client](https://expo.io/tools#client).\n* Try to build and publish updates to your app using Expo. If you have an Android device, you can download and install your application directly on your phone without publishing to the Google Play Store \\(simply download and install the `.apk` file\\).\n* Explore some of the unique features of mobile and React Native, such as the device camera, biometrics, push notifications, async storage, OTA updates, app backgrounding events, and so on.\n\n"
        },
        {
          "id": "Rkb69ObaFQ",
          "type": "project",
          "title": "Build a Note Taking Mobile App",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, build a simple note\\-taking application with React Native. The final product should adhere to the following requirements:\n\n* A user can create new notes.\n* A user can edit notes.\n* A user can delete notes.\n\n\nThe notes should be stored locally on the device \\(no need to use a server and database—unless you want a bigger challenge\\!\\)\n---\n\nFeel free to get as creative as you want with this project\\!\n\nThe requirements are fairly simple, the main point here is to get hands\\-on experience developing with React Native and experiment with the different features it provides."
        },
        {
          "id": "CSvqlpGt3A",
          "type": "project",
          "title": "React Native Real Time Messaging App",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, create a real\\-time messaging application using React Native.\n\nThis will be a harder project, and require a server. The basic requirement is simple: A user can connect and message other users in real\\-time. For this you will need to create a server and expose a `WebSockets` connection which your app can connect to. This connection will allow you to send data back and forth from the mobile app to the server. Unlike HTTP, you can send data both ways, i.e. your server can send messages to the client as well.\n\nThe implementation can be simple: no need for a database to store message history or any special features like chat channels, reply functionality, and so on. It can just be a simple feed of real\\-time messages. Feel free to implement more advanced features if you want\\!"
        },
        {
          "id": "fYkyw@AjY",
          "type": "project",
          "title": "Build Your Own React Native App",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, build an app of your choice in React Native\\!\n\nTry to think of something you would actually use or find enjoyable to build. These are the best projects because they help you maintain a high level of motivation around the project.\n\nIdeally, try to use some features that are specific to React Native, e.g. the camera, or gestures, or biometrics.\n\nDon't forget to use Expo Client to test out your app on your phone\\!"
        },
        {
          "id": "YL1saaMKQ",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "We've covered the basics of developing with React Native so far in this module. That will take you a long way toward building your own mobile apps. However, mobile app development is a broad field with a lot of room for specialization.\n\nIn these special topics, we will cover a few additional topics which are useful to know in addition to the preceding content. In particular, we will cover React Native in a little more depth, discuss native app development, and take a look at other cross platform frameworks."
        },
        {
          "id": "3yJ@zenVOw",
          "type": "media",
          "title": "React Native Architecture & Performance",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# React Native Architecture\n\nWhen building with React on the web, everything is running in a single JavaScript environment and your JavaScript code can communicate directly with the UI \\(i.e. the HTML DOM\\). Running a method like `document.getElementById` is synchronous and immediately returns a result. This tight interaction makes UI development on the web straightforward to think about and work with.\n\nReact Native, however, is different. In React Native the UI and UI rendering code is \"separated\" from the JavaScript code of your application. In React Native, your JavaScript application is running through the JavaScript runtime on the mobile device. Separate from this, is native code \\(iOS or Android\\) which is handling UI updates to the device UI. These two different environment are connected via a \"bridge\" which allows for asynchronous communication back and forth. Basically, the React JavaScript environment runs as you would expect, but eventually instead of React dispatching calls directly to the DOM it dispatches asynchronous calls to this bridge which are then received by the native platform code \\(React Native\\)—this code then translates these UI updates into actual updates on the device screen.\n\nThe process is slightly more complex than that, but the key takeaway is to be aware of this separation, the asynchronous communication which is required, and the difference between this design and React on the web. The really powerful aspect of React is that it abstracts the UI layer away so effectively that these details are not really necessary to know. In fact, you can almost erase the DOM and mobile phones from your mind, and just imagine React as an agnostic UI library which can render to any target—in fact, as we will see, this is what it is becoming. You can build native desktop apps using React \\(we will cover [Electron](https://www.electronjs.org/) in a coming lesson\\), and [React VR](https://facebook.github.io/react-360/) even allows you to build VR experiences using React.\n\nIf you are curious to learn more about the current design of React Native and the re\\-architecture which is in the works now, [take a look at this article](https://medium.com/swlh/react-natives-re-architecture-in-2020-9bb82659792c).\n\nFor more details on how you can communicate directly between the JavaScript and native code layer in React Native, [this documentation covers it](https://reactnative.dev/docs/communication-ios).\n# Performance\n\nThere are a few key things to keep in mind from the above comments on React Native architecture. The first is regarding performance. Because UI updates must be propagated asynchronously from React across the bridge to the native UI layer, UI renders and updates are inherently less performant compared to the more synchronous web experience. This leads to one of the major criticisms of React Native: it's not \"fast\" enough. Fluid and seamless experiences are very important for software products, and this is especially true for mobile experiences.\n\nWhile these performance considerations are important, It is important to remember that React Native is also  improving over time along with our hardware devices which continue to get faster. This allows React Native to keep improving and continue closing the performance gap with native apps over time.\n\nThe second consideration from the comments above is to get a more clear understanding of how React Native JavaScript code is literally separated from the native environment. This is exactly why it's not possible to access various native APIs from the JavaScript side without explicitly building support for them and \"linking\". It's somewhat similar to how in a web browser you cannot access native device APIs on the computer the web browser is running on \\(although this is more because of security concerns\\). \n\nTo see more on performance in React Native, you can [view this page](https://reactnative.dev/docs/performance)."
        },
        {
          "id": "Nsdizd9BZ",
          "type": "media",
          "title": "React Native vs. Native Apps",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "While this module has been focused on React Native, you may at some point want to dive in and learn about native app development. Native app development is still a major sub\\-industry within the software field. The main advantage of React Native is the productivity gains from maintaining a single codebase and developing with the familiar web stack that many developers know. These benefits are especially valuable for startups and also developers looking to broaden their skillset or land their first job \\(which is why we covered React Native in the Pairwise curriculum\\).\n\nIf you chose to develop a native app, you will have full access to the native libraries, APIs, and ecosystem for each respective platform. In addition, you will be able to utilize components and libraries which have been custom made for that particular platform. As a result, your app will enjoy some benefits which are hard to achieve with React Native. For some applications and for larger companies with more resources, this option makes more sense. Remember, software is always about tradeoffs\\!\n\nFor iOS, apps are built with Objective\\-C or [Swift](https://developer.apple.com/swift/). Here is Apple's [official getting started guide for iOS development](https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/).\n\nFor Android, apps are built with [Java](https://docs.oracle.com/javase/8/docs/technotes/guides/language/index.html) using Android Studio. [Here is their official getting started guide](https://developer.android.com/training/basics/firstapp).\n\nAs you can see, you quickly start down two divergent paths for native app development if you wish to support both platforms. This can be a headache and is primarily what React Native abstracts away."
        },
        {
          "id": "PcqZs51DA3",
          "type": "media",
          "title": "Other Cross-Platform Frameworks",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "React Native is not the only cross\\-platform mobile framework—there are a few others as well. We chose React Native here because it leverages all of the same technologies we have already covered which are fundamental to the web: mainly, TypeScript and React. This makes picking up React Native for a web developer the fastest and most obvious choice. Also, and probably because of this, React Native is one of the leading cross\\-platform frameworks out there right now.\n\nHowever, there are a few others which are worth knowing about:\n\n* [Flutter](https://flutter.dev/)\n* [Ionic](https://ionicframework.com/)\n* [Xamarin](https://dotnet.microsoft.com/apps/xamarin)\n* [Cordova](https://cordova.apache.org/)\n\n\nOf these four, Flutter is probably one of the most interesting option. [Flutter](https://flutter.dev/) is Google's solution to building cross\\-platform experiences and leverages their [Dart programming language](https://dart.dev/). If you wanted to dive into another cross\\-platform framework after React Native, we would recommend taking a look at Flutter."
        },
        {
          "id": "$Gz5fSFwn",
          "type": "media",
          "title": "Electron for Cross Platform Desktop Apps",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In addition to using React to build mobile apps, you can use it to target other platforms as well. [Electron](https://www.electronjs.org/) is a framework like React Native which you can use to build native desktop apps. For example, did you know these desktop apps are all built with Electron \\(meaning, using HTML, CSS, and JavaScript\\):\n\n* VC Code\n* Slack\n* Skype\n* Discord\n* WhatsApp \\(desktop\\)\n* Atom\n\n\nYou have likely used VS Code, as part of this course, which should demonstrate the type of experience you can build on desktop leveraging web technologies. The web stack becomes more versatile and powerful and today you can utilize web technologies to build experiences for web, mobile, desktop, [TV](https://reactnative.dev/docs/building-for-tv), and even [VR](https://facebook.github.io/react-360/).\n\nFor a fun challenge, try to rebuild one of your earlier projects using Electron. You can check out their [getting started documentation here](https://www.electronjs.org/docs/tutorial/quick-start). See how much code you can reuse from your original project\\!"
        },
        {
          "id": "Hi8C2MJQr",
          "type": "media",
          "title": "React Native Web",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "After the rapid success of React Native, developers wanted to further optimize the ability to share code and develop a single, reusable set of components.\n\n[React Native Web](https://github.com/necolas/react-native-web) is an adaptation of React Native APIs to the web environment, which makes it possible to develop a single codebase which can render to mobile or web. This is great for code reuse, especially for products which need to have a web and mobile presence \\(many do\\).\n\nReact Native Web is also what we relied on in this module to render your React Native code in the browser. This is what allows us to import components from `react-native` but render them to the browser DOM. Of course, React Native cannot run in a browser. React Native Web is an abstraction layer which mimics the React Native component APIs which allows us to render to web.\n\nHere is a platform agnostic example from their README:\n\n```typescript\nimport React from 'react';\nimport { AppRegistry, StyleSheet, Text, View } from 'react-native';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <View style={styles.box}>\n        <Text style={styles.text}>Hello, world!</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  box: { padding: 10 },\n  text: { fontWeight: 'bold' }\n});\n\nAppRegistry.registerComponent('App', () => App);\nAppRegistry.runApplication('App', { rootTag: document.getElementById('react-root') });\n\n```\n\nAs you can see, there is no reference to ReactDOM, which is only needed in the context of React on the web. Instead, the code relies on the [React Native AppRegistry](https://reactnative.dev/docs/appregistry) for the app entry point.\n\nReact Native Web is a great option if you want to develop a truly universal frontend, or if you want to develop a custom set of UI primitives which you could then reuse on web and mobile."
        },
        {
          "id": "s18GS4TQU",
          "type": "media",
          "title": "Progressive Web Apps",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "There is one final topic we want to touch on in this section on mobile: the somewhat hard to define concept of the progressive web app \\(PWA\\). Progressive web apps are another option for building a mobile experience. Think of a PWA like a web application but with additional functionality built\\-in and with the intent that the entire application works well on mobile. What other functionality? Things like:\n\n* The app can work offline.\n* Push notifications are supported.\n* The app has a home screen icon.\n* The app is responsive and interactive on mobile.\n\n\nThere are various other criteria and features, which are covered pretty well by the [Wikipedia page on PWAs](https://en.wikipedia.org/wiki/Progressive_web_application). Basically, think of a PWA like a glorified web app, largely custom designed for mobile.\n\nWhy would someone choose a PWA?\n\nWell, if you build a PWA you can use the entirety of the web stack and completely avoid mobile development and all of the additional complexity it entails. You can have one codebase, one build and deployment pipeline, and a single app experience. Updates would be delivered immediately to your users. This has a lot of advantages, and is the right choice for many experiences. As far as we can tell, PWAs have not caught on to a great extent within the industry, but they are prominent enough to warrant this short lesson on them. Many users still favor a mobile app they can actually install on their device, and app developers enjoy the more direct control and interaction which a native app allows.\n\nHowever, PWAs can be a good option for products which need a mobile experience but are unwilling to fully invest in building a mobile app. For instance, the Pairwise application you are using now has been adapted to work specifically for mobile and in this respect resembles some of the features of a PWA. For us, it did not make sense to build a mobile app, but, it's important that Pairwise still provides a good user experience on mobile \\(many first users come through mobile\\). Improving the web experience then, in the direction inspired by PWAs, was the right choice."
        }
      ]
    },
    {
      "free": false,
      "id": "ZzVuDVNP",
      "title": "Testing Software",
      "challenges": [
        {
          "free": true,
          "id": "s_p7YnS0",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module you will learn about how to test software and automate common tasks in order to improve your productivity as a developer. The idea of testing software is to create automated tests which will verify your software performs correctly and provides the functionality users expect. The value of tests is to give teams confidence to ship changes to software projects and know that their changes did not break some existing behavior or feature.\n\n> At a high level, software testing is intended to ensure your software works as expected, and will not break unexpectedly, once it is in production, out in the wild.\n\n## An Example: Regressions\n\nRegressions occur when you change some code and something seemingly unrelated breaks. If you continue on your journey of learning to code you will definitely experience it one day. Regressions happen like this:\n\n* You spend 3 weeks building a new feature in a product to let users post comments on some posts.\n* You ship the feature.\n* The next day at work, someone asks \"Hey, is the user login broken?\"\n* You sit still and start listening, thinking, nervous.\n* You didn't touch the user login, you probably didn't break it.... you say to yourself.\n* Someone else confirms: \"Yes, it appears to be broken\".\n* \"What happened\"? Another person says.\n* ... You are frozen now.\n* A while later, it is discovered how your new feature inadvertently broke the user login.\n* You rush to try to fix the problem and deploy an update to production.\n\n\n## Best Practice Testing\n\nThis is a regression, and this is exactly the type of thing software testing is intended to prevent. Ideally, a best practice workflow would look like this:\n\n* You build the feature.\n* You open a pull request to merge your feature into the main branch of your team's codebase.\n* Automated tests run to check the code on your feature branch.\n* The tests check the user login feature, and the tests fail.\n* You immediately see feedback that the user login is broken on your branch.\n* You debug the problem and fix it.\n* You update your branch, the tests run again and pass.\n* All of this happens in a safe testing environment, doesn't impact any users, and doesn't require any manual human interaction.\n* You ship your feature, and this time sleep peacefully at night knowing the code works and will not cause any fires in production.\n\n\nThe hard part, of course, is writing tests which truly verify an application's intended functionality works correctly. You will find that it is nearly impossible to test all the ways a user could think to break an application. And, it's important that tests are easy to read, write, understand, in addition to being simple and fast to run. You don't want to spend more time working on tests than you do building the business logic which supports your product.\n\n## Automation\n\nIn addition to software testing, we will also cover the topic of automation in this course module. Writing tests for your software is fundamentally a type of automation: you could check your software manually every time but this is tedious, time\\-consuming, and error\\-prone. Instead, \nwriting tests allows you to automate this process.\n\nHowever, automation goes beyond developing tests. Automation also involves building tools to help you write software more quickly, debug problems, and deploy software.\n\nLearning how to automate tasks is a force\\-multiplier skill for software engineers and very important to learn. In this module we will get some practice automating various tasks and learning about common ways automation is used in the software development process.\n\n## Moving Forward\n\nThis module contains two sections: one covering testing and the other covering automation. Then, there will be a few projects for you to get some practice working with these new skillsets. Let's get started\\!"
        },
        {
          "id": "KhDR1uPaa",
          "type": "section",
          "title": "Testing Software",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nIn this section, we will cover the topic of testing software.\n\n> The purpose of software testing is to ensure your software application works as advertised and to detect problems before your users do.\n\nOn a finer level, what this means is software testing is intended to ensure engineering teams can continue to change and update software without breaking its behavior.\n\nFor instance, imagine you've built a game. For simplicity, let's say it's Tic Tac Toe.\n\nYou then write some tests to ensure that the Tic Tac Toe game can be played and the program behaves correctly according to the rules of Tic Tac Toe. For instance, the tests would check that whenever a player fills in three squares in a row that player wins the game.\n\nLater, you may make a lot of changes to your game and add additional features. The goal of software testing is to verify that the game logic still works as intended in the future when the game code is changed and new features are added.\n\nThe end result is that users of your game will always enjoy a high quality, bug\\-free experience.\n\nIn turns out software testing is a very diverse topic. We'll start this section by covering a common method of conceptualizing software testing: the so\\-called Testing Pyramid.\n\nSee you in the next lesson\\!"
        },
        {
          "id": "DPmZjg50s",
          "type": "media",
          "title": "The Testing Pyramid",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Types of Tests\n\nA common approach to thinking about testing software is the idea of the [software \"testing pyramid\"](https://martinfowler.com/articles/practical-test-pyramid.html) \\(highly recommend to read through the linked article by Martin Fowler\\). This pattern of test organization groups tests into different categories depending on the level of the application they are testing. To explain this, let's start by defining some relevant terms:\n\n* **Unit Tests: **The term unit tests refers to individually testing small components of software, for instance single functions or classes. This level of testing is very specific and granular. For instance, you may have a function `validateUser` and then a series of unit tests for this function which basically pass in different inputs and perform assertions that the result you get back from the function is what you expect. The idea is that the test should enforce that the behavior of the function continues to be consistent with your expectations even if the code changes in the future.\n* **Integration Tests: **Generally, the applications you will build are not isolated. They tend to interact with other software systems. The idea of an integration test is to run a test for your software in a context where it connects with other systems. A good example is a server which depends on a database. An integration test would involve actually running the server and database and performing some tests which assert that data is written and retrieved correctly from the database.\n* **End\\-To\\-End/UI Tests:** In the final state, the software you build will involve a client application, a server application \\(probably backed by a database\\), and various other components and services. The idea of end\\-to\\-end tests is to test the _entire working system_ as a unit. The core idea here is to actually test the system as if you were a user and validate that you can interact with the system and always get the desired behavior.\n\n\nRemember, the purpose of writing tests is to:\n\n* Ensure your software behaves as expected.\n* Ensure that your software handles failure states in a reasonable way \\(e.g. how does the application react when the user does something you didn't expect?\\).\n* Ensure that when you \\(or others\\) change code in the future, you don't break the desired behavior of your application.\n\n\n> If you have high quality tests, you will always be confident to deploy new software changes\\!\n# The Testing Pyramid\n\nThe testing pyramid refers to a method of conceptualizing and organizing different types of tests. The idea of the pyramid is to have more tests the easier and more lightweight the tests are. These means having a lot of unit tests, fewer integration tests, and fewer still end\\-to\\-end tests.\n\n![Fast, easy to write tests outweigh slow running, expensive tests.](/assets/DPmZjg50s/c49607dac67f96acc8336a8a245aff65_Testing_Pyramid.png)\n\nThe main reason for this is because the higher level tests \\(e.g. end\\-to\\-end tests\\) are more involved and expensive to write, maintain, and run. A proper end\\-to\\-end test involves spinning up an entire running version of your application in a test environment and then executing tests against your running application. Unit tests, on the other hand, are usually as simple as just running some code which just calls functions which your application uses. This is simple, fast, and delivers feedback immediately.\n\nIt's also easier to test edge cases with unit tests. You can easily pass many wrong or unexpected inputs to a function, but it would be very hard to simulate every \"wrong\" way a user could interact with your application in an end\\-to\\-end test. For this reason, end\\-to\\-end tests tend to be more focused on testing broad pieces of functionality and ensuring they continue to work correctly. For instance: can a user go through the full registration process and create an account successfully?\n# An Ideal Testing Setup\n\nIn an ideal testing process, you would have multiple levels of testing integrated with your entire software development workflow. This starts to touch on another area we haven't fully introduced yet, which is software delivery and deployment \\(coming in a later module\\), but the key idea is to imagine you have multiple levels of testing built into your software development workflow and you are continuously running tests against your code.\n\nThis process should be entirely or largely automated, meaning it is just built into your workflow and happens automatically when you make changes. In practice, this means having automation systems setup with your version control system, e.g. Git/GitHub, which could run tests against pull requests to your codebase. Merging new code would only be allowed after the code passing all of the existing tests successfully.\n\nThe key idea is tests should be running in the background, ready to quickly give you feedback whenever new code changes break existing behavior. You should not _have_ to run the tests manually \\(although you can\\). These tests should safeguard software updates and deployments, requiring new deployments to pass all existing tests.\n# Testing Utilities and Tools\n\nAs you might imagine, testing software makes heavy use of external tools and libraries. Here are a few examples of important testing libraries and resources we will touch on in this module:\n\n* [Jest](https://jestjs.io/): A JavaScript testing framework.\n* [Cypress](https://www.cypress.io/how-it-works/): A framework for browser end\\-to\\-end tests.\n* [GitHub Actions](https://github.com/features/actions): GitHub automation for running tasks for code repositories.\n\n# Moving Forward\n\nBecause unit tests are quite simple, we can get some practice writing unit tests in the challenges in this module. Integration and end\\-to\\-end tests are more involved, and outside of the scope of individual code challenges. However, we will still cover these topics briefly.\n\nTo start with, let's begin with an introduction to Jest and then get started writing some unit tests to test the behavior of simple functions and classes\\!"
        },
        {
          "id": "wQ66ODZrbC",
          "type": "media",
          "title": "Introducing Unit Testing with Jest",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "[Jest](https://jestjs.io/en/) is a testing framework for JavaScript code. It tends to follow a pattern similar to other JavaScript test runners and testing in other programming languages. A simple test in Jest looks like this:\n\n```\n/**\n * A simple example of a unit test for an add function.\n */ \ntest(\"The add function works correctly\", () => {\n    expect(add(5, 20)).toBe(25);\n});\n\n```\n\nWhen you are using Jest, you have a global `test` function which you pass tests to. The test function accepts two arguments, a string description of the test and a callback function \\(which can be asynchronous\\) which contains the code to execute for the test. This is the most basic syntax for a simple test.\n\nIn the body of the callback function, you perform assertions based on the code you are testing. You will usually be testing an individual function, or sometimes a class or a more complex component. Each of your tests should generally be testing a specific aspect of the expected functionality of your code.\n\nJest provides an `expect` global which allows you to make assertions in your test. Assertions are basically just statements which you expect to always be true. If it turns out the statement is false, the test will fail\\!\n\nIn the above example, the test is \"expecting\" the `add` function to add `5` and `20` and return `25`. If for some reason the function returned `26`, the test would fail and you would be notified.\n\nHere are some more resources on Jest:\n\n* [Getting Started Guide](https://jestjs.io/docs/en/getting-started)\n* [Guide to Matchers](https://jestjs.io/docs/en/using-matchers)\n* [Expect Documentation](https://jestjs.io/docs/en/expect)\n\n\nJest tests are generally included in the codebase for your project and run from the command line. An example output from running Jest tests for your project might look like this:\n\n```bash\nyarn run v1.22.5\n$ yarn jest --watchAll=false\n$ react-scripts test --watchAll=false\n PASS  src/js/browser-test-lib.test.ts\n PASS  src/test/utils.test.ts\n PASS  src/test/Torvalds.test.ts (90.579s)\n\nTest Suites: 3 passed, 3 total\nTests:       18 passed, 18 total\nSnapshots:   1 passed, 1 total\nTime:        91.62s\nRan all test suites.\n✨  Done in 93.32s.\n\n```\n\nIf any test failed, you would see some different output showing you some information about the failed test.\n\n---\n\nOk—with that intro out of the way let's get some practice writing some Jest\\-style tests\\!"
        },
        {
          "id": "kGOefnhFl",
          "type": "typescript",
          "title": "Write Your First Jest Test",
          "instructions": "Write a simple test to test the behavior of an `add` function\\. A global Jest\\-style `expect` library exists for you to perform assertions. You can write a test like this:\n\n```typescript\ntest(\"The add function adds numbers correctly.\", () => {\n  expect(add(1, 2)).toEqual(3);\n});\n\n```\n",
          "testCode": "test(\"The `add` function is defined using the `let` keyword.\", () => {\n  add = 5;\n  expect(add).toBe(5);\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The tests check the expected behavior of `add` correctly.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n  for (const { test } of __USER_TEST_LIST__) {\n    add = (a, b) => a + b;\n    test();\n\n    try {\n      add = (a, b) => a - b;\n      test();\n      fail();\n    } catch (err) {\n      pass();\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/fTfxcamgA6M",
          "starterCode": "// A function to add two numbers.\nlet add = (x: number, y: number) => x + y;\n\n// Your code here:\n",
          "solutionCode": "// A function to add two numbers.\nlet add = (x: number, y: number) => x + y;\n\n// Your code here:\ntest(\"The add function adds numbers correctly.\", () => {\n  expect(add(1, 2)).toEqual(3);\n  expect(add(5, 7)).toEqual(12);\n  expect(add(200, 300)).toEqual(500);\n  expect(add(1, 776)).toEqual(777);\n  expect(add(1000, 2145)).toEqual(3145);\n});\n",
          "content": ""
        },
        {
          "id": "l0IkyZi$m",
          "type": "typescript",
          "title": "Improve Your Test with Multiple Assertions",
          "instructions": "When you are testing individual functions, it's usually good to test multiple input arguments for your functions. For instance, consider this code:\n\n```typescript\nconst add = (a: number, b: number) => 4;\n\ntest(\"Test the add function\", () => {\n    const result = add(2, 2);\n    expect(result).toBe(4);\n});\n\n```\n\nThis test would pass but obviously the implementation of `add` is not correct\\! The test does not sufficiently cover the possible inputs which could be passed to the `add` function\\. A more robust test might test many inputs to improve the reliability of the test.\n\nImprove our tests for the `add` function by writing at least 10 distinct `expect` statements which test different inputs and outputs for the `add` function\\.",
          "testCode": "test(\"The `add` function is defined using the `let` keyword.\", () => {\n  add = 5;\n  expect(add).toBe(5);\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The tests check the expected behavior of `add` correctly.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n  for (const { test } of __USER_TEST_LIST__) {\n    add = (a, b) => a + b;\n    test();\n\n    let didFail = false;\n    try {\n      add = (a, b) => a - b;\n      test();\n      didFail = true;\n    } catch (err) {\n      pass();\n    }\n\n    if (didFail) {\n      fail();\n    }\n  }\n});\n\ntest(\"The test includes at least 10 distinct `expect` statements which test different arguments to the `add` function.\", () => {\n  const result = __user_code_string__.match(/expect/g);\n  expect(result.length >= 10).toBeTruthy();\n\n  let args = new Set();\n  for (const { test } of __USER_TEST_LIST__) {\n    add = (a, b) => {\n      args.add(`${a}${b}`);\n      return a + b;\n    }\n    try {\n      test();\n    } catch (e) {\n      // nothing...\n    }\n  }\n\n  expect(args.size >= 10).toBeTruthy();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7GfAfi7ZWVQ",
          "starterCode": "// A function to add two numbers.\nlet add = (x: number, y: number) => x + y;\n\n// Your code here:\n",
          "solutionCode": "// A function to add two numbers.\nlet add = (x: number, y: number) => x + y;\n\n// Your code here:\ntest(\"The add function works correctly\", () => {\n  expect(add(1, 2)).toBe(3);\n  expect(add(3, 4)).toBe(7);\n  expect(add(12, 8)).toBe(20);\n  expect(add(15, 5)).toBe(20);\n  expect(add(11, 42)).toBe(53);\n  expect(add(15, 15)).toBe(30);\n  expect(add(75, 25)).toBe(100);\n  expect(add(123, 322)).toBe(445);\n  expect(add(1231, 21)).toBe(1252);\n  expect(add(657881, 234252)).toBe(892133);\n});\n",
          "content": ""
        },
        {
          "id": "2EkzeSu52",
          "type": "typescript",
          "title": "Testing a Function to Remove Keys from Objects",
          "instructions": "Now we have a more complex function to test, the `removeKeyFromObject` defined below in the editor. Try to write a test for this function, following the same pattern from the previous challenge.\n\nTry to write a few different test cases for different input/output combinations.",
          "testCode": "test(\"The `removeKeyFromObject` function is defined using the `let` keyword.\", () => {\n  removeKeyFromObject = 5;\n  expect(removeKeyFromObject).toBe(5);\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The tests check the expected behavior of `removeKeyFromObject` correctly.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n\n  for (const { test } of __USER_TEST_LIST__) {\n    removeKeyFromObject = (a, b) => {\n      delete a[b];\n      return a;\n    };\n    test();\n\n    let didFail = false;\n    try {\n      removeKeyFromObject = (a, b) => a;\n      test();\n      didFail = true;\n    } catch (err) {\n      pass();\n    }\n\n    if (didFail) {\n      fail();\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/De_KgL0z0uc",
          "starterCode": "// Remove a key:value pair from an object by key name:\nlet removeKeyFromObject = (obj: { [key: string]: any }, key: string) => {\n  delete obj[key];\n  return obj;\n};\n\n// Your code here:\n",
          "solutionCode": "// Remove a key:value pair from an object by key name:\nlet removeKeyFromObject = (obj: { [key: string]: any }, key: string) => {\n  delete obj[key];\n  return obj;\n};\n\n// Your code here:\ntest(\"removeKeyFromObject removes key:value pairs from objects by key name.\", () => {\n  let obj: any = { name: \"Sam\", age: 15 };\n  let result = removeKeyFromObject(obj, \"age\");\n  expect(result).toEqual({ name: \"Sam\" });\n\n  obj = { name: \"Sam\", age: 15, profession: \"Carpenter\" };\n  result = removeKeyFromObject(obj, \"profession\");\n  expect(result).toEqual({ name: \"Sam\", age: 15 });\n\n  obj = { name: \"Sam\", age: 15, profession: \"Carpenter\", email: \"sam@sam.com\" };\n  result = removeKeyFromObject(obj, \"email\");\n  expect(result).toEqual({ name: \"Sam\", age: 15, profession: \"Carpenter\" });\n\n  obj = { name: \"Sam\", age: 15, profession: \"Carpenter\", email: \"sam@sam.com\" };\n  result = removeKeyFromObject(obj, \"blegh\");\n  expect(result).toEqual({\n    name: \"Sam\",\n    age: 15,\n    profession: \"Carpenter\",\n    email: \"sam@sam.com\",\n  });\n});\n",
          "content": ""
        },
        {
          "id": "cpGNKdx5s",
          "type": "typescript",
          "title": "Testing Functions which Throw Errors",
          "instructions": "We have a `validateAge` function in the editor below, which throws an error if the provided `age` is below 18. There are many ways to write validation logic and throwing errors is not the only way to handle invalid states—however that's not the point here.\n\nThe point of this challenge is that you may find yourself wanting to test a function which can throw an error. We can do that here. Write a test which checks the `validateAge` function and ensures that it throws an error for invalid age arguments. Take a look at [Jest's toThrow method](https://Testing%20a%20Function%20to%20Remove%20Keys%20from%20Objects) for help.",
          "testCode": "test(\"The `validateAge` function is defined using the `let` keyword.\", () => {\n  validateAge = 5;\n  expect(validateAge).toBe(5);\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The tests check the expected behavior of `validateAge` correctly.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n\n  for (const { test } of __USER_TEST_LIST__) {\n    try {\n      validateAge = (age) => {\n        if (age < 18) {\n          throw new Error(\"Too young!\");\n        }\n      };\n      test();\n    } catch (err) {\n      fail();\n    }\n\n    let didFail = false;\n    try {\n      validateAge = (age) => age;\n      test();\n      didFail = true;\n    } catch (err) {\n      // Do nothing...\n    }\n\n    if (didFail) {\n      fail();\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/csfwsNdrLIc",
          "starterCode": "// A function to valid age\nlet validateAge = (age: number) => {\n  if (age < 18) {\n    throw new Error(\"Too young!\");\n  }\n};\n\n// Your code here",
          "solutionCode": "// A function to valid age\nlet validateAge = (age: number) => {\n  if (age < 18) {\n    throw new Error(\"Too young!\");\n  }\n};\n\n// Your code here\ntest(\"The validateAge function checks ages correctly.\", () => {\n  const invalid = [1, 3, 5, 7, 8, 13, 15];\n  for (const age of invalid) {\n    expect(() => validateAge(age)).toThrow();\n  }\n\n  const valid = [19, 21, 26, 32, 38, 42, 45, 55, 78];\n  for (const age of valid) {\n    expect(validateAge(age)).toBe(undefined);\n  }\n});\n",
          "content": ""
        },
        {
          "id": "2j9vhRMjW",
          "type": "typescript",
          "title": "Testing a Validation Function",
          "instructions": "Many systems require users to update their password from time to time, and, when they do, to choose a new password which is different from their current existing password. We have a simple function in the editor below, `validateUpdatePassword`, to perform this task.\n\nWrite a test for this function, testing a few different inputs, to ensure it works correctly.",
          "testCode": "test(\"The `validateUpdatePassword` function is defined using the `let` keyword.\", () => {\n  validateUpdatePassword = 5;\n  expect(validateUpdatePassword).toBe(5);\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The tests check the expected behavior of `validateUpdatePassword` correctly.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n\n  for (const { test } of __USER_TEST_LIST__) {\n    try {\n      validateUpdatePassword = (newPassword, oldPassword) => {\n        return newPassword !== oldPassword;\n      };\n      test();\n    } catch (err) {\n      fail();\n    }\n\n    let didFail = false;\n    try {\n      validateUpdatePassword = () => null;\n      test();\n      didFail = true;\n    } catch (err) {\n      // Do nothing...\n    }\n\n    if (didFail) {\n      fail();\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/OnHBf55bFD4",
          "starterCode": "/**\n * A simple validation function to check that a password update\n * does not match the current, existing password.\n */\nlet validateUpdatePassword = (newPassword: string, oldPassword: string) => {\n  return newPassword !== oldPassword;\n};\n\n// Your code here:\n",
          "solutionCode": "/**\n * A simple validation function to check that a password update\n * does not match the current, existing password.\n */\nlet validateUpdatePassword = (newPassword: string, oldPassword: string) => {\n  return newPassword !== oldPassword;\n};\n\n// Your code here:\ntest(\"validateUpdatePassword\", () => {\n  expect(validateUpdatePassword(\"new\", \"old\")).toBeTruthy();\n  expect(\n    validateUpdatePassword(\"asdfas98d7f60as7f90sa\", \"l23l4hj2ql4ha2\")\n  ).toBeTruthy();\n  expect(validateUpdatePassword(\"new\", \"new\")).toBeFalsy();\n  expect(\n    validateUpdatePassword(\"f69asd87f698asfds\", \"f69asd87f698asfds\")\n  ).toBeFalsy();\n});\n",
          "content": ""
        },
        {
          "id": "zdV1F5Bdb",
          "type": "typescript",
          "title": "Testing a More Complex Function",
          "instructions": "We have a function `buckets` in the editor below which reduces a list of items into buckets of a specified `size`. Write a test for this function to ensure the function works correctly.",
          "testCode": "test(\"The `buckets` function is defined using the `let` keyword.\", () => {\n  buckets = 5;\n  expect(buckets).toBe(5);\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The tests check the expected behavior of `buckets` correctly.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n\n  for (const { test } of __USER_TEST_LIST__) {\n    try {\n      buckets = (list, size) => {\n        let bucketList = [];\n        for (let i = 0; i < list.length; i += size) {\n          bucketList.push(list.slice(i, i + size));\n        }\n        return bucketList;\n      };\n      test();\n    } catch (err) {\n      fail();\n    }\n\n    let didFail = false;\n    try {\n      buckets = () => null;\n      test();\n      didFail = true;\n    } catch (err) {\n      // Do nothing...\n    }\n\n    if (didFail) {\n      fail();\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/6pQUd7BuM6I",
          "starterCode": "/**\n * Reduce a list of items into a list of buckets specified\n * by the given size.\n */\nlet buckets = <T extends {}>(list: T[], size: number): Array<Array<T>> => {\n  if (size < 1) {\n    throw new Error(\"Size must be a positive number!\");\n  }\n\n  let bucketList = [];\n  for (let i = 0; i < list.length; i += size) {\n    bucketList.push(list.slice(i, i + size));\n  }\n  return bucketList;\n};\n\n// Your code here:\n",
          "solutionCode": "/**\n * Reduce a list of items into a list of buckets specified\n * by the given size.\n */\nlet buckets = <T extends {}>(list: T[], size: number): Array<Array<T>> => {\n  if (size < 1) {\n    throw new Error(\"Size must be a positive number!\");\n  }\n\n  let bucketList = [];\n  for (let i = 0; i < list.length; i += size) {\n    bucketList.push(list.slice(i, i + size));\n  }\n  return bucketList;\n};\n\n// Your code here:\ntest(\"The buckets function partitions a list correctly\", () => {\n  const list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let result = buckets(list, 2);\n  let expected = [\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [7, 8],\n    [9, 10],\n  ];\n  expect(result).toEqual(expected);\n\n  result = buckets(list, 5);\n  expected = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n  ];\n  expect(result).toEqual(expected);\n\n  result = buckets(list, 10);\n  expected = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]];\n  expect(result).toEqual(expected);\n\n  result = buckets(list, 7);\n  expected = [\n    [1, 2, 3, 4, 5, 6, 7],\n    [8, 9, 10],\n  ];\n  expect(result).toEqual(expected);\n\n  expect(() => buckets(list, 0)).toThrow();\n});\n",
          "content": ""
        },
        {
          "id": "gYpNeTnG1",
          "type": "typescript",
          "title": "Testing a Racecar Class",
          "instructions": "Testing classes is not too different from testing functions. You can write unit tests which test entire classes in isolation, or, which test specific behavior or aspects of a given class in isolation.\n\nWell written classes should generally encapsulate a specific functionality or behavior, and as a result your tests for these classes should test that that behavior works correctly.\n\nIn the editor below we have a simple class to represent a racecar. Write some tests for this class to ensure the racecar can speed up and slow down correctly.",
          "testCode": "test(\"The `RaceCar` class exists.\", () => {\n  const car = new RaceCar(10);\n  expect(car).toBeDefined();\n  expect(RaceCar).toBeDefined();\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The tests check the expected behavior of `RaceCar` class correctly.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n\n  for (const { test } of __USER_TEST_LIST__) {\n    try {\n      test();\n    } catch (err) {\n      fail();\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/_pajgvKcVHk",
          "starterCode": "/**\n * A simple class to represent a racecar which can accelerate\n * and decelerate.\n *\n * NOTE: Do not change the code for the RaceCar class.\n */\nclass RaceCar {\n  running = false;\n  speed = 0;\n  maxSpeed = 0;\n\n  constructor(maxSpeed: number) {\n    this.maxSpeed = maxSpeed;\n  }\n\n  accelerate = () => {\n    if (this.speed < this.maxSpeed) {\n      this.speed++;\n    }\n  };\n\n  decelerate = () => {\n    if (this.speed > 0) {\n      this.speed--;\n    }\n  };\n\n  getSpeed = () => {\n    return this.speed;\n  };\n}\n\n// Your code here:\n",
          "solutionCode": "/**\n * A simple class to represent a racecar which can accelerate\n * and decelerate.\n *\n * NOTE: Do not change the code for the RaceCar class.\n */\nclass RaceCar {\n  running = false;\n  speed = 0;\n  maxSpeed = 0;\n\n  constructor(maxSpeed: number) {\n    this.maxSpeed = maxSpeed;\n  }\n\n  accelerate = () => {\n    if (this.speed < this.maxSpeed) {\n      this.speed++;\n    }\n  };\n\n  decelerate = () => {\n    if (this.speed > 0) {\n      this.speed--;\n    }\n  };\n\n  getSpeed = () => {\n    return this.speed;\n  };\n}\n\n// Your code here:\ntest(\"The RaceCar class operates correctly\", () => {\n  let car = new RaceCar(10);\n\n  // A helper function to accelerate and decelerate the car a number of times\n  const race = (times: number, direction: \"up\" | \"down\") => {\n    let count = 0;\n    let fn = direction === \"up\" ? car.accelerate : car.decelerate;\n\n    while (count < times) {\n      fn();\n      count++;\n    }\n  };\n\n  race(5, \"up\");\n  expect(car.getSpeed()).toBe(5);\n  race(10, \"up\");\n  expect(car.getSpeed()).toBe(10);\n\n  race(20, \"down\");\n  expect(car.getSpeed()).toBe(0);\n\n  car = new RaceCar(100);\n\n  race(15, \"up\");\n  race(15, \"up\");\n  race(15, \"up\");\n  race(15, \"up\");\n  race(15, \"up\");\n  expect(car.getSpeed()).toBe(75);\n  race(50, \"up\");\n  expect(car.getSpeed()).toBe(100);\n\n  race(20, \"down\");\n  expect(car.getSpeed()).toBe(80);\n  race(79, \"down\");\n  expect(car.getSpeed()).toBe(1);\n  race(100, \"down\");\n  expect(car.getSpeed()).toBe(0);\n});\n",
          "content": ""
        },
        {
          "id": "zCbzABROtb",
          "type": "typescript",
          "title": "Testing Asynchronous Functions",
          "instructions": "We can also easily test asynchronous code with Jest, using asynchronous callbacks. Jest test blocks receive callback functions, if you need to handle asynchronous behavior in your tests you can simply make these functions asynchronous by adding the `async` keyword and then evaluating the results of `await`'ing promises within your tests.\n\nWe have some simple asynchronous code mocked out in the editor below—the `fetchSomeData` waits a second arbitrarily and then returns the string `\"OK\"` in order to simulate a function which asynchronously fetches some data from a server.\n\nWrite an asynchronous test to ensure that this function works correctly.\n\n> ++NOTE:++ If this code actually handled fetching data from some other remote service, you would need to think about testing failure states as well. _Anytime_ your code interacts with something external to itself, whether that is a user, an external library, an API, or even your own backend system, you can be sure that there is a possibility the code will fail and you will need to deal with possible error states. For a bonus, think about how you might modify the code below to test for failure conditions.\n",
          "testCode": "test(\"The `fetchSomeData` function is defined using the `let` keyword.\", () => {\n  fetchSomeData = 5;\n  expect(fetchSomeData).toBe(5);\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The tests check the expected behavior of `fetchSomeData` correctly.\", async () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n\n  const __mockDelay = async () => {\n    await new Promise((_) => setTimeout(_, 1000));\n  };\n\n  for (const { test } of __USER_TEST_LIST__) {\n    try {\n      fetchSomeData = async () => {\n        try {\n          await __mockDelay();\n          return \"OK\";\n        } catch (err) {\n          return null;\n        }\n      };\n      await test();\n    } catch (err) {\n      fail();\n    }\n\n    let didFail = false;\n    try {\n      fetchSomeData = async () => {\n        try {\n          await __mockDelay();\n          return \"NO!\";\n        } catch (err) {\n          return null;\n        }\n      };\n      await test();\n      didFail = true;\n    } catch (err) {\n      // Do nothing...\n    }\n\n    if (didFail) {\n      fail();\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/pE94GcBcq_M",
          "starterCode": "const mockAsyncDelay = async (time: number = 1000) => {\n  await new Promise((_: any) => setTimeout(_, time));\n};\n\ntype Data = string | null;\n\nlet fetchSomeData = async (): Promise<Data> => {\n  try {\n    await mockAsyncDelay();\n    return \"OK\";\n  } catch (err) {\n    return null;\n  }\n};\n\n// Your code here:\n",
          "solutionCode": "const mockAsyncDelay = async (time: number = 1000) => {\n  await new Promise((_: any) => setTimeout(_, time));\n};\n\ntype Data = string | null;\n\nlet fetchSomeData = async (): Promise<Data> => {\n  try {\n    await mockAsyncDelay();\n    return \"OK\";\n  } catch (err) {\n    return null;\n  }\n};\n\n// Your code here:\ntest(\"fetchSomeData returns OK after a delay\", async () => {\n  const result = await fetchSomeData();\n  expect(result).toBe(\"OK\");\n});\n",
          "content": ""
        },
        {
          "id": "e8LMnAF1U",
          "type": "typescript",
          "title": "Test Driven Development",
          "instructions": "[Test driven development](https://en.wikipedia.org/wiki/Test-driven_development), or TDD, is a concept which involves writing tests before, rather than after, writing the code which those tests test. It's up to you or your team to decide if this practice is useful or not, but it's generally helpful to be aware of it as an option for developing code. It can be useful to at least think about how you would test software before building it.\n\nIn the editor below is a test for a function called `filterEvens` which is not implemented yet. The function should take a list of numbers and filter out all of the even numbers from the list. Your job is to implement this function, so that the test passes. Good luck\\!",
          "testCode": "test(\"The `filterEvens` function is defined using the `let` keyword.\", () => {\n  expect(filterEvens).toBeDefined();\n  filterEvens = 5;\n  expect(filterEvens).toBe(5);\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The tests check the expected behavior of `filterEvens` correctly.\", () => {\n  expect(filterEvens).toBeDefined();\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n\n  for (const { test } of __USER_TEST_LIST__) {\n    try {\n      filterEvens = (list) => {\n        return list.filter((x) => x % 2 !== 0);\n      };\n      test();\n    } catch (err) {\n      fail();\n    }\n\n    let didFail = false;\n    try {\n      filterEvens = (x) => x;\n      test();\n      didFail = true;\n    } catch (err) {\n      // Do nothing...\n    }\n\n    if (didFail) {\n      fail();\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/gJqUtDDybuo",
          "starterCode": "// Your code here:\n\ntest(\"The filterEvens function filters a list of numbers and returns only the odd numbers\", () => {\n  let list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let result = filterEvens(list);\n  let expected = [1, 3, 5, 7, 9];\n  expect(result).toEqual(expected);\n\n  list = [2, 2, 2, 4, 4, 4, 6, 6, 6, 100, 100, 100];\n  result = filterEvens(list);\n  expected = [];\n  expect(result).toEqual(expected);\n\n  list = [1, 555, 777, 999];\n  result = filterEvens(list);\n  expected = [1, 555, 777, 999];\n  expect(result).toEqual(expected);\n\n  list = [1, 1000, 5];\n  result = filterEvens(list);\n  expected = [1, 5];\n  expect(result).toEqual(expected);\n\n  list = [];\n  result = filterEvens(list);\n  expected = [];\n  expect(result).toEqual(expected);\n});\n",
          "solutionCode": "// Your code here:\nlet filterEvens = (list: number[]): number[] => {\n  return list.filter((x) => x % 2 !== 0);\n};\n\ntest(\"The filterEvens function filters a list of numbers and returns only the odd numbers\", () => {\n  let list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let result = filterEvens(list);\n  let expected = [1, 3, 5, 7, 9];\n  expect(result).toEqual(expected);\n\n  list = [2, 2, 2, 4, 4, 4, 6, 6, 6, 100, 100, 100];\n  result = filterEvens(list);\n  expected = [];\n  expect(result).toEqual(expected);\n\n  list = [1, 555, 777, 999];\n  result = filterEvens(list);\n  expected = [1, 555, 777, 999];\n  expect(result).toEqual(expected);\n\n  list = [1, 1000, 5];\n  result = filterEvens(list);\n  expected = [1, 5];\n  expect(result).toEqual(expected);\n\n  list = [];\n  result = filterEvens(list);\n  expected = [];\n  expect(result).toEqual(expected);\n});\n",
          "content": ""
        },
        {
          "id": "Vd0gFPl5V",
          "type": "typescript",
          "title": "Debug a Failing Test",
          "instructions": "If you follow the practice of writing tests \\(which, generally, you should\\) you will from time to time encounter failing tests. Ideally, this occurs when you make changes to your code which break test assertions in a way you did not intend. That's what the tests are there for\\! You want your tests to break, rather than your users to use broken software.\n\nIn the editor below is a function and a test. Let's imagine you just changed how the function was written and now the test is failing. Try to debug the problem and fix the function so that the test passes.\n\n> ++NOTE:++ There is a lot more to go into on this topic of \"debugging\", which we will pursue in more depth in the next course module.\n",
          "testCode": "test(\"The `countNonSpaceCharactersInString` function is defined.\", () => {\n  expect(countNonSpaceCharactersInString).toBeDefined();\n  expect(typeof countNonSpaceCharactersInString).toBe(\"function\");\n});\n\ntest(\"At least one test exists in a `test` block.\", () => {\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n});\n\ntest(\"The `countNonSpaceCharactersInString` counts the number of non-space characters in a string correctly.\", () => {\n  expect(countNonSpaceCharactersInString).toBeDefined();\n  expect(__USER_TEST_LIST__.length > 0).toBe(true);\n\n  for (const { test } of __USER_TEST_LIST__) {\n    try {\n      test();\n    } catch (err) {\n      fail();\n    }\n\n    let didFail = false;\n    try {\n      countNonSpaceCharactersInString = (x) => x.length;\n      test();\n      didFail = true;\n    } catch (err) {\n      // Do nothing...\n    }\n\n    if (didFail) {\n      fail();\n    }\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/zt6J8tnTfcc",
          "starterCode": "/**\n * A function to count the number of non space characters in a string.\n */\nlet countNonSpaceCharactersInString = (str: string): number => {\n  let count = 0;\n  for (let i = 0; i <= str.length; i++) {\n    if (str.charAt(i) !== \" \") {\n      count++;\n    }\n  }\n\n  return count;\n};\n\ntest(\"The countNonSpaceCharactersInString counts the number of non-space characters in a string correctly.\", () => {\n  let str = \"hello my name is Joe\";\n  let result = countNonSpaceCharactersInString(str);\n  expect(result).toBe(16);\n\n  str = \"\";\n  result = countNonSpaceCharactersInString(str);\n  expect(result).toBe(0);\n\n  str = \"hi\";\n  result = countNonSpaceCharactersInString(str);\n  expect(result).toBe(2);\n\n  str =\n    \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\";\n  result = countNonSpaceCharactersInString(str);\n  expect(result).toBe(510);\n});\n",
          "solutionCode": "/**\n * A function to count the number of non space characters in a string.\n */\nlet countNonSpaceCharactersInString = (str: string): number => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) !== \" \") {\n      count++;\n    }\n  }\n\n  return count;\n};\n\ntest(\"The countNonSpaceCharactersInString counts the number of non-space characters in a string correctly.\", () => {\n  let str = \"hello my name is Joe\";\n  let result = countNonSpaceCharactersInString(str);\n  expect(result).toBe(16);\n\n  str = \"\";\n  result = countNonSpaceCharactersInString(str);\n  expect(result).toBe(0);\n\n  str = \"hi\";\n  result = countNonSpaceCharactersInString(str);\n  expect(result).toBe(2);\n\n  str =\n    \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\";\n  result = countNonSpaceCharactersInString(str);\n  expect(result).toBe(510);\n});\n",
          "content": ""
        },
        {
          "id": "v1sB3gaFR",
          "type": "media",
          "title": "Using Mocks with Jest",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# External Test Dependencies\n\nThe code you write tests for often has various external dependencies, e.g. imported libraries, remote services and APIs, and so on. You often do not want to have to rely on these externalities in your test environment. For instance, consider that you have a function which calls a server API. If you are writing unit tests, you don't want to actually make the network request to the server. If you did, your tests would need that server to be running and available anytime the tests run. This dependency could lead to your tests failing even when your code works.\n\nFor example, what if at some point the network request failed, for any reason whatsoever? Your tests would then consequently fail. While it is true that you generally would want to ensure that your server is running and available, that should not be the concern of unit tests for the code which interacts with server responses. On top of this, relying on network requests would generally make your tests take a lot longer to run.\n# Mocking Dependencies\n\nHow can we deal with this problem?\n\nA common solution is the idea of \"mocking\". We can mock external services and dependencies in the test environment such that they produce a predictable outcome. For instance, we could mock the external API such that it provides a fixed response, or mock it such that it provides an error response, and then write tests to ensure our code behaves correctly in either case.\n# Mocking with Jest\n\nJest provides versatile support for mocking in a test environment. For instance, if the API call described above was implemented using axios, it could be mocked in Jest using some code like this:\n\n```\nimport axios from 'axios';\n\nclass Users {\n  static all() {\n    return axios.get('/users.json').then(resp => resp.data);\n  }\n}\n\njest.mock('axios');\n\ntest('should fetch users', () => {\n  const users = [{name: 'Bob'}];\n  const resp = {data: users};\n  axios.get.mockResolvedValue(resp);\n\n  return Users.all().then(data => expect(data).toEqual(users));\n});\n\n```\n\nThis effectively mocks the call to `/users.json` and returns the fixed `resp` data\\. This example is taken directly from the [Jest documentation on Mock Functions](https://jestjs.io/docs/en/mock-functions), which we would encourage you to review. Using mocks with Jest, we can mock the behavior of:\n\n* Regular functions\n* Function return values\n* Imported libraries and modules\n\n# Using Mocks Effectively\n\nMocks are a very useful tool in your toolbox for writing tests. Using mocks effectively can help to decouple your tests from external dependencies, therefore isolating the behavior you care about testing. Moreover, they can allow you to more easily test certain aspects of your code which would otherwise prove hard to test \\(e.g. code which makes network requests or interacts with external modules\\). An effective use of mocking can make your tests more versatile, useful, and less brittle."
        },
        {
          "id": "qUXuU6Tyr",
          "type": "media",
          "title": "Snapshot Testing",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# The Problem\n\nYour tests will very frequently evaluate some code and then perform assertions which resemble the following:\n\n```\nexpect(result).toEqual(expected);\n\n```\n\nWhere you are asserting that some data you get back from your code matches some expected data. This is generally great when you asserting fairly simple things such as:\n\n```\nconst result = getUser();\nconst user = {\n    name: \"Joe\",\n    age: 25,\n};\nexpect(result).toEqual(user);\n\n```\n\nBut what if you are comparing two more complex data structures? It can be tedious and inconvenient to hard\\-code more complex data structures in your tests just to perform assertions against them.\n# Snapshot Testing\n\nJest provides a feature called snapshot testing which can help in this case. Snapshot testing basically ensures that some data always matches a fixed snapshot of that data. But where does the fixed snapshot come from in the first place? Jest creates it by default if it doesn't exist and saves it in an auto\\-generated file within your codebase. Once it exists, if the test ever produces data which no longer matches the snapshot, the test will fail and you will have the option to update the snapshot or fix the code which broke the test.\n\nHow does it work?\n\n```\nexpect(result).toMatchSnapshot();\n\n```\n\nJust like that—pretty simple\\!\n# Snapshot Testing UIs\n\nA particularly useful application of snapshot testing is for testing UIs. For example, imagine you have a component which renders a series of buttons and inputs. You can render this in your test environment in isolation and then snapshot the rendered component tree. This provides a very simple and easy way to add a test which ensures that that particular piece of UI does not change. If you wanted to ensure this without a snapshot, you would have to write a lot of specific assertions which check that the buttons and inputs all exist—and even then your test would probably not be exhaustive.\n\nSnapshot testing UIs is not a silver bullet, however. Often, the UI of an application can frequently change and that's not a problem or issue at all. If you have extensively snapshot tested a UI, however, this would lead to constantly failing tests. Snapshots are a great tool, but it's useful to know when and where to apply them.\n---\n\nTo learn more take a look at the [Jest documentation on Snapshot testing](https://jestjs.io/docs/en/snapshot-testing).\n\nTry to add some snapshot tests of your own in the projects later in this module\\!"
        },
        {
          "id": "qU36RQTcK",
          "type": "media",
          "title": "Setting Up and Running Jest",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/fZOXL4E_SDc",
          "starterCode": "",
          "solutionCode": "",
          "content": "It's fairly easy to add Jest to your project.\n\nFor the best guide, [follow the Jest documentation](https://jestjs.io/docs/en/getting-started). See further down that page for the [TypeScript instructions](https://jestjs.io/docs/en/getting-started#using-typescript).\n\nThe brief summary is to install Jest, e.g. `yarn add --dev jest` and then add some test files which match the expected filename pattern, e.g. `.test.ts`. When you run Jest, e.g. `yarn jest`, Jest will search for files matching this filename pattern, e.g. `utils.test.ts`, and Jest will process those files.\n\nWithin your test files you can import code from the rest of your codebase and then create `describe` or `test` blocks which include your tests for that code. Jest will evaluate these tests and print out the results interactively in the CLI for you to view.\n\nBy the way, if you have seen the `describe` test keyword, it is basically a way to group a series of tests together. For example, you may have several tests for a single class or a particular feature. You could group all of these within a `describe` block, within which you can list your individual `test` cases\\. It's really just a utility for test organization, you can use it if you find it helpful or not—it's up to you\\!"
        },
        {
          "id": "oNwi40jtp",
          "type": "media",
          "title": "Test Organization",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "You are free to organize tests in your codebase anyway you see fit. However, there are some common patterns which more common than others. For instance, two common ways are to group your tests all in one place or to group your tests next to the files which they correspond to.\n\nIf you follow the first pattern, you will generally have a separate `tests/` folder, within which are all the tests for your codebase. For example, your file structure may look like this:\n\n```\nproject\n│   README.md\n│   ...\n│\n└───src\n│   └───utils\n│   │   helpers.ts\n│   └───ui\n│   │   App.tsx\n│   │   Login.tsx\n│   │   ...\n│   │\n│   └───tests\n│       │   helpers.test.ts\n│       │   App.test.tsx\n│       │   ...\n...\n\n```\n\nThis style of organization keeps your test code separate from the code which it tests.\n\nThe other option is to group them together:\n\n```\nproject\n│   README.md\n│   ...\n│\n└───src\n│   └───utils\n│   │   helpers.ts\n│   │   helpers.test.ts\n│   └───ui\n│   │   App.tsx\n│   │   App.test.tsx\n│   │   Login.tsx\n│   │   ...\n│   │\n...\n\n```\n\nThere is really no right or wrong here, the best option is to try to determine an organization which is clear, simple, and easy to understand for you and your team. Experiment with a few different options until you find something you like\\! One easy rule of thumb to remember here is to ask yourself how easy it would be for someone new to understand the organization of your codebase."
        },
        {
          "id": "yKI$72Y7v",
          "type": "media",
          "title": "Integration Testing",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/Fsxu3sTEB7I",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nYou may recall from the earlier lesson on testing where we introduced the idea of the Testing Pyramid. This concept refers to stacking or organizing tests at different levels of granularity. So far, we have mainly covered unit testing, which is writing specific tests for functions, classes, or other small bits of code throughout your codebase. From here, the next level up the testing pyramid is usually referred to as \"integration testing\". The exact definition of integration testing may be hard to pin down because it depends a lot on the context it is used in, however generally the idea is that integration testing involves testing components of a software system in \"integration\" together.\n# Integration Testing\n\n[Wikipedia](https://en.wikipedia.org/wiki/Integration_testing#:~:text=Integration%20testing%20%28sometimes%20called%20integration,component%20with%20specified%20functional%20requirements.) defines integration testing as \"the phase in software testing in which individual software modules are combined and tested as a group.\" Imagine you have a server application with many different classes and modules. You have written unit tests for all the individual pieces of code and now you want to write some integration tests. Integration tests in this context could refer to running the entire server and then interacting with it at the API level. Or, imagine you have a frontend application built with React. Integration testing a React application could involve rendering all or some components in a test environment and then interacting with them \\(e.g. by simulating click events or text input\\).\n\nIf your software is composed of many decoupled and isolated small units \\(which, generally is a good practice\\), unit testing is writing specific individual tests for these units. Integration testing involves actually connecting these small units and testing the entire system.\n\nIntegration testing is a tricky term because it tends to mean different things to different people. For instance, some may not consider testing a server application in isolation to be a true integration test. You would need to deploy the server with a database in a test environment for it to be an integration test. Or, imagine you have a complex React application. Is it a unit test or integration test if you are rendering and testing a large form component? The distinctions and not perfectly clear.\n\nThe important thing to understand about integration testing is that you are testing behavior of a software system which involves the interaction of different smaller components. Usually, you should have already written unit tests for the small components themselves. The integration tests verify that more complex interactions between these components go as planned.\n# The Role of Integration Testing\n\nNow, let's revisit the testing pyramid\\!\n\n![You can think of \"Service Tests\" here as \"Integration Tests\". Naming and definition ambiguity!](/assets/yKI$72Y7v/c49607dac67f96acc8336a8a245aff65_testing-pyramid.png)\n\nIntegration tests should generally be fewer in number than unit tests and also slightly more difficult to write, maintain, and run. If your integration tests involved running a server and making requests to an API, for instance, this is going to be more complex to setup than simply using a quick test runner like Jest to interact with your code and perform assertions. Because of the greater overheard of integration tests, you usually want to have less of them.\n\nHowever, the upper levels of testing in the testing pyramid are very important. Let's say you have an integration test for a user signup flow via API. If the tests breaks, that's a big problem\\! It indicates that your user registration flow could be broken. That's really important to know and unit testing may not catch all errors like this.\n# Integration Testing in Practice\n\nEven after reading all of this, it may still feel a little unclear what an integration test actually _is_. What do they look like in practice and how can you write one?\n\nHere are two articles on writing integration tests in a [React application](https://css-tricks.com/react-integration-testing-greater-coverage-fewer-tests/) and for an [Express server application](https://medium.com/@pojotorshemi/integration-test-on-express-restful-apis-using-jest-and-supertest-4cf5d1414ab0) which provide more direct examples and also further illustrate the distinctions between unit, integration, and e2e/UI tests."
        },
        {
          "id": "4X8ks1Rz$",
          "type": "media",
          "title": "End-To-End Testing",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "https://www.youtube.com/embed/dUX86Jpp_lg",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nThe final level of the testing pyramid goes by a few names, most commonly end\\-to\\-end \\(e2e\\) testing or UI testing. the key idea here is to test the _entire_ application, from end to end, as if you were a user interacting with it. For example, imagine you built a note\\-taking app. An e2e test would involve deploying the server in a test environment with a database and then actually interacting with the server through the UI \\(hence the name UI testing\\), just as a user would do. This is the highest level of testing with the most overhead.\n# UI/e2e Testing In Practice\n\nIf you are creating e2e tests, you want to genuinely run as much of your application as you can in the tests, exactly as it would run in production. You want to avoid test idiosyncrasies which result in tests failing/passing in the test environment but not in production. However, you may not be able to run your _entire_ application in the test environment as it is in production. Why not? Your application may rely on various external dependencies which are out of your control, but which you do not want to rely on in the test environment, such as third party APIs.\n\nPerhaps you rely on external payment APIs, or data feeds, or single\\-sign\\-on APIs. You typically do not want to rely on the actual instances of these external services in your e2e tests. Instead, you want to follow the same pattern we introduced previously: mocking. External services can be mocked just as individual classes, modules, or functions can be mocked. This removes the external dependency and replaces it with predictable behavior that allows you to construct more reliable tests.\n# Mocking External Services\n\nFor instance, imagine your application has a payment flow which submits a payment request to an external API. The request includes user payment details, such as a credit card and address and so on. The API request may succeed or fail in real life. Now, you want to build an e2e test for this entire payment flow. You have your application setup and running in a test environment \\(probably Docker—more on that later\\). At some point, your application code makes a network request to the external payment API, e.g.\n\n```\naxios.post(`${PAYMENTS_API}/payment`, paymentData);\n\n```\n\nA good practice to follow is to make the `PAYMENTS_API` an external, configurable environment variable. If you do this, you can simply provide a different `PAYMENTS_API` value to your application in the test and production environments, but your code remains the same. Your code itself is not modified for the test environment. In the test environment, the payments request could be mocked in some way, for example by running a separate server to mock the external payments API. This could be configured to return a predictable response which would allow your tests to consistently test the payment flow.\n# Caveats\n\nWhile it is a good practice to test your application in isolation, what this means is that your dependencies on external services are still a possible point of failure. For instance, in the above example what if the payments API fails or changes in production? Your tests would not catch this\\! There are two takeaways here:\n\n* There are always ways your software can break which are outside the current scope of whatever tests you have written.\n* Many additional tools exist for production software systems to guard against failures specific to production, such as logging, monitoring, and alerting \\(more on these later\\).\n\n# UI Testing Tools\n\nJust like we used Jest to write unit tests, there are various tools to help you write end\\-to\\-end tests. One of the best tools for testing browser based applications is [Cypress](https://www.cypress.io/). Cypress gives you a Jest\\-like approach for writing tests which interact with a browser application and perform assertions such as clicking buttons or completing forms and verifying the UI changes as expected. Cypress simply requires a URL to visit a running application.\n\nAs an example, we have extensive Cypress tests for the Pairwise application which run in Docker. We will get more into Docker in the Deployment and Delivery module, but for now just imagine Docker as a virtualized container which allows you to run software anywhere and always get the same behavior and results. Our Cypress tests for Pairwise deploy the entire Pairwise application \\(client, server, and database\\) in a dockerized environment and then execute a series of Cypress tests against the Pairwise app. These tests actually walk through the browser client UI \\(using a headless web\\-browser\\) and perform various actions like a user, such as completing challenge, logging in, purchasing the course, and so on.\n\nHere is an example of what one of those tests looks like:\n\n```typescript\nit(\"Home route includes courses list\", () => {\n  cy.visit(`${CLIENT_APP_URL}/home`);\n  cy.url().should(\"include\", \"home\");\n  cy.contains(\"Welcome to Pairwise!\");\n  cy.contains(\"Content\");\n\n  // These are currently the two courses we have\n  cy.contains(\"Fullstack TypeScript Course\");\n  cy.contains(\"Pairwise Library\");\n\n  click(\"course-link-0-start\");\n  cy.url().should(\"include\", \"workspace\");\n});\n\n```\n\nAs you can see, the syntax looks very similar to a Jest test. This test starts by visiting the `/home` route and then performing a few simple assertions, such as checking that some of the page content exists and then clicking the link to start the first course and verifying the browser URL has changed to include `workspace`.\n\nAs you can imagine, UI tests are the most expensive to write and run. They require the most overheard in terms of basically deploying your entire application, and, a test\\-runner like Cypress simply takes longer to execute tests \\(since it is actually interacting with a browser\\). Consequently, these tests should be fewer in number—hence the shape of the testing pyramid. However, UI tests provide a high level of signal. They allow you to test that your entire application is working as expected.\n# Takeaways\n\nRemember, the role of testing is to create checks which find broken software \\(before your users do\\) and to provide confidence in allowing teams to move quickly and ship new features and changes. Let's imagine you have a user registration flow which is extensively UI tested and you make a lot of changes to the flow \\(at any level\\). If your UI tests pass against the new changes, this gives you a high degree of confidence that your changes did not break existing behavior.\n\nConversely, shipping code without tests is asking for trouble\\! That's not to say tests will always protect you from introducing new errors and bugs, but the point of testing is to try to provide confidence for teams to release software quickly and reliably."
        },
        {
          "id": "8gYWsIVO$",
          "type": "media",
          "title": "Testing Automation",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "We will dive more into automation in the next section and in the later module on releasing software, however we can leave a short comment on it here.\n# CI/CD Preview\n\nWhen testing software, you want to automate your testing as much as possible. Ideally, your tests run automatically as part of your development workflow at different stages and protect you against releasing software which breaks the tests. An example workflow might look like this:\n\n* Create a new branch for your feature.\n* Develop your feature.\n* Push your branch to GitHub.\n* Open a pull request and request a review from your team.\n* Go for a walk, or have lunch.\n* Automated status checks run against your code, for instance using [GitHub Actions](https://github.com/features/actions).\n* Your teammate reviews the PR.\n* You return from lunch and check your PR. If everything is good, you merge the PR.\n* The merge commit triggers a deployment for your code, which may run additional checks and tests before deploying.\n\n\nIn a workflow like this, you are mainly concerned with building new features, writing code, and possibly the code review process. The testing and deployment of your changes are all automatic and simply built into the workflow. This is a best practice and a huge benefit for productivity. Altogether, using automated processes for software releases is referred to as continuous integration and continuous delivery/deployment \\(CI/CD\\), which we will investigate in more depth later.\n# Conclusion\n\nFor now, the important takeaway as we wrap up this section on testing software is that everything you learned in the preceding challenges is usually incorporated into standard workflows and run automatically as part of the software development process. Later on, we will work on automating these testing workflows into your own projects."
        },
        {
          "id": "QDmiOTwAY",
          "type": "section",
          "title": "Automation",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Learning to code allows you to build tools and scripts to instruct computers to complete repetitive or complicated tasks for you. Broadly, we can refer to this as \"automation\".\n\nAutomation is a skill and a way of thinking. For instance, perhaps you find some problem you want to solve. You could start with two questions:\n\n1. How can I solve this quickly and manually?\n1. How can I write a simple program so a computer can solve this for me, quickly and repeatedly?\n\n\nThe second option may take a little longer, at first. But, if you find yourself ever having to solve the problem again, you will now have a tool which can quickly do the job.\n\nIn this section, we will cover many ways automation is relevant to software engineering and try to get some practice building some simple automation tools."
        },
        {
          "id": "Ov5j345Hw",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The projects for this module will give you some experience writing your own tests, debugging tests, and building some simple automation tools.\n\nGenerally, it's wise to develop tests in parallel with the software development process. You can do that via test\\-driven development or by simply adding tests for new features after you finish working on them. This is much easier when you still have the context for the code you've been working on fresh in your mind. Moreover, if you spend a few days or weeks adding a lot of new code, you will generally not feel inclined to go back through and add tests for all of this new code. It's a lot easier to add tests as you go. This is a good rule of thumb to keep in mind, and it's useful to get in the habit of writing tests.\n\nHowever, in our case, we have only now introduced the concept and tools for testing software. As a result, all of your previous projects still exist \\(probably without tests\\). For the projects in this module on the subject of testing, we will go back and try to add tests for a few of your previous projects. If you're lucky, you may even find some bugs you were not aware of\\!"
        },
        {
          "id": "vBMqdL@Vf3",
          "type": "project",
          "title": "Test Your Tic Tac Toe Game",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Remember your [Tic Tac Toe game](https://app.pairwise.tech/workspace/zweKy6cg/tic-tac-toe) from the programming module way back?\n\nIt's a fairly simple game with clear rules. Revisit your code for this game and try to add tests for your code. Since the game before was implemented in the Pairwise workspace you can now move this to a separate repository and host it in your GitHub portfolio \\(if you haven't already\\).\n\nYou will want to install Jest, e.g. `yarn add jest`, and follow the [setup instructions](https://jestjs.io/docs/en/getting-started). Then, add some test cases for your Tic Tac Toe game until you feel satisfied you've covered the game logic and any edge cases which could occur.\n\n> Edge cases refers to rare but possible events which may happen but are probably not expected. Edge cases are important to take into account when designing software. They are a good source of major issues since unless you consider edge cases it's likely your code is not expecting them... which can result in errors, crashes, or unexpected behavior.\n> \n> As a simple example imagine you have a user input and the user inputs an empty string, or it is a number field and the user inputs a negative number. Are these values allowed? What happens if these inputs occur? It's always a good practice to try to keep edge cases in mind when designing and testing software.\n"
        },
        {
          "id": "AbAFrjYWc",
          "type": "project",
          "title": "Test Your Game Board Navigator",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now that you've tested your Tic Tac Toe game, let's do the same for the [Game Board Navigator](https://app.pairwise.tech/workspace/7B@lwOBb7/game-board-navigator) project\\. This project was more complex and should be a little more challenging to test. Our own tests for this project, for instance, are over 400 lines long\\!\n\nJust like the last project, you can move your Game Board Navigator code to a new repo to host in your GitHub portfolio. Write a test suite using Jest to test the main behavior of this game project.\n\nGood luck\\!"
        },
        {
          "id": "4EM0@GUSG",
          "type": "project",
          "title": "Choose Another Project to Test",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, choose any other project you previously completed and add tests for it. It can be a Pairwise project, or any other personal project you have worked on.\n\nA great option would be to test an API. You can usually think of APIs much like functions which have inputs and outputs and should adhere to certain behavior. For instance a user signup API should succeed if all the right data is provided and return a predictable response or fail otherwise with a predictable failure code. This predictable behavior makes APIs good targets for testing. Moreover, it's great if you can build testing for key APIs such as user signup—doing so would allow you to ensure that despite changes to your software system the behavior provided by these APIs continues to function correctly. However, such tests would likely be integration tests since they test the entire behavior of a server API and may require you to run the server in the test environment. Feel free to take on that challenge if you are feeling ambitious\\!\n\nIf you choose one of the backend projects, ideally the tests include some level of integrations tests. If you choose a frontend project, ideally the tests include some level of UI testing or end\\-to\\-end testing. However, you can also simply add unit tests for any of the projects you have previously completed.\n\nTry to keep the testing pyramid in mind as you think about which projects to test and how to test them.\n\nGood luck\\!"
        },
        {
          "id": "l3yJBFpRz",
          "type": "project",
          "title": "Add Cypress to a Project",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, choose one of your previous frontend UI projects and add Cypress tests for your application. Try to add a few different test cases which perform assertions on the major features or actions which your app provides. For instance, if you were testing a note\\-taking application, you would want to create test cases to verify a user can create, view, edit, and delete notes through the UI.\n\nTake a look at the guides for [installing and getting started with Cypress](https://docs.cypress.io/guides/getting-started/installing-cypress.html) to begin. It's actually quite easy to work with\\! Don't worry about adding automation to your tests \\(unless you want a challenge\\!\\). The point of this project is to get comfortable working with Cypress. Try to add a set of Cypress tests which you can run from your project by just running the project locally. For example, you can run your app locally and the point Cypress to that URL, e.g. `localhost:3000`.\n\nThis would involve:\n\n* Running your app locally, e.g. with `yarn start`.\n* Running Cypress, e.g. with `yarn run cypress open` \\([see here for more details](https://docs.cypress.io/guides/getting-started/installing-cypress.html#Opening-Cypress)\\) and pointing Cypress to the local port your app is running on.\n\n\nYou could then start with a simple test like this:\n\n```typescript\ndescribe(\"The Home Page\", () => {\n  it(\"successfully loads\", () => {\n    cy.visit(\"http://localhost:3000\");\n  });\n});\n\n```\n\nTry to get creative and add a variety of test cases, good luck\\!"
        },
        {
          "id": "mqUy13W10",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these special topics we will cover some additional topics related to testing software and automation. There are many tools and skills which are useful to learn or be aware of in this area. Here we will cover some of these, and also present some interesting debugging war stories.\n\nIn particular, we will briefly cover a few additional types of testing which we did not cover in the main module challenges. These include:\n\n* **Stress Testing:** subjecting software to extreme conditions to determine performance limits.\n* **Fuzz Testing:** an automated technique for generating random inputs for testing software.\n* **Split Testing:** testing two versions of a feature to evaluate relative performance.\n* **Manual Testing:** the process non\\-automated inspection and evaluation of software.\n* **Alpha and Beta Testing:** testing an initial product release with end\\-users.\n* **Chaos Engineering:** subjecting production software systems to stress to ensure resiliency and robustness.\n\n"
        },
        {
          "id": "yRbsegwJs",
          "type": "media",
          "title": "Stress Testing",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "All software has limits. Stress testing refers to the concept of testing software systems under conditions of stress, e.g. high traffic or usage, to determine realistic performance limits. For instance, imagine you are running a server application. How many users can your server handle? How many requests per second can your server handle? What is your scaling strategy? For most servers, high traffic can overload the server and result in performance degradation and failure. This could result in your entire system going offline under high demand conditions \\(usually when you would want your service to be most reliable\\). Stress testing is a technique to determine the limits where your service performance would begin to experience degradation.\n\nStress testing your application could involve deploying your server in a production\\-like environment and then hammering it with network requests until it crashes or the response time begins to slow down. Once you have an idea of the traffic and request limits, you can incorporate this information into your production deployment strategy. For example, you could add monitoring if your traffic begins to approach the level you identified in your stress tests. You could also develop scaling strategies which attempt to scale your application if the traffic increases dramatically.\n\nStress testing is an important consideration for products as they begin to scale, mission\\-critical services, and services which expect to have high traffic conditions \\(e.g. real\\-time applications\\).\n\nIf you are interested in exploring the idea of stress testing further, [Artillery](https://artillery.io/docs/guides/overview/welcome.html) is a useful testing toolkit which can be used for stress and load testing."
        },
        {
          "id": "NaVGTkbZ4",
          "type": "media",
          "title": "Fuzz Testing",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "[Fuzz testing](https://en.wikipedia.org/wiki/Fuzzing#:~:text=Fuzzing%20or%20fuzz%20testing%20is,assertions,%20or%20potential%20memory%20leaks.) is an interesting testing technique which involves formulating invalid or semi\\-valid inputs to a software system, usually in a largely automated way, to search for various software failures and unhandled edge cases which have been overlooked by the software system.\n\nFor instance, imagine a \\(very simple\\) user registration form which expects an input body like this:\n\n```\ninterface registrationBody {\n    name: string;\n    email: string;\n    password: string;\n}\n\n```\n\nFuzz testing the associated user registration service might involve using a fuzzing tool to generate many different inputs and testing if they produce the expected behavior. Inputs might include registration bodies which have `name` and `password` but no `email`, or very long values for each of these fields, or non\\-string values. Or, the fuzz testing could submit arbitrary data which doesn't resemble the expected registration body at all.\n\nThis is a very simple example, but you can see how an approach like this can easily subject a system to a variety of input which may not necessarily be expected or tested in normal test cases.\n\nFuzz testing is not a very common or widely used testing approach, but it's quite interesting and worth keeping in mind. It is also a useful technique to find potential security flaws or exploits."
        },
        {
          "id": "pUxKN2l2u",
          "type": "media",
          "title": "Split Testing (A/B Testing)",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "[Split testing](https://en.wikipedia.org/wiki/A/B_testing), also referred to as A/B testing, is a product and user research testing approach used to evaluate different alternatives on product and feature design. The basic idea is to design a controlled experiment which tests a simple hypothesis using two variations.\n\nTo explain let's look at an example. Imagine you have a signup flow on your website. You want to optimize for user signups, and so you explore two different feature designs:\n\n* A single form which asks for all user details, including name, address, email, etc. After signup a user must confirm their email.\n* A single input which only asks for user email first. This is followed by an email confirmation, after which the user must complete the rest of the signup form details.\n\n\nYou develop both feature designs and deploy both in a split test experiment. This allows you to gather real data from the production environment to evaluate the efficacy of each approach. Ideally, you have a large enough sample size to derive statistical meaning from the results, and, ideally, the results point to one or the other design producing better outcomes.\n\nSurprisingly, split tests often produce outcomes that may not be expected by user researchers, engineers, or product managers. They are a very useful way to gain insights into your product and determine the best ways to optimize certain features for user engagement and business value.\n\nMany tools exist to help make split testing easy for startups and small projects and larger companies often have split testing deeply engrained into their product development process. Split testing can be an invaluable tool for startups and larger companies to optimize their product development process and avoid the common pitfall of making product designs which actually have deleterious impacts on user experience."
        },
        {
          "id": "Jdf0MWZX2",
          "type": "media",
          "title": "Manual Testing",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Most of the testing approaches we have described so far are automated or can be greatly enhanced using automation. However, often the simplest and most direct approach to testing software is manual testing. This is also the most intuitive and probably the first thing you will do as a developer.\n\nOnce you develop some code, anything from a simple function to an app, you will probably just try to use it and see if you get the right results. This is often one of the fastest and most direct ways to get feedback on what you've built.\n\nManual testing like this is great for early prototypes and small\\-scale products which are developing very rapidly, however, it is very costly in terms of time, it does not scale well, and it is not consistently repeatable. As a result, automated testing tends to be preferable as a system scales. However, in the end your systems will always be tested manually by end users, so it can be useful to also retain some level of manual testing of your own products to ensure high quality and avoid bugs. This could be accomplished through [dog\\-fooding](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) or very specific manual QA processes.\n\nAs you develop a new feature or product, it can be useful to start with manual testing and once your feature begins to stabilize you then start to translate the manual testing you were doing into automated tests which can be run repeatedly.\n\nOne of the great benefits of manual testing is that you can always interact with a system in ways which are impossible to define using automated techniques. Think of manual testing like test driving a new model of a car before mass production and release. The test driver will always be able to stress test the car and subject it to various conditions which could not be duplicated in other environments. This is a crucial part of the development process to ensure the car holds up in these real\\-life conditions.\n\nManual testing software is similar, except software release cycles tend to be much faster than car release cycles. As a result, manual testing is more expensive for software products—your job as the developer is to weigh the tradeoffs and determine when manual testing can be useful to you and your team."
        },
        {
          "id": "fgIlzO7F@",
          "type": "media",
          "title": "Alpha and Beta Testing",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The previous lesson introduced manual testing, the process of manually inspecting and using software. Alpha and beta testing is also a form of manually testing which targets end users more directly and is specifically tailored to the software release process.\n# Alpha Testing\n\nAlpha testing is essentially manual testing software, specifically prior to a new release, by the internal employees or stakeholders who are responsible for developing the software product. You can imagine a team developing a new prototype and then testing internally within the company to try to evaluate any flaws, bugs, or defects before releasing it externally.\n# Beta Testing\n\nBeta testing is similar to alpha testing except that it involves actual end users of the product. You have probably heard of the term \"beta testing\" before and may have even participated in beta testing software products yourself. A beta test allows real users to interact with the software in as realistic an environment as possible. Beta testing precedes a new product release or major feature update, and is the last major check to try to find any unresolved or unidentified issues before releasing the product.\n# In Practice\n\nAlpha and beta testing is especially expensive because these techniques involve actually gathering and coordinating users to test a product. However, they can generate the most useful feedback—not only will users tend to find issues and bugs you missed, but they can provide qualitative feedback on the product design and usefulness. In the end, you are developing software to create products to solve a problem in the real world. Alpha and beta testing are a great way to determine from real users whether you have solved that problem or not."
        },
        {
          "id": "uhN@tgz0R",
          "type": "media",
          "title": "Chaos Engineering",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "[Chaos engineering](https://en.wikipedia.org/wiki/Chaos_engineering) is a concept largely pioneered in recent history by Netflix as a method of introducing resiliency into production software systems. It's very important for a video content streaming platform like Netflix to have constant uptime and availability. If you go to view a movie or show, you don't want to find that the service is down. However, the Netflix infrastructure is very complex, and various failures could happen from time to time. How can they guard against this?\n\nNetflix created the so\\-called \"Chaos Monkey\" specifically for this purpose. Chaos Monkey is a tool which would periodically and randomly disable various infrastructure services. The intent was to instill into the engineering mindset and culture an expectancy of frequent failures in order to encourage the design of redundant and robust systems which could survive individual service outages. [In their words](https://netflixtechblog.com/netflix-chaos-monkey-upgraded-1d679429be5d):\n\n> The Freedom and Responsibility culture at Netflix doesn’t have a mechanism to force engineers to architect their code in any specific way. Instead, we found that we could build strong alignment around resiliency by taking the pain of disappearing servers and bringing that pain forward. We created Chaos Monkey to randomly choose servers in our production environment and turn them off during business hours. Some people thought this was crazy, but we couldn’t depend on the infrequent occurrence to impact behavior. Knowing that this would happen on a frequent basis created strong alignment among our engineers to build in the redundancy and automation to survive this type of incident without any impact to the millions of Netflix members around the world. We value Chaos Monkey as a highly effective tool for improving the quality of our service.\n\nIt might seem like an absurd concept at first, but the reality is that in the real world there will always be arbitrary failures and unexpected outages that you must deal with. For highly complex systems which serve millions of users, it makes a lot of sense to build a degree of instability into the infrastructure itself to encourage the development of a highly resilient design which can withstand a variety of unexpected internal and external shocks in the future.\n\nYou may not utilize the concept of chaos engineering in your projects anytime soon, but it's one of the most interesting topics in modern software development and testing."
        }
      ]
    },
    {
      "free": false,
      "id": "qV7cPqG1",
      "title": "Refactoring & Debugging",
      "challenges": [
        {
          "free": true,
          "id": "cBlWsqgO",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "You probably have some sense of how to debug and refactor code if you've made it this far in the course. Refactoring, if the term isn't familiar to you, is just the process of revisiting some previously written code and re\\-writing it to improve the organization, readability, or maintainability of the code \\- or, just to fix bugs or errors.\n\nAs you move forward as a developer, you will start to observe that code becomes legacy code immediately once it is written, and legacy code is often prone to bugs and errors and in need of refactoring. As it turns out, the skills of debugging and refactoring are indispensable skills for software developers to master. They are as important as writing code correctly in the first place.\n\nIn this module, we will equip you with tools and techniques which will make you more effective at debugging code, and we will walk through some strategies for refactoring code as well. In addition, we will provide a number of challenges where there is some mistake in the code that you must find, debug and fix. There will be other challenges to give you specific practice refactoring existing code to change the design or organization.\n\nLet's dive in\\!"
        },
        {
          "id": "wMSYQIGg9",
          "type": "section",
          "title": "Refactoring",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Once code is written, it instantly becomes legacy code. As software projects evolve, requirements change and legacy code tends to quickly become outdated. Refactoring is the activity is re\\-writing previously written legacy code in order to bring it up to date, fix issues or bugs, or improve the code design or organization."
        },
        {
          "id": "tSp1Fup3m",
          "type": "media",
          "title": "Named Function Arguments",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# The Issue\n\nWhen you are writing functions you often end up accepting multiple arguments. Sometimes your function starts with 1 or 2 arguments and then later you have 4 or 5 arguments.\n\nGenerally, it can be hard to understand later what all of these arguments refer to. In addition, the function arguments lose context outside of the function definition. Consider this, for instance:\n\n```typescript\nconst user = createUser(\"Ryan\", \"Jordan\", 27, true);\n\n```\n\nWhat do `27` and `true` refer to here?\n# Named Object Arguments\n\nIn situations like this, it can be helpful to refactor the function to use a named object as an argument. For example:\n\n```typescript\nconst user = createUser({\n    firstName: \"Ryan\",\n    lastName: \"Jordan\",\n    age: 27,\n    paid: true,\n});\n\n```\n\nThis is much more readable and makes it clear what is happening. As a rule of thumb, if you have a function which has more than 2 or 3 arguments it may be a good idea to consider refactoring it to use a named function.\n\nIn addition, if you find yourself using optional arguments or default parameters or otherwise passing in boolean values directly into a function it may be useful to refactor it to use a named object instead.\n# Takeaway\n\nYou may not feel the need to do this immediately when you first write a function, but the important thing to consider is what you \\(or your future colleague\\) will think when they are looking at that function or using that function a few months or years later. Using named object arguments can make your code much more clear, readable, and understandable."
        },
        {
          "id": "N6tKjcjE9",
          "type": "typescript",
          "title": "Refactor a Function to use an Object Argument",
          "instructions": "In the editor below the `createPerson` function accepts 6 arguments. Refactor it to use a single object as an argument. As a bonus, create a new class for the newly created person instead of just returning an object directly.",
          "testCode": "test(\"`createPerson` should be refactored to accept a single object with named fields and return an `IPerson`.\", () => {\n  const person = {\n    firstName: \"Jim\",\n    lastName: \"Lewis\",\n    age: 15,\n    email: \"jim@mail.com\",\n    profession: \"Carpenter\",\n    isMember: true,\n  };\n  const jim = createPerson(person);\n  expect(typeof jim.firstName).toBe(\"string\");\n  expect(typeof jim.lastName).toBe(\"string\");\n  expect(typeof jim.age).toBe(\"number\");\n  expect(typeof jim.email).toBe(\"string\");\n  expect(typeof jim.member).toBe(\"boolean\");\n  expect(typeof jim.profession).toBe(\"string\");\n  expect(typeof jim.getName).toBe(\"function\");\n  expect(typeof jim.getAge).toBe(\"function\");\n  expect(typeof jim.getEmail).toBe(\"function\");\n  expect(typeof jim.getProfession).toBe(\"function\");\n  expect(typeof jim.isMember).toBe(\"function\");\n});\n\ntest(\"The `getName` method should return the given person's first and last name together.\", () => {\n  const person = {\n    firstName: \"Jim\",\n    lastName: \"Lewis\",\n    age: 15,\n    email: \"jim@mail.com\",\n    profession: \"Carpenter\",\n    isMember: true,\n  };\n  const jim = createPerson(person);\n  expect(jim.getName()).toBe(\"Jim Lewis\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/xtH9RFzFon4",
          "starterCode": "interface IPerson {\n  firstName: string;\n  lastName: string;\n  age: number;\n  profession: string;\n  member: boolean;\n  email: string;\n  getName(): string;\n  getAge(): number;\n  getEmail(): string;\n  getProfession(): string;\n  isMember(): boolean;\n}\n\n/**\n * Having more than 2 or 3 arguments to a function is generally not preferable,\n * because it becomes less clear when you call the function what all the arguments\n * correspond to.\n * \n * Instead of this, refactor the function to accept a single object argument which\n * has named fields for each of the required parameters.\n * \n * You will also need to refactor the function body.\n */\nconst createPerson = (\n  firstName: string,\n  lastName: string,\n  age: number,\n  email: string,\n  profession: string,\n  isMember: boolean,\n) => {\n  /**\n   * Extra challenge: Refactor this inline object declaration to use a class\n   * instead.\n   */\n  const person: IPerson = {\n    firstName,\n    lastName,\n    age,\n    email,\n    profession,\n    member: isMember,\n    getName() {\n      return `${firstName} ${lastName}`;\n    },\n    getAge() {\n      return age;\n    },\n    getEmail() {\n      return email;\n    },\n    getProfession() {\n      return profession;\n    },\n    isMember() {\n      return isMember;\n    }\n  };\n\n  return person;\n};\n\n// Change code here:\nconst person = createPerson(\"Jim\", \"Lewis II\", 15, \"jim@mail.com\", \"Carpenter\", true);\nconsole.log(person.getName());",
          "solutionCode": "interface IPerson {\n  firstName: string;\n  lastName: string;\n  age: number;\n  profession: string;\n  member: boolean;\n  email: string;\n  getName(): string;\n  getAge(): number;\n  getEmail(): string;\n  getProfession(): string;\n  isMember(): boolean;\n}\n\ninterface CreatePersonArguments {\n  firstName: string,\n  lastName: string,\n  age: number,\n  email: string,\n  profession: string,\n  isMember: boolean;\n}\n\nclass PersonClass implements IPerson {\n  firstName: string;\n  lastName: string;\n  age: number;\n  email: string;\n  profession: string;\n  member: boolean;\n\n  constructor(args: CreatePersonArguments) {\n    this.firstName = args.firstName;\n    this.lastName = args.lastName;\n    this.age = args.age;\n    this.email = args.email;\n    this.profession = args.profession;\n    this.member = args.isMember;\n  }\n\n  getName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n  getAge() {\n    return this.age;\n  }\n  getEmail() {\n    return this.email;\n  }\n  getProfession() {\n    return this.profession;\n  }\n  isMember() {\n    return this.member;\n  }\n}\n\n/**\n * Create a new person class using an object with named parameter fields.\n */\nconst createPerson = (args: CreatePersonArguments) => {\n  const person = new PersonClass(args);\n  return person;\n};\n\n// Change code here:\nconst person = createPerson({\n  firstName: \"Jim\",\n  lastName: \"Lewis\",\n  age: 15,\n  email: \"jim@mail.com\",\n  profession: \"Carpenter\",\n  isMember: true,\n});\n\nconsole.log(person.getName());",
          "content": ""
        },
        {
          "id": "PuyOOH@hoo",
          "type": "typescript",
          "title": "Code Should be DRY",
          "instructions": "The programming phrase \"DRY\" stands for **Don't Repeat Yourself** and refers to the principle that you want to try to avoid repeating code. If you ever find yourself writing the same code two or three times, you should consider refactoring it into a helper function or class.\n\nRepeated code is more error\\-prone, more expensive to maintain, and, simply, just doesn't make sense. Once you've solved something one time there is no need to solve it again\\! If you ever catch yourself copy\\-pasting some code you have previously written, ask yourself if there is a way to refactor it to avoid repeating it.\n\nThe code in the editor could be consolidated to clean it up a lot. See if you can refactor it in a way which satisfies the tests\\!",
          "testCode": "test(\"There should only be 1 call to the console `log` method.\", () => {\n  // console.log has already been replaced by our interceptor...\n  const code = __user_code_string__.match(/__interceptConsoleLog/g);\n  expect(code.length).toBe(1);\n});\n\ntest(\"All the items in the `cart` should be logged to the console.\", () => {\n  const logs = __secret_log_box;\n  for (const x of cart) {\n    expect(inBox(logs, x));\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/WRxbBDePmjc",
          "starterCode": "const cart = [\n  \"apples\",\n  \"oranges\",\n  \"blueberries\",\n  \"bagels\",\n  \"crackers\",\n  \"cereal\",\n  \"milk\",\n  \"cookies\",\n];\n\nconsole.log(cart[0]);\nconsole.log(cart[1]);\nconsole.log(cart[2]);\nconsole.log(cart[3]);\nconsole.log(cart[4]);\nconsole.log(cart[5]);\nconsole.log(cart[6]);\nconsole.log(cart[7]);\n",
          "solutionCode": "const cart = [\n  \"apples\",\n  \"oranges\",\n  \"blueberries\",\n  \"bagels\",\n  \"crackers\",\n  \"cereal\",\n  \"milk\",\n  \"cookies\",\n];\n\n/**\n * We can create a helper function to abstract the action\n * of logging items in any list.\n */\nconst logItemsInList = (list: any[]): void => {\n  list.forEach((x) => console.log(x));\n};\n\nlogItemsInList(cart);\n",
          "content": ""
        },
        {
          "id": "ziawzuFty",
          "type": "typescript",
          "title": "Variable Naming Conventions",
          "instructions": "It's important to give any named values in a program intelligible names so your future self and your colleagues will have a better idea of what the intent of the code is. However... naming is one of the [three hard problems of Computer Science](https://martinfowler.com/bliki/TwoHardThings.html).\n\nThe naming conventions in the editor below are... well, we will leave it to you to form your own judgement. Work with the code and see if you can come up with some better names. But, don't stop there\\! Make any improvements you like until you are satisfied with the result.",
          "testCode": "test(\"The `variable` names `l` `r` `x`, at the very least, should be changed to something more descriptive.\", () => {\n  expect(() => {\n    expect(l).toBe(undefined);\n  }).toThrow();\n  expect(() => {\n    expect(r).toBe(undefined);\n  }).toThrow();\n  expect(() => {\n    expect(x).toBe(undefined);\n  }).toThrow();\n});\n\ntest(\"The variable `r` should be changed to `result` and it should include only the items from the list of numbers which are larger than the `max` value.\", () => {\n  for (const x of result) {\n    expect(x > max).toBe(true);\n  }\n});\n",
          "videoUrl": "https://www.youtube.com/embed/GCeZhfI2P6M",
          "starterCode": "const l = [1, 2, 5, 7, 8, 10, 105, 550, 9, 82, 13, 75, 83];\nconst max = 50;\n\nlet r = [];\nlet x = l.length;\n\nfor (let i = 0; i < x; i++) {\n  const c = l[i];\n  if (c > max) {\n    r[r.length] = c;\n  }\n}\n",
          "solutionCode": "const list = [1, 2, 5, 7, 8, 10, 105, 550, 9, 82, 13, 75, 83];\nconst max = 50;\n\n/**\n * We can clean up the code by abstracting the filtering logic\n * into a function, renaming poorly named variables, and making\n * a few other improvements.\n */\nconst filterListByMaxValues = (list: any[], max: number) => {\n  let result = [];\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i];\n    if (item > max) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nconst result = filterListByMaxValues(list, max);\n",
          "content": ""
        },
        {
          "id": "o2LtOPfgxo",
          "type": "typescript",
          "title": "Refactoring Repeated Code in Tic Tac Toe",
          "instructions": "Imagine we have a Tic Tac Toe game \\(yes, we love this game\\), and the game is finished and we want to reset the game board. We could go through the board and manually reset every cell on the board, however this is tedious, error\\-prone, and doesn't respect the DRY principle. Moreover, this might seem ok for a simple 3\\-by\\-3 Tic Tac Toe board, but what if it was a different game with a larger or more complex board structure?\n\nRefactor the `resetTicTacToeBoard` function in the editor to avoid manually updating every cell position on the board. Your refactored function should be flexible enough to reset _any_ sized 2\\-dimensional grid such that every cell is reset to contain `null`.",
          "testCode": "test(\"The `resetTicTacToeBoard` function should be defined.\", () => {\n  expect(typeof resetTicTacToeBoard).toBe(\"function\");\n});\n\ntest(\"The `resetTicTacToeBoard` function should reset a given Tic Tac Toe board, or any 2-dimensional grid, so every cell is reset to `null`.\", () => {\n  let board = [\n    [\"X\", \"O\", \"O\"],\n    [\"X\", \"X\", \"O\"],\n    [null, null, \"X\"],\n  ];\n  let result = resetTicTacToeBoard(board);\n  let expected = [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n  ];\n  expect(result).toEqual(expected);\n\n  board = [\n    [\"X\", \"O\", \"O\", \"Y\", \"A\"],\n    [\"X\", \"X\", \"O\", \"L\", \"M\"],\n    [null, null, \"X\", null, \"hi\"],\n  ];\n  result = resetTicTacToeBoard(board);\n  expected = [\n    [null, null, null, null, null],\n    [null, null, null, null, null],\n    [null, null, null, null, null],\n  ];\n  expect(result).toEqual(expected);\n\n  board = [[\"X\"]];\n  result = resetTicTacToeBoard(board);\n  expected = [[null]];\n  expect(result).toEqual(expected);\n\n  board = [[]];\n  result = resetTicTacToeBoard(board);\n  expected = [[]];\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/ztmT-2Aohk0",
          "starterCode": "type Cell = \"X\" | \"O\" | null;\ntype Board = Cell[][];\n\nconst resetTicTacToeBoard = (board: Board): Board => {\n  // Reset top row\n  board[0][0] = null;\n  board[0][1] = null;\n  board[0][2] = null;\n\n  // Reset middle row\n  board[1][0] = null;\n  board[1][1] = null;\n  board[1][2] = null;\n\n  // Reset bottom row\n  board[2][0] = null;\n  board[2][1] = null;\n  board[2][2] = null;\n\n  return board;\n};\n\nconst board: Board = [\n  [\"X\", \"O\", \"O\"],\n  [\"X\", \"X\", \"O\"],\n  [null, null, \"X\"],\n];\n\nconst result = resetTicTacToeBoard(board);\nconsole.log(result);\n",
          "solutionCode": "type Cell = \"X\" | \"O\" | null;\ntype Board = Cell[][];\n\nconst resetTicTacToeBoard = (board: Board): Board => {\n  // A nested for loop can iterate through every cell on the board\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      board[i][j] = null;\n    }\n  }\n\n  return board;\n};\n\nconst board: Board = [\n  [\"X\", \"O\", \"O\"],\n  [\"X\", \"X\", \"O\"],\n  [null, null, \"X\"],\n];\n\nconst result = resetTicTacToeBoard(board);\nconsole.log(result);\n",
          "content": ""
        },
        {
          "id": "GkXns72X7Q",
          "type": "section",
          "title": "Debugging",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nYou've already had plenty of hands\\-on experience debugging. Whenever code you write has an issue, of any kind, you will find yourself involved in the task of debugging to try to locate the issue and fix it.\n# Debugging Strategies\n\nDebugging is a hard skill to master. Software can break in a variety of creative ways and it takes a while to develop a good debugging sense. Sometimes the bug is from the code you've written, sometimes it is from something external to your application which is behaving in a way you didn't expect. Debugging is a skill you will develop after a lot of real world practice, but it helps to have a process or plan to deal with bugs. Here are a few steps:\n\n1. **Reproduce the bug:** You want to reproduce the error or bug so that you can determine the cause and evaluate if any solution you find works. This usually involves running your app in a local or test environment and trying to replicate the conditions which produced the bug in the first place. This can be challenging for many production issues, however, since they may be reported to you through error or crash reports or from user reports which may not include enough context to fully understand how the original bug was caused.\n1. **Determine the cause:** You want to try to use logging and debugging tools to determine what caused the bug: what code failed, where, how, and why. An important rule to keep in mind here is that the bug could be either within your own code or external to your application. Always be open to both possibilities until you find the real cause, because, if the bug is external to your application you could waste a lot of time combing through code you have written when in fact it has no issue.\n1. **Develop a fix:** Once you can reproduce the bug and you have determined why it is happening you want to develop and test a fix for that bug. This usually involves manually testing at first to ensure that the bug is in fact fixed and may involve refactoring some code to implement the fix. Then, it can also be smart to write tests to cover this new bug case to ensure it does not happen again in the future.\n1. **Deploy the bug fix:** Finally, you of course want to deploy the bug fix to your production application so your users can enjoy using your product again.\n\n# A Debugging Story\n\nTo give you an idea of how tricky debugging can be sometimes, here is an example we recently encountered with the Pairwise app itself. We found from some user feedback that the app was not loading on mobile. At first, we dismissed this thinking it was temporary or a network issue, but more users bought it up. I could not reproduce the issue on my phone, but some of the users indicated they were using iOS devices. I tested the app on iOS using the iOS Simulator and found that it did, in fact, not load. We do have UI tests for the Pairwise app, but none which try to run the app on an iOS device, so we were totally blind to this issue until users alerted us. I tried to investigate what the issue was by inspecting the console logs on Safari mobile in the iOS Simulator, where I found some error like this:\n\n```\nSyntaxError: Invalid regular expression: invalid group specifier name\n\n```\n\nSearching this on Google with some additional context about an app not loading on iOS I managed to find some StackOverflow issues pointing to a regular expression problem which could cause this which was specific to iOS. I thought backwards to any recent code which may have introduced a new regex in our codebase and remembered a specific one and went back to find that commit in the merged PR. Then, I quickly changed that regex to something innocent which would definitely work and tried to load the app in the simulator again.\n\nIt worked.\n\nIn the end, the issue was because of an unsupported regex feature we tried to use which the JavaScript runtime on iOS is incompatible with, and the result is that the entire app would completely fail to load.\n\nThis story really illustrates many aspects of debugging: Obscure issues which are hard to test and reproduce and only get reported by some users and are usually due to failures of code external to your application. Also, it illustrates the idea that your code can often work in one environment and not another, i.e. in this case the app loaded on my Android phone so at first I thought there was no issue.\n\nThis is just one example, as you continue in software development you will surely find many crazy bug stories of your own\\!"
        },
        {
          "id": "vbjDVyVCV",
          "type": "typescript",
          "title": "Debug the Sanitize Object Function",
          "instructions": "The code in the editor has a bug. Find it and fix it to get the tests passing\\!",
          "testCode": "test(\"The `sanitizeObject` function should be defined.\", () => {\n  expect(typeof sanitizeObject).toBe(\"function\");\n});\n\ntest(\"The `sanitizeObject` function should sanitize objects according to the provided `sanitizeFn` and return the new object as a result.\", () => {\n  let input = { a: \"a\", b: \"b\", c: null };\n  let result = sanitizeObject(input, (x) => x !== null);\n  let expected = {\n    a: \"a\",\n    b: \"b\",\n  };\n  expect(result).toEqual(expected);\n\n  input = { a: \"a\", b: \"b\", c: null };\n  result = sanitizeObject(input, (x) => x !== \"a\");\n  expected = {\n    b: \"b\",\n    c: null,\n  };\n  expect(result).toEqual(expected);\n\n  input = { a: \"a\", b: \"b\", c: null };\n  result = sanitizeObject(input, (x) => x !== undefined);\n  expected = {\n    a: \"a\",\n    b: \"b\",\n    c: null,\n  };\n  expect(result).toEqual(expected);\n\n  input = { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8 };\n  result = sanitizeObject(input, (x) => x > 4);\n  expected = {\n    e: 5,\n    f: 6,\n    g: 7,\n    h: 8,\n  };\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/DYoXi6cAl1A",
          "starterCode": "const sanitizeObject = (\n  obj: { [key: string]: any },\n  sanitizeFn: (value: any) => boolean\n) => {\n  const sanitizedObject: any = {};\n\n  Object.entries(obj).forEach(([key, value]) => {\n    if (sanitizeFn(value)) {\n      sanitizedObject[key] = value;\n    }\n  });\n\n  return sanitizedObject;\n};\n",
          "solutionCode": "const sanitizeObject = (\n  obj: { [key: string]: any },\n  sanitizeFn: (value: any) => boolean\n) => {\n  const sanitizedObject: any = {};\n\n  Object.entries(obj).forEach(([key, value]) => {\n    if (sanitizeFn(value)) {\n      sanitizedObject[key] = value;\n    }\n  });\n\n  // Return the sanitized object, not the original one!\n  return sanitizedObject;\n};\n",
          "content": ""
        },
        {
          "id": "XjkSEgt2g",
          "type": "typescript",
          "title": "Debug the Reverse Iterator",
          "instructions": "A function is written below to iterate through a list backwards and construct a new list, without modifying the original list. But, something is wrong with it... your job is to find the issue and fix it\\!",
          "testCode": "test(\"The `reverseIterator` function should be defined.\", () => {\n  expect(typeof reverseIterator).toBe(\"function\");\n});\n\ntest(\"The `reverseIterator` function should return a new list without modifying the original list.\", () => {\n  const list = [1, 2, 3];\n  const result = reverseIterator(list);\n  expect(list !== result).toBe(true);\n});\n\ntest(\"The `reverseIterator` function should return a new list with the items in the original list in reverse order.\", () => {\n  let list = [1, 2, 3];\n  let result = reverseIterator(list);\n  let expected = [3, 2, 1];\n  expect(list !== result).toBe(true);\n  expect(result).toEqual(expected);\n\n  list = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n  result = reverseIterator(list);\n  expected = [\"e\", \"d\", \"c\", \"b\", \"a\"];\n  expect(list !== result).toBe(true);\n  expect(result).toEqual(expected);\n\n  list = [true, false, null, undefined, { hello: \"blah\" }];\n  result = reverseIterator(list);\n  expected = [{ hello: \"blah\" }, undefined, null, false, true];\n  expect(list !== result).toBe(true);\n  expect(result).toEqual(expected);\n\n  list = [];\n  result = reverseIterator(list);\n  expected = [];\n  expect(list !== result).toBe(true);\n  expect(result).toEqual(expected);\n\n  list = [null];\n  result = reverseIterator(list);\n  expected = [null];\n  expect(list !== result).toBe(true);\n  expect(result).toEqual(expected);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/1M5NK9A8r1Q",
          "starterCode": "const reverseIterator = (list: any[]) => {\n  const reverseOrder = [];\n  for (let i = list.length; i > 0; i--) {\n    reverseOrder.push(list[i]);\n  }\n  return reverseOrder;\n};\n",
          "solutionCode": "const reverseIterator = (list: any[]) => {\n  // NOTE: Another solution could be the following:\n  // return list.slice().reverse();\n\n  // Fix the off-by-one array indexing:\n  const reverseOrder = [];\n  for (let i = list.length - 1; i >= 0; i--) {\n    reverseOrder.push(list[i]);\n  }\n  return reverseOrder;\n};\n",
          "content": ""
        },
        {
          "id": "vfkUh@b$j",
          "type": "typescript",
          "title": "Debug the Truth Teller",
          "instructions": "A function is written below to count the number of fields in an object which are `true`. But, it does not return the correct count right now... what could the problem be?",
          "testCode": "test(\"The `truthTeller` function should be defined.\", () => {\n  expect(typeof truthTeller).toBe(\"function\");\n});\n\ntest(\"The `truthTeller` function should be return the correct count for object fields which are set to the boolean `true`.\", () => {\n  let input = { a: \"a\", b: true, c: true };\n  let result = truthTeller(input);\n  expect(result).toBe(2);\n\n  input = { a: \"a\", b: true, c: true, d: \"bleg\", e: 5, g: 10, m: true };\n  result = truthTeller(input);\n  expect(result).toBe(3);\n\n  input = { a: \"a\", b: \"true\" };\n  result = truthTeller(input);\n  expect(result).toBe(0);\n\n  input = { a: \"a\", b: \"true\", c: true };\n  result = truthTeller(input);\n  expect(result).toBe(1);\n});\n\ntest(\"The `truthTeller` function should count deeply nested objects correctly, and return a count of all the `true` values in the object.\", () => {\n  let input = { a: \"a\", b: true, c: true, d: { x: true, y: { v: true } } };\n  let result = truthTeller(input);\n  expect(result).toBe(4);\n\n  input = {\n    a: \"a\",\n    b: true,\n    c: true,\n    d: \"bleg\",\n    e: 5,\n    g: 10,\n    m: true,\n    x: { r: true, y: { z: true, bar: [1, 2, 3, { h: true }] } },\n  };\n  result = truthTeller(input);\n  expect(result).toBe(6);\n\n  input = { a: { b: { c: { d: { e: true } } } } };\n  result = truthTeller(input);\n  expect(result).toBe(1);\n\n  input = { a: { b: { c: { d: { e: \"true\" } } } } };\n  result = truthTeller(input);\n  expect(result).toBe(0);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/rCpQ5oHbfPg",
          "starterCode": "const truthTeller = (obj: { [key: string]: any }): number => {\n  let count = 0;\n\n  for (const [k, v] of Object.entries(obj)) {\n    if (v == true) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n",
          "solutionCode": "const truthTeller = (obj: { [key: string]: any }): number => {\n  let count = 0;\n\n  for (const [k, v] of Object.entries(obj)) {\n    // Recurse on non-primitive fields to handle nested objects:\n    if (typeof v === \"object\") {\n      count += truthTeller(v);\n    } else {\n      // Use triple equals to ensure equality checks are correct\n      if (v === true) {\n        count += 1;\n      }\n    }\n  }\n\n  return count;\n};\n",
          "content": ""
        },
        {
          "id": "lgw1sk$Js",
          "type": "typescript",
          "title": "Debug the Tree Sum Problem",
          "instructions": "The function `treeSum` should explore a tree data structure, where all the nodes contain a `value` field which is a number, and return the sum of all of these values. But... as you may expect the function is not working correctly\\! What could the problem be?",
          "testCode": "test(\"The `treeSum` function should be defined.\", () => {\n  expect(typeof treeSum).toBe(\"function\");\n});\n\ntest(\"The `treeSum` function should count all the values in the tree correctly.\", () => {\n  class Node {\n    value = null;\n    left = null;\n    right = null;\n    constructor(value) {\n      this.value = value;\n    }\n  }\n\n  const tree = new Node(5);\n  const left = new Node(10);\n  const right = new Node(20);\n  tree.left = left;\n  tree.right = right;\n\n  const result = treeSum(tree);\n  expect(result).toBe(35);\n\n  expect(treeSum(new Node(0))).toBe(0);\n  expect(treeSum(new Node(100))).toBe(100);\n  expect(treeSum(left)).toBe(10);\n  expect(treeSum(right)).toBe(20);\n\n  const tallTree = new Node(100);\n  const one = new Node(20);\n  const two = new Node(40);\n  const three = new Node(60);\n  const four = new Node(80);\n  const five = new Node(100);\n  const six = new Node(200);\n\n  tallTree.right = one;\n  one.right = two;\n  two.right = three;\n  three.right = four;\n  four.right = five;\n  five.right = six;\n\n  expect(treeSum(tallTree)).toBe(600);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/YJN-w6X5fRM",
          "starterCode": "interface TreeNode {\n  value: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n}\n\nconst treeSum = (tree: TreeNode): number => {\n  let count = 0;\n\n  if (tree.left !== null) {\n    count += treeSum(tree.left);\n  }\n\n  if (tree.right !== null) {\n    count += treeSum(tree.right);\n  }\n\n  return count;\n};\n",
          "solutionCode": "interface TreeNode {\n  value: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n}\n\nconst treeSum = (tree: TreeNode): number => {\n  let count = 0;\n\n  // We have to count the current value in this tree node, of course...\n  count += tree.value;\n\n  if (tree.left !== null) {\n    count += treeSum(tree.left);\n  }\n\n  if (tree.right !== null) {\n    count += treeSum(tree.right);\n  }\n\n  return count;\n};\n",
          "content": ""
        },
        {
          "id": "yEly9kNYj",
          "type": "typescript",
          "title": "Debugging a Linked List Traversal",
          "instructions": "A [linked list](https://en.wikipedia.org/wiki/Linked_list#:~:text=In%20computer%20science,%20a%20linked,which%20together%20represent%20a%20sequence.) is a data structure similar to an array, in which each item contains a reference to the next item. In the editor below there is a function `listToArray` which should take a linked list and reduce it to a plain array contain all of the `value`s in the linked list. But... there are some problems with the code as it is written currently\\!",
          "testCode": "test(\"The `listToArray` function should be defined.\", () => {\n  expect(typeof listToArray).toBe(\"function\");\n});\n\ntest(\"The `listToArray` function should be correctly reduce a linked list to an array of the list values.\", () => {\n  class LL {\n    value = null;\n    next = null;\n    constructor(value) {\n      this.value = value;\n    }\n  }\n\n  const list = new LL(100);\n  const next = new LL(500);\n  list.next = next;\n  next.next = new LL(30);\n  let expected = [100, 500, 30];\n  let result = listToArray(list);\n  expect(result).toEqual(expected);\n\n  const a = new LL(1);\n  const b = new LL(2);\n  const c = new LL(3);\n  const d = new LL(4);\n  const e = new LL(5);\n  const f = new LL(6);\n  const g = new LL(7);\n  const h = new LL(8);\n  const i = new LL(9);\n  a.next = b;\n  b.next = c;\n  c.next = d;\n  d.next = e;\n  e.next = f;\n  f.next = g;\n  g.next = h;\n  h.next = i;\n\n  result = listToArray(a);\n  expected = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  expect(result).toEqual(expected);\n\n  expect(listToArray(null)).toEqual([]);\n  expect(listToArray(new LL(0))).toEqual([0]);\n  expect(listToArray(new LL(1001))).toEqual([1001]);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/56y-qz1hoo4",
          "starterCode": "interface List<T extends {}> {\n  value: T;\n  next: List<T> | null;\n}\n\nconst listToArray = (linkedList: List<any>): any[] => {\n  const result = [];\n\n  let current = linkedList.value;\n  while (current.next !== null) {\n    result.push(current.value);\n    current = current.next;\n  }\n\n  return result;\n};\n",
          "solutionCode": "interface List<T extends {}> {\n  value: T;\n  next: List<T> | null;\n}\n\nconst listToArray = (linkedList: List<any>): any[] => {\n  const result = [];\n\n  // Traversing linked lists can be tricky!\n  let current: List<any> | null = linkedList;\n  while (current !== null) {\n    result.push(current.value);\n    current = current.next;\n  }\n\n  return result;\n};\n",
          "content": ""
        },
        {
          "id": "C3aOJmAu3",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Welcome to the Debugging & Refactoring Projects\\!\n\nHere you will get some practice debugging and refactoring code on some real world projects, including some of the projects you have previously completed in the course."
        },
        {
          "id": "5VL9dBK0M",
          "type": "project",
          "title": "Refactor a Legacy Project",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, choose one of your earlier completed projects and revisit it and try to refactor the code you wrote before. As you go through the journey of writing code, you will learn a lot and it's often a surprising experience to return to code you wrote in the past. You may be surprised by what you have written before\\!\n\nRevisit one of the earlier projects \\(the TypeScript Programming projects are a great choice, since those were quite early\\) and review your code now that you have progressed much further through the curriculum. Ask yourself some questions:\n\n* Does the code still make sense to you?\n* Is it easy to read and understand?\n* Is it well written and well designed?\n* Would you do anything differently today?\n* Would it be easy to change?\n* Is it extensible?\n* Is it tested?\n* Is it well documented?\n\n\nRefactor your code based on what you have learned. You can even go as far as completely re\\-writing the project from scratch. This is often a perfectly viable refactoring strategy—sometimes you just need a clean slate to start with some fresh ideas rather than trying to adjust some brittle, bug\\-ridden legacy code.\n\n> ++Remember:++ One of the sure things about software is that it _will_ change in the future\\! The project/product/company/user/customer requirements and your understanding of them always tends to change over time which forces your code to change along the way. Well designed code is code which is _easy to refactor and change in the future._\n\nThe important takeaway here is about the _process_ of refactoring. This is an important skill to develop and the best way is through practice. Try to first review the code you want to refactor, then develop a plan and some ideas for how you want to refactor it, and then try to execute that plan in a methodical way. Ideally, you should be using version control and breaking down your changes into small, clear commits.\n\nGood luck\\!"
        },
        {
          "id": "j@5yd8P9$",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these special topics, we will demonstrate some other techniques for debugging code and present some fascinating debugging war stories. We're sure you will enjoy\\!"
        }
      ]
    },
    {
      "free": false,
      "id": "G8v0iMpm",
      "title": "Delivery & Deployment",
      "challenges": [
        {
          "free": true,
          "id": "Vy435oZN",
          "type": "section",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# What is Software Deployment?\n\nIt's not enough to just write an app. You have to deploy your code into a production environment. For modern software applications, this entails quite a lot of detail and complexity which is not always apparent to someone starting at. For instance, consider some of the following points:\n\n* Production software needs to be deployed in a reliable way. What if your server crashes? How do you handle downtime? How do you handle high\\-traffic scenarios? Can you server setup scale to meet increases in demand?\n* How do you deal with errors in production? Do you have logging, monitoring, reporting, and alerting setup so you can be aware of errors and have tools to track them down?\n* How is your database set up and deployed? Do you have backups? Do you have read replicas? Is it secure? How does your application access the database?\n* How is your client application served to users? Is caching involved?\n* How is your software deployed? Modern software teams like to ship many updates to production code. Are your deployments automated, or do you have someone pushing the \"big red button\"?\n\n\nAs you can see, there is quite a lot involved here. And, realistically, these are just some of the bare minimum requirements you would need to consider for a production setup. Many more complex systems go way beyond this.\n---\n# DevOps\n\nBroadly, we are referring to these topics as software delivery and deployment, but you may also see them referred to by other names as well, e.g. \"DevOps\" \\(development and operations\\), \"infrastructure\", or CI/CD \\(continuous integration and continuous deployment\\). Overall, they refer to the subject area of how software goes from development to deployment in production and how the production environment is managed and maintained. This is a large and important area of modern software development, which is increasing important for any developer to be familiar with.\n# Modern Deployments use Cloud Infrastructure\n\nThe emergence of cloud computing has seen most modern software applications move from traditional deployment setups to cloud infrastructure. Computing infrastructure has become virtualized and commoditized and is now available at mass scale and low cost to software developers and most of the major technology companies offer cloud hosting solutions now: AWS with Amazon, GCP with Google, Azure with Microsoft, and so on. Only in a few instances do companies still run and manage their own data centers directly.\n\nDeploying and hosting applications, services, and databases through cloud providers has numerous advantages:\n\n* Infrastructure maintenance and costs are abstracted away.\n* Hardware risk and failures are abstracted away.\n* Scaling is built\\-in.\n* Providers have service reliability guarantees.\n* Certain features can be switched on and off, as needed, without requiring substantial infrastructure changes or expertise.\n\n\nHowever, there are also some disadvantages, such as:\n\n* Vendor lock\\-in.\n* You must learn all of the ins and outs of navigating a specific cloud providers infrastructure.\n* You no longer have full control over your services and data.\n\n\nIn this section, we will cover some of the main topics relevant to managing software deployments with a cloud setup. Because each cloud provider is different, and is likely to change over time, we will try to focus more on the high level concepts and less on the implementation details specific to one provider or another. The topics we will cover include:\n\n* DevOps\n* Cloud Hosting\n* CI/CD\n* Logging, Monitoring, and Reporting\n* Deploying an application with Heroku\n* Deploying a frontend with Netlify\n* Docker\n\n"
        },
        {
          "id": "bKhH6ouY3",
          "type": "media",
          "title": "The Evolution of Software Deployment",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nThis Pairwise course is primarily concerned with building and deploying applications which follow the web client\\-server model. As such, this module on software deployment is focused on deployments in the context of client and server web applications.\n\nSince the emergence of the internet in the 1990s, there have been many significant evolutions in how website and later web applications were hosted and deployed. Basically, developers have transitioned from deploying and hosting applications on physical machines they have direct control of, to virtual machines which they have remote access to, to virtual cloud infrastructure with a variety of managed services. Here, we will give a brief overview of preview deployment methodologies before we dive in to focus on how modern deployment works with cloud infrastructure.\n\nAs we discuss the evolution of software deployments it is helpful to create two conceptual categories in your head:\n\n* **Hardware**: How have the processes and management of the physical hardware which runs the software changed over time?\n* **Software**: How have processes around deploying and managing the actual software changed over time?\n\n\nBoth the physical management of hardware which runs client\\-server applications and the processes around actually organizing and deploying the software of the applications themselves have changed considerably over the years.\n# Traditional Deployments and VPS\n\nBy and large, in the early days of the web server applications were deployed and hosted on machine developers had direct access to. This might literally be a dedicated computer you have sitting at home. You would setup up and run your server and expose this server to the public internet. Over time, companies began to abstract away this hardware infrastructure and provide it as a service. IT hosting companies provided computing hardware which developers could access virtually. The rise of virtual private server \\(VPS\\) computing improved the software deployment process considerably and this is still a common approach many developers will use, especially for small scale projects. For instance, [Digital Ocean](https://www.digitalocean.com/products/droplets/) is a popular choice for developers to deploy software using a VPS today.\n\nThere are some clear benefits to this transition. Running a VPS tends to be very cheap and service providers usually provide various service level agreements \\(SLAs\\) for example uptime guarantees. In contrast, if you were to deploy software on a physical machine you controlled you would not only have to pay for the machine itself and the cost of maintaining it and the electricity to run it but also deal with various risks such as power outages.\n\nBut how were actual client\\-server applications deployed on a physical machine or VPS? The answer is mostly in the same way and quite manually. Generally, the traditional approach to deploying these applications was very ad hoc. You would literally install the various applications and utilities you need directly on the machine \\(e.g. you may need NodeJS to run a NodeJS app\\) and then you would just run the server. For a VPS, this would involve ssh'ing into the machine, installing the software your app needs to run, and then running the app. If you have a client application, you would need to move the static files for you application to you VPS and then run a server or reverse proxy to serve this static website content.\n\nBasically, you would just repeat the same manual approach you would use to originally develop the application in your local development environment on the production machine where you want to host the production application.\n\nAs you may guess... this approach is incredibly problematic. What are the problems?\n\n* The production environment is not well defined. You may have some software or tools you install but then forget about later. What if you have to re\\-create the same production environment on another machine? Or locally, to debug some issue? It's very hard to maintain consistency between different environments.\n* There is no clear way to manage the environment configuration. At best you can record setup instructions, but there is no clear process to ensure environments remain configured correctly.\n* It's hard to collaborate. Because the software deployment context has no clear configuration, a colleague will have to go through the same ad hoc steps for setting up and running your application.\n\n\nThis manual approach to software deployment works decently well for small applications and some developers still prefer to do this \\(or perhaps old habits die hard\\). However, for more complex software applications it becomes very unworkable. And you generally will not find any modern software teams which deploy software in this manner anymore.\n\nOver time, this style of manual software deployment has been largely replaced by containerization and cloud services infrastructure.\n# The Transition to Cloud Infrastructure\n\nAmazon pioneered the way before into cloud computing with the development of AWS in the mid 2000s. Today, several of the major tech companies have cloud service offerings: GCP from Google, Azure from Microsoft, IBM Cloud from IBM, Alibaba Cloud from Alibaba. But what is cloud infrastructure and how is it different from a VPS?\n\nCloud services infrastructure is an extension of the concept of a VPS. With a VPS, you get a virtual computer which you can install and run software on. A VPS is effectively an abstracted version of a physical computer. Cloud infrastructure takes this step further by virtualizing and commoditizing a variety of important computing resources: e.g. servers, storage, networking, etc.\n\nFor instance, using AWS or GCP you have access to services to deploy and run a SQL database server. These services essentially give you an abstraction of a SQL database which you can quickly spin up and then connect an application to. In contrast, if you want to connect your application to a SQL database for a VPS deployment, you will probably need to install Postgres directly on your VPS and then manage running it, backing it up, monitoring it, and so on. Cloud SQL services are a major step forward in comparison.\n\nThis is a simple example, but the same is true for a variety of cloud resources, e.g. other types of databases or storage resources, networking and reverse proxies, and so on. In addition, cloud infrastructure provides very powerful scaling advantages. Many cloud services have built\\-in abilities to scale up or down as traffic to your application changes.\n# Containerization\n\nAs deployment strategies have transitioned from physical to virtual machines to cloud infrastructure services the approach for bundling and shipping software has also changed. What was needed was a way to manage software environment configurations in a reliable and consistent way. [Docker](https://www.docker.com/), and more generally the concept of \"containerization\" emerged as a solution to this problem and has become the standard solution for software environment configuration over the past ~10 years or so.\n\nThe idea of containerization is to basically create \"containers\" which have clear definitions of their environment configuration and runtime. It's basically like a virtualized computing environment with a pre\\-defined configuration which can be recreated as needed. A software environment in a box—or \"container\". Docker, for instance, uses Dockerfiles which are basically like configuration or definition files that describe how to build a container. A container is a virtualized computing environment which includes an entire operating system for running applications \\(usually a stripped down and lightweight Linux distribution like [Alpine Linux](https://en.wikipedia.org/wiki/Alpine_Linux)\\).\n\nWith the idea of containerization and the emergence of technologies like Docker, developers can define a Docker image for their application and then literally run their application in the same environment locally, or on any computer \\(e.g. Windows, Mac, or Linux\\) as they run in the cloud for their production deployment. This has been a game\\-changer for the industry.\n# Takeaways\n\nSo, what are the takeaways from this lesson? There are two key observations:\n\n* Web based client\\-server application deployments have transitioned over the past decades from deploying on physical hardware to virtual hardware to cloud infrastructure.\n* Software applications have evolved from ad\\-hoc manual installations to containerized deployments with clear configuration definitions.\n\n\nIn the next challenge, we will give a more detailed introduction of Docker before continuing on the topic of cloud infrastructure."
        },
        {
          "id": "PWVGn7tt4",
          "type": "media",
          "title": "Introduction to Docker",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\n[Docker](https://www.docker.com/why-docker) is a tool for defining reproducible programming environments using containers. Docker also you to create deterministic and reproducible environments for running your software applications, so, whether you are developing and debugging locally, running tests against your application in a CI environment, or running your app in production, you can always have a consistent base runtime environment. This makes it easy to package, test, deploy, and collaborate on software projects. Docker is basically a software tool which always you to create, manage, and run these reproducible software environments.\n# A Docker Container for NodeJS\n\nIn the beginning docker can feel a little abstract so let's jump in with a simple example. Docker uses Dockerfiles as standard definition files which describe how to build a container. These files usually given the filename `Dockerfile` and contain instructions for building a container image. Consider the following standard Dockerfile for building a NodeJS runtime container:\n\n```bash\nFROM node:12.18.1\n\nENV NODE_ENV=production\n\nWORKDIR /app\n\nCOPY [\"package.json\", \"yarn.lock\", \"./\"]\n\nRUN yarn install --production\n\nCOPY . .\n\nCMD [ \"node\", \"server.js\" ]\n\n```\n\nThese command would be defined in a dockerfile which you can build using the `docker build` command\\. To do this, you would need Docker installed on your local system. The above Dockerfile would presumably exist in a project repository for a NodeJS application. Running `docker build` would have Docker execute all of the commands in the Dockefile and build a docker image. The docker image would contain all of the code \\(including relevant scripts, source code, dependencies, etc.\\) and the runtime environment \\(operating system, supporting libraries like NodeJS, etc.\\) in order to actually run your application. Then, the command `docker run` will run the command defined by `CMD` in your Dockerfile, which in our case is `node server.js`. This would start your server, on whatever default port is configured.\n\nLet's break down each line in the above Dockerfile to see what's happening.\n\n```bash\n# This instructs Docker to use an existing base image. A\n# base image is pre-build Docker image intended to contain\n# specific dependencies. Most Docker containers use a stripped\n# down Linux OS, such as Alpine Linux. So, as you might guess\n# the following base image is just an Alpine Linux docker container\n# with NodeJS version 12.18.1 already installed.\nFROM node:12.18.1\n\n# This will set the environment variable NODE_ENV for a production\n# environment. This is a standard NodeJS convention. Alternatively,\n# this could be set to development or test for other environments,\n# or passed in from outside, if you wish.\nENV NODE_ENV=production\n\n# This defines the default working directory for the remainder\n# of the commands in the Dockerfile.\nWORKDIR /app\n\n# This instructs Docker to copy the package.json and yarn.lock\n# files into the current directory, \"./\"\n# These files will be used to then install the project dependencies,\n# in the next step.\nCOPY [\"package.json\", \"yarn.lock\", \"./\"]\n\n# Install the dependencies for production.\nRUN yarn install --production\n\n# This command copies everything from the parent directory into\n# the current directory in the Dockerfile.\nCOPY . .\n\n# The CMD command is a final command to actual run when the docker\n# image is run. The 'docker build' command will run all the commands\n# to here, and produce a ready to run Docker image. Then, the\n# 'docker run' command would take that image and run the following\n# command to start the app:\nCMD [ \"node\", \"server.js\" ]\n\n```\n# Building and Running Docker Images\n\nNow, let's look at specifically how we can build and run a Docker image. To build the above Dockerfile, we could run the command:\n\n```bash\ndocker build --tag nodejs-server .\n\n```\n\nThis is the `docker build` command where we are passing in `nodejs-server` for the `tag`, which you can think of basically as a name for the image which is being built, and then `.` to specify the context for the docker build to take place. The `.` just refers to the present directory you are running the command in, so it assumes you are currently in the directory where your source code is.\n\nOnce the image is built we can see it by runnings `docker images`, which would print out something like this:\n\n```bash\nREPOSITORY              TAG                 IMAGE ID            CREATED             SIZE\nnodejs-server           latest              42e897e5a3a1        About a minute ago  945MB\n\n```\n\nThis lists exists images which have been built and can now be run. To run our image, we can use the following command:\n\n```bash\ndocker run --publish 8000:8000 nodejs-server\n\n```\n\nWe pass in `8000:8000` to the `--publish` flag, which instructs Docker to map the `8000` port in our container to the `8000` port in our host environment. Because Docker containers are completely isolated environments, we have to explicitly expose networking ports we want to be available. Otherwise, our application would be listening on port `8000` inside the Docker container but this port would be inaccessible from the host environment. Finally, we pass in `nodejs-server` which is the name we tagged our docker image with from before. This tells Docker which image to run.\n\nRunning this command should now print our whatever startup logs you expect to see when your server starts\\! This will now have commandeered your current terminal session, so you can also run a Docker image in detached mode to run it in the background with the detached flag `-d`.\n# Managing Running Containers\n\nThere are a few other commands which are useful to manage running containers:\n\n```bash\n# This will list out all current running images.\ndocker ps\n\n# This will stop a running image.\ndocker stop <image-name>\n\n# This will restart a running image.\ndocker restart <image-name>\n\n# This removes a built image from the host machine.\ndocker rmi <image-name>\n\n```\n# Summary\n\nThese are the basics for using Docker, and the steps for running Docker for most NodeJS apps will look similar to the above. Once you have a containerized version of your application, you have a reproducible runtime environment which you can easily use to run your application. Docker has become a standard for packaging, sharing, and running software over the last decades since it was introduced in the early 2010s, and having a basic understanding of how to work with Docker is an important skill for working as a software developer today.\n"
        },
        {
          "id": "gGYkBO$Yf",
          "type": "media",
          "title": "What is DevOps?",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Software Operations\n\nIn the past, there used to be a separation between software development and software \"operations\". By operations, we mean basically the release and deployment of production software, including monitoring, error reporting, and other maintenance. These roles were typically delegated to other teams \\(not the actual development team\\). The idea of [\"DevOps\"](https://en.wikipedia.org/wiki/DevOps) i\\.e. Development Operations is to unify these roles into a single, continuous process, and empower the developers to own the release and deployment process.\n# DevOps and Automation\n\nThe main idea of DevOps is to unify software development and release, specifically using automation, to create efficient and fast release cycles. New code can be committed by development teams and then be released into production largely by automated processes, which are often defined by code which the developers themselves maintain. There should be no manual or human intervention in deployments. Instead of development teams choosing to tag and release new software at specific times, new code can be released continuously into production as development teams make progress.\n# An Example of a DevOps Workflow\n\nHow does DevOps work in practice? Let's walk through an example of how a team may use DevOps to create more efficient, automated release cycles.\n\n1. Source code is defined using source code management tools like GitHub or GitLab.\n1. Development teams work using a git workflow, and merge pull requests into a master branch.\n1. Merge commits are running through a continuous integration \\(CI\\) pipeline which runs automatically \\(e.g. using a tool like GitHub Actions\\). The CI pipeline will run various checks on the software, for instance running unit and integration tests.\n1. If all tests pass, a continuous deployment pipeline will be triggered to run through the deployment steps for the software. This might include running production builds with Docker and then uploading Docker images to a production runtime environment using a cloud provider like AWS or GCP.\n1. The production software is updated. Various monitoring and alerting tools are also in place to monitor the running production software and quickly alert development teams if new errors or problems occur.\n\n\nA process like this requires more upfront work to set up and some ongoing maintenance work, but, once configured well it should run reliably without any major problems. As you can see, the development team's ongoing involvement is only in the first two steps—that is, they are totally focused on development new features, fixing bugs, and working on the actual software which will deliver value to end users. The rest of delivery and deployment process occurs automatically after they commit code. And, a well configured pipeline should fail early whenever any problems are encountered \\(e.g. a failing test\\) and alert developers who can then address whatever issue occurred.\n# DevOps \"Culture\"\n\nMany refer to DevOps as a cultural mindset teams and organizations can adopt, rather than a distinct set of processes or rules. In general, the idea of DevOps is trying to create a unification among what is otherwise three distinct teams:\n\n* Software developers\n* Software testers / QA\n* Software operation/deployment specialists\n\n\nEach of these groups tend to have their own goals, work styles, and communication processes, especially if they already exist within an organization. DevOps is an effort to try to unify these distinct teams and roles within a single workflow or process which is enabled by a variety of automation tools. This can be challenging in many ways, but the primary objective is to:\n\n* Speed up software delivery times.\n* Remove manual/human intervention.\n* Automate testing practices.\n* Empower developers to own the release process.\n* Reduce errors and failures in software deployments.\n* Reduce time to address production bugs.\n\n# Business Objectives\n\nIt's important to step back and remember the larger context for why this is important. Many software projects are developed in the context of some business goal, i.e. most software today is developed as a new product, application, or service. As a result, the most important thing is accomplishing the business objectives and building a great product. DevOps is a workflow methodology which allows teams to build and release software more quickly, which leads to faster iteration times, faster response time to failures and issues, and faster overall time to market. This enables teams to move quickly to deliver their products, learn quickly if their assumptions were wrong, and adapt quickly when they need to.\n# Agile vs. Waterfall\n\nDevOps is generally a practice which fits into the agile software development methodology, which is a software development practice that optimizes for shipping new software releases frequently and quickly. This is in contrast to the so\\-called earlier \"waterfall\" approach, which involved long, drawn out planning sessions and detailed architecture designs where teams might spend weeks or months planning a software system, and then building it, only to deliver the end result to clients much later and discover some key assumptions were wrong. The result was slow time to market, huge sunk cost, and poorly designed products. Over time, [agile software development](https://en.wikipedia.org/wiki/Agile_software_development) emerged as a more preferred approach.\n\nAgile development basically advocates faster software development lifecycles and a customer/client/user centric model, in which teams are eliciting feedback from real users at an early stage. DevOps fits in very naturally to the agile development methodology, because DevOps is a practice which allows teams to automate software testing and delivery to enable them to quickly ship new software versions.\n"
        },
        {
          "id": "3LbUWlPlZq",
          "type": "media",
          "title": "Deployment Automation: CI/CD",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nA key aspect of DevOps is the use of continuous integration and continuous deployment \\(CI/CD\\) to automate the software release cycle. CI/CD defines a series of steps or instructions which can be run in an automated environment. These steps usually include instructions for building software, running tests, and deploying software. The main idea is to define a continuous pipeline of a series of steps your software needs to pass through before being delivered into production. These steps then occur in a cloud environment, automatically, and deliver feedback once they either succeed or fail.\n# An Example Pipeline with GitHub Actions\n\nLet's take a look at a simple CI/CD pipeline using GitHub Actions. CI/CD pipelines are defined by configuration files \\(similar to how Docker images are defined using Dockerfiles\\). These CI/CD configuration files usually live in the source code repository for your application. Here is an example CI/CD configuration file for GitHub Actions:\n\n```none\nname: Node.js CI\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Use Node.js\n      uses: actions/setup-node@v1\n      with:\n        node-version: '12.x'\n    - run: yarn install\n    - run: yarn build\n    - run: yarn test\n      env:\n        CI: true\n\n```\n\nThis workflow instructs GitHub Actions to run using the `push` trigger, which will cause this workflow to execute whenever a commit is pushed to the default branch for the associated repository. The workflow will then run on a machine as defined by `runs-on`, which in this case will use the latest Linux Ubuntu distribution. Then the real business occurs in the `steps` which defines a series of steps to execute in the workflow. These steps instruct the workflow to setup a NodeJS environment with a specific Node version \\(the last NodeJS version 12\\) and then run the `yarn` commands to install dependencies, build the project, and run tests. Alternatively, those steps could be packaged into a Docker container and the CI/CD pipeline could just build and run the same steps using Docker.\n\nThe pipeline will either succeed or fail. Based on the result, other steps can follow. For instance, a failing workflow can send a notification back to development teams that the workflow failed, a passing workflow could then trigger other steps \\(e.g. additional testing like integration tests, or a deployment release\\).\n# CI Providers\n\nThe main feature of a CI/CD platform is the ability to take an input workflow file and then execute all the defined steps in an efficient and reliable manner. There are many existing platforms which provider this service which are commonly used by developers today. We would recommend [GitHub Actions](https://github.com/features/actions), since it is natively integrated with GitHub and will be very easy to configure to run against a GitHub repo, but the following are some other options:\n\n* [CircleCI](https://circleci.com/)\n* [GitLabCI](https://docs.gitlab.com/ee/ci/)\n* [TravisCI](https://travis-ci.org/)\n* [Jenkins](https://www.jenkins.io/)\n\n# Working with CI/CD\n\nSettings up CI/CD pipelines can be tricky because your code is run in an environment which is harder to debug and inspect. In addition, CI/CD workflows can take a while to setup and run, only to fail 5 or 10 minutes into a workflow. As a result, the feedback cycle to try and fix and issue and then see if you actually fixed it or not can take a while. There are a few things which can help with this:\n\n* Review the documentation for whatever CI/CD provider you are using to understand the best practices for using that particular CI/CD service.\n* Try to use Docker where you can to setup reproducible build and test environments.\n* Try to use environment variables correct to configure your application from the external environment. Ideally, your application should be totally ignorant of the environment it runs in, so, the CI/CD workflow should run very similar to your local environment but just with different environment variables which can be easily configured externally.\n\n# CI/CD Common Workflow\n\nA common workflow for teams which use CI/CD is to have separate CI/CD pipelines for pull requests and merge commits. Pull requests will trigger a specific CI/CD pipeline which typically runs a full build and executes tests for the software in the branch which the PR is opened for. If all the checks in this pipeline pass, the PR is valid to be merged. Once merged, the PR triggers another CI/CD pipeline which can run the same tests again and may run additional tests. Then, this pipeline will also trigger a software deployment. The deployment steps will usually involve building a production version of the application and then updating the deployed application. Assuming the application is deployed to a cloud hosting provider, the final step will involve updating the deployed versions of the application according to the cloud hosting provider instructions.\n"
        },
        {
          "id": "FROIjiRaH",
          "type": "media",
          "title": "Cloud Hosting Overview",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nWe're sure you have heard about the \"cloud\" \\- how most modern software is deployed today. But what is the cloud, exactly? Basically, major companies like Amazon and Google provide cloud services where they basically rent out computing hardware to you on demand. For instance, with AWS you can run servers and databases on Amazon managed infrastructure and all you need to do is configure your deployments in a web console. You don't need to manage any physical hardware \\(including maintenance, security, upgrading, etc.\\) and you get specific service level agreement \\(SLA\\) guarantees from the cloud provider about the service reliability you can expect.\n\nIn this section, we will cover some of the main cloud hosting options which are used by companies and developers today. We will focus on AWS and GCP but also mention Digital Ocean \\(which we mentioned before\\) and Heroku, which are good options for smaller projects or developers hosting their own projects.\n# Amazon Web Services \\(AWS\\)\n\n[Amazon Web Services](https://aws.amazon.com/) is the pioneer for modern cloud computing service providers, having been launched as early as 2002. Since then, it has expanded into a major business component for Amazon, is widely used throughout the software industry, and has driven competition among peers \\(e.g. from Google, Microsoft, IBM, etc.\\).\n\nAWS provides a variety of cloud solutions including everything needed to run a modern application:\n\n* [Amazon EC2](https://aws.amazon.com/ec2/?nc2=h_ql_prod_fs_ec2&ec2-whats-new.sort-by=item.additionalFields.postDateTime&ec2-whats-new.sort-order=desc): Amazon \"elastic compute\" provides a virtual computing environment you can use for any computation or for running a server instance.\n* [Amazon Aurora](https://aws.amazon.com/rds/aurora/): Amazon managed MySQL and PostgreSQL relational databases.\n* [Amazon DynamoDB](https://aws.amazon.com/dynamodb/): A high performance key\\-value and document database managed by Amazon.\n* [Amazon Lambda](https://aws.amazon.com/lambda/): Amazon's solution for \"serverless\" computing, which involves deploying small, isolated functions which can be called on demand. Unlike a server, there isn't an application which is constantly running. Instead, some arbitrary code is available and can be invoked by calling an API.\n\n# Google Cloud Platform \\(GCP\\)\n\nGCP is Google's cloud service provider platform, which allows developers to access many of the same features provided by AWS. For example, with GCP you can utilize:\n\n* [Google App Engine](https://cloud.google.com/appengine): A platform for deploying and scaling server applications.\n* [Cloud SQL](https://cloud.google.com/sql): Fully managed relational database service for MySQL, PostgreSQL, and SQL Server.\n* [Datastore](https://cloud.google.com/datastore) \\(soon to be Firestore\\): A highly scalable NoSQL database.\n* [Cloud Functions](https://cloud.google.com/functions): GCP actually provides a variety of serverless solutions, such as Cloud Run and Knative, but Cloud Functions are the basic functions as a service \\(FaaS\\) product.\n\n# Heroku\n\n[Heroku](https://www.heroku.com/) is a platform as a service \\(PaaS\\) which provides a managed environment for developers to deploy applications. They handle much more configuration, setup, and wiring so developers can just deploy and run their apps. In contrast, with a cloud provider like AWS or GCP, you need more developer involvement to actually setup and deploy each service you want to use and configure everything properly.\n\nGenerally, Heroku can be a good option for small startups or even small businesses, and also for your own personal projects you may want to deploy quickly. However, if your app needs to scale a lot or if you need or want to have more direct control over the services and infrastructure which is running your app, Heroku may not be the best choice.\n# Digital Ocean\n\n[Digital Ocean](https://www.digitalocean.com/) is a cloud infrastructure provider commonly used for virtual private servers \\(VPSs\\) which allowed developer virtual machines to install and run their applications on. Over time, Digital Ocean has expanded their product suite and now include a variety of other services, such as managed databases and a Kubernetes offering. Digital Ocean is still a good option to be familiar with, especially if you need a VPS were you can quickly deploy your own applications under your control.\n"
        },
        {
          "id": "5SCjCOQwsi",
          "type": "media",
          "title": "Logging, Monitoring, and Reporting",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "# Intro\n\nOnce you had services running in production it's important to employ various tools so you are informed about the status and health of your services. At a very basic level, if you are running a server and your server crashed you would want to know\\! Setting up and use logging, monitoring and alerting/reporting tools correctly is a set of best practices modern apps should follow.\n# Logging\n\nAny running services will generate logs as they process requests or other events. If you are using a manage cloud solution like AWS or GCP, you will have to tap into those services to find the log output for the services you want to inspect. If you are running a server through a VPS, you will probably have to ssh into the machine directly and view the logs yourself. Viewing production logs is useful necessary when diagnosing and debugging issues, bugs, or failures which occur in production. For instance, your server may crash or some other error may occur and you want to investigate what happened and try to determine why the failure occurred. The server logs may contain useful hints or clues about what was happening which led to a failure.\n# Monitoring\n\nMonitoring refers to observing various aspects of a running system to help ascertain its status of health. For instance, at a very basic level uptime monitoring simply monitors running services and confirms that they are live and responsive. In addition to this, you may want to monitor various other factors, such as CPU usage, memory usage, request response time, etc. Such monitoring is especially important to detect performance issues or to be more informed about the stress and load limits for a server or application you are running.\n# Reporting/Alerting\n\nThe concept of reporting and alerting refers to intentionally escalating certain events, errors, or failures in order to inform relevant team members and potentially take an action. For example, many apps today employ [Sentry](https://sentry.io/welcome/) to report runtime errors which occur. Any uncaught errors will be immediately reported to Sentry and can additionally trigger other alerts, like emails or Slack notifications. But uncaught errors may not be the only events you want to trigger an alert to be notified for. For instance, perhaps you want to be notified if a CPU you are running reaches 80% memory usage, or some other critical threshold you have previous identified. The main idea of reporting and alerting is to be informed of failure events when they occur but also to try to identify potential failure scenarios proactively so you can take action and try to avoid them."
        },
        {
          "id": "$@kraNyU0",
          "type": "media",
          "title": "Deploy a Server + Database with Heroku",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "..."
        },
        {
          "id": "03kfmEpdu",
          "type": "media",
          "title": "Deploy a Frontend with Netlify",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "..."
        },
        {
          "id": "3odGQPJTI",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these projects we will put to practice some of the principles you have just learned. In fact, you already have experience with deploying software because you have been deploying your projects for your portfolio from the very beginning.\n\nHere, we will apply some of the devops best practices we have learned to some of your deployed projects."
        },
        {
          "id": "SCh1dPhbg",
          "type": "project",
          "title": "Create a CI/CD Pipeline",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, choose one of your previously completed projects and add a CI/CD workflow for it using GitHub Actions. Ideally, choose a previous project which you have already deployed and then add two workflows:\n\n* **A PR Tests Workflow:** This workflow should run the project unit tests, linting, and type checking against pull requests. Update the settings for your repository to require that pull requests must pass all status checks before they can be merged.\n* **A Deploy Workflow: **This workflow should handle deploying your project whenever new commits are pushed to the main project branch.\n\n\nA CI/CD workflow like this will effectively automate all the major steps you want for your project. The result is you just follow normal git workflow \\(making, reviewing, and merging PRs\\) and the CI/CD workflow handles running your tests and deploying your code for you.\n\nBe sure to check out the [GitHub Actions documentation](https://docs.github.com/en/free-pro-team@latest/actions) for a reference when creating these workflows if you need help.\n"
        },
        {
          "id": "ZJ3EhQkuN",
          "type": "project",
          "title": "Dockerize a Server",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, use [Docker](https://www.docker.com/) to create a container for running one of the server projects you have completed previously. For a reference, you can take a look at the [NodeJS example of dockerizing a server](https://nodejs.org/en/docs/guides/nodejs-docker-webapp/).\n\nThe result should be a [Dockerfile](https://docs.docker.com/engine/reference/builder/) which allows one to build an image for your server with a `docker build` command and then start your server using `docker run`. Running the server in this way should also expose the server on a `localhost` port so other applications can access it.\n\nAs you go through this project, try to get familiar with running the various Docker commands on your local system and understand what the important parts of a Dockerfile are."
        },
        {
          "id": "X2xJUDejx",
          "type": "project",
          "title": "Deploy a Server + Database",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, choose one of your previous server/database projects, or create a new one, which together uses a server and database. Next, deploy all of these with a cloud provider of your choice. We would recommend choosing AWS, GCP, Heroku, or Digital Ocean, but feel free to choose any cloud provider you want to experiment with.\n\nUltimately, many of the principles for deploying and managing software in the cloud are applicable regardless of which particular cloud provider you are using—you end up just having to learn the specific ins\\-and\\-outs of that provider. For instance, setting up a SQL database in AWS is in principle basically the same as setting up a SQL database in GCP, but to actually do it you must follow completely different procedures depending on which cloud provider you are using, including potentially different configuration settings or terminology. As a result, part of the skill of working as an infrastructure or devops engineer is not just in understanding the principles for designing scalable and reliable architectures but also the details of the particular cloud provider you are working with. As a result, it's helpful to simply be acquainted with the process of figuring out how to use a specific cloud provider.\n\nWhen completed, you should have:\n\n* A server deployed and running in the cloud.\n* A database running in the cloud which your server connects to.\n\n\nFor a bonus, try to think about how your server would handle scaling? What if there are 1,000 concurrent users? How about logging, monitoring, and alerting? Consider integrating Sentry with your application to report errors, or experiment to see how to view the current logs for your running service. Also, we would of course recommend dockerizing the server you are deploying here."
        },
        {
          "id": "GzyZTY8jb",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these special topics we will start to delve into the vast world of devops, infrastructure, and software deployment. Modern, secure, applications at scale require very complex infrastructure setups so they can be highly available, reliable, and fault\\-tolerant for users. In these lessons, we will try to illustrate what devops looks like for more complex systems and introduce some more advanced technologies, such as Docker, Kubernetes, Terraform, and others.\n\nDon't worry if these seem over your head\\! It's enough at this stage to just have a rough understanding of what these technologies are and why they are useful for production systems."
        },
        {
          "id": "@n23EyYGI",
          "type": "media",
          "title": "Monolith vs. Microservices Architecture",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "..."
        },
        {
          "id": "hU@oatYsK",
          "type": "media",
          "title": "What is Kubernetes?",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "..."
        },
        {
          "id": "J3ArHHwhp",
          "type": "media",
          "title": "What is Serverless?",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "..."
        }
      ]
    },
    {
      "free": false,
      "id": "GgP1rkAa",
      "title": "Capstone Projects",
      "challenges": [
        {
          "free": true,
          "id": "Oe15TzrQ",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Congratulations\\! You have completed all the Pairwise course material. It's been a long journey and we know you've put in a lot of work to reach this point.\n\nThis final module is about creating fullstack applications to really bring together all the skills you have learned so far and round out your portfolio. These applications will help you see the full picture of how a modern app is built and be the most valuable additions to your portfolio."
        },
        {
          "id": "NTkZ2fFGp",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The projects in this final section are fullstack applications which will really test your abilities as a programmer\\! These projects are the culmination of all of the hard work and practice you have put in to work to this point.\n\nThese projects will be challenging, but if you can complete them they will give you a portfolio which will really standout and they will prove that you have acquired all the skills necessary to work as a software developer."
        },
        {
          "id": "aaSCD25GK",
          "type": "project",
          "title": "Fullstack Note-Taking App",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project create a note\\-taking application which allows users to record notes. Choose from one of the following two levels of difficulty:\n\n## Level 1:\n\nFrontend \\+ backend.\n* The app should allow users to add new notes, edit notes, and delete notes.\n* The same features as the frontend\\-only app, but now with a backend server and database to store the notes.\n* You can choose any backend architecture.\n* Authentication is not required, but you will need some way to uniquely associate notes with the current user. We would encourage adding authentication for this, but for simplicity you could make the notes specific to the current browser and generate a unique id associated with that browser.\n\n\n## Level 2:\n\nFrontend \\+ backend \\+ mobile.\n* The same features as above but the app works on mobile. You can either adapt the UI to work on mobile or build a separate mobile app for the mobile experience.\n* The app supports authentication to identify users.\n\n---\n\nOf course, we recommend following all of the best practices we have presented throughout the Pairwise course for this project. This would include, for instance:\n\n* Using good code styling conventions and version control\n* Adding tests for your project\n* Using CI/CD workflows to automate deployments\n* Using code comments and documentation where appropriate\n\n\nWhen you are finished with your project add the links for it below\\!"
        },
        {
          "id": "u0WIqVZKs",
          "type": "project",
          "title": "Real Time Tic-Tac-Toe",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Remember the Tic\\-Tac\\-Toe game from the TypeScript Programming module a long time again? Let's revisit it but this time create a real\\-time multiplayer version. Your game should:\n\n* Allow users to connect and play one another in real\\-time.\n* Users accessing the app can select a username and then be displayed as online \\(no need for user authentication \\+ accounts, unless you want a challenge\\!\\). Users can propose to play a Tic\\-Tac\\-Toe game with other players who are also online.\n* When in a game, the app uses Web Sockets to handle the game logic in real\\-time for both players.\n* While waiting for other players, a user can also opt to play a game against the computer.\n* The app supports multiple concurrent users and games at the same time.\n\n\nWhen you have completed your project share it with your friends and try playing a few games with them\\!\n\n---\n\nAlso, if you are tired of Tic\\-Tac\\-Toe feel free to replace this game with any other game you might like to implement instead. Remember, these projects are less about the exact rules we define here and more about giving you the real world experience of building apps and writing a lot of code to solve problems and be creative. The most important thing is for you to be motivated and excited about what you're working on and get a lot of experience writing code and learning new skills—good luck\\!\n"
        },
        {
          "id": "YraF7sMav",
          "type": "project",
          "title": "Study App",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this project, create a study application to help users learn specific skills or subject areas. The app should support a few types of study methods.\n\n* A user can add a new study topic.\n* Users can browse public study topics created by other users.\n* For each study topic, a user can add a quiz of content. The quiz can be a simply multiple choice quiz.\n* For each study topic, a user can also go through the quiz to test their knowledge.\n* A user can set a topic to be private or public. Public topics are viewable by anyone who accesses the site, private topics are available only to the user.\n* The application supports user accounts and user authentication. A user must have an account to create topics, but can try out public quizzes without any account.\n* As a bonus, consider adding other types of study options such as flashcards, true/false questions, fill\\-in\\-the\\-blank questions, etc.\n\n"
        },
        {
          "id": "g3q2PiwZ1",
          "type": "project",
          "title": "Custom App",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For this final project, design an app of your choice. This can be anything from a game to a tool to an app idea you find interesting, creative, or useful. Try to put some thought into this and create something you actually need or think could be useful\\! The best projects are those you build with a genuine interest in solving a real world problem.\n\nThis is the final capstone project for the Pairwise curriculum, so don't be afraid to go all out\\!"
        },
        {
          "id": "DVy0PqE5j",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "✨ Congratulations on making it this far\\!\\!\\! ✨\n\nIn this final special topics series we will present summary content, wisdom, reflections, meta\\-content, and other parting advice for you on your journey as a software developer.\n\nHere we will discuss how to get a job as a developer, how to navigate the application and interview process, how to negotiate and understand job offers, and the overall job market. We will also address some trends and predictions in the software industry, and touch on a few other skills and technologies that you might find interesting to extend your learning journey with.\n\nWith these lessons in hand, you will be 100% equipped to go out into the world and get your first job\\! Your first team will be impressed by the depth and breadth of your knowledge.\n\nSincere congratulations from all of us at Pairwise for reaching this point\\! 💫⭐️🌟"
        }
      ]
    },
    {
      "id": "OoCQh6nWy",
      "title": "Career & Interview",
      "challenges": [
        {
          "id": "GBtSftk@B",
          "type": "section",
          "title": "Coming Soon!",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The **Career & Interview** module content is coming soon.\n\nThis module will cover:\n\n* How to create a Resume and portfolio to showcase your skills\n* How to prepare for software engineering interviews\n* Practicing and answering algorithm questions\n* Navigating the job market and applying to positions\n* Interacting with recruiters\n* Negotiating job offers\n* Advice for starting the your first job\n* Advice for moving through your career as a developer\n\n"
        }
      ],
      "free": false
    }
  ]
}