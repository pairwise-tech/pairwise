{
  "price": 0,
  "free": true,
  "id": "asiuq8e7l",
  "title": "Python",
  "description": "Python is an interpreted, high-level general-purpose high level programming language.",
  "modules": [
    {
      "id": "apoqLskrZ",
      "title": "Python Basics",
      "challenges": [
        {
          "id": "6Qez1$Vnl",
          "type": "python",
          "title": "Intro to Python",
          "instructions": "Write a function to add two numbers using [Python](https://www.python.org/). Python is a general purpose high level programming language with a wide variety of applications, including writing simple scripts, building APIs, and creating servers. It is also commonly used in data science and machine learning.",
          "testCode": "test(\"The `add` function should be defined and add two numbers together.\", async () => {\n  const CODE = __user_code_string__;\n  const TEST_STRING = `\ndef test():\n  result = add(10, 15)\n  expected = (25)\n  if result != expected:\n    return False\n\n  result = add(100, 150)\n  expected = (250)\n  if result != expected:\n    return False\n\n  result = add(-10, 10)\n  expected = (0)\n  if result != expected:\n    return False\n\n  result = add(1000, 5000)\n  expected = (6000)\n  if result != expected:\n    return False\n\n  result = add(250, -150)\n  expected = (100)\n  if result != expected:\n    return False\n\n  return True\n`;\n\n  const result = await executePythonChallengeTests(CODE, TEST_STRING);\n  handleAlternateLanguageTestResult(result, console.log);\n});\n",
          "videoUrl": "",
          "starterCode": "# Write a function to add two numbers together",
          "solutionCode": "# Write a function to add two numbers together\ndef add(a, b):\n  return a + b;\n",
          "content": ""
        },
        {
          "id": "pKPYv9Mmy",
          "type": "python",
          "title": "Concatenate Strings",
          "instructions": "Write a function `concatenate` which accepts an arbitrary number \\(0 to N\\) of string input arguments and returns the result of concatenating these strings together.",
          "testCode": "test(\"The `concatenate` function should accept an arbitrary number of input strings and concatenate them all together.\", async () => {\n  const CODE = __user_code_string__;\n  const TEST_STRING = `\ndef test():\n  result = concatenate(\"a\", \"b\", \"c\")\n  expected = \"abc\"\n  if result != expected:\n    return False\n\n  result = concatenate(\"hi\", \"hi\", \"blegh\", \"hi\")\n  expected = \"hihibleghhi\"\n  if result != expected:\n    return False\n\n  result = concatenate(\"apple\", \"banana\", \"strawberry\")\n  expected = \"applebananastrawberry\"\n  if result != expected:\n    return False\n\n  result = concatenate(\"cake\", \"brownie\")\n  expected = \"cakebrownie\"\n  if result != expected:\n    return False\n\n  result = concatenate(\"chair\", \"table\", \"fred\", \"a\", \"b\", \"c\", \"d\", \"e\")\n  expected = \"chairtablefredabcde\"\n  if result != expected:\n    return False\n\n  result = concatenate()\n  expected = \"\"\n  if result != expected:\n    return False\n\n  return True\n`;\n\n  const result = await executePythonChallengeTests(CODE, TEST_STRING);\n  handleAlternateLanguageTestResult(result, console.log);\n});\n",
          "videoUrl": "",
          "starterCode": "# Write your code here\n",
          "solutionCode": "# This function concatenates an arbitrary number of input strings\ndef concatenate(*strings):\n  result = \"\"\n  for x in strings:\n    result += x\n  return result",
          "content": ""
        },
        {
          "id": "NfB1A9Sn3",
          "type": "python",
          "title": "Sum Array",
          "instructions": "You are given a list of elements. Write a function `sumList` which returns the sum of adding all of the elements in the input list.",
          "testCode": "test(\"`sumList` should be accept a list of numbers and return their sum.\", async () => {\n  const CODE = __user_code_string__;\n  const TEST_STRING = `\ndef test():\n  result = sumList([1,2,3,4,5])\n  expected = 15\n  if result != expected:\n    return False\n\n  result = sumList([100,200,300,400,500,10000])\n  expected = 11500\n  if result != expected:\n    return False\n\n  result = sumList([])\n  expected = 0\n  if result != expected:\n    return False\n\n  result = sumList([-5,5])\n  expected = 0\n  if result != expected:\n    return False\n\n  result = sumList([2,2,2,2,2,2,2,2,2,2,2,2])\n  expected = 24\n  if result != expected:\n    return False\n\n  result = sumList([500,500,500,500,500,2500,95000])\n  expected = 100000\n  if result != expected:\n    return False\n\n  return True\n`;\n\n  const result = await executePythonChallengeTests(CODE, TEST_STRING);\n  handleAlternateLanguageTestResult(result, console.log);\n});\n",
          "videoUrl": "",
          "starterCode": "# Write your function here",
          "solutionCode": "# Write your function here\ndef sumList(list):\n  sum = 0\n  for x in list:\n    sum += x\n  return sum\n",
          "content": ""
        }
      ]
    }
  ]
}
