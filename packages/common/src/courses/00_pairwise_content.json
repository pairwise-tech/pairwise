{
  "id": "f76shgb2W",
  "title": "Pairwise Library",
  "description": "Free articles and videos on programming topics and getting hired as a software engineer.",
  "free": true,
  "price": 0,
  "modules": [
    {
      "id": "rwD9TvhQ7",
      "title": "All About Pairwise",
      "challenges": [
        {
          "id": "BftPXyqwU",
          "type": "media",
          "title": "What is Pairwise?",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Pairwise is a re\\-imagination of modern education.\n\n### Background\n\nSocieties all around the world follow the same pattern of education: 8 hours of classroom education per day for over 10 years, and then more of the same in college or university. This is probably a great model for learning many subjects, e.g. foreign language or mathematics, but it may not be the best format for learning practical skills like how to program or build computer applications.\n\nAt Pairwise, we think this traditional model is not the most efficient learning model for learning practical technology skills in the modern age.\n\nMoreover, the internet and computer revolution have given individuals new powerful tools which unlock new capabilities. You can now ask Google a question and within seconds find detailed information about the answer. This has never before been possible in human history.\n\nYou can also build and deploy applications and products at global scale using just a simple laptop, at very low cost. This has never before been possible in human history.\n\n### Enter Pairwise\n\nAt Pairwise, we think that there is a big opportunity for re\\-inventing educational resources for teaching modern technology skills. Software skills do not need to be learned from a textbook, or by sitting in a classroom listening to a lecture or slideshow, or by taking tests or exams. We think software skills are best learned through hands\\-on application, and, like, most skills, best learned with the help of a thoughtful mentor.\n\nThe Pairwise platform is meant to be this combination of hands\\-on practice and mentorship. The Pairwise platform is designed to teach concepts through practical application while also providing enough supplementary content support for students to understand the skills they are learning.\n\nOur belief is the process can be fun, engaging, adventurous, and challenging \\- almost like a game\\!\n\n### Information Overload\n\nWhile the internet has made the world's information accessible to everyone in mere seconds, this is a blessing and a curse. The curse is that there is simply _too_ much information.\n\nFor the student learning to code, there is simply too much information out there. There are hundreds of hours of recorded university computer science lectures alone, not to mention other tutorials, guides, and platforms. How does someone navigate all of these limitless content and resources and choose what to learn? Moreover, how does one even decide_ what_ to learn? JavaScript, Python, Ruby, Java, C/C\\+\\+, Go, Rust \\- the list goes on, and those are just the leading programming languages, not to mention specific popular technologies or engineering specialities. To someone interested in learning to code... it's just too much\\!\n\n### The Secret of Pairwise\n\nThis is the other secret of Pairwise: we curate a specific, focused, opinionated curriculum of content which we believe represents the fastest, easiest, and most efficient pathway to **a\\)** learning to code and **b\\)** getting hired as a software developer. This frees the student from the responsibility of deciding what to learn, and lets them focus exclusively on learning. The result is massive productivity gains in the learning process.\n\nInstead of typing _\"Should I learn C\\+\\+ or Java?\"_ into Google, you will start typing _\"How to filter something from a list in TypeScript?\"_. All the time previously devoted to trying to decide _what_ to learn will now be spent on _learning\\._\n\nThis may feel strange... what if we didn't choose the right technologies or languages for you to learn?\\!\n\nConsider how universities work: Once you decide you want to be a doctor, or physicist, or even a software engineer, how much freedom do you have to decide _what_ you will learn along the way? You make the initial choice, but from there the teacher, textbook, and school take over. You start on Chapter 1 whether you like it or not. _They_ curate the content and path for you.\n\nWe are not saying we know what's best for _everyone _to learn. We are saying that it is more productive to spend your time learning rather than asking _what_ you should learn. We have made broad approximations best on industry trends and job market data to select a course which should be the most efficient for the most people. If you're curious, feel free to [read our full rationale](https://www.pairwise.tech/curriculum) for the curriculum selection.\n\nWe believe that by curating this path for the user, it can save them from the endless headaches of having to answer these questions themselves. The can focus on what matters: learning, solving problems, and building apps. If they like the process, then this is the right career for them and they can take it from there to any destination they want\\!\n\n### Only a Foundation\n\nPairwise is intended to train a new generation of software engineers. If we succeed, some of our graduates will go on to do things far beyond what we can do. Pairwise just lays the foundation and teaches people fundamental software engineering skills, and, most importantly gives people a guide for _how to learn_. From there, they can go on to independently master any other technologies they will need in their career."
        }
      ],
      "free": false
    },
    {
      "free": true,
      "id": "fjuia91kz",
      "title": "Learning to Code",
      "challenges": [
        {
          "id": "f76s5a8x",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Welcome to the Learning to Code section of the Pairwise Library.\n\nHere you will find a collection of free writing and videos where we discuss a variety of topics around learning to code and becoming a software engineer."
        },
        {
          "id": "JzokCvMM",
          "type": "media",
          "title": "How to learn (anything)",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Did you know that learning is itself a skill we can all learn and get better at? Let's talk a bit about the meta game of learning: How to learn _efficiently_. \n# Get a high\\-level view of what you're learning\n\nWhat I mean is, before diving in to the details something new \\(like this course\\) get an overview. I'll illustrate with an example: \n\n## To get an overview of this course you could...\n\n* Review the high level rational for the course [on the curriculum page](https://www.pairwise.tech/curriculum/). **\\(2 minutes\\)**\n* Open the navigation menu and skim through the titles. Try to internalize the high level roadmap. **\\(4 minutes\\)**\n   * Don't just read the module title and move on. Pause for at least 10 seconds and think \"Have I heard of this before? Does any of my existing knowledge tie in to this concept?\" \\(The answer may well be \"no\" but just try it out. For example, you've probably heard of databases. You may not know how they work but having heard of something can help you remember information about it later.\n   * You won't know how everything works just yet, but you can think to yourself \"So I'll start with basic programming concepts, then a programming language and eventually servers and databases.\"\n   * Having a clear idea in your head of where you're going will give you a better sense of your own progress and help you fit the different pieces together as you learn them.\n* When you start a module, skim through the navigation to get a sense of what challenges there will be and how many there are. **\\(5\\-10 minutes\\)**\n   * Also, open up the projects section and read through a project. Start at the end like this may be counterintuitive but it will give you a concrete example of _what_ you will learn. The projects are interim goals on your path to becoming a programmer. If a project sounds interesting keep it in mind as you go through challenges and you'll see how some challenges will apply to the project.\n\n\nThe same applies to traditional studies as well. If you just picked up a textbook try reading through the table of contents first, then skip to some problem sets _at the end_ of a few lessons to get a feel for what there is to learn.\n\nPart of what makes learning programming difficult is that ++there's no clear roadmap for how to become a programmer++. We know this because we've gone through the learning process ourselves and all of us had to create our own roadmap. That's why we've created the curriculum the way we did. Pairwise is a full roadmap for becoming a programmer. \n# Prioritize your learning\n\nThere's **A LOT** you could be learning in programming. If you want to see rapid progress you need to learn what's most relevant, first. If there's any time left you can learn more obscure topics later.\n\nFor example, here are some things you might be tempted to learn:\n\n* Multiple programming languages\n   * This is not a good use of time initially. Most programmers can program in more than one language, but we all had our _first_ language\\. Just learn one language at first and things will go much smoother. For this course we've chose TypeScript and we've laid out our reasoning here: [Pairwise Curriculum](https://www.pairwise.tech/curriculum/).\n* Obscure language features\n   * Every language has them, and for good reason—sometimes you need obscure features to get the job done. JavaScript \\(the language TypeScript is built on top of\\) is no exception, but these are features you can learn as you need them. For example, an introductory book on JavaScript will teach you about Bitwise Operators. When you come across this chapter **RUN**. This is not relevant yet and if it becomes relevant later you can learn about it then.\n* All language features\n   * Some people obsess about learning a language _completely _\\(I know because I used to be one such person...\\). This is not helpful. \n   * If you were just starting to learn English you would not benefit much from learning words like \"elucidate\", \"sanguine\", and \"wharf\" \\(if you disagree about this last one, you probably live near a wharf\\). You can be fully fluent in English without knowing every word. Likewise you can be fully fluent in a programming language without knowing every aspect of it. \n      * Confession: This author never learned JavaScript Generators 🙀They were just never needed for my work or personal projects. \n\n# Sleep\n\nThis is might be obvious but it bears repeating. ++When you're learning you need lots of sleep++. Your brain uses sleep in part to assimilate information you learn and synthesize new information. \n\nYou will be amazed how concepts you were barely grasping one day become easily understood and utilized the next day. It doesn't always happen as quickly as one day but it does happen. It's similar to learning a new human language. At first, nothing makes sense. The sounds are foreign, the script is tedious, the culture is incomprehensible. However, day by day sounds, words, actions all become more clear until eventually you're dreaming and conversing in a foreign language.\n\nSo get as much sleep as you can. You will learn more in less time.\n# Repetitions \\(aka practice\\)\n\nYou're going to need a lot. Despite learning as efficiently as you possibly can you will still need to do something more than once to get good at it. In fact you need to do it thousands of times.\n\nTo help convince you, consider...\n\n* **Sports**: How many times has Tiger Woods swung a golf club? How many times has Steph Curry shot a 3\\-pointer?\n* **Work**: How many do future\\-doctors _practice_ before they actually earn the title of doctor? Doctors may be extreme but also consider lawyers, plumbers, physicists, Spanish grammar teachers...\n* **School**: Teachers at all levels recognize the importance of repetitions. Homework is just a mechanism to incentivize repetitions.\n\n\n> To get good at something you need to do it many, many times ++even if you're learning as efficiently as possible++\n\nThis is where the challenges come in. We've created many challenges in part because we want you to attack the same problems again and again from different angles. Even if a challenge seems easy remember that you're completing more repetitions and getting better.\n# Real learning won't feel easy...\n\n... but that doesn't mean it's \"hard.\" When you're really learning you will be stretching your brain just a bit beyond what it already knows. This isn't going to feel easy, but it might feel exciting or fun. It might feel hard too, but even if it does, remember that it it gets easier with time. The better adapted your brain is to the task at hand the easier it will be. \n\nYour brain is literally building new neural connections when you learn—by the end of the course you will have a physically different brain than when you started. This won't happen overnight.\n# In summary\n\n* Start with an overview of whatever you're trying to learn\n* Prioritize your learning so you only spend time on the highest\\-impact concepts\n* Get _lots_ of sleep\n* Practice, practice, and then practice some more\n* Don't get discouraged. Learning isn't easy but it's extremely rewarding\n\n\nAnd if you feel that we left something out, you disagree about a specific point or you just want to leave us a note **please do**. We'd love to hear from you. \n\\(The feedback button is the question mark in the upper\\-right of the page\\)"
        }
      ]
    }
  ]
}
