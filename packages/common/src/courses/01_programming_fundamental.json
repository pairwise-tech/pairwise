{
  "id": "fpvPtfu7s",
  "title": "Fullstack TypeScript",
  "modules": [
    {
      "id": "fpvPtNWkC",
      "title": "Programming Fundamentals",
      "challenges": [
        {
          "id": "5ziJI35f",
          "type": "media",
          "title": "What is HTML?",
          "content": "",
          "testCode": "[]",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "HTML is a language for telling web browsers about your content. Consider the following items:\n\n* Some plain text\n* Some **_bold italic_** text\n* Some `code` text\n\nIt's easy to tell the difference and that's the point. Different parts of a webpage mean different things, and as programmers we need a way of telling a web browser what's what.\n\nLet's take another example. Consider the list above. Howe does the browser know that its' a list? How does it know to include a small dot in front of the text? The answer is HTML. \n\nConsider what that three-item list looks like to you, the reader, and also consider what it looks like in code:\n\n```html\n<ul>\n  <li>Some plain text</li>\n  <li>\n    Some <strong><em>bold italic</em></strong> text\n  </li>\n  <li>Some <code>code</code> text</li>\n</ul>\n```\n\nIt looks quite different! The code above is what the browser sees. A `ul` with some `li`s inside tell the browser we want a list. Putting some text inside a `strong` and an `em` will make the text **bold** and _italic_ respectively. \n\n# Why are we learning HTML?\n\nA few reasons: \n\n## 1. It's visual\n\nWhat you write in code will appear on screen. This is hugely important when you're first learning. Programmers specialize in telling computers what to do, and computers don't always give you visual feedback to let you know that your commands are achieving the desired result.\n\nThink about the clock on your phone. Seem simple right? It shows the time. It also adjusts for daylight savings time, or if you physically enter a different timezone. It can display the time in 24-hour format or AM-PM format. Consider this:\n\n* How does your phone know the time? \n* How does the clock update when daylight savings time shifts or when you step off of a plan? \n\nThis functionality, which we all take for granted, was programmed by someone. Imagine you are that person. If you program the phone to update its time based on your GPS location, how do you know it worked? There's no immediate visual feedback to tell you whether your code worked or not.\n\nIf you're writing HTML there is visual feedback, so you will know immediately if your code is doing what you want it to.\n\n## 2. It gives you real skills, quickly\n\nIf you learn the basics of HTML, guess what? You can make your own website. In fact, in this course we'll walk you through creating a website from scratch and getting it online for free. \n\nAt the end of this module you will be able to build something real, that you can see online and show to other people. In fact, using just the skills in this first module you can even build websites for other people and **get paid to do it**. There are many people around the world who make a living this way. \n\nOf course our goal is to give you the skills to be a full software engineer so we will go well beyond HTML. Which brings us to the final point...\n\n## 3. It's foundational\n\nHTML is everywhere, and not just on the web.\n\nConsider Facebook, Twitter, Reddit, Google, Amazon, Netflix, etc. These massive companies all rely on HTML. They all have mobile apps too, but the web component is a significant part of their business.\n\nConsider also that the principles you learn while building HTML can translate into mobile app development as well. We will touch on this significantly in later parts of the course. For now, let's focus on HTML and dive in.\n\n# Tags\n\nAll those things you saw in the code at the beginning of the lesson, `<ul>`, `<li>`, `<strong>`, etc. are called tags. Don't worry, you don't have to remember this yet, but you will over time because this is how programmers talk about HTML and how we walk about it in our videos. \n\n## Anatomy of an HTML tag\n\nTags usually have two parts:\n\n* The opening tag\n* The closing tag\n\nOpening tags include a `<` symbol, followed by the name of the tag, followed by the `>` symbol. Closing tags are almost exactly the same. The only difference is that closing tags have a `/` symbol right after the `<`. Example:\n\n* `<p>I'm a paragraph</p>`\n\nReading through one character at a time, the opening \"P tag\" is `<` + `p` + `>`. The closing P tag is `<` + `/` + `p` + `>`. You can use this rule for every tag you write. \n\nHere are a few more examples. Try to see the pattern of opening `<` + tag name + `>` and closing `</` + tag name + `>`.\n\n* `<a>Link</a>`\n* `<button>Click me</button>`\n* `<h1>Heading text</h1>`\n\n# Self-closing tags\n\nNot all tags have to correspond to a closing tags. Sometimes it wouldn't make sense to have any text inside the tag. For example, a `<p>` means a paragraph so you would expect some text inside. However, an `<img>` tag means an image and a `<video>` means a video. When you see one of these tags the browser knows to show the actual image or the actual video that the tag corresponds to, so there is no need to write additional text inside the tag. This is also true of input fields, where you can type things in to a webpage. Ever logged in to a site? Yeah, like that.\n\nHere are some common tags that are self-closing. \n\n* `<img />`\n* `<video />`\n* `<input />`\n\nNotice the syntax here. It's like the opening tag and closing tag got smushed together because there's nothing in between:\n\n* `<img></img>` becomes `<img />`\n* `<video></video>` becomes `<video />`\n* `<input></input>` becomes `<input />`\n\n# Properties\n\nThe final piece before we dive in to some code! Properties tell the browser things about the tag itself. This will become more clear with examples. Consider the `<img />` tag mentioned above. That points to an image, but how does the browser now what image? With a property.\n\n```html\n<img src=\"https://placekitten.com/g/200/200\" />\n```\n\nThe key above is the `src` property. The syntax for properties looks like: property name + `=` + `\"` + property value + `\"`. All of this goes inside the opening tag, which is the only tag if it's self-closing like the `<img />` above.\n\nNow consider another example, perhaps the single most important property in all of HTML. The `href`:\n\n```html\n<a href=\"https://www.reddit.com/r/ProgrammerHumor/\">Don't click me if you value your time...</a>\n```\n\nThe `a` tag is the \"link\" on the web. It's what you click when after searching for something, or when shopping, or when doing research. It's a fundamental part of the web. Web pages include `a` tags which link to other pages. Without links the internet would just be a bunch of disperate web pages that you had to visit directly by typing the address into your browser. OK, back on topic.\n\nThe `href` property of the `a` tag tells the browser where to send someone when they click the link. \n\nThese examples are just meant to be an overview, in the coming challenges you'll use all these tags directly. There's no substitute for hands-on practice. Onward!"
        },
        {
          "id": "9scykDold",
          "type": "markup",
          "title": "Add a h1 Tag in HTML",
          "content": "There is some HTML below. You should add an <h1> tag with the text \"Hello!\" inside it.",
          "starterCode": "<p>This is an HTML file. Add your code below this line</p>",
          "solutionCode": "<p>This is an HTML file. Add your code below this line</p>\n<h1>Hello!</h1>",
          "testCode": "test(\"There should be an h1 tag with the text 'Hello!'\", () => {\n  expect($(\"h1\").innerText).toBe(\"Hello!\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/LMrZDCjO_60",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "9scykdziW",
          "type": "markup",
          "title": "HTML Heading Tags",
          "content": "In the last challenge you added an h1 tag, which represents a \"heading 1\" tag in HTML. In total, there are six tags like this. As you might guess, the second heading tag looks like this: `<h2>`. In the editor below, add one of each heading tag. Each tag should contain some text, feel free to add any text you feel like inside the tags! When you are finished, take a look at the preview to the right to see the results!",
          "starterCode": "<h1>This is a heading 1 tag</h1>",
          "solutionCode": "<h1>This is a heading 1 tag</h1>\n<h2>This is a heading 1 tag</h2>\n<h3>This is a heading 1 tag</h3>\n<h4>This is a heading 1 tag</h4>\n<h5>This is a heading 1 tag</h5>\n<h6>This is a heading 1 tag</h6>",
          "testCode": "['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(tag => {\n    test(`There should be an ${tag} with text inside`, () => {\n        expect(typeof $(tag).innerText).toBe(\"string\")\n    })\n})\n",
          "videoUrl": "",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "9scykuYtf",
          "type": "markup",
          "title": "Nesting Tags",
          "content": "So far we have learned how to add some HTML tags to a document. HTML is pretty flexible, and you can also nest tags inside one another. Another tag we have not seen yet is the <b> tag, which makes text... bold! In the editor below, create a <p> tag with some text inside. Then, choose some part of the text and enclose it in a <b> tag to make it bold.",
          "starterCode": "",
          "solutionCode": "<p>This is a paragraph tag, <b>this is bold text inside it!</b></p>\n",
          "testCode": "test(\"There should be an p tag with text inside.\", () => {\n  const element = $(\"p\");\n  return typeof element.innerText === \"string\";\n});\n\ntest(\"There should be an b tag with text inside.\", () => {\n  const element = $(\"b\");\n  return typeof element.innerText === \"string\";\n});\n\ntest(\"The p tag should contain a b tag with text inside.\", () => {\n  expect(typeof $(\"p b\").innerText).toBe(\"string\");\n});\n",
          "videoUrl": "",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "ny51KoEI",
          "type": "markup",
          "title": "Style some text",
          "content": "There is some HTML below. Your task is to change the color of the `<p>` tag to \"red\" and change its text to \"Exciting red text\".",
          "starterCode": "<style>\n  /* Your code here */\n</style>\n<p>Just plain text</p>\n",
          "solutionCode": "<!DOCTYPE html>\n<style>\n  /* Your code here */\n  p {\n    color: red;\n  }\n</style>\n<p>Exciting red text</p>\n",
          "testCode": "test(\"There should be a p tag with red text\", () => {\n  const element = $(\"p\");\n  return [\"#ff0000\", \"rgb(255,0,0)\", \"red\"].includes(\n    getComputedStyle(element, null)\n      .getPropertyValue(\"color\")\n      .replace(/ /g, \"\")\n  );\n});\n\ntest(\"There should be a <p> tag with the text 'Exciting red text'\", () => {\n  const element = $(\"p\");\n  return element.innerText === \"Exciting red text\";\n});\n",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "CuwykKRM",
          "type": "media",
          "title": "Enter CSS",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "CSS stands for Cascading Style Sheets, but that's unimportant. What matters here is that what CSS is how you change the way things _look_ on the web.\n\nWhere HTML is the \"stuff\", the actual content on a webpage, CSS is how all that stuff looks. Is the background dark with light text (like what you're reading right now)? Is there a menu bar near the top? How does the form on screen try to grab your attention with color and positioning? These are all questions CSS can answer.\n\n# Selectors\n\n# Properties\n\n# The HTML `class` and `id` props\n"
        },
        {
          "id": "KlxN3f11",
          "type": "markup",
          "title": "Changing colors",
          "content": "* Change the background color so that it is `black`.\n* Change the text color of the `<p>` tag and the `<h1>` tag so that it is `white`.\n\nYour challenge is to invert the colors of the page. Instead of having black text on a white background let's have some white text on a black background. You will find the `background-color` and `color` CSS properties useful.",
          "testCode": "test(\"The page background should be black.\", () => {\n  const el = $(\"body\");\n  return [\"#000000\", \"rgb(0, 0, 0)\", \"white\"].includes(\n    getStyle(el, \"background-color\")\n  );\n});\n\ntest(\"The `<h1>` tag should be white.\", () => {\n  const el = $(\"h1\");\n  return (\n    el &&\n    [\"#ffffff\", \"rgb(255, 255, 255)\", \"white\"].includes(getStyle(el, \"color\"))\n  );\n});\n\ntest(\"The `<p>` tag should be white.\", () => {\n  const els = $$(\"p\");\n  return els.every((el) =>\n    [\"#ffffff\", \"rgb(255, 255, 255)\", \"white\"].includes(getStyle(el, \"color\"))\n  );\n});\n",
          "videoUrl": "",
          "starterCode": "<!-- Put your code up here, above everything else. You will need a <style> tag -->\n<h1>Welcome to some text!</h1>\n<p>\n  Now we start the paragraphs! As you do more and more development you will\n  discover that there is a surprising amount of Latin online.\n</p>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nunc erat,\n  aliquet sed pellentesque ut, feugiat non orci. Nam consectetur egestas odio,\n  sed rutrum diam condimentum et. Nulla at cursus ante. Proin mollis lorem mi,\n  sit amet malesuada sem convallis sed. Nullam at lacus eget arcu facilisis\n  tempus vel viverra mauris. Nulla facilisi. Proin hendrerit ante a diam\n  sagittis, quis tristique sem facilisis. Sed sed viverra ante, in dignissim\n  neque.\n</p>\n\n<p>\n  Nullam id eros nec nunc euismod condimentum. Pellentesque habitant morbi\n  tristique senectus et netus et malesuada fames ac turpis egestas. Praesent sit\n  amet nulla libero. Pellentesque diam augue, condimentum eu convallis eu,\n  porttitor nec neque. Sed fringilla ipsum felis, ut rutrum lacus vehicula vel.\n  Nam et porta mauris. Suspendisse gravida ligula nec elit faucibus, et\n  ultricies lorem fermentum. Aliquam in erat a orci maximus aliquet vel id\n  risus. In tincidunt diam non lectus consequat, eu cursus nunc molestie. Duis\n  euismod turpis urna, a volutpat lorem condimentum ac. Suspendisse nec orci\n  dolor. Mauris eget pretium nulla. Donec convallis, elit a pellentesque\n  convallis, elit elit efficitur est, ut molestie justo sapien sed ligula.\n</p>\n",
          "solutionCode": "<style>\n    body {\n        background: black;\n    }\n    h1, p {\n        color: white;\n    }\n</style>\n<h1>Welcome to some text!</h1>\n<p>\n  Now we start the paragraphs! As you do more and more development you will\n  discover that there is a surprising amount of Latin online.\n</p>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nunc erat,\n  aliquet sed pellentesque ut, feugiat non orci. Nam consectetur egestas odio,\n  sed rutrum diam condimentum et. Nulla at cursus ante. Proin mollis lorem mi,\n  sit amet malesuada sem convallis sed. Nullam at lacus eget arcu facilisis\n  tempus vel viverra mauris. Nulla facilisi. Proin hendrerit ante a diam\n  sagittis, quis tristique sem facilisis. Sed sed viverra ante, in dignissim\n  neque.\n</p>\n\n<p>\n  Nullam id eros nec nunc euismod condimentum. Pellentesque habitant morbi\n  tristique senectus et netus et malesuada fames ac turpis egestas. Praesent sit\n  amet nulla libero. Pellentesque diam augue, condimentum eu convallis eu,\n  porttitor nec neque. Sed fringilla ipsum felis, ut rutrum lacus vehicula vel.\n  Nam et porta mauris. Suspendisse gravida ligula nec elit faucibus, et\n  ultricies lorem fermentum. Aliquam in erat a orci maximus aliquet vel id\n  risus. In tincidunt diam non lectus consequat, eu cursus nunc molestie. Duis\n  euismod turpis urna, a volutpat lorem condimentum ac. Suspendisse nec orci\n  dolor. Mauris eget pretium nulla. Donec convallis, elit a pellentesque\n  convallis, elit elit efficitur est, ut molestie justo sapien sed ligula.\n</p>\n",
          "supplementaryContent": "# The `<body>` tag\n\nI this lesson we touched on the `<body>` tag, which the browser will insert into the document for you if you don't do it yourself.\n\n# HTML colors\n\nIn HTML there are several ways to define colors. The most simple is what we've been doing so far, which is using colors that have names like `blue`, `red`, `black`, `green`, etc. However, if you had to rely on colors that have names you would be quite limited. HTML let's you define any custom color you want using some different syntax, namely HEX codes. For example, the color `white` can also be written `#ffffff`. Likewise `black` is `#000000` and `blue` is `#0000ff`. \n\nIn the meantime you can use named colors. There are quite a few, and often if you guess a color it will exist. You can see the full list here: <https://www.w3schools.com/colors/colors_names.asp>"
        },
        {
          "id": "wCrQh1f4",
          "type": "markup",
          "title": "Highliting text",
          "content": "Use the `<span>` tag to highligh some text within the paragraph.\n\nSometimes you want to style parts of text _inside_ a paragraph or a heading. You can accomplish this with the span tag.",
          "starterCode": "<style>\n  span {\n    /* hm... need some styling in here */\n  }\n</style>\n<p>\n  What a paragraph this is! Let's highlight something.\n</p>",
          "solutionCode": "<style>\n  span {\n    background: yellow;\n  }\n</style>\n<p>What a paragraph this is! Let's <span>highlight</span> something.</p>",
          "testCode": "test(\"There should be a <span> tag with a yellow background wrapping some text\", function() {\n  const el = document.querySelector(\"span\");\n  return (\n    el &&\n    el.innerText !== \"\" &&\n    [\"#ffff00\", \"rgb(255,255,0)\", \"yellow\"].includes(\n      getComputedStyle(el, null)\n        .getPropertyValue(\"background-color\")\n        .replace(/ /g, \"\")\n    )\n  );\n});\n",
          "videoUrl": "https://www.youtube.com/embed/fapBaduhIiY",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "5oqm6GmH",
          "type": "markup",
          "title": "The <div> tag -- Putting Things in Boxes",
          "content": "* Give the page an `orange` background\n* Wrap the existing `<h1>` and `<p>` tags in a `<div>`\n* Style the div to have a `teal` background",
          "testCode": "test(\"There should be a div\", () => {\n  expect($(\"div\")).toBeTruthy();\n});\n\ntest(\"The h1 and p tags are within the div\", () => {\n  expect($(\"div h1\")).toBeTruthy();\n  expect($(\"div p\")).toBeTruthy();\n});\n\ntest(\"Body should have orange background\", () => {\n  const body = $(\"body\");\n  const bg = getStyle(body, \"background-color\");\n  expect(\"rgb(255, 165, 0)\").toBe(bg);\n});\n\ntest(\"Div should have a teal background\", () => {\n  const el = $(\"div\");\n  const bg = getStyle(el, \"background-color\");\n  expect(\"rgb(0, 128, 128)\").toBe(bg);\n});\n",
          "videoUrl": "",
          "starterCode": "<h1>Oh what a day</h1>\n<p>\n  A wonderful day to start wrapping some divs!\n</p>\n",
          "solutionCode": "<style>\n  body {\n    background: orange;\n  }\n  div {\n    background: teal;\n  }\n</style>\n<div>\n  <h1>Oh what a day</h1>\n  <p>\n    A wonderful day to start wrapping some divs!\n  </p>\n</div>\n",
          "supplementaryContent": ""
        }
      ]
    },
    {
      "id": "lzTzpPcS",
      "title": "TypeScript",
      "challenges": [
        {
          "id": "6T3GXc4ap",
          "type": "typescript",
          "title": "Add Two Numbers",
          "content": "Complete the function body below. The function should receive two numbers as input arguments and return the result of adding these numbers together.",
          "starterCode": "const addTwoNumbers = (a: number, b: number) => {\n  // Your code here\n}\n\nconst result = addTwoNumbers(10, 20);\nconsole.log(result);\n",
          "solutionCode": "const addTwoNumbers = (a: number, b: number) => {\n  return a + b;\n}\n\nconst result = addTwoNumbers(10, 20);\nconsole.log(result);\n",
          "testCode": "const cases = [\n  { input: [1, 2], expected: 3 },\n  { input: [10, 50], expected: 60 },\n  { input: [-10, -50], expected: -60 },\n  { input: [100, 500], expected: 600 },\n  { input: [1123, 532142], expected: 533265 },\n  { input: [-10, 50], expected: 40 },\n  { input: [1, 500], expected: 501 },\n  { input: [842, 124], expected: 966 },\n  { input: [1000, 500], expected: 1500 },\n  { input: [-100, 100], expected: 0 },\n  { input: [2, 50234432], expected: 50234434 },\n];\n\ncases.forEach(x => {\n    const { input: [a, b], expected } = x;\n    test(`${x.input[0]} + ${x.input[1]}`, () => {\n        expect(addTwoNumbers(a,b)).toBe(expected)\n    })\n})",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "WUA8ezECU",
          "type": "typescript",
          "title": "Reverse a String",
          "content": "Complete the function body below. The function will receive a string and should return the same string in reverse order.",
          "starterCode": "const reverseString = (inputString) => {\n  // Edit code here\n}\n\nconst result = reverseString(\"hello\");\nconsole.log(result);\n",
          "solutionCode": "const reverseString = (inputString) => {\n  return inputString.split('').reverse().join('');\n}\n\nconst result = reverseString(\"hello\");\nconsole.log(result);\n",
          "testCode": "[\n  { input: [\"hello\"], expected: \"olleh\" },\n  { input: [\"fantastic\"], expected: \"citsatnaf\" },\n  { input: [\"superb\"], expected: \"brepus\" },\n  { input: [\"frustrating\"], expected: \"gnitartsurf\" },\n  { input: [\"exciting\"], expected: \"gniticxe\" },\n  { input: [\"happy\"], expected: \"yppah\" },\n  { input: [\"a\"], expected: \"a\" },\n  { input: [\"aaaaaaaaaaaaz\"], expected: \"zaaaaaaaaaaaa\" },\n  { input: [\"jumping\"], expected: \"gnipmuj\" },\n  { input: [\"silly\"], expected: \"yllis\" },\n  { input: [\"zombie\"], expected: \"eibmoz\" },\n].forEach(({ input, expected }) => {\n  test(`${input[0]} -> ${expected}`, () => {\n    expect(reverseString(...input)).toBe(expected);\n  })\n})\n",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "50fxTLRcV",
          "type": "typescript",
          "title": "Return the Length of an Array",
          "content": "Complete the function body below. The function will receive an array as input and should return the number of items in the array.",
          "starterCode": "\nconst lengthOfArray = (array) => {\n  // Edit code here\n}\n\nconst result = lengthOfArray([\"a\", \"b\", \"c\"]);\nconsole.log(result);\n",
          "solutionCode": "\nconst lengthOfArray = (array) => {\n  return array.length;\n}\n\nconst result = lengthOfArray([\"a\", \"b\", \"c\"]);\nconsole.log(result);\n",
          "testCode": "[\n  { input: [[1, 2, 3, 4]], expected: 4 },\n  { input: [[]], expected: 0 },\n  { input: [[1, 1, 1, 1, 1, 1, 1, 1, 1]], expected: 9 },\n  { input: [[3, 3, 3]], expected: 3 },\n  { input: [[2]], expected: 1 },\n  { input: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], expected: 14 },\n].forEach(({ input, expected }) => {\n  test(input[0].join(\", \"), () => {\n    expect(lengthOfArray(...input)).toBe(expected);\n  });\n});\n",
          "supplementaryContent": "Placeholder supplementary content..."
        }
      ]
    },
    {
      "id": "IY2mbmT6",
      "title": "React",
      "challenges": [
        {
          "id": "50f7f8sUV",
          "type": "react",
          "title": "Create a Controlled Input",
          "content": "There is a React Component below. Complete it so in includes a controlled input which allows user's to type.",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface IState {\n  value: string;\n}\n\nclass App extends React.Component<IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render(): JSX.Element {\n    const welcome: string = \"Hello, React!\";\n    console.log(\"Hello from the iframe!!!\");\n    return (\n      <div>\n        <h1>{welcome}</h1>\n        <input />\n      </div>\n    );\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface IState {\n  value: string;\n}\n\nclass App extends React.Component<IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render(): JSX.Element {\n    const welcome: string = \"Hello, React!\";\n    console.log(\"Hello from the iframe!!!\");\n    return (\n      <div>\n        <h1>{welcome}</h1>\n        <input value={this.state.value} onChange={this.handleChange} />\n      </div>\n    );\n  }\n\n  handleChange = (e) => {\n    this.setState({ value: e.target.value });\n  };\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n",
          "testCode": "test(\"Renders a <h1> tag with the text 'Hello, React!'\", () => {\n  const container = document.createElement(\"div\");\n  ReactTestUtils.act(() => {\n    ReactDOM.render(<Main />, container);\n  });\n  const label = container.querySelector(\"h1\");\n  return label.textContent === \"Hello, React!\";\n});\n\ntest(\"Renders a controlled <input /> using React state\", () => {\n  const container = document.createElement(\"div\");\n  ReactTestUtils.act(() => {\n    ReactDOM.render(<Main />, container);\n  });\n  const inputEl = container.querySelector(\"input\");\n  const testValue = \"giraffe\";\n  ReactTestUtils.Simulate.change(inputEl, { target: { value: testValue } });\n  return inputEl.value === testValue;\n});\n",
          "supplementaryContent": "Placeholder supplementary content..."
        }
      ]
    }
  ]
}