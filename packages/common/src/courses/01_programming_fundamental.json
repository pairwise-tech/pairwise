{
  "id": "fpvPtfu7s",
  "title": "Fullstack TypeScript",
  "description": "Learn how to build web and mobile apps using TypeScript, React, and NodeJS.",
  "modules": [
    {
      "free": true,
      "id": "mKcs4ySy",
      "title": "Welcome to Pairwise",
      "challenges": [
        {
          "id": "iSF4BNIl",
          "type": "markup",
          "title": "Hello, Pairwise!",
          "instructions": "There is an h1 tag in the code editor below which contains the text \"Pairwise\". Your job is to change the text to say \"Hello, Pairwise\\!\"",
          "testCode": "test('The `h1` tag should contain the text: \"Hello, Pairwise!\"', () => {\n    expect(getText(\"h1\")).toBe(\"Hello, Pairwise!\");\n});\n",
          "videoUrl": "",
          "starterCode": "<h1>Pairwise</h1>\n",
          "solutionCode": "<h1>Hello, Pairwise!</h1>\n",
          "content": ""
        },
        {
          "id": "Ba5aAVqP",
          "type": "markup",
          "title": "An HTML Portfolio",
          "instructions": "Every webpage you see on the internet is composed of HTML, which stands for \"Hypertext Markup Language\". It's a fancy term, but it's just a way to describe the content you see on a webpage. The first module in the Pairwise curriculum will teach you all about HTML. If you continue to work through the entire course, you will build a portfolio of projects you can showcase to future employers. This challenge is all about imaging that portfolio\\!\n\nIn this challenge, there is a simple HTML document which shows a portfolio of 3 projects. Take a look at the preview on the right. Try to update the project information with 3 project ideas you would like to build. Change the `h2` title to a title for the project or app, and change the `p` \"Description\" to a short description of the project idea. Try to think of projects you would like to build\\! If you can't think of anything, feel free to just put something easy like \"note\\-taking app\" or \"snapchat for cats\".",
          "testCode": "// Test helper\nconst checkProjectHTML = (projectIndex) => {\n  // Get the project HTML\n  const projects = getAll(\".project\");\n  const project = projects[projectIndex - 1];\n\n  // Get the h2 and p text\n  const title = project.querySelector(\"h2\").innerHTML;\n  const description = project.querySelector(\"p\").innerHTML;\n\n  // Check that it has changed\n  const titleValid = title !== `Project ${projectIndex}`;\n  const descriptionValid = description !== \"Description\";\n  return titleValid && descriptionValid;\n};\n\ntest(\"The title `h2` tag and description `p` tag for Project 1 should be changed to your own idea.\", () => {\n  expect(checkProjectHTML(1)).toBe(true);\n});\n\ntest(\"The title `h2` tag and description `p` tag for Project 2 should be changed to your own idea.\", () => {\n  expect(checkProjectHTML(2)).toBe(true);\n});\n\ntest(\"The title `h2` tag and description `p` tag for Project 3 should be changed to your own idea.\", () => {\n  expect(checkProjectHTML(3)).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "<html>\n  <header>\n    <title>My Programming Portfolio</title>\n    <style>\n      body {\n        background: #fffabf;\n        font-family: Avenir;\n      }\n      h3 {\n        margin-bottom: 0;\n      }\n      .project {\n        padding: 6px;\n        margin-top: 8px;\n        border-radius: 10px;\n        border: 3px solid #ffa699;\n      }\n    </style>\n  </header>\n  <body>\n    <h1>My Programming Portfolio</h1>\n    <h3>\n      Here are the projects and apps I built when learning to code. All of the\n      source code is open source and available on GitHub.\n    </h3>\n    <!-- Update the project information below here -->\n    <div class=\"project\">\n      <h2>Project 1</h2>\n      <p>Description</p>\n    </div>\n    <div class=\"project\">\n      <h2>Project 2</h2>\n      <p>Description</p>\n    </div>\n    <div class=\"project\">\n      <h2>Project 3</h2>\n      <p>Description</p>\n    </div>\n    <!-- Update the project information above here -->\n  </body>\n</html>\n",
          "solutionCode": "<html>\n  <header>\n    <title>My Programming Portfolio</title>\n    <style>\n      body {\n        background: #fffabf;\n        font-family: Avenir;\n      }\n      h3 {\n        margin-bottom: 0;\n      }\n      .project {\n        padding: 6px;\n        margin-top: 8px;\n        border-radius: 10px;\n        border: 3px solid #ffa699;\n      }\n    </style>\n  </header>\n  <body>\n    <h1>My Programming Portfolio</h1>\n    <h3>\n      Here are the projects and apps I built when learning to code. All of the\n      source code is open source and available on GitHub.\n    </h3>\n    <!-- Update the project information below here -->\n    <div class=\"project\">\n      <h2>Social Media For Cats</h2>\n      <p>A social network for cats to associate and interact.</p>\n    </div>\n    <div class=\"project\">\n      <h2>Code Cafe</h2>\n      <p>An app to find the best cafes for coding or coworking.</p>\n    </div>\n    <div class=\"project\">\n      <h2>Remind Me</h2>\n      <p>\n        An app which lets you easily schedule reminders which will be sent to\n        you as a message a future date, time, or place.\n      </p>\n    </div>\n    <!-- Update the project information above here -->\n  </body>\n</html>\n",
          "content": ""
        },
        {
          "id": "Oqha$qtc",
          "type": "markup",
          "title": "The Beautiful World of CSS",
          "instructions": "HTML provides the structure, CSS provides the _style_. Take a look at the editor and the preview on the right. That white title isn't too hot though... See if you can turn the `h1` title from `white` to `gold` color\\!",
          "testCode": "test(\"The `h1` title should have a `gold` CSS `color` property.\", () => {\n  const title = get(\"h1\");\n  const style = getStyle(title, \"color\");\n  expect(style).toBe(cssColor(\"gold\"));\n});\n",
          "videoUrl": "",
          "starterCode": "<html>\n  <header>\n    <style>\n      body {\n        background: #204678;\n        padding-left: 12px;\n        padding-right: 12px;\n      }\n      h1 {\n        /* Here! Look Here! */\n        color: white;\n      }\n      p {\n        color: tomato;\n      }\n    </style>\n  </header>\n  <body>\n    <div>\n      <h1>Welcome to Pairwise!</h1>\n      <p>\n        CSS let's you change the color and shape of HTML!\n      </p>\n    </div>\n  </body>\n</html>\n",
          "solutionCode": "<html>\n  <header>\n    <style>\n      body {\n        background: #1a4a2e;\n        padding-left: 12px;\n        padding-right: 12px;\n      }\n      h1 {\n        /* Here! Look Here! */\n        color: gold;\n      }\n      p {\n        color: tomato;\n      }\n    </style>\n  </header>\n  <body>\n    <div>\n      <h1>Welcome to Pairwise!</h1>\n      <p>\n        CSS let's you change the color and shape of HTML!\n      </p>\n    </div>\n  </body>\n</html>\n",
          "content": ""
        },
        {
          "id": "Ve$3UsQ5",
          "type": "typescript",
          "title": "Get Started Programming",
          "instructions": "HTML and CSS are the building blocks for creating webpages, but to give a webpage real functionality you need a programming language. That's where JavaScript comes in. In our course, we will teach you TypeScript, which is just a version of JavaScript with additional features built on top.\n\nThere is a simple function written in TypeScript in the editor below, with a `name` variable\\. The variable is an empty string right now, i.e. `\"\"`. Change this to include your name, for instead: `const name = \"Sam\"`. When you are ready, press the \"Run Code\" button on the top right of the editor.",
          "testCode": "test(\"The `name` variable in `sayMyName` should include your name! _HINT: Only write your name, don't change the other code._\", () => {\n  const result = sayMyName();\n\n  // Check the name exists\n  expect(typeof result).toBe(\"string\");\n  expect(result.length > 0).toBe(true);\n\n  // Get and parse log messages\n  const logs = __secret_log_box.map(JSON.parse).map((x) => x[0]);\n\n  // Check it's in the log\n  const wasLogged = logs.find((l) => l === result);\n  expect(wasLogged).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "// This is a function\nfunction sayMyName() {\n  // The next line contains a variable called 'name'.\n  const name = \"\";\n\n  // Say the name!\n  console.log(name);\n  return name;\n}\n\nsayMyName();\n",
          "solutionCode": "// This is a function\nfunction sayMyName() {\n  // The next line contains a variable called 'name'.\n  const name = \"Sean\";\n\n  // Say the name!\n  console.log(name);\n  return name;\n}\n\nsayMyName();\n",
          "content": ""
        },
        {
          "id": "DCpPddyK",
          "type": "typescript",
          "title": "Enter TypeScript",
          "instructions": "We promised to teach you to program and we're going to live up to that promise\\!\n\nCheck out the editor below. That's a program\\! Don't worry if it doesn't make sense to you yet, take a look and see if you can understand what's going on. Well written code should be readable and understandable to someone unfamiliar with it.\n\n**To solve the challenge, simply uncomment the code on line 28 \\(remove the two slashes at the beginning of the line\\).**\n\nPress the \"Run Code\" button, and watch the output in the console on the right of the screen.",
          "testCode": "test(\"All of the items in the `interestingBoxOfThings` should be logged to the console.\", () => {\n  // Check all the items were logged\n  const logSet = new Set(__secret_log_box.map(JSON.parse).map((x) => x[0]));\n\n  let undefinedExists = false;\n  for (const loggedItem of interestingBoxOfThings) {\n    // The Set doesn't work for undefined, check it separately\n    if (loggedItem !== undefined) {\n      expect(logSet.has(loggedItem)).toBe(true);\n    } else {\n      undefinedExists = true;\n    }\n  }\n\n  expect(undefinedExists).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "// Variables with type signatures!\nconst aString: string = \"I am a string!\";\nconst aNumber: number = 52198;\nconst aBoolean: boolean = true;\nconst aNull: null = null;\nconst anUndefined: undefined = undefined;\n\ntype InterestingThing = string | number | boolean | null | undefined;\ntype InterestingThingBox = InterestingThing[];\n\n// A box of interesting things!\nconst interestingBoxOfThings: InterestingThingBox = [\n  aString,\n  aNumber,\n  aBoolean,\n  aNull,\n  anUndefined,\n];\n\n// A function to see what's in the interesting box!\nconst whatsInTheInterestingBox = (box: InterestingThingBox) => {\n  console.log(\"Contents of the interesting box:\");\n  for (const thing of box) {\n    console.log(thing);\n  }\n};\n\n// Pass the box to the function to see what's inside!\n// whatsInTheInterestingBox(interestingBoxOfThings);\n",
          "solutionCode": "// Variables with type signatures!\nconst aString: string = \"I am a string!\";\nconst aNumber: number = 52198;\nconst aBoolean: boolean = true;\nconst aNull: null = null;\nconst anUndefined: undefined = undefined;\n\ntype InterestingThing = string | number | boolean | null | undefined;\ntype InterestingThingBox = InterestingThing[];\n\n// A box of interesting things!\nconst interestingBoxOfThings: InterestingThingBox = [\n  aString,\n  aNumber,\n  aBoolean,\n  aNull,\n  anUndefined,\n];\n\n// A function to see what's in the interesting box!\nconst whatsInTheInterestingBox = (box: InterestingThingBox) => {\n  console.log(\"Contents of the interesting box:\");\n  for (const thing of box) {\n    console.log(thing);\n  }\n};\n\n// Pass the box to the function to see what's inside!\nwhatsInTheInterestingBox(interestingBoxOfThings);\n",
          "content": ""
        },
        {
          "id": "yxZjmD0o",
          "type": "media",
          "title": "Welcome to Pairwise! 🎉",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/VRQNU8UNuWM",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now that you've solved your first few challenges and seen how easy it is to get started, we want to take a moment to introduce you to how Pairwise works and help you get started working through the \ncourse\\.\n\n## The Course\n\nThe Pairwise curriculum is composed of 13 modules. Together, they give you a complete education in full\\-stack software development. Pairwise can give you all the skills to start a new career in software development. Our curriculum focuses on teaching **TypeScript, React, **and** NodeJS**. If you are curious more about why we chose these technologies, feel free to [read our rationale here](https://www.pairwise.tech/curriculum).\n\nYou can access the course navigation by clicking the menu icon in the top left. This is always available for you to navigate to any challenge.\n\nThe first two modules introduce HTML/CSS and TypeScript, so they cover many of the basics of web development and programming. These two modules are completely free and no signup is required\\! However, you can create an account at any time \\(also free\\!\\) to track your progress \\(don't worry, we will track your progress even if you don't have an account yet\\).\n\nIf you do decide to continue and complete the entire course, there will be a one\\-time payment which will give you lifetime access to the course. You can make this payment with a credit card at anytime after signing up.\n\nThe primary mode of learning is through short, interactive coding challenges like the one you just solved. If you persist through the entire course, you will also build up a portfolio of projects you build and deploy on your own\\! You can use this portfolio as a showcase of your skills to future employers.\n\n## Getting Started\n\nEnough talking\\! To start learning you just need to start on the next challenge. Each challenge should just take 5\\-10 minutes to complete and will be simple and interactive just like the last. We know you're eager to click that **Next Challenge** button, but before you do we encourage you to watch this short video tutorial of how to use the _Pairwise Workspace_. It will give you some helpful tips which will help you get started, and after that we'll get out of your way\\! Good luck and welcome\\!"
        },
        {
          "id": "JzokCvMM",
          "type": "media",
          "title": "How to learn (anything)",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Did you know that learning is itself a skill we can all learn and get better at? Let's talk a bit about the meta game of learning: How to learn _efficiently_. \n# Get a high\\-level view of what you're learning\n\nWhat I mean is, before diving in to the details something new \\(like this course\\) get an overview. I'll illustrate with an example: \n\n## To get an overview of this course you could...\n\n* Review the high level rational for the course [on the curriculum page](https://www.pairwise.tech/curriculum/). **\\(2 minutes\\)**\n* Open the navigation menu and skim through the titles. Try to internalize the high level roadmap. **\\(4 minutes\\)**\n   * Don't just read the module title and move on. Pause for at least 10 seconds and think \"Have I heard of this before? Does any of my existing knowledge tie in to this concept?\" \\(The answer may well be \"no\" but just try it out. For example, you've probably heard of databases. You may not know how they work but having heard of something can help you remember information about it later.\n   * You won't know how everything works just yet, but you can think to yourself \"So I'll start with basic programming concepts, then a programming language and eventually servers and databases.\"\n   * Having a clear idea in your head of where you're going will give you a better sense of your own progress and help you fit the different pieces together as you learn them.\n* When you start a module, skim through the navigation to get a sense of what challenges there will be and how many there are. **\\(5\\-10 minutes\\)**\n   * Also, open up the projects section and read through a project. Start at the end like this may be counterintuitive but it will give you a concrete example of _what_ you will learn. The projects are interim goals on your path to becoming a programmer. If a project sounds interesting keep it in mind as you go through challenges and you'll see how some challenges will apply to the project.\n\n\nThe same applies to traditional studies as well. If you just picked up a textbook try reading through the table of contents first, then skip to some problem sets _at the end_ of a few lessons to get a feel for what there is to learn.\n\nPart of what makes learning programming difficult is that ++there's no clear roadmap for how to become a programmer++. We know this because we've gone through the learning process ourselves and all of us had to create our own roadmap. That's why we've created the curriculum the way we did. Pairwise is a full roadmap for becoming a programmer. \n# Prioritize your learning\n\nThere's **A LOT** you could be learning in programming. If you want to see rapid progress you need to learn what's most relevant, first. If there's any time left you can learn more obscure topics later.\n\nFor example, here are some things you might be tempted to learn:\n\n* Multiple programming languages\n   * This is not a good use of time initially. Most programmers can program in more than one language, but we all had our _first_ language\\. Just learn one language at first and things will go much smoother. For this course we've chose TypeScript and we've laid out our reasoning here: [Pairwise Curriculum](https://www.pairwise.tech/curriculum/).\n* Obscure language features\n   * Every language has them, and for good reason—sometimes you need obscure features to get the job done. JavaScript \\(the language TypeScript is built on top of\\) is no exception, but these are features you can learn as you need them. For example, an introductory book on JavaScript will teach you about Bitwise Operators. When you come across this chapter **RUN**. This is not relevant yet and if it becomes relevant later you can learn about it then.\n* All language features\n   * Some people obsess about learning a language _completely _\\(I know because I used to be one such person...\\). This is not helpful. \n   * If you were just starting to learn English you would not benefit much from learning words like \"elucidate\", \"sanguine\", and \"wharf\" \\(if you disagree about this last one, you probably live near a wharf\\). You can be fully fluent in English without knowing every word. Likewise you can be fully fluent in a programming language without knowing every aspect of it. \n      * Confession: This author never learned JavaScript Generators 🙀They were just never needed for my work or personal projects. \n\n# Sleep\n\nThis is might be obvious but it bears repeating. ++When you're learning you need lots of sleep++. Your brain uses sleep in part to assimilate information you learn and synthesize new information. \n\nYou will be amazed how concepts you were barely grasping one day become easily understood and utilized the next day. It doesn't always happen as quickly as one day but it does happen. It's similar to learning a new human language. At first, nothing makes sense. The sounds are foreign, the script is tedious, the culture is incomprehensible. However, day by day sounds, words, actions all become more clear until eventually you're dreaming and conversing in a foreign language.\n\nSo get as much sleep as you can. You will learn more in less time.\n# Repetitions \\(aka practice\\)\n\nYou're going to need a lot. Despite learning as efficiently as you possibly can you will still need to do something more than once to get good at it. In fact you need to do it thousands of times.\n\nTo help convince you, consider...\n\n* **Sports**: How many times has Tiger Woods swung a golf club? How many times has Steph Curry shot a 3\\-pointer?\n* **Work**: How many do future\\-doctors _practice_ before they actually earn the title of doctor? Doctors may be extreme but also consider lawyers, plumbers, physicists, Spanish grammar teachers...\n* **School**: Teachers at all levels recognize the importance of repetitions. Homework is just a mechanism to incentivize repetitions.\n\n\n> To get good at something you need to do it many, many times ++even if you're learning as efficiently as possible++\n\nThis is where the challenges come in. We've created many challenges in part because we want you to attack the same problems again and again from different angles. Even if a challenge seems easy remember that you're completing more repetitions and getting better.\n# Real learning won't feel easy...\n\n... but that doesn't mean it's \"hard.\" When you're really learning you will be stretching your brain just a bit beyond what it already knows. This isn't going to feel easy, but it might feel exciting or fun. It might feel hard too, but even if it does, remember that it it gets easier with time. The better adapted your brain is to the task at hand the easier it will be. \n\nYour brain is literally building new neural connections when you learn—by the end of the course you will have a physically different brain than when you started. This won't happen overnight.\n# In summary\n\n* Start with an overview of whatever you're trying to learn\n* Prioritize your learning so you only spend time on the highest\\-impact concepts\n* Get _lots_ of sleep\n* Practice, practice, and then practice some more\n* Don't get discouraged. Learning isn't easy but it's extremely rewarding\n\n\nAnd if you feel that we left something out, you disagree about a specific point or you just want to leave us a note **please do**. We'd love to hear from you. \n\\(The feedback button is the question mark in the upper\\-right of the page\\)"
        }
      ]
    },
    {
      "free": true,
      "id": "fpvPtNWkC",
      "title": "HTML & CSS",
      "challenges": [
        {
          "id": "IEC6FcKI",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Welcome to Module 1\\! We'll be using HTML and CSS to lay a foundation for programming and get some practice writing real code.\n# What you will do in this module\n\n* Write a bunch of real code\n* Build your own web page\n* Put a website online\n\n\nThe challenges in this module will move fast and include a lot of video content. These are your first steps into the world of programming, and if you continue along this path you'll look back some day and remember where it all started: Right here\\!\n# Why are we learning this?\n\nWe _love_ the question \"why\" and we'll answer that in the [introductory lesson on HTML](/workspace/5ziJI35f#h-why-are-we-learning-html).\n\nOnward\\!"
        },
        {
          "id": "5ziJI35f",
          "type": "section",
          "title": "HTML, the language of the web",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "HTML is the reason there is anything online to look at. It's ubiquitous online because without it there would be nothing. When you visit Facebook or Google or Reddit you're reading HTML. You're reading HTML right now.\n# What is HTML?\n\nHTML is a language for putting content into web browsers and telling browsers what content means what. Consider the following items:\n\n* Some plain text\n* Some _bold italic_ text\n* Some `code` text\n\n\nIt's easy to tell the difference and that's the point. Different parts of a webpage mean different things, and as programmers we need a way of telling a web browser what's what.\n\nLet's take another example. Consider the list above. Howe does the browser know that its' a list? How does it know to include a small dot in front of the text? The answer is HTML. \n\nConsider what that three\\-item list looks like to you, the reader, and also consider what it looks like in code:\n\n```html\n<ul>\n  <li>Some plain text</li>\n  <li>\n    Some <strong><em>bold italic</em></strong> text\n  </li>\n  <li>Some <code>code</code> text</li>\n</ul>\n\n```\n\nIt looks quite different\\! The code above is what the browser sees. A `ul` with some `li`s inside tell the browser we want a list. Putting some text inside a `strong` and an `em` will make the text **bold** and _italic_ respectively\\. \n# Why are we learning HTML?\n\nA few reasons: \n\n* It's visual\n* It gives you real skills, quickly\n* It's foundational\n\n\nHere's what this in more detail.\n\n## 1\\. It's visual\n\nWhat you write in code will appear on screen. This is hugely important when you're first learning. Programmers specialize in telling computers what to do, and computers don't always give you visual feedback to let you know that your commands are achieving the desired result.\n\nThink about the clock on your phone. Seem simple right? It shows the time. It also adjusts for daylight savings time, or if you physically enter a different timezone. It can display the time in 24\\-hour format or AM\\-PM format. Consider this:\n\n* How does your phone know the time? \n* How does the clock update when daylight savings time shifts or when you step off of a plan? \n\n\nThis functionality, which we all take for granted, was programmed by someone. Imagine you are that person. If you program the phone to update its time based on your GPS location, how do you know it worked? There's no immediate visual feedback to tell you whether your code worked or not.\n\nIf you're writing HTML there is visual feedback, so you will know immediately if your code is doing what you want it to.\n\n## 2\\. It gives you real skills, quickly\n\nIf you learn the basics of HTML, guess what? You can make your own website. In fact, in this course we'll walk you through creating a website from scratch and getting it online for free. \n\nAt the end of this module you will be able to build something real, that you can see online and show to other people. In fact, using just the skills in this first module you can even build websites for other people and **get paid to do it**. There are many people around the world who make a living this way. \n\nOf course our goal is to give you the skills to be a full software engineer so we will go well beyond HTML. Which brings us to the final point...\n\n## 3\\. It's foundational\n\nHTML is everywhere, and not just on the web.\n\nConsider Facebook, Twitter, Reddit, Google, Amazon, Netflix, etc. These massive companies all rely on HTML. They all have mobile apps too, but the web component is a significant part of their business.\n\nConsider also that the principles you learn while building HTML can translate into mobile app development as well. We will touch on this significantly in later parts of the course. For now, let's focus on HTML and dive in.\n# HTML Syntax\n\n\n## Tags\n\nAll those things you saw in the code at the beginning of the lesson, `<ul>`, `<li>`, `<strong>`, etc. are called tags. Don't worry, you don't have to remember this yet, but you will over time because this is how programmers talk about HTML and how we walk about it in our videos. \n\n### Anatomy of an HTML tag\n\nTags usually have two parts:\n\n* The opening tag\n* The closing tag\n\nOpening tags include a `<` symbol, followed by the name of the tag, followed by the `>` symbol\\. Closing tags are almost exactly the same. The only difference is that closing tags have a `/` symbol right after the `<`. Example:\n\n* `<p>I'm a paragraph</p>`\n\n\nReading through one character at a time, the opening \"P tag\" is `<` \\+ `p` \\+ `>`. The closing P tag is `<` \\+ `/` \\+ `p` \\+ `>`. You can use this rule for every tag you write. \n\nHere are a few more examples. Try to see the pattern of opening `<` \\+ tag name \\+ `>` and closing `</` \\+ tag name \\+ `>`.\n\n* `<a>Link</a>`\n* `<button>Click me</button>`\n* `<h1>Heading text</h1>`\n\n\n### Self\\-closing tags\n\nNot all tags have to correspond to a closing tags. Sometimes it wouldn't make sense to have any text inside the tag. For example, a `<p>` means a paragraph so you would expect some text inside. However, an `<img>` tag means an image and a `<video>` means a video. When you see one of these tags the browser knows to show the actual image or the actual video that the tag corresponds to, so there is no need to write additional text inside the tag. This is also true of input fields, where you can type things in to a webpage. Ever logged in to a site? Yeah, like that.\n\nHere are some common tags that are self\\-closing. \n\n* `<img />`\n* `<video />`\n* `<input />`\n\n\nNotice the syntax here. It's like the opening tag and closing tag got smushed together because there's nothing in between:\n\n* `<img></img>` becomes `<img />`\n* `<video></video>` becomes `<video />`\n* `<input></input>` becomes `<input />`\n\n\n## Properties\n\nThe final piece before we dive in to some code\\! Properties tell the browser things about the tag itself. This will become more clear with examples. Consider the `<img />` tag mentioned above. That points to an image, but how does the browser now what image? With a property.\n\n```markup\n<img src=\"https://placekitten.com/g/200/200\" />\n\n```\n\nThe key above is the `src` property\\. The syntax for properties looks like: property name \\+ `=` \\+ `\"` \\+ property value \\+ `\"`. All of this goes inside the opening tag, which is the only tag if it's self\\-closing like the `<img />` above\\.\n\nNow consider another example, perhaps the single most important property in all of HTML. The `href`:\n\n```markup\n<a href=\"https://www.reddit.com/r/ProgrammerHumor/\">Don't click me if you value your time...</a>\n\n```\n\nThe `a` tag is the \"link\" on the web. It's what you click when after searching for something, or when shopping, or when doing research. It's a fundamental part of the web. Web pages include `a` tags which link to other pages. Without links the internet would just be a bunch of disperate web pages that you had to visit directly by typing the address into your browser. OK, back on topic.\n\nThe `href` property of the `a` tag tells the browser where to send someone when they click the link. \n\nThese examples are just meant to be an overview, in the coming challenges you'll use all these tags directly. There's no substitute for hands\\-on practice. Onward\\!"
        },
        {
          "id": "9scykDold",
          "type": "markup",
          "title": "Add a h1 Tag in HTML",
          "instructions": "* Right below the existing `p` tag add an `h1` tag with the text \"Hello\\!\" inside it.\n\n",
          "starterCode": "<p>This is an HTML file. Add your code below this line</p>",
          "solutionCode": "<p>This is an HTML file. Add your code below this line</p>\n<h1>Hello!</h1>",
          "testCode": "test(\"There should be an `h1` tag with the text 'Hello!'\", () => {\n  expect(get(\"h1\").innerHTML).toBe(\"Hello!\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/LMrZDCjO_60",
          "content": "We're starting off with some simple text text tags. The web is full of text so these are some of the most common tags you will find. For now the webpages we create may not look like much, just some different text here an there, but soon we will learn about how to make things look much more interesting."
        },
        {
          "id": "9scykdziW",
          "type": "markup",
          "title": "HTML Heading Tags",
          "instructions": "In the last challenge you added an `h1` tag, which represents a \"heading 1\" tag in HTML. In total, there are six tags like this. As you might guess, the second heading tag looks like this: `<h2>`. In the editor below, add one of each heading tag. Each tag should contain some text, feel free to add any text you feel like inside the tags\\! When you are finished, take a look at the preview to the right to see the results\\!",
          "starterCode": "<h1>This is a heading 1 tag</h1>\n",
          "solutionCode": "<h1>This is a heading 1 tag</h1>\n<h2>This is a heading 1 tag</h2>\n<h3>This is a heading 1 tag</h3>\n<h4>This is a heading 1 tag</h4>\n<h5>This is a heading 1 tag</h5>\n<h6>This is a heading 1 tag</h6>",
          "testCode": "['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(tag => {\n    test(`There should be an \\`${tag}\\` with text inside`, () => {\n        expect(typeof get(tag).innerHTML).toBe(\"string\")\n    })\n})\n",
          "videoUrl": "",
          "content": ""
        },
        {
          "id": "9scykuYtf",
          "type": "markup",
          "title": "Nesting Tags",
          "instructions": "So far we have learned how to add some HTML tags to a document. HTML is pretty flexible, and you can also nest tags inside one another. Another tag we have not seen yet is the `<b>` tag, which makes text... bold\\! In the editor below, create a `<p>` tag with some text inside. Then, choose some part of the text and enclose it in a `<b>` tag to make it bold.",
          "starterCode": "",
          "solutionCode": "<p>This is a paragraph tag, <b>this is bold text inside it!</b></p>\n",
          "testCode": "test(\"There should be a `p` tag with text inside.\", () => {\n  const element = get(\"p\");\n  return typeof element.innerHTML === \"string\";\n});\n\ntest(\"There should be a `b` tag with text inside.\", () => {\n  const element = get(\"b\");\n  return typeof element.innerHTML === \"string\";\n});\n\ntest(\"The `p` tag should contain a `b` tag with text inside.\", () => {\n  expect(typeof get(\"p b\").innerHTML).toBe(\"string\");\n});\n",
          "videoUrl": "",
          "content": ""
        },
        {
          "id": "ny51KoEI",
          "type": "markup",
          "title": "Style some text",
          "instructions": "* Change the color of the `<p>` tag to `red`\n* Change its text to `Exciting red text`\n\n\nIf you're unsure how to style things, that's fine\\! Check out the supplemental content for help.",
          "starterCode": "<style>\n  /* Your code here */\n</style>\n<p>Just plain text</p>\n",
          "solutionCode": "<!DOCTYPE html>\n<style>\n  p {\n    color: red;\n  }\n</style>\n<p>Exciting red text</p>\n",
          "testCode": "test(\"There should be a `p` tag with red text\", () => {\n  const el = get(\"p\");\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"red\"));\n});\n\ntest(\"There should be a `<p>` tag with the text 'Exciting red text'\", () => {\n  const el = get(\"p\");\n  expect(el.innerHTML).toBe(\"Exciting red text\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/MsaKKxVTsEk",
          "content": "This is a quick intro to CSS before we really dive in. If you're thinking to yourself \"You haven't explained this yet\" then you're right. It's intentional\\!\n\nWe'll go more in depth about what's going on shortly."
        },
        {
          "id": "CuwykKRM",
          "type": "section",
          "title": "Enter CSS",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "CSS stands for Cascading Style Sheets, but that's unimportant. What matters here is that what CSS is how you change the way things _look_ on the web.\n\nWhere HTML is the \"stuff\", the actual content on a webpage, CSS is how all that stuff looks. Is the background dark with light text \\(like what you're reading right now\\)? Is there a menu bar near the top? How does the form on screen try to grab your attention with color and positioning? These are all questions CSS can answer.\n\nTo be specific, CSS tells the browser two things:\n\n* What we want to style\n* What we want it to look like\n\n# Selectors\n\nSelectors tell the browser what you want to style.\n\nFor example, you might say to yourself \"I want all the paragraphs on my site to be red\\!\" A very elegant design decision. In order to communicate this to the browser we can use CSS:\n\n```css\np {\n  color: red;\n}\n\n```\n\nRemember the `<p>` tag from earlier lessons? Using the tagname, `p`, we were able to \"select\" every paragraph on the page and make them all red. In this example `p` is the selector. Now let's talk about what's inside those brackets.\n# Properties\n\nCSS properties tell the browser how you want something to look. Let's say you're tired of drab white\\-background websites and want to mix it up with a `teal` background\\.\n\n```css\nbody {\n  background: teal;\n}\n\n```\n\n`body` will select the entire visible area of the web page, but we will touch on that more later. Focus on `background: teal;`. Here we have another CSS property `background` with a value of `teal`.\n\n> CSS properties take the form: property name \\+ `:` \\+ property value \\+ `;`.\n\n`background` and `color` are just two examples. There are quite a few CSS properties you can use, and the combination of them is responsible for styling every site you use on the internet.\n\nIf you're curious you can skim through [the full list of CSS properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference), but we don't recommend it. It's a very dry read and by itself won't tell you what you really want to know which is what each property does. Furthermore, some CSS properties are so obscure that you can go your entire career without learning them on the job because they are just not useful in most context.\n# Blocks\n\nA \"block\" of CSS is simply the combination of selectors and properties. All the examples above are CSS blocks.\n\n> CSS blocks take the form: Selectors \\+ `{` \\+ properties \\+ `}`\n\nThese terms are not important for their own sake, but so that you aren't lost when you're working outside of this course. \n# The <style\\> tag connects HTML and CSS\n\nYou can't just write CSS anywhere in an HTML document and expect it to work. You have to write it **within a \\*\\***`style`**\\*\\* tag**. Like this:\n\n```html\n<style>\n  p { color: red; }\n</style>\n<p>Red text!</p>\n\n```\n\nIf you write that without the `style` tag the browser will literally put `p { color: red; }` on the page for everyone to see. By putting that CSS code within a `style` tag you are telling the browser to treat it as CSS rather than HTML.\n# Specificity and the HTML class and id props\n\nImagine you have two paragraphs, and you want one to be `red` and the other to be `blue`. How would you select just one? Here's the HTML:\n\n```html\n<p>I want a blue background</p>\n<p>I want a red background</p>\n\n```\n\nYou might try the following CSS:\n\n```\np { background: red; }\np { background: blue; }\n\n```\n\nHowever, both paragraphs will be `blue`\\! Why? Two things are happening here:\n\n1. `p` selects every `<p>` tag, not just the first or the second.\n1. When you have two identical selectors \\(`p` and `p` above\\) and two identical property names \\(`background` and `background` above\\) whichever one comes last wins.\n\nPoint 1 can be addressed with IDs and classes, which we will discuss shortly.\n\nPoint 2, how conflicting styles get applied by the browser, is called \"specificity\". As in, the second CSS block is considered more _specific_ than the first, and therefore it wins and gets applied.\n\n## IDs\n\nAn ID is a unique identifier in the browser and it can be used as a selector. \n\n* There should only be 1 of any ID on a web page.\n* IDs are very specific, meaning if you select an ID in your CSS that CSS will most likely win over other styles\n* HTML uses the `id` property, CSS uses the `#` selector\\.\n\n\n```html\n<style>\n  #my-paragraph { color: red; }\n  p { color: blue; }\n</style>\n<p id=\"my-paragraph\">Red text!</p>\n\n```\n\nEven though the `p` styles come last, the `#my-paragraph` styles get applied because they are more specific.\n\n> In general don't use IDs, use classes.\n\n## Classes\n\n* A class can be applied to as many things as you want.\n* Classes are more specific than tag names\n* HTML uses the `class` property, CSS uses the `.` selector\\.\n\n\n```markup\n<style>\n  .red-text { color: red; }\n  p { color: blue; }\n</style>\n<p class=\"red-text\">Red text!</p>\n\n```\n\nThe text is again red because classes are more specific than tag names.\n\n> Classes are extremely useful and flexible. Use them a lot.\n# More to come...\n\nThat's a lot of information, and mostly meaningless without practice. There's more to CSS which we will dive into later, but for now let's practice everything we just talked about."
        },
        {
          "id": "KlxN3f11",
          "type": "markup",
          "title": "Changing colors",
          "instructions": "* Change the background color so that it is `black`.\n* Change the text color of the `<p>` tags and the `<h1>` tag so that it is `white`.\n\nYour challenge is to invert the colors of the page. Instead of having black text on a white background let's have some white text on a black background. You will find the `background-color` and `color` CSS properties useful.",
          "testCode": "// test(\"The page background should be black.\", () => {\n//   const el = get(\"body\");\n//   expect(getStyle(el, \"background-color\")).toBe(cssColor(\"black\"));\n// });\n\ntest(\"The `<h1>` tag should be white.\", () => {\n  const el = get(\"h1\");\n  expect(el).toBeTruthy();\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"white\"));\n});\n\ntest(\"The `<p>` tag should be white.\", () => {\n  const els = getAll(\"p\");\n  els.forEach((el) => expect(getStyle(el, \"color\")).toBe(cssColor(\"white\")));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7Xl0Acybsq8",
          "starterCode": "<!-- Put your code up here, above everything else. You will need a <style> tag -->\n<h1>Welcome to some text!</h1>\n<p>\n  Now we start the paragraphs! As you do more and more development you will\n  discover that there is a surprising amount of Latin online.\n</p>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nunc erat,\n  aliquet sed pellentesque ut, feugiat non orci. Nam consectetur egestas odio,\n  sed rutrum diam condimentum et. Nulla at cursus ante. Proin mollis lorem mi,\n  sit amet malesuada sem convallis sed. Nullam at lacus eget arcu facilisis\n  tempus vel viverra mauris. Nulla facilisi. Proin hendrerit ante a diam\n  sagittis, quis tristique sem facilisis. Sed sed viverra ante, in dignissim\n  neque.\n</p>\n\n<p>\n  Nullam id eros nec nunc euismod condimentum. Pellentesque habitant morbi\n  tristique senectus et netus et malesuada fames ac turpis egestas. Praesent sit\n  amet nulla libero. Pellentesque diam augue, condimentum eu convallis eu,\n  porttitor nec neque. Sed fringilla ipsum felis, ut rutrum lacus vehicula vel.\n  Nam et porta mauris. Suspendisse gravida ligula nec elit faucibus, et\n  ultricies lorem fermentum. Aliquam in erat a orci maximus aliquet vel id\n  risus. In tincidunt diam non lectus consequat, eu cursus nunc molestie. Duis\n  euismod turpis urna, a volutpat lorem condimentum ac. Suspendisse nec orci\n  dolor. Mauris eget pretium nulla. Donec convallis, elit a pellentesque\n  convallis, elit elit efficitur est, ut molestie justo sapien sed ligula.\n</p>\n",
          "solutionCode": "<style>\n    body {\n        background: #000000;\n    }\n    h1, p {\n        color: white;\n    }\n</style>\n<h1>Welcome to some text!</h1>\n<p>\n  Now we start the paragraphs! As you do more and more development you will\n  discover that there is a surprising amount of Latin online.\n</p>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nunc erat,\n  aliquet sed pellentesque ut, feugiat non orci. Nam consectetur egestas odio,\n  sed rutrum diam condimentum et. Nulla at cursus ante. Proin mollis lorem mi,\n  sit amet malesuada sem convallis sed. Nullam at lacus eget arcu facilisis\n  tempus vel viverra mauris. Nulla facilisi. Proin hendrerit ante a diam\n  sagittis, quis tristique sem facilisis. Sed sed viverra ante, in dignissim\n  neque.\n</p>\n\n<p>\n  Nullam id eros nec nunc euismod condimentum. Pellentesque habitant morbi\n  tristique senectus et netus et malesuada fames ac turpis egestas. Praesent sit\n  amet nulla libero. Pellentesque diam augue, condimentum eu convallis eu,\n  porttitor nec neque. Sed fringilla ipsum felis, ut rutrum lacus vehicula vel.\n  Nam et porta mauris. Suspendisse gravida ligula nec elit faucibus, et\n  ultricies lorem fermentum. Aliquam in erat a orci maximus aliquet vel id\n  risus. In tincidunt diam non lectus consequat, eu cursus nunc molestie. Duis\n  euismod turpis urna, a volutpat lorem condimentum ac. Suspendisse nec orci\n  dolor. Mauris eget pretium nulla. Donec convallis, elit a pellentesque\n  convallis, elit elit efficitur est, ut molestie justo sapien sed ligula.\n</p>\n",
          "content": "# The <body\\> tag\n\nI this lesson we touched on the `<body>` tag, which the browser will insert into the document for you if you don't do it yourself.\n# HTML colors\n\nIn HTML there are several ways to define colors. The most simple is what we've been doing so far, which is using colors that have names like `blue`, `red`, `black`, `green`, etc. However, if you had to rely on colors that have names you would be quite limited. HTML let's you define any custom color you want using some different syntax, namely HEX codes. For example, the color `white` can also be written `#ffffff`. Likewise `black` is `#000000` and `blue` is `#0000ff`. \n\nIn the meantime you can use named colors. There are quite a few, and often if you guess a color it will exist. You can see the full list here: <https://www.w3schools.com/colors/colors\\_names.asp\\>"
        },
        {
          "id": "wCrQh1f4",
          "type": "markup",
          "title": "Highlighting text",
          "instructions": "Use the `<span>` tag to highlight some text within the paragraph.\n\nSometimes you want to style parts of text _inside_ a paragraph or a heading. You can accomplish this with the span tag.",
          "starterCode": "<style>\n  span {\n    /* hm... need some styling in here */\n  }\n</style>\n<p>\n  What a paragraph this is! Let's highlight something.\n</p>",
          "solutionCode": "<style>\n  span {\n    background: yellow;\n  }\n</style>\n<p>What a paragraph this is! Let's <span>highlight</span> something.</p>",
          "testCode": "test(\"There should be a `<span>` tag with a yellow background wrapping some text\", function() {\n  const el = get(\"span\");\n  expect(el).toBeTruthy();\n  expect(el.innerHTML).not.toBe(\"\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"yellow\"));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/fapBaduhIiY",
          "content": "Placeholder supplementary content..."
        },
        {
          "id": "5oqm6GmH",
          "type": "markup",
          "title": "The div tag — Putting Things in Boxes",
          "instructions": "* Give the page an `orange` background\n* Wrap the existing `h1` and `p` tags in a `div`\n* Style the div to have a `teal` background",
          "testCode": "test(\"There should be a `div`\", () => {\n  expect(get(\"div\")).toBeTruthy();\n});\n\ntest(\"The `h1` and `p` tags are within the div\", () => {\n  expect(get(\"div h1\")).toBeTruthy();\n  expect(get(\"div p\")).toBeTruthy();\n});\n\ntest(\"Body should have orange background\", () => {\n  const body = get(\"body\");\n  const bg = getStyle(body, \"background-color\");\n  expect(bg).toBe(cssColor('orange'));\n});\n\ntest(\"Div should have a teal background\", () => {\n  const el = get(\"div\");\n  const bg = getStyle(el, \"background-color\");\n  expect(bg).toBe(cssColor('teal'));\n});\n",
          "videoUrl": "",
          "starterCode": "<h1>Oh what a day</h1>\n<p>\n  A wonderful day to start wrapping some divs!\n</p>\n",
          "solutionCode": "<style>\n  body {\n    background: orange;\n  }\n  div {\n    background: teal;\n  }\n</style>\n<div>\n  <h1>Oh what a day</h1>\n  <p>\n    A wonderful day to start wrapping some divs!\n  </p>\n</div>\n",
          "content": ""
        },
        {
          "id": "2kQ6adnb",
          "type": "markup",
          "title": "CSS Classes",
          "instructions": "* Create a `highlight` class to style and apply it to one of the span tags\n* Create a `highlight-blue` class and apply it to one of the span tags\n* Style the `highlight` so that it has a `yellow` background\n* Style the `highlight-blue` tag so that it has a `skyblue` background\n\nThis lesson is all about CSS class names and how they can be used to style different things. Check out the supplemental content area below for more.",
          "testCode": "test(\"At least one `span` should have the `highlight` class\", () => {\n  const spans = getAll(\"span\");\n  const hasClass = spans.some((x) => x.classList.contains(\"highlight\"));\n  expect(hasClass).toBe(true);\n});\ntest(\"At least one `span` should have the `highlight-blue` class\", () => {\n  const spans = getAll(\"span\");\n  const hasClass = spans.some((x) => x.classList.contains(\"highlight-blue\"));\n  expect(hasClass).toBe(true);\n});\ntest(\"The `.highlight` class should have a `yellow` background\", () => {\n  const el = get(\".highlight\");\n  const bg = getStyle(el, \"background-color\");\n  expect(bg).toBe(cssColor('yellow'));\n});\ntest(\"The `.highlight-blue` class should have a `skyblue` background\", () => {\n  const el = get(\".highlight-blue\");\n  const bg = getStyle(el, \"background-color\");\n  expect(bg).toBe(cssColor('skyblue'));\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  span {\n    background: pink;\n  }\n  /* Your code here *?\n</style>\n<p>\n  What if <span>we</span> wanted to <span>highlight</span> different text with\n  different <span>colors</span>?\n</p>\n",
          "solutionCode": "<style>\n  span {\n    background: pink;\n  }\n  .highlight {\n    background: yellow;\n  }\n  .highlight-blue {\n    background: skyblue;\n  }\n</style>\n<p>\n  What if <span>we</span> wanted to <span class=\"highlight\">highlight</span> different\n  text with different <span class=\"highlight-blue\">colors</span>?\n</p>\n",
          "content": "# To style many things\n\nCSS classes give you a ton of flexibility when styling your HTML. You can utilize classes to style one type of tag in many different ways. You can also utilize CSS classes to overwrite default styles since they have greater specificity.\n\nThe [CSS lesson](/workspace/CuwykKRM) includes more information."
        },
        {
          "id": "za5KHMo7",
          "type": "markup",
          "title": "Styles within styles",
          "instructions": "* Style the `<a>` tags _within_ the `.menu` div so that they appear vertically\n",
          "testCode": "test(\"The `<a>` tags _within_ `.menu` should have display block\", () => {\n  const els = getAll(\".menu a\");\n  expect(els.every((x) => getStyle(x, \"display\") === \"block\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/LcayPfQGrwM",
          "starterCode": "<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"content\">\n  <p>\n    Welcome to my blog! If you ever want to get in touch I'd love to hear from\n    you. You can contact me using the <a href=\"#\">Contact Page</a>. Cheers!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .menu a {\n    display: block;\n  }\n</style>\n<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"content\">\n  <p>\n    Welcome to my blog! If you ever want to get in touch I'd love to hear from\n    you. You can contact me using the <a href=\"#\">Contact Page</a>. Cheers!\n  </p>\n</div>\n",
          "content": ""
        },
        {
          "id": "B1LBriGU",
          "type": "media",
          "title": "The Box Model",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "I'm no fan of jargon, but sometimes you just gotta learn it. The \"box model\" is one such case because the concepts that fall under the box model are vital to being fluent in CSS.\n# What is the box model?\n\nThe official CSS documentation gives a nice overview:\n\n>  Everything in CSS has a box around it, and understanding these boxes is key to being able to create layouts with CSS, or to align items with other items.\n\nTo put this another way, the box model is how elements are visually arranged on a web page. Now let's get a bit more concrete. There are a number of CSS properties that fall under the banner of the box model that we will be concerned with:\n\n* `width` and `height`: How wide or tall an element is.\n* `margin`: Visual space between elements.\n* `border`: Space around an element between it's `margin` and `padding`.\n* `display`: How an element interacts with other elements on the page. \n\n# The first line of all your CSS: border\\-box\n\nUtilizing the box model with regard to `width`,`height`, `margin`, `border`, and `padding` used to be tricky. The _visual_ size of an element—how large it looks to your eyes on screen—would be calculated as the sum of `width` or `height` \\+ `margin` \\+ `border` \\+ `padding`. This was unintuitive. When you say `width: 300px` you generally expect the element to be `300px` wide\\. \n\nIn fact, that behavior is still the default in browsers, which can make it difficult or time consuming to style your applications. However, **there is a better way**\\! Enter `box-sizing: border-box`.\n\n```css\n* {\n    box-sizing: border-box;\n}\n\n```\n\nWhat is this line doing?\n* `*` is selecting **everything** on the page. Every element. It's a special selector.\n* `box-sizing: border-box` Tells the browser that we want the `width` and `height` properties to determine the _visual_ width and _visual_ height of elements on the page.\n\n\n## A concrete example\n\nThis is all fairly abstract, so here's some code to help. You can drop this into the Sandbox and compare the visual difference between the two `div` elements\\. If you run this code in the sandbox you will notice that the content of the first `div` has the exact same width as the entire second `div`. \n\n```markup\n<style>\n  strong {\n    display: block;\n    text-align: center;\n  }\n  div {\n    background: white;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n  .outer {\n    background: lightblue;\n    width: 300px;\n    padding: 20px;\n    border: 5px solid tomato;\n  }\n  .border-box {\n    box-sizing: border-box;\n  }\n</style>\n<div class=\"outer\">\n  <div>\n    <h3>Standard Box Model</h3>\n    <p>\n      This div shows how the box model works by default. The border, padding and\n      width are all added together to get the visual width of the element.\n    </p>\n  </div>\n</div>\n<div class=\"outer border-box\">\n  <div>\n    <h3>Border Box</h3>\n    <p>\n      This div uses the super fun and interesting\n      <code>box-sizing: border-box;</code> property. You can control it's visual\n      <code>width</code> and <code>height</code> directly without calculation.\n    </p>\n  </div>\n</div>\n<script>\n  // This code just calculates the visual width and displays it in each div\n  for (let el of document.querySelectorAll('.outer')) {\n      const rect = el.getBoundingClientRect();\n      const label = document.createElement('strong');\n      label.textContent = 'Visual Width: ' + rect.width + 'px';\n      el.insertAdjacentElement('afterend', label);\n  }\n</script>\n\n```\n# Resources\n\n* [The CSS box model docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model)\n\n"
        },
        {
          "id": "nel5ggJ1",
          "type": "markup",
          "title": "Box Sizing Border Box",
          "instructions": "* Update the `box-sizing` property of the div so that it's visual width is the same as it's `width` property\\.\n\n\nThe div already has a `width` property set, but the visual width of the element is still wider as you can see. Using the `box-model` property we can tell the browser to use the `width` to control the visual width.",
          "testCode": "test(\"Should make use of border-box\", () => {\n  const el = get(\"div\");\n  expect(getStyle(el, \"box-sizing\")).toBe(\"border-box\");\n});\n\n// NOTE The aux div is created so that we're consistent across envs, including JSDOM env\ntest(\"Should have a visual width equal to the `width` property\", () => {\n  const el = get(\"div\");\n  const widthStyle = getStyle(el, \"width\");\n  const box = el.getBoundingClientRect();\n  const aux = document.createElement(\"div\");\n  aux.style.boxSizing = \"border-box\";\n  aux.style.width = widthStyle;\n  document.body.appendChild(aux);\n  const auxBox = aux.getBoundingClientRect();\n  expect(auxBox.width).toBe(box.width);\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  /* Your code here ... */\n  \n  /* You can ignore the styles below here */\n  strong {\n    display: block;\n    text-align: center;\n  }\n  div {\n    background: white;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n  .outer {\n    background: lightblue;\n    width: 300px;\n    padding: 18px;\n    border: 5px solid tomato;\n  }\n</style>\n<div class=\"outer\">\n  <div>\n    <h3>Border Box</h3>\n    <p>\n      The content within this inner area is white to show the difference between\n      the content area and the div's padding, which is blue.\n    </p>\n  </div>\n</div>\n<script>\n  // This code just calculates the visual width and displays it in the div\n  for (let el of document.querySelectorAll('.outer')) {\n      const rect = el.getBoundingClientRect();\n      const label = document.createElement('strong');\n      label.textContent = 'Visual Width: ' + rect.width.toFixed() + 'px';\n      el.insertAdjacentElement('afterend', label);\n  }\n</script>\n",
          "solutionCode": "<style>\n  div {\n    box-sizing: border-box;\n  }\n  \n  /* You can ignore the styles below here */\n  strong {\n    display: block;\n    text-align: center;\n  }\n  div {\n    background: white;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n  .outer {\n    background: lightblue;\n    width: 300px;\n    padding: 18px;\n    border: 5px solid tomato;\n  }\n</style>\n<div class=\"outer\">\n  <div>\n    <h3>Border Box</h3>\n    <p>\n      The content within this inner area is white to show the difference between\n      the content area and the div's padding, which is blue.\n    </p>\n  </div>\n</div>\n<script>\n  // This code just calculates the visual width and displays it in the div\n  for (let el of document.querySelectorAll('.outer')) {\n      const rect = el.getBoundingClientRect();\n      const label = document.createElement('strong');\n      label.textContent = 'Visual Width: ' + rect.width.toFixed(0) + 'px';\n      el.insertAdjacentElement('afterend', label);\n  }\n</script>\n",
          "content": "The purpose of `box-sizing: border-box;` is to change how the browser uses the `width` property\\. Although it may not be clear now, this simple property will make your journey as developer _much_ easier\\.  \n\nThis is why you will often find some CSS like the following at the very top of many CSS files:\n\n```css\n* { box-sizing: border-box; }\n\n```\n"
        },
        {
          "id": "WqwXPsOO",
          "type": "markup",
          "title": "Margins and centering things on the page",
          "instructions": "* Push the rest of the content away from `.menu` with a bottom margin of `40px`\n* Put `20px` of space between the `<a>` tags in the `.menu` using margins\n* Center `.centered` on the page using margins",
          "testCode": "test(\"The menu should have a bottom margin of 40px\", () => {\n  const el = get(\".menu\");\n  expect(getStyle(el, \"margin-bottom\")).toBe(\"40px\");\n});\n\ntest(\"The `<a>` tags in the `.menu` should have a right margin of 20px\", () => {\n  const els = getAll(\".menu a\");\n  expect(els.length).toBeTruthy(); // Ensure there aren't zero\n  expect(els.every((x) => getStyle(x, \"margin-right\") === \"20px\")).toBe(true);\n});\n\n// NOTE: The browser will translate margin: auto into a pixel value,\n// so we can't test directly for 'auto'\ntest(\"The `.centered` div should be centered on the page\", () => {\n  const el = get(\".centered\");\n  const right = getStyle(el, \"margin-right\");\n  const left = getStyle(el, \"margin-left\");\n  expect(right).not.toBe(\"0px\");\n  expect(right).toBe(left);\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  /* \n   * We've added a gray background so that it's easier to see if the div is \n   * centered or not \n   */\n  .centered {\n    width: 300px;\n    background: #dadada; /* Light gray */\n  }\n\n  /* Your code here */\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .menu {\n    margin-bottom: 40px;\n  }\n  .menu a {\n    margin-right: 20px;\n  }\n  .centered {\n      width: 300px;\n      background: #dadada; /* Light gray */\n      margin: 0 auto;\n  }\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "content": "# What are margins?\n\n> A margin is the visual space between one HTML element and another.\n\nUsing margins you can move elements away from each other to create visual space. However, you can also do this with `padding` and `border` so let's look at the differences between the three concepts. \n\n## How is this difference with padding ?\n\n* Padding is the visual space between an elements _content_ and it's edges\n* In other words, `padding` is visual space within an element while `margin` is visual space around \\(outside\\) an element.\n\n\n## How does margin relate to border ?\n\n* The `border` is between an elements `margin` and `padding` , and it usually has a color applied to it.\n\n# Beware, margins will \"collapse\"\n\nThere's a trick margins do that might confuse you when you first come across it: Margins will _collapse\\. _\n\nWhat this means is:\n\n> If two margins touch each other, they will _not combine_ but instead will collapse in to each other. This means the visual margin will only be as big as the larger of the two, not the combination of the two.\n\nFor now it's enough to know that this quirk exists. There's no good way to learn about this quirk other than to have it bite you while building an application. \n# When should I use margins?\n\nGenerally, when you want to move one element away from another element. Some examples:\n\n* You have a navigation menu of links and you want space between them\n* You want space between paragraphs in a blog post\n   * Consider the space between the paragraphs you're reading right now. You could do that with margins.\n* When you want to center something on the page \\(see below\\)\n\n\nUsing margins for centering is a special use case, which might not be obvious but is extremely common.\n# Margin auto\n\nThere's a special value you can use for margins called `auto`. For example:\n\n```css\n.centered {\n    margin-left: auto;\n    margin-right: auto;\n}\n\n```\n\nWhat `auto` does is it tells the browser to \\_auto\\_matically use as much space as possible given all other margins. So, what the code above does is it moves anything with the `.centered` class to the center of the page.\n\nAs with most CSS properties, `margin` has a shorthand syntax that is commonly used for centering something on the page:\n\n```css\n.centered {\n    margin: 0 auto;\n}\n\n```\n\nThis example is equivalent to the long\\-hand version:\n\n```css\n.centered {\n    margin-top: 0;\n    margin-bottom: 0;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n```\n"
        },
        {
          "id": "Ojsg01Bi",
          "type": "markup",
          "title": "Padding and inline-blocks",
          "instructions": "* Style the `<a>` tag with the `inline-block` display property. This will keep the `<a>` tags from overflowing their container. \n* Add padding of 20px to the `<a>` tag.\n* Change the background of the `<p>` tag. This will make the padding more obvious.\n* Give the `<p>` tag 20px of padding.\n",
          "testCode": "test(\"The `<a>` tags should use the inline-block display property\", () => {\n  const els = getAll(\".menu a\");\n  expect(els.every((x) => getStyle(x, \"display\") === \"inline-block\")).toBe(\n    true\n  );\n});\n\ntest(\"The `<a>` tags should have 20px of padding\", () => {\n    const els = getAll(\".menu a\");\n    expect(els.every((x) => getStyle(x, \"padding\") === \"20px\")).toBe(\n        true\n    );\n})\n\ntest(\"The `<p>` tag should have a different background than the rest of the page\", () => {\n  const el = get('p');\n  const bodyBg = getStyle(get('body'), 'background-color');\n  expect(getStyle(el, 'background-color')).not.toBe(bodyBg);\n})\n\ntest(\"The `<p>` tag should have padding of 20px\", () => {\n  expect(getStyle(get('p'), 'padding')).toBe('20px');\n})",
          "videoUrl": "",
          "starterCode": "<style>\n  .centered {\n    width: 300px;\n    background: #dadada; /* Light gray */\n  }\n\n  /* Your code here */\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .centered {\n    width: 300px;\n    background: #dadada;\n  }\n  .menu a {\n    display: inline-block;\n    padding: 20px;\n  }\n  .menu a:hover {\n    background: tomato;\n    color: white;\n  }\n  p {\n    background: skyblue;\n    margin: 0;\n    padding: 20px;\n  }\n\n  /* Your code here */\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "content": "# Padding\n\nPadding means \"space inside\" of something. This is why we had you change some background colors in this challenge. Without a background color it's hard to tell where the padding is. Of course you don't always want to show how wide or slim something is, so it's up to you whether or not you use padding with a background or without.\n\nPadding without a background color can be used just like margin to separate things, however, visual space created by padding is only visual space. The element with padding itself becomes wider. This can be very useful for things like menus and buttons, where you want something to have a large clickable area even if the element itself isn't very large on screen.\n# The Display Property\n\nThe `display` property is very important in CSS. It determines how HTML elements interact with each other on the page. For example, `<a>` tags have a default display property of `inline`, which means other components can ignore their vertical padding. However, `inline-block` means their padding cannot be ignored, and you will get the results you see in this challenge.\n\nSome important display properties:\n\n* `display: block;` This is the default for most elements \\(`div`, `p`, `h1`, etc\\) and puts things on their own line.\n* `display: inline-block;` This is useful when you want things to line up horizontally \\(`a` tags in a horizontal menu for example\\) and you also want to add margins or padding.\n* `display: flex;` This is useful when you want child elements to expand or contract to fit available space. This display property is super flexible, and you might find yourself using it all the time once you know it.\n\n\nThese display properties will make up most of your UI. The web app you're using right now was built with only these display properties."
        },
        {
          "id": "0fCd6MkU",
          "type": "markup",
          "title": "Borders",
          "instructions": "* Add `20px` of margin and padding on right of the `a` tags in the `.menu`.\n* Give the `a` tags a 1px border on the right.\n* Give the `.content` div some padding. This will make adding a border look much better.\n* Add a 1px border to the content div.\n* Give the `p` tags a margin of `0px`. By default `p` tags have margin so the challenge here is to remove it.\n* Add a `1px` border bottom to the span tag, so that it appears underlined.\n\n",
          "testCode": "const as = getAll('.menu a');\nconst content = get('.content');\nconst ps = getAll('.content p');\nconst spans = getAll('.content span');\n\ntest(\"`a` tags have `20px` of margin and padding on the right\", () => {\n    expect(as.every(x => getStyle(x, 'margin-right') === '20px')).toBe(true);\n    expect(as.every(x => getStyle(x, 'padding-right') === '20px')).toBe(true);\n});\n\ntest(\"`a` tags have a right border of `1px`\", () => {\n    expect(as.every(x => getStyle(x, 'border-right-width') === '1px')).toBe(true);\n});\n\ntest('`.content` has some padding', () => {\n    expect(getStyle(content, 'padding')).not.toBe('0px');\n});\n\ntest('`.content` has a `1px` border', () => {\n    expect(getStyle(content, 'border-width')).toBe('1px');\n});\n\ntest('`p` tags have no margin', () => {\n    expect(ps.every(x => getStyle(x, 'margin') === \"0px\")).toBe(true);\n})\n\ntest(\"`span` tags are underlined using a 1px border-bottom\", () => {\n    expect(spans.every(x => getStyle(x, 'border-bottom-width') === '1px')).toBe(true);\n})",
          "videoUrl": "https://www.youtube.com/embed/bvlPPQZqwxY",
          "starterCode": "<style>\n  /* Your code here */\n</style>\n<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n<div class=\"content\">\n  <p>\n    Here's some <span>glorious</span> page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .menu a {\n    margin-right: 20px;\n    padding-right: 20px;\n    border-right: 1px solid;\n  }\n  .content {\n    border: 1px solid black;\n    padding: 10px;\n    margin-top: 20px;\n  }\n  .content p {\n    margin: 0;\n  }\n  .content span {\n    border-bottom: 1px solid black;\n  }\n</style>\n<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n<div class=\"content\">\n  <p>\n    Here's some <span>glorious</span> page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "content": ""
        },
        {
          "id": "3g8czfBn",
          "type": "markup",
          "title": "Multiple Selectors — Styling many things",
          "instructions": "* Give both the `h1` and `p` tags a `background` of `green`\n* Give both the `h1` and `p` tags a `color` of `red`\n\n\n**NOTE:** This challenge is all about using multiple selectors so that you don't have to repeat yourself when writing CSS. You should only have to write the `background` and `color` properties once to make the tests pass.",
          "testCode": "test(\"The `h1` should have a green background and a red color\", () => {\n  const el = get(\"h1\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"green\"));\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"red\"));\n});\n\ntest(\"The `p` should have a green background and a red color\", () => {\n  const el = get(\"p\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"green\"));\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"red\"));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/f9IxFfP80vQ",
          "starterCode": "<h1>Welcome</h1>\n<p>This is a paragraph</p>",
          "solutionCode": "<style>\n  h1,\n  p {\n    color: red;\n    background: green;\n  }\n</style>\n<h1>Welcome</h1>\n<p>This is a paragraph</p>\n",
          "content": ""
        },
        {
          "id": "s8be1H0U",
          "type": "markup",
          "title": "Columns and Rows — The display property",
          "instructions": "* Make the `.horizontal-nav` links have a bottom margin of `20px`.\n* Make the `.vertical-nav` links stack one on top of another using the `display` property. I.e. make it into a vertical nav.\n\nBy default `<a>` tags have `display: inline`, however you can change this.\n* If you need a **row**, try `display: inline-block`.\n* If you need a **column**, try `display: block`.\n",
          "testCode": "test(\".horizontal-nav should have a bottom margin of 20px\", () => {\n  const els = getAll(\".horizontal-nav a\");\n  const result = els.every(\n    (x) =>\n      getStyle(x, \"margin-bottom\") === \"20px\" &&\n      getStyle(x, \"display\") !== \"inline\"\n  );\n  expect(result).toBe(true);\n});\n\ntest(\".vertical-nav links should be vertical\", () => {\n  const els = getAll(\".vertical-nav a\");\n  const result = els.every((x) => getStyle(x, \"display\") === \"block\");\n  expect(result).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  /* Code here... */\n</style>\n\n<div class=\"horizontal-nav\">\n  <p>A horizontal nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"vertical-nav\">\n  <p>A vertical-nav nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "solutionCode": "<style>\n  .horizontal-nav a {\n    display: inline-block;\n    margin-bottom: 20px;\n  }\n  .vertical-nav a {\n    display: block;\n  }\n</style>\n\n<div class=\"horizontal-nav\">\n  <p>A horizontal nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"vertical-nav\">\n  <p>A vertical-nav nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "content": "Every HTML element has a default `display` property. This can be confusing since it's easy to forget what the default is for a given tag. But there's a trick: \n\n**Don't worry about what the default is**. \n\nRather than try to remember what the default display property for an element is just look at it and adjust accordingly. If you want something to line up in a row you can set `display: inline-block` and if you want things to stack on top of each other use `display: block`.\n\nThere are other display values besides `block` and `inline-block` but you won't use most of them very often. There is however one more very important display property called `flex`, which we will cover in another challenge."
        },
        {
          "id": "iFvzasqW",
          "type": "markup",
          "title": "Flexbox — Creating an evenly-spaced nav menu",
          "instructions": "* Use the `display` property and `justify-content` property to evenly space the links in `.mobile-nav`",
          "testCode": "test('.mobile-nav should use flexbox', () => {\n    expect(getStyle(get('.mobile-nav'), 'display')).toBe('flex')\n})\n\ntest('.mobile-nav should use the justify-content property', () => {\n    expect(getStyle(get('.mobile-nav'), 'justify-content')).toBe('space-between')\n})",
          "videoUrl": "https://www.youtube.com/embed/hyuv9yoSREs",
          "starterCode": "<style>\n  /* Your code here... */\n\n  /* You can ignore these styles. This is just to make the link placement more obvious */\n  .mobile-nav a {\n    padding: 10px;\n    background: tomato;\n  }\n</style>\n<div class=\"mobile-nav\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "solutionCode": "<style>\n  .mobile-nav {\n    display: flex;\n    justify-content: space-between;\n  }\n  .mobile-nav a {\n    padding: 10px;\n    background: tomato;\n  }\n</style>\n<div class=\"mobile-nav\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "content": "Ever notice how mobile nav menus on a phone are often spaced perfectly so that the icons fill the space on screen? \n\nThis effect is quite simple to accomplish with CSS and Flexbox. \n\nFlexbox is the general term for CSS that utilizes the `display: flex` property\\. Display `flex` lets you do a lot of things that used to be very difficult in web browsers. Things like:\n\n* Create equal spacing between elements \\(this challenge\\!\\)\n* Create equal space around elements\n* Vertically or horizontally center elements\n\n\nThere are other uses for Flexbox but these are some of the most common."
        },
        {
          "id": "iZ6nlkiQ",
          "type": "markup",
          "title": "The hover state",
          "instructions": "Invert the appearance of the links when hovered. In other words when you hover a link make its background `tomato` and it's color `blue`.\n**NOTE**: You will need the `:hover` selector\\.",
          "testCode": "test(\"The color and background of the `a` tags should be inverted on hover\", () => {\n  const code = __user_code_string__;\n  const regex = /a:hover\\s+{([\\s\\S]+?)}/i; // All text inside brackets after a:hover. a:hover { <HERE> }\n  const hoverStyles = code.match(regex)[1];\n  expect(hoverStyles).toBeTruthy();\n  expect(hoverStyles.match(/background(-color)?:\\s+blue/)).toBeTruthy();\n  expect(hoverStyles.match(/color:\\s+tomato/)).toBeTruthy();\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  /* Your code here */\n\n  /* You can ignore these styles. This is just to make the link placement more obvious */\n  .nav a {\n    padding: 10px;\n    background: tomato;\n    text-decoration: none; /* This removes teh link underline */\n  }\n</style>\n<div class=\"nav\">\n  <p>Hover the mouse to see the effect</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "solutionCode": "<style>\n  .nav a:hover {\n    background: blue;\n    color: tomato;\n  }\n  /* You can ignore these styles. This is just to make the link placement more obvious */\n  .nav a {\n    background: tomato;\n    color: blue;\n    padding: 10px;\n    text-decoration: none; /* This removes teh link underline */\n  }\n</style>\n<div class=\"nav\">\n  <p>Hover the mouse to see the effect</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "content": "Here's a GIF of the end result of this challenge. This should give you a clear idea about what a hover state does.\n\n![](/assets/iZ6nlkiQ/9d080a45671f5e4e63d62090ab24a779_hov.gif)\n# General Concepts\n\nYou've probably noticed that when you hover over a link in a browser it will change somehow. You can customize this\\!\n\nThis is called a hover state, and you can style a hover state just like you can style any other CSS. The main difference is the selector.\n\n```css\n/* Style the hover state for all links on the site */\na:hover {\n  text-decoration: underline;\n}\n\n/* Style just the nav links */\n.nav a:hover {\n  color: tomato;\n}\n\n/* Style the entire nav div when it's hovered */\n.nav:hover {\n  background: gray;\n}\n\n```\n\nTo style how something looks when the mouse hovers over it you use `:hover`. Specifically, you just put `:hover` after the selector you want to style. It's important not to put a space in front of `:hover`."
        },
        {
          "id": "fAGpsa4L",
          "type": "media",
          "title": "CSS is not always intuitive",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "CSS is a bit of a mixed bag. Not to detract from it—it's amazing what you can accomplish with HTML and CSS alone, let alone HTML, CSS and JavaScript. However there are certain aspects of CSS that are not intuitive. \n\nYou may be thinking \"None of this is intuitive\\! 😤\" and that's fair, but it gets better \\(worse?\\). In the next few challenges we'll dive into some of the more confusing _and_ useful CSS properties. You already saw some of this when we [talked about `box-sizing`](/workspace/nel5ggJ1), but there's yet more to cover. \n\nFun topics to come include:\n\n* Positioning \\(including the interesting `content` property\\)\n* More `display` property\n* Transforms\n\n# Why?\n\nSome of this stuff is bound to be fairly confusing at first and we take our content selection very seriously. So is it really that important? \n\n++Yes\\.++\n\nThe techniques we'll cover are extremely potent for creating _layouts_, which is the most confounding aspect of CSS. Almost everyone who has complained about any aspect of CSS ran into issues with their layout and spent entirely too long figuring out how to fix it. I would know, I've been that person—Everyone on the Pairwise team has in fact. \n\n> **Layouts vs Styling**\n> Layouts can be time consuming and frustrating to create when you don't know what you're doing. Styling, on the other hand, is quite straightforward. Things like `border` , `padding`, `font-size`, etc. To generalize:\n> \n> \n> \n>    * Styling refers to CSS that doesn't really care about _position_ on the page.\n>    * Layout is entirely concerned with position on the page. This includes vertical, horizontal, _and_ z\\-axis positioning—Layering things on top of  or behind one another.\n\nSo to bring it back to the question: Why are we learning these things? So that you can build any UI you want.\n\nWith a bit of practice ++you will be able to code up the CSS for Instagram, Twitter, Amazon, Etsy or your cat's blog++ \\(this last one sounds easy but you'd probably spend more time on it than any of the others. Try building anything for yourself as opposed to an employer or client and you will see why\\).\n\nSo let's move forward and learn some CSS\\!"
        },
        {
          "id": "zt2RAhbC",
          "type": "markup",
          "title": "CSS Positioning ",
          "instructions": "* Use the `position` property to style the `.rel` `div` so that has relative positioning.\n* Use the `top` property to move the div down the screen by `100px`.\n\nThere's much more explanation below if you [scroll to the content area](/scrollTarget/supplementary-content-container).",
          "testCode": "const el = get('.rel')\n\ntest('`.rel` `div` should have relative positioning', () => {\nconst position = getStyle(el, 'position');\n\n    expect(position).toBe('relative');\n});\n\ntest('`.rel` `div` should be moved down by `100px`', () => {\n    const position = getStyle(el, 'top');\n    expect(position).toBe('100px');\n})",
          "videoUrl": "",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  .container {\n    width: 300px;\n    height: 500px;\n    background: aquamarine;\n    padding: 10px;\n  }\n  .rel {\n    background: gold;\n    padding: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"rel\">\n    Relative Div\n  </div>\n  <p>\n    This lesson domonstrates <code>relative</code> positioning in CSS. Using\n    position relative you are actually positioning something\n    <em>relative to itself</em>.\n  </p>\n  <p>\n    So for example, if I give the Relative Div a <code>top: 20px</code>\n    property then it's going to overlap with the text.\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  .container {\n    width: 300px;\n    height: 500px;\n    background: aquamarine;\n    padding: 10px;\n  }\n  .rel {\n    background: gold;\n    padding: 10px;\n    position: relative;\n    top: 100px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"rel\">\n    Relative Div\n  </div>\n  <p>\n    This lesson domonstrates <code>relative</code> positioning in CSS. Using\n    position relative you are actually positioning something\n    <em>relative to itself</em>.\n  </p>\n  <p>\n    So for example, if I give the Relative Div a <code>top: 100px</code>\n    property then it's going to overlap with the text.\n  </p>\n</div>\n",
          "content": "# An introduction to positioning\n\nIn CSS the `position` property has a lot of power, but it's not necessarily clear how it works. There are three main positioning properties we're going to look at:\n\n* `position: relative;` That's what you were working with in this challenge.\n* `position: absolute;` More interesting than `relative` but you need them both together.\n* `position: fixed;` Very useful or annoying depending on your opinion. This is how websites \"fix\" a header or footer to the window as you scroll. If you've ever been on a cramped mobile site and the header would not leave you alone it's probably because of this CSS property.\n\n\nThere's also `position: static;`, which is the default for all elements. This means you won't see this property very often because it's always there unless you change it. Setting a `position` property on an element to **anything other than static** will make it \"positioned.\"\n\nAn element is considered \"positioned\" if it \n# What does this property let me do?\n\nIt lets you pick up an element and move it wherever you want relative to some other element.\n\nOnce you are using a position property you gain access to four new properties which let you control the location of an element on the page: `top`, `left`, `bottom`, `right`.\n\nFor example:\n\n```css\n.rel {\n    position: relative;\n    top: 20px;\n}\n\n```\n\nThis will visually move an element down by `20px`.\n\nThere are other challenges for `absolute` and `fixed` so let's talk about position `relative` first\\.\n# Relative to what?\n\nThis is one of those unintuitive properties in CSS. Relative positioning moves an element ++relative to itself++. That means, in the example above, the `.rel` element would be moved `20px` lower on the page than its initial position.\n# What does this let me do?\n\n* By far the most common use case of `position: relative;` is to set an element as an anchor for another element using `position: absolute;` \\(See [Position Absolute](/workspace/$TscTvcd)\\).\n* You can use relative positioning to \"nudge\" elements into the position you want.\n   * Sometimes your layout just won't cooperate. You can use relative positioning to cheat and force your element in a direction.\n   * I say \"nudge\" because if you're doing more significant repositioning you might want absolute positioning instead.\n\n# Relative and absolute\n\nI said we'd hold off on `position: absolute;` until another challenge but there's something we need to mention first: ++Absolute positioning and relative positioning need to work together to be effective++.\n\nWhen you use `positoin: absolute;` you are positioning an element _relative to the nearest parent element with_ `position: relative;`. \n\nIf that sounds confusing, don't worry—it is. It's best understood through examples and practice, so let's keep learning.\n# Resources\n\n* [Official documentation on relative positioning](https://developer.mozilla.org/en-US/docs/Web/CSS/position#Relative_positioning)\n\n"
        },
        {
          "id": "$TscTvcd",
          "type": "markup",
          "title": "CSS Positioning: Absolute",
          "instructions": "Use `absolute` positioning to position all the `.label` elements in the upper\\-right corner of the three boxes.\n\n**Hint**: You don't have to modify the `.label` styling at all. Focus on the parent element. See the [additional content below](/scrollTarget/supplementary-content-container) for more info.",
          "testCode": "test('`.labeledCard` should have position `relative`', () => {\n    const cards = getAll('.labeledCard');\n    expect(cards.length).not.toBe(0);\n    cards.forEach(el => {\n        expect(getStyle(el, 'position')).toBe('relative')\n    })\n})",
          "videoUrl": "",
          "starterCode": "<style>\n  /* Your styles here... */\n\n  /*\n     ========================================================================\n     All the styles below are for setting up the example, feel free to modify them\n     but you don't have to in order to complete the challenge.\n     ========================================================================\n   */\n\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: system-ui;\n  }\n  .labeledCard {\n    width: 300px;\n    background: aquamarine;\n    padding: 10px;\n    margin-top: 50px;\n    margin-left: 50px;\n  }\n  .labeledCard.product {\n    background: thistle;\n    border-radius: 5px;\n  }\n  .labeledCard.messageApp {\n    background: royalblue;\n    color: white;\n    border-radius: 50px;\n  }\n  .label {\n    background: gold;\n    padding: 10px;\n    position: absolute;\n    top: -15px;\n    right: -15px;\n  }\n  .label.priceTag {\n    border-radius: 50px;\n    border: 2px solid black;\n  }\n  .label.unreadCount {\n    font-size: 11px;\n    font-weight: bold;\n    font-family: system-ui;\n    border-radius: 100px;\n    border: 5px solid white;\n    background: crimson;\n    color: white;\n  }\n</style>\n\n<div class=\"labeledCard\">\n  <div class=\"label\">\n    Absolute Div\n  </div>\n  <p>\n    Wouldn't it be nice if I had a label positioned in my upper-right corner?\n  </p>\n  <p>\n    An absolutely positioned element will be relative to the nearest parent with\n    a positon property.\n  </p>\n</div>\n<div class=\"labeledCard product\">\n  <div class=\"label priceTag\">\n    $12.00\n  </div>\n  <p>\n    Maybe this is some product page and I'm a product. Buy me!\n  </p>\n  <p>\n    (If only there was a price tag in my upper-right corner)\n  </p>\n</div>\n<div class=\"labeledCard messageApp\">\n  <div class=\"label unreadCount\">\n    102\n  </div>\n  <p>\n    Pretend I'm some app that needs an unread count.\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: system-ui;\n  }\n  .labeledCard {\n    width: 300px;\n    background: aquamarine;\n    padding: 10px;\n    margin-top: 50px;\n    margin-left: 50px;\n    position: relative;\n  }\n  .labeledCard.product {\n    background: thistle;\n    border-radius: 5px;\n  }\n    .labeledCard.messageApp {\n    background: royalblue;\n    color: white;\n    border-radius: 50px;\n  }\n  .label {\n    background: gold;\n    padding: 10px;\n    position: absolute;\n    top: -15px;\n    right: -15px;\n  }\n  .label.priceTag {\n    border-radius: 50px;\n    border: 2px solid black;\n  }\n  .label.unreadCount {\n    font-size: 11px;\n    font-weight: bold;\n    font-family: system-ui;\n    border-radius: 100px;\n    border: 5px solid white;\n    background: crimson;\n    color: white;\n  }\n</style>\n\n<div class=\"labeledCard\">\n  <div class=\"label\">\n    Absolute Div\n  </div>\n  <p>\n    Wouldn't it be nice if I had a label positioned in my upper-right\n    corner?\n  </p>\n  <p>\n    An absolutely positioned element will be relative to the nearest parent with\n    a positon property.\n  </p>\n</div>\n<div class=\"labeledCard product\">\n  <div class=\"label priceTag\">\n    $12.00\n  </div>\n  <p>\n    Maybe this is some product page and I'm a product. Buy me!\n  </p>\n  <p>\n   (If only there was a price tag in my upper-right corner)\n  </p>\n</div>\n<div class=\"labeledCard messageApp\">\n  <div class=\"label unreadCount\">\n    102\n  </div>\n  <p>\n    Pretend I'm some app that needs an unread count.\n  </p>\n</div>\n",
          "content": "Hopefully you got the code above to look something like this:\n\n![Look at all those labels! 🏷](/assets/$TscTvcd/a988dc3acf3622a900b2e072b425fc8c_abs-positioning-1.png)\n\nThis is the power of absolute positioning: You can position one element relative to another. In this example we positioned the `.label` elements in the upper\\-right of their parent elements.\n\nThe key is, the parent element has to have a position. Usually, this position is `position: relative;` because we don't want the parent to reposition itself, just serve as an anchor for the child element.\n\n> \n> ### The DOM Family Tree\n> \n> \\(if you're wondering what the DOM is, [here's a link to our that challenge](/workspace/C$3mo2yQ)\\)\n> \n> Programmers needed words to talk about the relationships between elements in the DOM and they understood that the DOM is a tree—much like a family tree. So when we talk about the DOM we use words you've heard many times before, but in a different context.\n> \n> **Parents:** When talking about the DOM we use the words \"parent\" or \"ancestor\" to refer to any element higher up in the tree.\n> **Siblings:** Any element at the same level in the tree. If you have three `a` tags inside a `div` the links are all siblings to each other. The `div` is their parent.\n> **Children: **Any element lower in the tree. Children are easy to identify in code because they are within another element.\n# DOM relationships and position absolute\n\nThe short version is: `position: absolute;` will position an element _relative to its nearest ancestor_ ++with a position++. Remember, for an element to be \"positioned\" it must have the position property set to either `relative`, `absolute`, or `fixed`.\n\nIf the element has no positioned ancestors then it will be relative to the `body` tag\\. This is what is happening in this challenge when you first load it up. You will see the `.label` elements displaying in the upper\\-right of_ the _`body` as opposed to their parent element.\n# A simple recipe\n\nLet's say you have two divs, `div.a` and `div.b`. If you want to display `div.a` relative to `div.b` do this:\n\n* Make sure `div.a` is inside `div.b`, in other words `div.b` is the parent of `div.a`.\n* Set `position: relative;` on `div.b` \\(The parent div\\).\n* Set `position: absolute;` on `div.a` \\(The child div\\).\n\n\nThen you can use the `top`, `left`, `bottom`, `right` properties to move `div.a` anywhere you want relative to `div.b`.\n# When would you use this?\n\n* You want to display a badge of some sort, like an unread count on an email app.\n   * You can see an example of this in this challenge.\n* You want some sort of custom border or edge to your element.\n   * You can see an example of this in the Pairwise navigation menu. Whenever you hover one of the challenge names it gets a \"border\" which is actually an absolutely positioned element, not a the `border` property\\.\n* When you want something to stretch to fit inside another element.\n   * This is a result of combinations of the `top`, `left`, `bottom`, `right` properties\\. We'll revisit this later.\n\n# Resources\n\n* [Official Absolute Positioning Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/position#Absolute_positioning)\n   * Just in case you're curious there are more examples in the official docs.\n\n"
        },
        {
          "id": "kUhWPOkj",
          "type": "markup",
          "title": "Top, left, bottom, right",
          "instructions": "Use `absolute` positioning together with `top`, `left`, `bottom`, and/or `right` to position the labels as described.\n* `.top-right-inside` should be in the upper\\-right corner of the screen\n* `.top-right-outside` should be dangling off the upper\\-right of .outer\n* `.bottom-left-inside` should be in the lower\\-left of .outer\n* `.stretch-center` should stretched to the width of .outer and moved down 50%\n\n",
          "testCode": "const labels = getAll(\".label\");\nconst body = get(\"body\");\nconst bbox = body.getBoundingClientRect();\nconst outerBox = get(\".outer\").getBoundingClientRect();\n\ntest(\"Labels should have absolute positioning\", () => {\n  expect(labels.length).not.toBe(0);\n  labels.forEach((x) => {\n    expect(getStyle(x, \"position\")).toBe(\"absolute\");\n  });\n});\n\ntest(\"`.top-right-inside` should be in the upper-right corner of the screen\", () => {\n  const el = get(\".top-right-inside\");\n  const box = el.getBoundingClientRect();\n  expect(box.top).toBe(0);\n  expect(box.right).toBe(bbox.width);\n});\ntest(\"`.top-right-outside` should be dangling off the upper-right of `.outer`\", () => {\n  const el = get(\".top-right-outside\");\n  const box = el.getBoundingClientRect();\n  expect(box.top).toBe(outerBox.top);\n  expect(box.left).toBe(outerBox.right);\n});\n\ntest(\"`.bottom-left-inside` should be in the lower-left of `.outer`\", () => {\n  const el = get(\".bottom-left-inside\");\n  const box = el.getBoundingClientRect();\n  expect(box.bottom).toBe(outerBox.bottom);\n  expect(box.left).toBe(outerBox.left);\n});\n\ntest(\"`.stretch-center` should stretched to the width of `.outer` and moved down 50%\", () => {\n  const el = get(\".stretch-center\");\n  const box = el.getBoundingClientRect();\n  expect(box.right).toBe(outerBox.right);\n  expect(box.left).toBe(outerBox.left);\n  expect(box.top).toBe(outerBox.height / 2 + outerBox.top);\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n\n  /* We remove the default margins for this exercise */\n  body {\n    margin: 0;\n  }\n\n  .outer {\n    position: relative;\n    background: salmon;\n    width: 300px;\n    height: 400px;\n    margin-top: 40px;\n    margin-left: 60px;\n  }\n\n  /* You can ignore the styles ABOVE this line */\n  /* Label padding and background are just for aesthetics and not part of the tests */\n  .label {\n    padding: 10px;\n    background: thistle;\n  }\n\n  .top-right-inside {\n  }\n\n  .top-right-outside {\n  }\n\n  .bottom-left-inside {\n  }\n\n  .stretch-center {\n  }\n</style>\n\n<div class=\"outer\">\n  <div class=\"inner\">\n    <div class=\"label top-right-outside\">Heyo! top-right-outside</div>\n    <div class=\"label bottom-left-inside\">Heyo! bottom-left-inside</div>\n    <div class=\"label stretch-center\">Heyo! stretch-center</div>\n  </div>\n</div>\n<div class=\"label top-right-inside\">Heyo! top-right-inside</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body { margin: 0; }\n\n  .outer {\n    position: relative;\n    background: salmon;\n    width: 300px;\n    height: 400px;\n    margin-top: 40px;\n    margin-left: 60px;\n  }\n\n  .label {\n    position: absolute;\n    padding: 10px;\n    background: thistle;\n  }\n\n  .top-right-inside {\n    top: 0;\n    right: 0;\n  }\n\n  .top-right-outside {\n    top: 0;\n    left: 100%;\n  }\n\n  .bottom-left-inside {\n    bottom: 0;\n    left: 0;\n  }\n\n  .stretch-center {\n    top: 50%;\n    left: 0;\n    right: 0;\n  }\n  \n</style>\n\n<div class=\"outer\">\n  <div class=\"inner\">\n    <div class=\"label top-right-outside\">Heyo! top-right-outside</div>\n    <div class=\"label bottom-left-inside\">Heyo! bottom-left-inside</div>\n    <div class=\"label stretch-center\">Heyo! stretch-center</div>\n  </div>\n</div>\n<div class=\"label top-right-inside\">Heyo! top-right-inside</div>\n\n",
          "content": ""
        },
        {
          "id": "BLEmRiRd",
          "type": "media",
          "title": "Revisiting the Display Property",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Let's revisit the display property. There are several values you should be familiar with.\n\n```css\n.inline-block { display: inline-block; }\n.block { display: block; }\n.flex { display: flex; }\n.table { display: table; }\n\n```\n# Display Properties\n\nSetting `display` on an element let's you play around with how it interacts with other elements on the page. For example, `display: inline-block;` tells an element to flow \"in line\" with other inline elements but also to allow setting margins and padding. Setting `display: flex;` will tell an element reposition it's children in a row \\(or column\\).\n\nWe'll go through the key display properties one by one.\n\n## Inline Block\n\n```css\ndiv { display: inline-block; }\n\n```\n\nBy default many inline elements have unintuitive ways of handling margins and padding. It's often a good idea to apply  `display: inline-block;` to inline elements just so you don't bang your head against a wall for an hour trying to figure out why your `padding` isn't acting the way you expect.\n\n### Uses\n\n* You want to apply `margin` or `padding` to some inline element \\(`span` for example, or `a`\\).\n\n\n## Block\n\n```css\ndiv { display: block; }\n\n```\n\nThis is the default for most elements, so even if you want to make use of it you don't need to write it out explicitly. \n\n### Uses\n\n* Where display block can be more interesting is where you want an inline item to act like a block. Use `display: block;` on `a` tags to make a vertical nav menu.\n* Automatically size to take up all available width.\n\n\n## Flex\n\n```css\ndiv { display: flex; }\n\n```\n\n### Uses\n\n* Everything\\! \\(ok, not literally, but _almost_ everything\\).\n* Center items vertically, horizontally, or both.\n* Tell elements to take up \"Whatever space is left\" once other siblings are accounted for.\n* Space elements vertically or horizontally. You can justify them, clump them, put space between, etc.\n\n\nFlexbox is extremely \\_flex\\_ible, no pun intended \\(seriously\\). It's a workhorse for creating all sorts of layouts. If you're ever unsure how to get some layout you want, flexbox is often the answer.\n\nThat being said, there's a lot to learn and you won't use most of it very often. So focus on these properties:\n\n```css\ndisplay: flex; /* Of course */\n\n/* \n  You can control how elements grow or shrink to take advantage of space */\nflex: 1 100%;\n\n/* \n  Once you have a display: flex; on an element, use align-items and justify-content \n  to control how its children arrange themselves. */\nalign-items: center;\njustify-content: center; /* Also try: space-between, space-around, flex-end */\n\n```\n\n## Table\n\n```css\ndiv { display: table; }\n\n```\n\nIn all honesty you won't use this much. However, it does have one specific use case which you may find quite useful.\n\n### Uses\n\n* Tell an element to take up only as much spaces as needed, but otherwise behave like `block`.\n\n\nBy default any element with `display: block;` will stretch to be as wide as possible. You can assign a `width` property, `width: 500px;` for example, but that requires being specific about the width. What if you want to say \"Be as wide as you need to be, but no wider.\"? That's what display table lets you do."
        },
        {
          "id": "Ao8hbaiP",
          "type": "markup",
          "title": "CSS Transforms",
          "instructions": "* Use `absolute` positioning to move the three `.label` divs the their correct positions.\n* Use the `transform` property to correctly position the elements according to the photo below.\n\n\n![](/assets/Ao8hbaiP/250eb8cb0410e52bb171467a2541ad4f_transform-translate.png)\n\n",
          "testCode": "const labels = getAll(\".label\");\nconst bbox = get(\".box\").getBoundingClientRect();\nconst mid = { x: bbox.width / 2 + bbox.x , y: bbox.height / 2 + bbox.y };\n\ntest(\"Labels should be absolutely positioned\", () => {\n  expect(labels.length).toBeTruthy();\n  labels.forEach((el) => {\n    expect(getStyle(el, \"position\")).toBe(\"absolute\");\n  });\n});\n\ntest(\"`.top` should be centered over the top edge of `.box`\", () => {\n  const elbox = get(\".top\").getBoundingClientRect();\n  expect(elbox.left).toBeLessThan(mid.x);\n  expect(elbox.right).toBeGreaterThan(mid.x);\n  expect(elbox.top).toBeLessThan(bbox.top);\n  expect(elbox.bottom).toBeGreaterThan(bbox.top);\n});\n\ntest(\"`.center` should be centered over the visual center of `.box`\", () => {\n  const elbox = get(\".center\").getBoundingClientRect();\n  expect(elbox.left).toBeLessThan(mid.x);\n  expect(elbox.right).toBeGreaterThan(mid.x);\n  expect(elbox.top).toBeLessThan(mid.y);\n  expect(elbox.bottom).toBeGreaterThan(mid.y);\n});\n\ntest(\"`.bottom` should be centered over the bottom edge of `.box`\", () => {\n  const elbox = get(\".bottom\").getBoundingClientRect();\n  expect(elbox.left).toBeLessThan(mid.x);\n  expect(elbox.right).toBeGreaterThan(mid.x);\n  expect(elbox.top).toBeLessThan(bbox.bottom);\n  expect(elbox.bottom).toBeGreaterThan(bbox.bottom);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/OVq59KKPgzc",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: system-ui;\n  }\n  .box {\n    border: 5px solid black;\n    margin-top: 60px;\n    margin-left: 60px;\n    width: 300px;\n    height: 300px;\n    position: relative;\n    border-radius: 8px;\n  }\n\n  .label {\n    border: 3px solid black;\n    border-radius: 50px;\n    background: white;\n    padding: 10px 20px;\n    min-width: 100px;\n    text-align: center;\n  }\n\n  /* Feel free to ignore all styles above this if you want */\n  /* Your code below here (or wherever you want) */\n  .top {\n  }\n  .center {\n  }\n  .bottom {\n  }\n</style>\n\n<div class=\"box\">\n  <div class=\"label top\">TOP</div>\n  <div class=\"label center\">CENTER</div>\n  <div class=\"label bottom\">BOTTOM</div>\n</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n      font-family: system-ui;\n  }\n  .box {\n    border: 5px solid black;\n    margin-top: 60px;\n    margin-left: 60px;\n    width: 300px;\n    height: 300px;\n    position: relative;\n    border-radius: 8px;\n  }\n\n  .label {\n    position: absolute;\n    border: 3px solid black;\n    border-radius: 50px;\n    background: white;\n    padding: 10px 20px;\n    transform: translate(-50%, -50%);\n    left: 50%;\n    min-width: 100px;\n    text-align: center;\n  }\n\n  .top {\n    top: 0;\n  }\n  .center {\n      top: 50%;\n  }\n  .bottom {\n      top: 100%;\n  }\n</style>\n\n<div class=\"box\">\n  <div class=\"label top\">TOP</div>\n  <div class=\"label center\">CENTER</div>\n  <div class=\"label bottom\">BOTTOM</div>\n</div>\n",
          "content": "The end result will look like this:\n\n![](/assets/Ao8hbaiP/250eb8cb0410e52bb171467a2541ad4f_transform-translate.png)\nCSS Transforms let you do a number of interesting things. Some of the most common are:\n\n* `translate`: Change the location of things on the page\n* `scale`: Change the size of things\n* `rotate`: Visually rotate an element\n\n\nThat's not all, those are just some of the most common ones. You can see what else is possible in the documentation linked below.\n# Resources\n\n* [CSS Transforms Documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)\n\n"
        },
        {
          "id": "DDOHTQQC",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Welcome to the first projects section\\! This is where you get to really stretch your brain and learn. It's the second piece of the learning puzzle. Here's what I mean:\n\n* Challenges give you extremely valuable practice with concepts.\n* However, projects are where you get to apply those concepts on your own. \n\n\nYou won't really know something until you've been stuck without an answer wondering how to write some code. The key is you already know some, so you're not helpless. \n\nWe've lined up some different projects for you in this section and unlike other projects sections they are all guided. Meaning we've included a video walkthrough for each of them.\n# How to use these projects\n\n1. Choose a project\n1. Read through the instructions.\n1. Try to complete the project on your own \\(even if you just give it 20 minutes, try on your own\\).\n1. Watch the videos and compare your solution to ours.\n\n\nEven if you feel these projects are well within your wheelhouse we'd still recommend skimming the videos as we cover some new topics that didn't warrant their own section.\n\n> The projects are **not** ordered\\. You can complete them in whatever order works best for you.\n"
        },
        {
          "id": "LROl5K9R",
          "type": "guided-project",
          "title": "Creating a Webpage",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/mgRbBNsdoBA",
          "starterCode": "",
          "solutionCode": "<!-- \n    Create something \"real\"\n    Start from scratch\n-->\n<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-family: \"Iowan Old Style\";\n  }\n  h1,\n  h2,\n  h3 {\n    font-family: \"Helvetica Neue\";\n    font-weight: 100;\n    letter-spacing: 2px;\n  }\n  div.image {\n    width: 50px;\n    height: 50px;\n    border-radius: 50px;\n    overflow: hidden;\n    margin-right: 20px;\n    border: 2px solid white;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.35);\n  }\n  .page {\n      max-width: 600px;\n      margin: 0 auto; /* Center it */\n  }\n  .meta {\n    display: flex;\n  }\n  .meta p {\n    margin: 0;\n  }\n  .meta .date {\n    font-weight: bold;\n    font-size: 12px;\n    color: #999;\n  }\n  .metaInfo {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n  .subscribe {\n    padding: 20px;\n    border: 1px solid #999;\n    margin-top: 20px;\n    border-radius: 5px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.35);\n    background: #444;\n    color: white;\n  }\n  .subscribe h3 {\n    margin-top: 0;\n  }\n  .content {\n    line-height: 1.5;\n  }\n</style>\n<div class=\"page\">\n  <h1>\n    An overly verbose corner of the web\n  </h1>\n\n  <div class=\"meta\">\n    <div class=\"image\">\n      <img src=\"https://placekitten.com/50/50\" />\n    </div>\n    <div class=\"metaInfo\">\n      <p style=\"margin-bottom: 5px;\">Ian</p>\n      <p class=\"date\">2020-03-18</p>\n    </div>\n  </div>\n\n  <div class=\"subscribe\">\n    <h3>Subscribe NOW!</h3>\n    <p>\n      We'll never spam you, because it's not spam if you want to read it\n      amirite??\n    </p>\n    <form>\n      <input type=\"email\" />\n      <button type=\"submit\">Take my email!</button>\n    </form>\n  </div>\n\n  <div class=\"content\">\n    <p>\n      Content content. Content. I don't always write paragraphs but when I do\n      they are severely lacking in meaning.Content content. Content. I don't\n      always write paragraphs but when I do they are severely lacking in\n      meaning.Content content. Content. I don't always write paragraphs but when\n      I do they are severely lacking in meaning.\n    </p>\n    <p>\n      Content content. Content. I don't always write paragraphs but when I do\n      they are severely lacking in meaning.Content content. Content. I don't\n      always write paragraphs but when I do they are severely lacking in\n      meaning.Content content. Content. I don't always write paragraphs but when\n      I do they are severely lacking in meaning.Content content. Content. I\n      don't always write paragraphs but when I do they are severely lacking in\n      meaning.\n    </p>\n    <p>\n      Content content. Content. I don't always write paragraphs but when I do\n      they are severely lacking in meaning.Content content. Content. I don't\n      always write paragraphs but when I do they are severely lacking in\n      meaning.Content content. Content. I don't always write paragraphs but when\n      I do they are severely lacking in meaning.Content content. Content. I\n      don't always write paragraphs but when I do they are severely lacking in\n      meaning.Content content. Content. I don't always write paragraphs but when\n      I do they are severely lacking in meaning.\n    </p>\n  </div>\n</div>\n",
          "content": "Today we're going to creating a full webpage which you can put online and stake out your own corner of the web \\(if you haven't already\\). \n# The Task\n\nCreate a single webpage and style it so it doesn't look terrible to you. The styling part is subjective—no wrong answers here. The goal is just to make something you would be happy to put online, perhaps at `YOUR-NAME.com` or some similar domain.\n# What's the point?\n\nThere are more than one aspects to this challenge, but above all remember that challenges are here to help you get _practice_. ++The more repetitions complete with a given task the better you will be.++ If you write 1000 webpages and put them online you will be pretty good at creating websites, considerably better than someone who's only created one or two.\n\nWith that being said, there is an additional point to this exercise:\n\n* **Create something real**. A website is something real and tangible which you can show to the world.\n\n# Resources\n\n* The [System Fonts Guide in Butterick's Practical Typography](https://practicaltypography.com/system-fonts.html)\n   * If you're wondering about fonts and how to know what fonts work by default without adding any external resources.\n   * Author's note: That site is an amazing resource for all things related to typography. Highly recommended.\n\n"
        },
        {
          "id": "iwszDGGy",
          "type": "guided-project",
          "title": "Create a Mobile UI",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/hm1XzN3fues",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  i {\n    font-style: normal;\n  }\n  button {\n    outline: none;\n    border: none;\n  }\n\n  /* This phone frame is just to give the impression of a mobile site. */\n  /* Feel free to delete it and style however you want. */\n  .phone {\n    min-width: 300px;\n    margin: 0 auto;\n    height: 700px;\n    border: 10px solid #333;\n    border-radius: 10px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);\n  }\n</style>\n<div class=\"phone\">\n  <div class=\"titleBar horizontalNav\">\n    <button>\n      <i>⟨</i>\n      Back\n    </button>\n  </div>\n  <div class=\"content\"></div>\n  <div class=\"footerNav\">\n    <button>\n      <i>👜</i>\n      Browse\n    </button>\n    <button>\n      <i>🛒</i>\n      Cart\n    </button>\n    <button>\n      <i>🔍</i>\n      Search\n    </button>\n    <button>\n      <i>🎛</i>\n      Account\n    </button>\n  </div>\n</div>\n",
          "solutionCode": "<!-- Include Font Awesome for access to icons -->\n<script\n  src=\"https://kit.fontawesome.com/ebf2b8b290.js\"\n  crossorigin=\"anonymous\"\n></script>\n<style>\n  * {\n    box-sizing: border-box;\n  }\n  i { font-style: normal; }\n  body {\n    font-family: system-ui;\n  }\n  button {\n    outline: none;\n    border: none;\n  }\n  button:hover,\n  .active {\n    color: coral;\n    cursor: pointer;\n  }\n\n  .horizontalNav {\n    display: flex;\n    height: 80px;\n    align-items: center;\n    justify-content: space-around;\n    flex-shrink: 0;\n  }\n  .horizontalNav button {\n    height: 100%;\n    text-transform: uppercase;\n    font-weight: bold;\n    letter-spacing: 1.6px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .horizontalNav i {\n    font-size: 20px;\n  }\n\n  .phone {\n    min-width: 300px;\n    margin: 0 auto;\n    height: 700px;\n    border: 10px solid #333;\n    border-radius: 10px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);\n\n    display: flex;\n    flex-direction: column;\n  }\n\n  .titleBar {\n    position: relative;\n    justify-content: flex-start;\n    border-bottom: 1px solid gray;\n  }\n  .titleBar i {\n    margin-right: 10px;\n  }\n  .titleBar button {\n    justify-content: flex-start;\n    padding-left: 20px;\n  }\n  .titleBar .title {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    text-align: center;\n    text-transform: uppercase;\n    font-weight: bold;\n    letter-spacing: 1.6px;\n    font-family: system-ui;\n  }\n\n  .content {\n    flex: 1 100%;\n    padding: 20px;\n    overflow: auto;\n  }\n  .cardImage {\n    position: relative;\n    background: whitesmoke;\n    height: 300px;\n    border-radius: 10px;\n    border: 1px solid #ddd;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n    background: url(\"https://placekitten.com/400/300\");\n    background-size: cover;\n    background-repeat: no-repeat;\n  }\n  .cardImage .price {\n    background: crimson;\n    font-family: system-ui;\n    color: white;\n    padding: 5px 10px;\n    border-radius: 20px;\n    position: absolute;\n    right: 0;\n    top: 0;\n    transform: translate(20%, 50%);\n  }\n  .callToAction {\n    /* border: 1px solid teal; */\n    width: 100%;\n    line-height: 30px;\n    text-transform: uppercase;\n    font-weight: bold;\n    color: white;\n    background: coral;\n    border-radius: 5px;\n  }\n  .callToAction:hover {\n    filter: brightness(1.2);\n    color: white;\n  }\n\n  .footerNav {\n    border-top: 1px solid gray;\n  }\n  .footerNav button {\n    flex-direction: column;\n  }\n  .footerNav i {\n    margin-bottom: 10px;\n  }\n</style>\n<div class=\"phone\">\n  <div class=\"titleBar horizontalNav\">\n    <button>\n      <i class=\"fa fa-angle-left\"></i>\n      Back\n    </button>\n    <span class=\"title\">\n      Cool Product\n    </span>\n  </div>\n  <div class=\"content\">\n    <div class=\"card\">\n      <div class=\"cardImage\">\n        <div class=\"price\">$12</div>\n      </div>\n      <h3>Cool Product</h3>\n      <button class=\"callToAction\">Buy Now</button>\n      <p>\n        Description of som amazing product. This thing is great. You should buy\n        it! Buy buy buy!\n      </p>\n      <p>\n        Hey hey hey, this is just more content. I'm writing it here to make more\n        vertical space so that we can check out scrolling.\n      </p>\n      <p>\n        Here's one more paragraph just to add a bit more vertical space. How\n        great is placekitten by the way? What a visionary site. I don't know\n        anything about their story but I first came across that site many years\n        ago so I have to assume they've been around for a while.\n      </p>\n      <p>\n        Still not ready to buy? <strong>BUY ANYWAYS!</strong>\n      </p>\n    </div>\n  </div>\n  <div class=\"footerNav horizontalNav\">\n    <button class=\"active\">\n      <i class=\"fa fa-shopping-bag\"></i>\n      Browse\n    </button>\n    <button>\n      <i class=\"fa fa-shopping-cart\"></i>\n      Cart\n    </button>\n    <button>\n      <i class=\"fa fa-thumbs-up\"></i>\n      Search\n    </button>\n    <button>\n      <i class=\"fa fa-cog\"></i>\n      Account\n    </button>\n  </div>\n</div>\n",
          "content": "# Project Highlights\n\n* Create a real UI using HTML and CSS\n* Utilize the power of flexbox and absolute positioning\n\n# Why?\n\n* Many UIs these days are expected to be mobile. This project demonstrates coding a UI that works well in that context.\n* Building layouts based on _constraints_ is a key skill and it's better to learn through doing.\n* If you can build a an interface like the one in this challenge you've reached a professional level. There is _much_ more covered in the course but even at this point if you've mastered this module you know enough that someone would pay you to create websites.\n\n\n## Why not build a mobile app?\n\nYou absolute _can_ build a mobile app if that suits your needs, and we'll be diving deep into mobile in the Mobile module. For now, the purpose of this challenge is to get you more experience using the CSS concepts covered in this module and to show you what it's like to build a more full UI rather than just a bit of challenge code.\n\nBuilding mobile apps is significantly move involved than building for the web, and will involve many concepts we haven't touched on yet at this point in the course including:\n\n* TypeScript\n* React\n* CLIs\n* Build Pipelines\n\n\nThe good news is that almost all of what you're learning now is transferrable to building mobile apps in some way. This introductory coursework will put you on a good footing for learning mobile development if that's your interest.\n# Optional Starting Code\n\n```markup\n<style>\n  * {\n    box-sizing: border-box;\n  }\n  i {\n    font-style: normal;\n  }\n  button {\n    outline: none;\n    border: none;\n  }\n\n  /* This phone frame is just to give the impression of a mobile site. */\n  /* Feel free to delete it and style however you want. */\n  .phone {\n    min-width: 300px;\n    margin: 0 auto;\n    height: 700px;\n    border: 10px solid #333;\n    border-radius: 10px;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);\n  }\n</style>\n<div class=\"phone\">\n  <div class=\"titleBar horizontalNav\">\n    <button>\n      <i>⟨</i>\n      Back\n    </button>\n  </div>\n  <div class=\"content\"></div>\n  <div class=\"footerNav\">\n    <button>\n      <i>👜</i>\n      Browse\n    </button>\n    <button>\n      <i>🛒</i>\n      Cart\n    </button>\n    <button>\n      <i>🔍</i>\n      Search\n    </button>\n    <button>\n      <i>🎛</i>\n      Account\n    </button>\n  </div>\n</div>\n\n```\n"
        },
        {
          "id": "sfxItMSR",
          "type": "guided-project",
          "title": "Styling A Tic Tac Toe Board",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/m8PksyesJvo",
          "starterCode": "",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  .board {\n    display: table; /* Only take up as much space as needed */\n    margin: 0 auto; /* Center on the page (requres display:table above) */\n  }\n  .row {\n    display: flex; /* Display horizontally */\n    flex-wrap: wrap;\n  }\n  .square {\n    width: 50px;\n    height: 50px;\n    border: 1px solid black;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-family: monospace;\n    font-weight: 100;\n    font-size: 40px;\n  }\n  .square:after {\n    display: block;\n  }\n  .has-x:after {\n    content: \"x\";\n    color: forestgreen;\n  }\n  .has-o:after {\n    content: \"o\";\n    color: tomato;\n  }\n</style>\n<div class=\"board\">\n  <div class=\"row\">\n    <div class=\"square has-x\"></div>\n    <div class=\"square\"></div>\n    <div class=\"square\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"square\"></div>\n    <div class=\"square has-o\"></div>\n    <div class=\"square\"></div>\n  </div>\n  <div class=\"row\">\n    <div class=\"square\"></div>\n    <div class=\"square\"></div>\n    <div class=\"square\"></div>\n  </div>\n</div>\n",
          "content": "Here's what we'll cover in this challenge:\n\n* Pseudo selectors and the `content` property\n* [Flexbox](/workspace/iFvzasqW)\n* Using various `display` properties, including the somewhat obscure `display: table` property\n* Using utility classes\n\n# The Task\n\nCreate a Tic Tac Toe board using HTML and CSS. It should look something like this:\n\n![A 3x3 tic tac toe board.](/assets/sfxItMSR/d476572f879076a3e659d2ac3081ef95_tic-tac-toe.png)\nIt doesn't matter which squares are blank, which have X and which have O. Just make sure that you style at least one square with an X and one with an O.\n# Why?\n\nThis challenge starts to touch on generalized UI programming rather than just text documents with the occasional image. Don't get me wrong—_most of the web_ is just text documents with the occasional image, but it's important to generalize the concepts your learning to more abstract ideas like a Tic Tac Toe board.\n\nFurthermore, we can use the tic tac toe board again later in the course to make it into a fully functional game that you can play with others or against the computer.\n\nAnd of course as always just by programming, getting more repetitions, you're building the neural pathways that will make all this stuff come as second nature to you over time.\n\n---\n\n\n> **There's almost always more than one solution**\n> \n> This challenge can be accomplished with `flex-wrap` and a fixed `width` or with a more conventional approach of three \"row\" divs and three `div`s inside them to serve as squares on the board.\n> \n> In fact there are many ways you could complete this challenge that I wouldn't even think of. That's part of the beauty of programming—there's always more than one way to get something done. It can also be a curse at times because other programmers will often do things in different ways than you would, but that's beside the point.\n"
        },
        {
          "id": "Fpw0qzGv",
          "type": "guided-project",
          "title": "Creating a Calculator Guided Project",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/nkA2mQOTqHY",
          "starterCode": "",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    background: #222; /* Totally unecessary, just nice for coding at night */\n    font-family: system-ui;\n  }\n  .calculator {\n    color: white;\n    width: 210px;\n    margin: 0 auto;\n    margin-top: 40px;\n    border-radius: 5px;\n    background: #323232;\n    border: 1px solid rgba(0,0,0,0.2);\n    overflow: hidden;\n    position: relative;\n    box-shadow: 0 2px 15px rgba(0,0,0,0.5);\n  }\n  .calculator:after {\n    content: '';\n    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.2);\n    z-index: 2;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: block;\n    border-radius: 5px;\n    pointer-events: none;\n  }\n  .display {\n    display: flex;\n    height: 70px;\n    padding: 10px;\n    align-items: flex-end;\n    justify-content: flex-end;\n  }\n  .display span {\n    font-size: 42px;\n    font-weight: 200;\n    display: block;\n    line-height: 35px;\n  }\n  .row {\n    width: 100%;\n    display: flex;\n  }\n  .key {\n    background: #646464;\n    flex: 1 25%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 40px;\n    border-bottom: 1px solid #323232;\n    border-left: 1px solid #323232;\n  }\n  .key:hover {\n    filter: brightness(1.2);\n  }\n  .row:last-child .key {\n    border-bottom: none;\n  }\n  .key:first-child {\n    border-left: none;\n  }\n  .key.span-2 {\n    flex: 2 50%;\n  }\n  .meta-key {\n    background: #464646;\n  }\n  .operator-key {\n    background: orange;\n  }\n</style>\n\n<div class=\"calculator\">\n  <div class=\"display\">\n    <span>47</span>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"key meta-key\">C</div>\n    <div class=\"key meta-key\">±</div>\n    <div class=\"key meta-key\">%</div>\n    <div class=\"key operator-key\">÷</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"key\">7</div>\n    <div class=\"key\">8</div>\n    <div class=\"key\">9</div>\n    <div class=\"key operator-key\">×</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"key\">4</div>\n    <div class=\"key\">5</div>\n    <div class=\"key\">6</div>\n    <div class=\"key operator-key\">-</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"key\">1</div>\n    <div class=\"key\">2</div>\n    <div class=\"key\">3</div>\n    <div class=\"key operator-key\">+</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"key span-2\">0</div>\n    <div class=\"key\">.</div>\n    <div class=\"key operator-key\">=</div>\n  </div>\n</div>\n",
          "content": "# The Task\n\nCreate a calculator based on the following image.\n\n![A trusty calculator application.](/assets/Fpw0qzGv/6b4ea75bda893632217dda54b9c13e4f_calculator.png)\n\nWe won't be making it work, not yet anyway. We haven't learned enough TypeScript for that yet, so this challenge is all about HTML and CSS.\n\nYou can complete this challenge in the [Sandbox](/workspace/sandbox?type=markup). Once you're satisfied with the result export it to an HTML file. \n# Why?\n\nThere are two particularly important aspects to this project:\n\n* Get familiar with building applications, not just webpages\n* Turn a graphic design into a real interface you can use\n\n\n\n## Applications not web pages\n\nMany people think of HTML and CSS as tools to build web _pages_. That's certainly true, but that's not all you can do with HTML and CSS. You can also build web _applications_.\n\n> **Web applications vs web pages**\n> Possibly a silly distinction, but you will hear these terms in the wild so let's touch on this briefly. \n> \n> \n> \n> \n> \n> \n>    * A web page is just something you read. A news site, a product page, etc.\n>    * A web application is something you interact with. It's software. Web apps also include web pages. For example, Pairwise is a web _application_ \\(you can interact with it\\) but there are many parts of app that you just read, like this page here.\n\n## From design to product\n\nTaking a graphic design and turning it into a finished product is a very important skill because:\n\n* If you work for a company or a client they might give you designs that need to turn into apps.\n* If you want to build your own product you will have to design it and then create it, even if \"designing\" it just means visualizing it in your mind before coding.\n\n# Tips and hints\n\n* You can code in whatever order works best for you, but if you're not sure then start by writing some basic HTML then give it some basic styling. Maybe create the outline of the calculator and get the size and background color right. Then move on to the inner details and repeat.\n* If you're feeling stuck try starting over from the beginning.\n   * This may seem counterintuitive but sometimes you need a blank slate to get new ideas flowing, and there's not actually that much code to write in this challenge so actually typing things out won't take too long. _Thinking about what to write_ is where you will spend most of your time.\n* If you really get stuck or you feel this challenge needs some work let us know\\! There is a feedback button in the header.\n* If you're not sure how to type a `±` symbol or a `÷` symbol just copy and paste from here.\n   * These are Unicode symbols, so it's possible to type them on your computer. It's often a pain though so when in doubt just try Googling around for the relevant symbol. \n\n"
        },
        {
          "id": "4rq4ezCu",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Welcome to the first special topics section\\! \n# What can I find here?\n\nSpecial topics encompass everything that we think is useful but still optional for the current module. These topics might be revisited in more depth later or moved into the core challenge section.\n\nAs with all the of the course we'd love your feedback on these special topics. Was anything particularly useful? Do you think anything here needs more explanation? There's a feedback button in the upper right marked with a question mark.\n\nNow let's jump in 😎."
        },
        {
          "id": "8YMC6xUd",
          "type": "media",
          "title": "Getting your site online",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "https://www.youtube.com/embed/nwSrWD0U8OY",
          "starterCode": "",
          "solutionCode": "",
          "content": "Also known as deploying your first static site.\n\n> \n> ### Jargon Time\n> \n> **Deploy**: Taking whatever code you wrote and uploading it to a server where it can be accessed. For example, no one else can see the code you wrote during this module but if you _deploy_ your code then anyone can access it with the URL. This is very important for websites.\n> **Static**: As opposed to \"dynamic.\" In this context static means that your code is just a bunch of files that can be used directly without any additional software.\n# Deployment\n\nThis is the general term for \"putting something online.\" In fact it's even more general than that. Deployment can also mean putting your mobile app on an app store. It really just means putting your code where it needs to be.\n\n## Deploying a website\n\nIn the case of a website your code needs to be on a server where anyone can access it.\n\n**NOTE:** Even if you're creating a private website with a login page and a password it's still accessible to \"anyone\" in that anyone can visit your login page, even if they can't access the content locked inside.\n\n\n## Deploying a server\n\nLater in the course we'll be deploying more than just websites and the process will be different than what you saw in the video. Deploying servers is a bit more complicated than deploying static websites because:\n\n* Deploying a website just requires moving some files to a remote computer.\n* Deploying a server requires moving some files and then _running those files_ on a remote computer.\n\n\nThe latter is what \"Cloud computing\" often refers to, but it's just a buzz word. Every \"cloud\" and every \"server\" is just someone else's computer that you rent. \n\n![This fridge sticker speaks the truth!](/assets/8YMC6xUd/5ee6958730a2bfb33dab02cf62857115_someone-elses-computer.png)\n\n## Why is hosting free sometimes?\n\nThe short answer is it's extremely cheap \\(on a marginal basis\\) to provide static hosting. It's so cheap in fact that business can make good money by providing free hosting to many many people and charging just small percentage of them for more advanced or business\\-related features. The trick is, hosting providers can run their own software to host _your_ site, and by running their own software they server a huge amount of traffic while incurring minimal cost per view.\n\nHowever, hosting for servers is usually not free. This is because your server code is real software that has to run on a computer. However, the hosting provider does not control the software. In fact, they have no idea what software you're running. Your software could be tremendously resource intensive, requiring large amounts of computing power and electricity to run.\n\nAs a result the price of hosting servers usually ranges from extremely cheap to extremely expensive. It just depends on what your servers do and how much traffic they serve.\n\n> \n> ### Web Traffic \\(This is an aside, feel free to skip\\)\n> \n> It may not be obvious from the outside, but hosting a lot of traffic is no mean feat. Generally websites load pretty fast assuming you have a decent internet connection. For a small amount of traffic this is very easy to accomplish. If you have, say, 100 visitors every month that's no problem. The cheapest server you can rent can host that traffic with ease. You could even host that traffic from your own computer \\(although you shouldn't\\).\n> \n> Now, consider the extreme opposite: Facebook. A quick Google search told me they had 2.4 _billion_ users per month in 2018. That's roughly 1000 users _per second_ \\(nonstop, for every second of the year\\!\\). Having that many users connect to your servers every single second is decidedly **not easy, **and very expensive.\n> \n> Now consider less extreme example: Stripe, one of the most widely used payment platforms online. Stripe has many users but they deal in _transactions_. When their servers get a hit it's because someone is spending money, which happens considerably less frequently than people posting status updates and selfies to a social network. Their server costs are likely _much_ smaller than those of Facebook. \n> \n> The point is, the amount of money you might spend on a server depends entirely on the users you serve and the software you are running.\n> \n> Generally, hosting is very cheap and if you ever manage to get to 2.4 million users per month you'll have investors breaking down your door to throw money at you, so you can afford it.\n# Resources\n\n* That sweet sweet website deployed in the video: [https://meditative\\-tic\\-tac\\-toe.netlify.com/](https://meditative-tic-tac-toe.netlify.com/)\n* [Netlify](https://www.netlify.com/)\n   * This is the hosting provider we used in the video. They have an online interface for managing your sites, which make them much more user friendly if you're just starting out your technical journey.\n* [Surge\\.sh](https://surge.sh/)\n   * Similar to Netlify in that they provide free hosting.\n   * You will need to use a command line interface to use Surge \\(at least last time I checked\\). This makes it much harder to use before you're familiar with a terminal.\n* [Github Pages](https://pages.github.com/)\n   * Totally free. The others listed here have paid plans but as far as I know Github Pages doesn't even let you pay. There are probably some limits associated with that but I've never run into them.\n   * Github Pages is the hardest to get set up of all the options here, which doesn't mean it's necessarily difficult it just requires familiarity with two things we haven't covered yet \\(but we will later\\): The command line and Git.\n\n"
        },
        {
          "id": "C$3mo2yQ",
          "type": "media",
          "title": "The Document Objet Model",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The DOM \\(that's what everyone calls it\\). A big tree—in the browser.\n# What in the world is this DOM?\n\nThat explanation above not doing it for ya? Fair enough, it's a pretty bad explanation. Let's try to make things clearer. Check out this nifty code:\n\n```markup\n<body>\n  <div class=\"container\">\n    <div class=\"divly\">\n      One nifty div\n    </div>\n    <p>\n      This is the same code from the lesson on <code>relative</code> positioning\n      in CSS. We're going to use it to talk about <strong>THE DOM!</strong>.\n    </p>\n  </div>\n</body>\n\n```\n\nLooking at this code you can see that at the top we have the `body`. Within that we have a `div.container`. Within that we have our nifty `div.divly` as well as a `p` tag\\. Within the `p` tag we have some other tags... etc etc.\n\nThe code above has a hierarchical structure. \n\n> The DOM is the general term we use for the tree, or hierarchy, of elements on a web page.\n\nIt's one of those industry terms that you simply never need to know until you start working web programming. So even if this seems obscure or irrelevant just bear with me. For now you'll have to take my word that having terms to talk about \"the elements of a webpage\" is useful.\n# The DOM defines relationships\n\nOnce again, the DOM is a hierarchy or a tree. Here are some examples if you're unfamiliar with the abstract idea of a tree.\n\n## Real\\-world Trees\n\nThink of a family tree. There are parents, siblings and children. If you think of your own lineage you can think of your parents, and their parents, and their parents...  all the way back to the dawn of the human race. This hierarchical relationship \\(parents, siblings, children\\) is a tree, which is why your family tree is called that.\n\nThink of a large company. At the top their's the CEO, then there are other C\\-level executives, below them there might be department heads, then regional or project managers, then employees \\(i.e. people who don't manage other people\\). This is also a tree, although the relationships might have different names: boss, peers, direct reports.\n\nYou can of course also think of a literal tree \\(trunk, branches, leaves\\) but the DOM is a bit more abstract so the former examples might be more useful.\n\n## DOM Relationships\n\nLet's take the example from above and define some relationships. \n\n* Starting with the `body` we would say it has one child: `.container` and is the document \"root\" meaning it has no parents—no other elements above it.\n* Moving on to the `.container` div we would say its parent is `body`, it has zero siblings and two children: `.divly` and a `p` tag\\.\n* `.divly` has `.container` as its parent, has one sibling \\(`p`\\) and no children.\n   * **NOTE**: There is text within the div, but for the purposes of this explanation we're focusing solely on HTML tags.\n\n\nGiven these examples you can probably work out how we would describe the `p` tag and its children.\n"
        },
        {
          "id": "DUVDDO97",
          "type": "markup",
          "title": "Inline Styles",
          "instructions": "Use **inline styles** to apply the following CSS to the `div`.\n\n```\npadding: 10px;\nbackground: azure;\nborder: 1px solid blue;\n\n```\n",
          "testCode": "const el = get('div');\n\ntest(\"Add 10px of padding using inline styles\", () => {\n  expect(el.style.padding).toBe(\"10px\");\n});\ntest(\"Add an `azure` background using inline styles\", () => {\n  expect(el.style.background.toLowerCase()).toBe(\"azure\");\n});\ntest(\"Add a border using inline styles\", () => {\n  expect(el.style.border).toBe(\"1px solid blue\");\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n</style>\n<div>Hey there I'm a div that should have inline styles</div>\n",
          "solutionCode": "<style>\n  * {\n    box-sizing: border-box;\n  }\n</style>\n<div style=\"padding:10px;background: azure; border: 1px solid blue;\">Hey there I'm a div with inline styles</div>\n",
          "content": "There is another way to apply CSS other than a `<style>` tag: **Inline Styles**.\n# The Syntax\n\nInline styles look just like CSS if you remove the selectors and brackets and put everything on the same line. Check it out:\n\n```markup\n<style>\n  * {\n    box-sizing: border-box;\n  }\n  .label {\n    position: absolute;\n    background: teal;\n    padding: 10px;\n  }\n</style>\n<div class=\"label\">\n  Heyo!\n</div>\n<div style=\"position: absolute; background: teal; padding: 10px;\">\n  Heyo!\n</div>\n\n\n```\n\nThe two `div`s will have the _exact same style_ applied, just in two different ways. \n# What's the difference\n\n* Inline styles are more specific. If you have inline styles that contradict your regular CSS styles the inline styles take precedence and will be applied.\n* You cannot reuse inline styles. You can certainly copy and paste your inline styles anywhere you want, but you can't reuse styles the way you can with CSS classes. \n   * If you decide you want to change some inline styles for your whole site you will have to make the change everywhere, rather than just in one place. \n* Inline styles are usually harder to read. If you just have one or two CSS properties it's no problem, but it quickly starts becoming difficult to read inline styles as they expand.\n\n# When is this useful?\n\nGiven the downsides mentioned above, why use this at all?\n\n* You really just want some styles on one element. This happens, and inline styles are great for it.\n\n\nThat's pretty much it. However, if you're using a UI framework \\(React, for example\\) rather than plain HTML inline styles can actually be very powerful, because the framework will give you other ways to write them. We'll revisit this in UI programming.\n"
        }
      ]
    },
    {
      "free": true,
      "id": "lzTzpPcS",
      "title": "TypeScript",
      "challenges": [
        {
          "id": "2qKcNab8",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module, you will learn all of the basic fundamentals of computer programming using a popular language: TypeScript. You may not have heard of TypeScript before, but you have probably heard of JavaScript. TypeScript is simply JavaScript with a type system \\- don't worry if you won't know what that means yet\\!"
        },
        {
          "id": "s9RpoVOt2",
          "type": "section",
          "title": "Comments",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Writing comments is an important part of writing computer software. Comments are code which is ignored by the computer. They serve as messages left for yourself or some other future programmer.\n\nTake a look at the following code snippet and see if you can recognize which parts are comments:\n\n```\n/**\n * Handle fetching a user profile.\n */\nfunction fetchUserProfile() {\n    // TODO: Fetch the user from the server instead\n    // of using a hard-coded user.\n    return { name: \"Sam\", age: 26 };\n}\n\n/**\n * Handle log in. Try to fetch the user but return\n * an error if the user could not be found.\n */\nfunction logIn() {\n    const user = fetchUserProfile();\n    // The user may not exist, handle this case\n    if (user) {\n        return user;\n    } else {\n        return new Error(\"Could not log in!\");\n    }\n}\n\n```\n\nNow let's get some practice writing comments\\!"
        },
        {
          "id": "bf1g0r$bL",
          "type": "typescript",
          "title": "Comment the Code!",
          "instructions": "Here we will get some practice writing your first comments. There are two syntax choices for adding comments in TypeScript: `//` and `/* ... */`. The double slash `//` can be used to create single line comments and the `/* ... */` can be used to create single\\-line or multi\\-line comments.\n\nThe code editor is empty\\! Get some practice writing your own comments by adding at least one comment using either comment syntax.",
          "testCode": "test(\"A comment should exist using the `//` or `/* ... */` comment syntax.\", () => {\n  const code = __user_code_string__;\n  const includesCommentSyntax = code.includes(\"//\") || (code.includes(\"/*\") && code.includes(\"*/\"));\n  expect(includesCommentSyntax).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "// This is a single line comment!\n\n/* This is also a single line comment! */\n\n/**\n * This is a multie-line comment!\n */",
          "content": ""
        },
        {
          "id": "aMuPir571",
          "type": "typescript",
          "title": "Comment a Function",
          "instructions": "There is a function called `generateUniqueStringId` in the editor below. The function generates a random string id composed of letters. Then, there is some code to generate several ids and print out their values to the console on the right of the screen. The function `generateUniqueStringId` doesn't have any comment to describe what it does though... This could be confusing to someone reading this code in the future\\! Complete the challenge by giving the function a multi\\-line comment \\(remember: `/* ... */` \\) and write a message about what the function does \\(generate a unique string id of letters\\). You can do it\\!",
          "testCode": "test(\"A multi-line comment should exist using the `/* ... */` comment syntax to describe the `generateUniqueStringId` function.\", () => {\n  const code = __user_code_string__;\n  const includesCommentSyntax = code.includes(\"/*\") && code.includes(\"*/\");\n  expect(includesCommentSyntax).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "function generateUniqueStringId() {\n  return (\n    Math.random()\n      .toString(36)\n      .substring(2, 15) +\n    Math.random()\n      .toString(36)\n      .substring(2, 15)\n  );\n}\n\n// Create an array and fill it with random ids\nconst ids = new Array(10).fill(\"\").map(generateUniqueStringId);\n\n// Log the random ids\nconsole.log(\"Here are the ids:\");\nfor (const id of ids) {\n  console.log(id);\n}\n",
          "solutionCode": "/**\n * Generate a unique string id of 21 letters.\n */\nfunction generateUniqueStringId() {\n  return (\n    Math.random()\n      .toString(36)\n      .substring(2, 15) +\n    Math.random()\n      .toString(36)\n      .substring(2, 15)\n  );\n}\n\n// Create an array and fill it with random ids\nconst ids = new Array(10).fill(\"\").map(generateUniqueStringId);\n\n// Log the random ids\nconsole.log(\"Here are the ids:\");\nfor (const id of ids) {\n  console.log(id);\n}\n",
          "content": ""
        },
        {
          "id": "8p4BZqPl",
          "type": "section",
          "title": "Logging and Debugging",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "One of the first things to learn when learning programming is how to print out values from your program\\! This allows you to get information and feedback from your program to determine if it is working properly and also to fix bugs and problems which may develop in your program over time.\n\nFor example, maybe one day your server will show you some error message like:\n\n```typescript\nUncaught ReferenceError: users is not defined\n    at UserService (UserService.tsx:194)\n    at renderWithHooks (react-dom.development.js:16260)\n    at updateFunctionComponent (react-dom.development.js:18347)\n    at beginWork$1 (react-dom.development.js:20176)\n    at HTMLUnknownElement.callCallback (react-dom.development.js:336)\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:385)\n    at invokeGuardedCallback (react-dom.development.js:440)\n    at beginWork$$1 (react-dom.development.js:25780)\n    at performUnitOfWork (react-dom.development.js:24695)\n    at workLoopSync (react-dom.development.js:24671)\n    at performSyncWorkOnRoot (react-dom.development.js:24270)\n    at react-dom.development.js:12199\n\n```\n\n😰😰😰\n\nThis scary message is telling you some value your program thought existed did not exist. The first thing might want to do is print out the value of `users` or the data `users` is coming from to help you see what it is and how it can become `undefined`.\n\nIn this section we will learn how to do this\\!"
        },
        {
          "id": "5mpYgBmX",
          "type": "typescript",
          "title": "Logging Values",
          "instructions": "TypeScript has a built\\-in utility to print values called `console`. The `console` object provides several methods to help you log values, the most commonly used of which is `console.log`. Go ahead and log some values and take a look at the panel to the right to see the results\\!",
          "testCode": "test(\"The three variables `logMe`, `alsoLogMe`, and `logMeAsWell` should be logged to the console using the `console` `log` method.\", () => {\n  expect(__user_code_string__.includes(\"console.log(logMe)\")).toBeTruthy();\n  expect(__user_code_string__.includes(\"console.log(alsoLogMe)\")).toBeTruthy();\n  expect(__user_code_string__.includes(\"console.log(logMeAsWell)\")).toBeTruthy();\n});\n",
          "videoUrl": "",
          "starterCode": "const logMe = \"Hi, it's me!\";\n\nconst alsoLogMe = [1,2,3,4,5];\n\nconst logMeAsWell = {\n    users: [\n        \"Sam\",\n        \"Jerry\",\n        \"Lisa\",\n    ]\n};\n",
          "solutionCode": "const logMe = \"Hi, it's me!\";\n\nconst alsoLogMe = [1,2,3,4,5];\n\nconst logMeAsWell = {\n    users: [\n        \"Sam\",\n        \"Jerry\",\n        \"Lisa\",\n    ]\n};\n\nconsole.log(logMe);\nconsole.log(alsoLogMe);\nconsole.log(logMeAsWell);",
          "content": ""
        },
        {
          "id": "RL6JBhYL",
          "type": "typescript",
          "title": "Console Warn and Error",
          "instructions": "The `console` provides other methods as well which you can use to call attention to the values you are printing. There's some code in the editor below. Don't worry if you don't understand all of it. Take a look at lines 7 and 11. Line 7 uses the `console.warn` method to print a warning statement. In line 11, we want to use the `console.error` method to print the error which occurs\\! Go ahead and give it a try\\!",
          "testCode": "test(\"The `console` `error` method is used to print the error `message` thrown by the `doSomethingDangerous` function.\", () => {\n  expect(__user_code_string__.includes(\"console.error(message)\")).toBeTruthy();\n});\n",
          "videoUrl": "",
          "starterCode": "const doSomethingDangerous = () => {\n    throw new Error(\"Danger, danger!!!\");\n}\n\nconst doSomethingSafely = () => {\n    // Print a warning here before we do something dangerous\n    console.warn(\"We are about to do something dangerous!\");\n    try {\n        doSomethingDangerous();\n    } catch (error) {\n        const message = error.message;\n        // Log the error here!\n    }\n}\n\ndoSomethingSafely();\n",
          "solutionCode": "const doSomethingDangerous = () => {\n    throw new Error(\"Danger, danger!!!\");\n}\n\nconst doSomethingSafely = () => {\n    // Print a warning here before we do something dangerous\n    console.warn(\"We are about to do something dangerous!\");\n    try {\n        doSomethingDangerous();\n    } catch (error) {\n        const message = error.message;\n        // Log the error here!\n        console.error(message);\n    }\n}\n\ndoSomethingSafely();",
          "content": ""
        },
        {
          "id": "pqwU3tyw",
          "type": "typescript",
          "title": "Console Info",
          "instructions": "There is another useful `console` method, `info`. Take a look at the editor and give it a try\\!",
          "testCode": "test(\"The `info` method should use the `console` `info` method to log out the `message` argument.\", () => {\n  expect(__user_code_string__.includes(\"console.info(message)\")).toBeTruthy();\n});\n",
          "videoUrl": "",
          "starterCode": "// Log a message\nconst log = (message: string) => {\n    console.log(message);\n}\n\n// Show a warning\nconst warn = (message: string) => {\n    console.warn(message);\n}\n\n// Show an error\nconst error = (message: string) => {\n    console.error(message);\n}\n\n// Show an info message\nconst info = (message: string) => {\n    // Write your code here!\n}\n\nlog(\".log display general data\");\nwarn(\".warn shows a warning\");\nerror(\".error displays error information!\");\ninfo(\".info what does .info do???\");",
          "solutionCode": "// Log a message\nconst log = (message: string) => {\n    console.log(message);\n}\n\n// Show a warning\nconst warn = (message: string) => {\n    console.warn(message);\n}\n\n// Show an error\nconst error = (message: string) => {\n    console.error(message);\n}\n\n// Show an info message\nconst info = (message: string) => {\n    // Write your code here!\n    console.info(message);\n}\n\nlog(\".log display general data\");\nwarn(\".warn shows a warning\");\nerror(\".error displays error information!\");\ninfo(\".info what does .info do???\");",
          "content": ""
        },
        {
          "id": "Y$6fSREp",
          "type": "typescript",
          "title": "Debugging",
          "instructions": "Debugging is the process of find the cause of an error or problem in a program and then re\\-writing or changing the code to avoid the error. This is a critical aspect of a programmer's job and one best learned through trial by fire. Good luck\\!",
          "testCode": "test(\"There should be 10 students in the `studentList`.\", () => {\n  expect(studentList.length).toBe(10);\n});\n\ntest(\"The `logStudentName` function should be called with all 10 of the students in the `studentList` and introduce them by name, e.g. `\\\"This is: Lewis\\\"`.\", () => {\n  let totalIntroductions = 0;\n  for (const log of __secret_log_box) {\n    if (log.includes(\"This is:\")) {\n      totalIntroductions++;\n    }\n  }\n  expect(totalIntroductions).toBe(10);\n});\n",
          "videoUrl": "",
          "starterCode": "// The type of a person\ninterface Student {\n    name: string;\n}\n\n// A list of people\nconst studentList: Student[] = [\n    { name: \"Sam\" },\n    { name: \"Lee\" },\n    { name: \"Jerry\" },\n    { name: \"Ben\" },\n    { name: \"Ryan\" },\n    { name: \"Joe\" },\n    { name: \"Steve\" },\n    { name: \"Lewis\" },\n    { name: \"Bryan\" },\n    { name: \"Mary\" },\n];\n\n// A method to introduce a person by their name\nconst logStudentName = (person: Student) => {\n    const name = person.name;\n    console.log(`This is: ${name}`);\n}\n\n// Introduce everyone!\nconst introduceEveryone = () => {\n    for (let i = 1; i < 11; i++) {\n        const person = studentList[i];\n        logStudentName(person);\n    }\n}\n\n// Try to introduce everyone\ntry {\n    introduceEveryone();\n} catch (err) {\n    console.warn(\"introduceEveryone threw an error!\");\n    console.error(err.message);\n}\n",
          "solutionCode": "// The type of a person\ninterface Student {\n    name: string;\n}\n\n// A list of people\nconst studentList: Student[] = [\n    { name: \"Sam\" },\n    { name: \"Lee\" },\n    { name: \"Jerry\" },\n    { name: \"Ben\" },\n    { name: \"Ryan\" },\n    { name: \"Joe\" },\n    { name: \"Steve\" },\n    { name: \"Lewis\" },\n    { name: \"Bryan\" },\n    { name: \"Mary\" },\n];\n\n// A method to introduce a person by their name\nconst logStudentName = (person: Student) => {\n    const name = person.name;\n    console.log(`This is: ${name}`);\n}\n\n// Introduce everyone!\nconst introduceEveryone = () => {\n    for (let i = 0; i < 10; i++) {\n        const person = studentList[i];\n        logStudentName(person);\n    }\n}\n\n// Try to introduce everyone\ntry {\n    introduceEveryone();\n} catch (err) {\n    console.warn(\"introduceEveryone threw an error!\");\n    console.error(err.message);\n}\n",
          "content": "If you've solved the challenge above correctly you are now familiar with one of the classic programming errors \\(and [one of the most difficult problems in computer science](https://twitter.com/codinghorror/status/506010907021828096?lang=en) 😉\\): _off by one errors._\n\nOff by one errors are errors where a program is _off by one..._ For example, accessing a value just outside the start or end of a list.\n\nThis is a classic error and a common pitfall of writing for loops to perform manual iteration\\!\n\n```typescript\nfor (let i = 0; i < limit; i++) {\n    const item = list[i];\n    // Do something with the item.\n    const contents = item.getContents();\n    // ...\n    // But what if there is nothing at inside list[i] !?!?!?\n}\n\n```\n\nWatch out for this type of error whenever you are writing for loops by hand\\!"
        },
        {
          "id": "jaZYVeNS",
          "type": "media",
          "title": "Debugging Skills",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Debugging is much more than just logging values in a program.\n\nAs you learn more you will find that it encompasses everything from how you write the program in the first place to the detective\\-like skillset required to investigate and debug cryptic errors in production systems.\n\nSometimes the \"error\" is a user saying \"I tried to log in and it didn't work\".\n\nOr the error is an stack\\-trace in the logs for a production server which says some value was `undefined` which you did not thing could ever be `undefined`.\n\nHow do you get to the bottom of the problem\\!?\nHow do you find the causes\\!?\nHow do you recreate the conditions which caused the error\\!?\nHow do you do this quickly and efficiently when you have live users who cannot use your product because of the bug\\!?\nHow do you fix the bug in a sound way instead just adding some quick workaround\\!?\n\nAll of this comprises the art of debugging\\! Learning how to use the `console` in TypeScript is just the starting point. We encourage you to make use of the `console` logging utilities as you work through the Pairwise curriculum and work on your own projects to start getting familiar with printing out values to inspect and debug your programs.\n\nSuccessful debugging is a difficult skill which takes time to become experienced with. Over time we will introduce additional tools and approaches for you to use.\n\n---\n\nIn the next section we will learn about errors: what they are and how to handle them. This is an important next step in the learning process of debugging."
        },
        {
          "id": "7llHMoYzK",
          "type": "section",
          "title": "Errors and Error Handling",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Sometimes programs fail. Your software must tell the computer exactly what to do in ever state your program may reach. If the computer doesn't know what to do, the program will crash and throw an error. For instance, consider this code:\n\n```typescript\nconst name = user.name;\n\n```\n\nWhat if `user` is `null` or `undefined`? Well, you cannot read the `name` property then\\! If you try to write the above code, you will get an error like this:\n\n```\nUncaught ReferenceError: user is not defined\n    at <anonymous>:1:1\n\n```\n\nThe `ReferenceError` is telling you that `user` is not defined. There are many ways a program can fail like this. When the program fails, it will throw an error and usually the program will crash and stop running. The error message will contain some information about how and why the program failed, which you can use to try to debug and fix the issue.\n\n---\n\nIt is critical to understand errors and how to handle them as a programmer. You will spend a lot of time debugging errors, and excellent programmers write code which handles potential errors states gracefully. In this module, we will learn all about errors and tools you can use to handle errors."
        },
        {
          "id": "58fZQwoQA",
          "type": "typescript",
          "title": "The Throw Keyword",
          "instructions": "Unsafe operations may \"throw\" errors. In TypeScript there is also a `throw` keyword which allows you to explicitly throw an error from a block of code. This escalates the error to the calling code, which the must handle the error or the program will crash.\n\nTo throw a new error, you can use the TypeScript `Error` object constructor, e.g. to throw an error you can write `throw new Error(\"An error occurred!\")`.",
          "testCode": "test(\"The `thisFunctionShowThrow` function should throw an error.\", () => {\n  expect(thisFunctionShowThrow).toThrow();\n});\n",
          "videoUrl": "",
          "starterCode": "// This function should throw an error\nconst thisFunctionShowThrow = () => {\n    // Write your code here!\n}\n",
          "solutionCode": "// This function should throw an error\nconst thisFunctionShowThrow = () => {\n    // Write your code here!\n    throw new Error(\"An error happened!\");\n}\n",
          "content": ""
        },
        {
          "id": "CoUCabHwR",
          "type": "typescript",
          "title": "The Catch Keyword",
          "instructions": "Thrown errors can be \"caught\" using the `catch` keyword\\. An example of this is as follows:\n\n```typescript\ntry {\n    throw new Error(\"An error!\");\n} catch (err) {\n    // Caught the error!\n    console.log(\"The error is caught! Error message: \", err.message);\n}\n\n```\n\nThere is a function which throws an error in the editor below. The function throws an error when it is _called_. Wrap the calling function in `try/catch` to handle the error.",
          "testCode": "test(\"The `aFunctionWhichThrows` should throw an error when called.\", () => {\n  expect(aFunctionWhichThrows).toThrow(\n    \"aFunctionWhichThrows should throw an error.\"\n  );\n});\n\ntest(\"The call of `aFunctionWhichThrows` should be wrapped in `try/catch` to catch the thrown error.\", () => {\n  // Really bad I know:\n  const tryCatchExistsHeuristic =\n    __user_code_string__.includes(\"try\") &&\n    __user_code_string__.includes(\"catch\");\n  expect(tryCatchExistsHeuristic).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "// This function throws an error\nconst aFunctionWhichThrows = () => {\n  throw new Error(\"Dangerous!\");\n};\n\n// This needs to be wrapped in try/catch so\n// catch the thrown error:\naFunctionWhichThrows();\n",
          "solutionCode": "// This function throws an error\nconst aFunctionWhichThrows = () => {\n  throw new Error(\"Dangerous!\");\n};\n\n// This needs to be wrapped:\ntry {\n  aFunctionWhichThrows();\n} catch (err) {\n  console.log(\"aFunctionWhichThrows threw an error!\");\n}\n",
          "content": ""
        },
        {
          "id": "TiacxGwtm",
          "type": "typescript",
          "title": "Catching Errors",
          "instructions": "There a two functions in the editor below. One function `validateNumber`performs validation and can throw errors, the other function calls `validateNumber` and handles the error if they occur. Currently the error is re\\-thrown from `processInputValue`. This causes the code to stop running at soon as the error occurs\\!\n\nInstead of throwing the error \\(line 22\\), simply log the `message` property of the error, e.g. you can write `console.error(err.message)`.",
          "testCode": "// Write your tests here:\ntest(\"The `processInputValue` function should log the error message using the console `error` method.\", () => {\n  processInputValue(-5);\n  processInputValue(500);\n  processInputValue(\"some string\");\n  processInputValue(5);\n  processInputValue(92);\n\n  const logs = parseLogBox(__secret_log_box);\n  console.log(logs);\n  const errors = parseLogBox(__secret_error_box);\n  console.log(errors);\n\n  expect(inBox(logs, \"Input 5 is valid!\")).toBe(true);\n  expect(inBox(logs, \"Input 92 is valid!\")).toBe(true);\n  expect(inBox(errors, \"Input must be a number!\")).toBe(true);\n  expect(inBox(errors, \"Input cannot be less than zero!\")).toBe(true);\n  expect(inBox(errors, \"Input cannot be greater than 100!\")).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "// A function which applies validation rules to a number input\n// and throws errors if the number is invalid\nconst validateNumber = (input: any) => {\n  if (typeof input !== \"number\") {\n    throw new Error(\"Input must be a number!\");\n  } else if (input < 0) {\n    throw new Error(\"Input cannot be less than zero!\");\n  } else if (input > 100) {\n    throw new Error(\"Input cannot be greater than 100!\");\n  }\n\n  return true;\n};\n\n// A function which accepts a number and handles validating it\nconst processInputValue = (value: any) => {\n  try {\n    const result = validateNumber(value);\n    console.log(`Result from validateNumber: ${result}`);\n  } catch (err) {\n    // Only change code here!\n    throw err;\n  }\n};\n\n// Pass some correct and incorrect values to the processInputValue\n// function\nprocessInputValue(-5);\nprocessInputValue(500);\nprocessInputValue(\"some string\");\nprocessInputValue(5);\nprocessInputValue(92);\n",
          "solutionCode": "// A function which applies validation rules to a number input\n// and throws errors if the number is invalid\nconst validateNumber = (input: any) => {\n  if (typeof input !== \"number\") {\n    throw new Error(\"Input must be a number!\");\n  } else if (input < 0) {\n    throw new Error(\"Input cannot be less than zero!\");\n  } else if (input > 100) {\n    throw new Error(\"Input cannot be greater than 100!\");\n  }\n\n  return true;\n};\n\n// A function which accepts a number and handles validating it\nconst processInputValue = (value: any) => {\n  try {\n    const result = validateNumber(value);\n    console.log(`Input ${value} is valid!`);\n  } catch (err) {\n    // Only change code here!\n    console.error(err.message);\n  }\n};\n\n// Pass some correct and incorrect values to the processInputValue\n// function\nprocessInputValue(-5);\nprocessInputValue(500);\nprocessInputValue(\"some string\");\nprocessInputValue(5);\nprocessInputValue(92);\n",
          "content": ""
        },
        {
          "id": "C8I5vca4a",
          "type": "typescript",
          "title": "Try/Catch",
          "instructions": "The syntax you saw in the last challenge is known as `try/catch`. It's a very common structure found in many programming languages. It allows you to \"try\" some operation which may fail and \"catch\" the error if it does occur. This allows you to safely write code to deal with operations which may fail, such as network requests, user interactions, asynchronous logic, functions which call external APIs or libraries, and so on.\n\nIn the editor below is some simple code to simulate playing a lottery in a casino. The function `handleLotteryAttempt` throws an error about 95% of the time to indicate a failed lottery attempt. The `simulateCasino` calls this method 100 times to simulate a user playing in the casino.\n\nCurrently the program crashes because the error is not handled. Your job is to update the code to handle the thrown error condition\\! Can the player beat the casino\\!?",
          "testCode": "test(\"`handleLotteryAttempt` should throw an error around 95% of the time.\", () => {\n  expect(() => {\n    for (let i = 0; i < 100; i++) {\n      handleLotteryAttempt();\n    }\n  }).toThrow();\n});\n\ntest(\"`simulateCasino` should run the simulation and return the final user wallet balance.\", () => {\n  const result = simulateCasino();\n  expect(result).toBeDefined();\n  expect(typeof result).toBe(\"number\");\n});\n",
          "videoUrl": "",
          "starterCode": "// Fixed amounts for lottery wins and losses\nconst LOTTERY_SIZE = 1000;\nconst ROUND_SIZE = 100;\n\n// Simulate a lottery which only wins 5% of the time\nconst handleLotteryAttempt = () => {\n  const n = Math.round(Math.random() * 100);\n  if (n < 5) {\n    return true;\n  } else {\n    throw new Error(\"Did not win the lottery!\");\n  }\n};\n\n// Simulate playing in a casino\nconst simulateCasino = () => {\n  let userWallet = 500;\n  for (let i = 0; i < 100; i++) {\n    // Refactor the following code to use try/catch\n    // The logic should remain the same!\n    // Change code below this line\n    const result = handleLotteryAttempt();\n    if (result) {\n      userWallet += LOTTERY_SIZE;\n    } else {\n      userWallet -= ROUND_SIZE;\n    }\n    // Change code above this line\n  }\n\n  // Return the result\n  return userWallet;\n};\n\n// Run the simulation\nconst finalUserBalance = simulateCasino();\n\n// Print out the lottery results\nconsole.log(\"Lottery finished!\");\n\n// Show the user a message depending on the results\nif (finalUserBalance > 500) {\n  console.log(\"Congratulations! You should play more often!\");\n} else {\n  console.log(\n    `You lost a lot of money! Your ending balance is: ${finalUserBalance}`\n  );\n}\n",
          "solutionCode": "// Fixed amounts for lottery wins and losses\nconst LOTTERY_SIZE = 1000;\nconst ROUND_SIZE = 100;\n\n// Simulate a lottery which only wins 5% of the time\nconst handleLotteryAttempt = () => {\n  const n = Math.round(Math.random() * 100);\n  if (n < 5) {\n    return true;\n  } else {\n    throw new Error(\"Did not win the lottery!\");\n  }\n};\n\n// Simulate playing in a casino\nconst simulateCasino = () => {\n  let userWallet = 500;\n  for (let i = 0; i < 100; i++) {\n    // Refactor the following code to use try/catch\n    // The logic should remain the same!\n    // Change code below this line\n    try {\n      const result = handleLotteryAttempt();\n      userWallet += LOTTERY_SIZE;\n    } catch (err) {\n      userWallet -= ROUND_SIZE;\n    }\n    // Change code above this line\n  }\n\n  // Return the result\n  return userWallet;\n};\n\n// Run the simulation\nconst finalUserBalance = simulateCasino();\n\n// Print out the lottery results\nconsole.log(\"Lottery finished!\");\n\n// Show the user a message depending on the results\nif (finalUserBalance > 500) {\n  console.log(\"Congratulations! You should play more often!\");\n} else {\n  console.log(\n    `You lost a lot of money! Your ending balance is: ${finalUserBalance}`\n  );\n}\n",
          "content": ""
        },
        {
          "id": "wesvb7Sd1",
          "type": "media",
          "title": "Errors Handling and Clean Code",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "### Embrace Errors\n\nErrors are an unavoidable part of programming software.\n\nLearning how to handle failure conditions gracefully is one of the indispensable skills of a software developer.\n\nThis section should give you a basic idea about what errors are, what they mean for a computer program, and how to handle them. The `try/catch` construct is the basic paradigm for handling unsafe operations and is common to many programming languages.\n---\n\n### Errors and Stack Traces\n\nOne more thing to mention about errors is that they often provide a specific _message_ and _stack\\-trace_. The message is meant to tell you exactly what failed, e.g. `Uncaught TypeError: Cannot read property 'address' of null`.\n\nThe stack\\-trace shows you some information about \"where the program came from\" before it failed. It's like a trail of breadcrumbs, which show you how the program ended up at the place where it crashed. For instance, here is a full error message and stack trace for a real error:\n\n```typescript\nUncaught TypeError: Cannot read property 'address' of null\n at ApplicationContainer (ApplicationContainer.tsx:123)\n    at renderWithHooks (react-dom.development.js:16260)\n    at mountIndeterminateComponent (react-dom.development.js:18794)\n    at beginWork$1 (react-dom.development.js:20162)\n    at HTMLUnknownElement.callCallback (react-dom.development.js:336)\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:385)\n    at invokeGuardedCallback (react-dom.development.js:440)\n    at beginWork$$1 (react-dom.development.js:25780)\n    at performUnitOfWork (react-dom.development.js:24695)\n    at workLoopSync (react-dom.development.js:24671)\n    at performSyncWorkOnRoot (react-dom.development.js:24270)\n    at scheduleUpdateOnFiber (react-dom.development.js:23698)\n    at updateContainer (react-dom.development.js:27103)\n    at react-dom.development.js:27528\n    at unbatchedUpdates (react-dom.development.js:24433)\n    at legacyRenderSubtreeIntoContainer (react-dom.development.js:27527)\n    at Object.render (react-dom.development.js:27608)\n    at Module../src/index.tsx (index.tsx:27)\n    at __webpack_require__ (bootstrap:790)\n    at fn (bootstrap:150)\n    at Object.1 (utils.ts:523)\n    at __webpack_require__ (bootstrap:790)\n    at checkDeferredModules (bootstrap:45)\n    at Array.webpackJsonpCallback [as push] (bootstrap:32)\n    at main.chunk.js:1\n\n```\n\nThe numbers at the end of each line are line numbers in the original source code. Specifically, the list of lines are a list of function calls. The function calls of a program are piled up in a stack as a program executes, and resources allocated for handling function execution are only removed once the function _returns\\._ A stack trace is just a trace of all the function calls which led to the present place where the program failed.\n\nThe purpose of a stack\\-trace is to help the programmer track down exactly where the program got into a failure state, so it is easier to fix.\n\nStack\\-traces are scary, but they are meant to help you\\!\n---\n\n### Conclusion\n\nIdeally, you want your programs to be error\\-free. However, you will find that is almost impossible. You will always be surprised at the strange ways computer programs can fail. What you should strive for is to write code in which it is easy and fast to understand how and why errors occurred, when they do, and easy to refactor your code to fix errors when you need to. Instead of trying to write perfect code you should try to write and think about code which can be very easy to adapt to handle errors when errors occur.\n\nNow that you know about how to log information from your program with the `console`, handle, throw, and catch errors, and read stack\\-traces you are well on your way to dealing with errors which will occur as you write your first programs\\!"
        },
        {
          "id": "0gih2c1M",
          "type": "section",
          "title": "Types and Type Primitives",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Central to every TypeScript program is the data that it concerns, operates on, and manipulates. But what exactly is that data? How can it be described, and what are its properties?\n\nWell, TypeScript, like every programming language, has different _types_ of data. The number of types that can be created by a programming language’s users is infinite, however all languages, including TypeScript, have a set of built\\-in types, the lowest level of which are called **primitives**. These types can be operated on and manipulated by themselves, or be composed with other types to form more complex types, but this is a topic we’ll cover in more detail later. For now, let’s focus on TypeScript's most common **primitive data types**.\n\nFirst, though, let’s clear something up. \n\n## What exactly is a type?\n\nAt its most basic, a type describes a particular piece of data. A piece of data’s type lets us \\(and more importantly, the TypeScript compiler\\!\\) know how this particular piece of data can be used and what kind of operations can be performed on it. For example, something with the type `number`, should be able to be added, subtracted, divided, and multiplied with other pieces of data that also have the type `number`. Makes sense, right\\!?\n\nIn fact, you just learned your first type: `number`\\! As you might have guessed, this is one of TypeScript's primitive data types; one of the basic building blocks of the data found within a TypeScript program.\n\n> **Tip**\n> A compiler is responsible for translating code written in one programming language into another language. In many cases, compilers are responsible for translating human\\-readable source code into something called machine\\-code, which is highly optimized and only intended to be interpreted by computers. In the case of TypeScript, the compiler is responsible for translating TypeScript into JavaScript that can be executed anywhere JavaScript can be.\n\n## TypeScript Primitive Types\n\nTypeScript supports several primitive data types, including:\n\n* `number`\n* `string`\n* `boolean`\n* `null`\n* `undefined`\n\n\nWhile this list is not exhaustive, for the purpose of the next several lessons, these are the types you'll need to know. Let's take a closer look at each one in the next few challenges."
        },
        {
          "id": "w3bc0PeO",
          "type": "typescript",
          "title": "Numbers",
          "instructions": "Modify the code below so that `whole` is equal to `1` and `half` is equal to `.5`.\n",
          "testCode": "test('`whole` should be equal to `1`', () => expect(whole).toBe(1));\ntest('`half` should be equal to `.5`', () => expect(half).toBe(.5));",
          "videoUrl": "",
          "starterCode": "const whole = 0;\nconst half = 0;",
          "solutionCode": "const whole = 1;\nconst half = .5;",
          "content": "In TypeScript, numbers are expressed literally, and are given the type `number` \\(not to be confused with `Number`, with a capital \"N\"\\). As you might expect, numbers can be operated on mathematically, and are used for representing numeric values in our programs.\n\nIn TypeScript, numbers can be whole, or fractional \\(i.e. have one or more decimal places\\).\n\n## number not Number\n\nThis is an important distinction. In TypeScript, _`number`_ refers to the data type, while `Number` refers to the  __global__, and more concrete, `Number` object, a concept that goes beyond the scope of this lesson. For now, it's just important that you understand the distinction, and that TypeScript is a case\\-sensitive programming language. While this may seem like a small difference, remember: in the case of `number` vs\\. `Number`, case matters\\!\n\n## Just one number\n\nIn the challenge above, we discussed that data with the type `number` in TypeScript can represent both whole and fractional values. While it is not important in the context of this course, you might find it interesting to know that commonly, in other program languages, fractional values, or _floating point_ values, are represented by another data type. TypeScript is unique in that all numbers are considered floating point values."
        },
        {
          "id": "UnMCiU0Z",
          "type": "typescript",
          "title": "Strings",
          "instructions": "Modify `greeting` below so that it says \"Hello, my name is \" followed by your name\n",
          "testCode": "test('`greeting` should equal the string `\"Hello, my name is {your name here}\"`', () =>\n  assert(/hello, my name is \\w+/i.test(greeting)));\n",
          "videoUrl": "",
          "starterCode": "const greeting = \"\";",
          "solutionCode": "const greeting = \"Hello, my name is Pete\";",
          "content": "In TypeScript, strings are used to represent text, or data that can be represented by text, and are given the type `string` \\(not to be confused with `String` – noticing a pattern here?\\). Strings are expressed as a string of characters surrounded by single or double quotes, `\"like this\"`.\n\n## string not String\n\nOk, last warning\\! Like `number` and `Number`, `string` and `String` is an important distinction. What `String` refers to is outside the scope of this discussion, and we don't want you to get bogged down in that; the important takeaway: TypeScript is a **case\\-sensitive** language, and it is _not_ safe to assume that `something` and `SomeThing` are the same, whatever that something is.\n\n> **Tip**\n> TypeScript is a case sensitive language, and primitive types are always referred to in all lowercase, e.g. `string`, `number`, `boolean`, etc.\n"
        },
        {
          "id": "qNF6Faom",
          "type": "typescript",
          "title": "Booleans",
          "instructions": "* Look at the following example, and change `false` to `true`.\n* Notice what happens\\!\n\n\nDon't worry, there's a lot going on here that we haven't covered yet. For now, just focus on the challenge at hand.",
          "testCode": "test('`str` should be equal to `\"Hello, TypeScript!\"`', () =>\n  expect(str).toBe(\"Hello, TypeScript!\"));\ntest(\"`isTrue` should be of type `boolean`\", () =>\n  expect(typeof isTrue).toBe(\"boolean\"));\ntest(\"`isTrue` should be `true`\", () =>\n  expect(isTrue).toBe(true));\n",
          "videoUrl": "",
          "starterCode": "let str = \"\";\nconst isTrue = false;\n\nif (isTrue) {\n    str = \"Hello, TypeScript!\";\n}\n\nconsole.log(str);",
          "solutionCode": "let str = \"\";\nconst isTrue = true;\n\nif (isTrue) {\n    str = \"Hello, TypeScript!\";\n}\n\nconsole.log(str);",
          "content": "Booleans, are perhaps the simplest of the primitive data types, and in TypeScript,  can be expressed as either `true` or `false`. They are given the type `boolean`. Booleans are the primary way that we handle \"logical\" decision making, and, in fact, many expressions can be _evaluated_ as booleans, but we'll get into this more later.\n\n```\nconst isTrue = true;\nconst isFalse = false;\n\nif (isTrue) {\n  // do something cool!\n}\n\n```\n"
        },
        {
          "id": "p2Iu3bYN",
          "type": "media",
          "title": "Null and Undefined",
          "instructions": "",
          "testCode": "",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "`null` and `undefined` are similar in that they both represent the absence of value. They are both expressed literally, and in TypeScript are given the types `null` and `undefined` \\(i.e. the values and the types are the same, but are used in different contexts\\).\n\n`null` differs from `undefined` in that it is typically _intentionally_ used to represent the absence of value, while `undefined` is assigned to variables that have not yet been assigned a value.\n\n```typescript\nlet n; // n's value is currently undefined\nconst x = null; // x has been assigned a value of null\n\n```\n\nThis is not to say that `undefined` cannot be explicitly assigned to a variable, it is just less common, and almost certainly a mistake.\n\n```typescript\nconst dontDoThis = undefined;\n\n```\n\nMuch more commonly, we're checking if something _is_ `undefined`, rather than _making something_ `undefined`."
        },
        {
          "id": "7CDlUIz9",
          "type": "media",
          "title": "Type Inference",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "By now, you know that all data in a TypeScript program has a type. But how does the compiler know what types of data it's dealing with? Well, TypeScript is a pretty smart language, and in many cases, it can effectively use _type inference_ to determine type information about a piece of data. For example, when a variable is initialized with a string of text surrounded by quotes, TypeScript can _infer_ that that variable is of the type `string`.\n\n```typescript\nconst foo = \"this is a string\";\n// TypeScript infers that foo is a string\n\n```\n\nTypeScript can easily accomplish this with primitive data types:\n\n```typescript\nconst bar = true; // inferred to be boolean\nconst baz = 100; // inferred to be number\nconst qux = null; // inferred to be null\nconst qaz = undefined; // inferred to be undefined\n\n```\n\nLet's see this in action in the next challenge\\!"
        },
        {
          "id": "Q2hgPS5P",
          "type": "typescript",
          "title": "Inference in Action",
          "instructions": "Consider the code snippet from the last challenge. Don't just take our word for it, hover over the variable names and notice what you see.\n\nWithout being explicit, TypeScript's type engine can successfully infer the types of data that we've assigned to our rather arbitrary variables.",
          "testCode": "\ntest('`bar` should be of type `boolean`', () => expect(typeof bar).toBe(\"boolean\"))\ntest('`baz` should be of type `number`', () => expect(typeof baz).toBe(\"number\"))\ntest('`qux` should be `null`', () => expect(qux).toBe(null))\ntest('`qaz` should be `undefined`', () => expect(qaz).toBe(undefined))",
          "videoUrl": "",
          "starterCode": "const bar = true; // inferred to be boolean\nconst baz = 100; // inferred to be number\nconst qux = null; // inferred to be null\nconst qaz = undefined; // inferred to be undefined",
          "solutionCode": "const bar = true; // inferred to be boolean\nconst baz = 100; // inferred to be number\nconst qux = null; // inferred to be null\nconst qaz = undefined; // inferred to be undefined",
          "content": "## TypeScript Configuration\nA topic that we won't be covering here, but is worth mentioning, is TypeScript configuration. Some of the behavior we see in these challenges depends on how the TypeScript compiler is configured in the Pairwise workspace.\n\nWe only mention this so that you're aware that it's possible you'll see slightly different behavior in your own workspace should the configuration options you choose differ. This is something you won't have to deal with while working in the Pairwise workspace, but you should be aware of it all the same.\n\nIf you're setting up you're own project in the future, see TypeScript's \"Project Configuration\" documentation for additional information on this topic."
        },
        {
          "id": "VppIs2a7",
          "type": "media",
          "title": "Being Explicit with Type Annotations",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "We've seen that TypeScript can infer type information from our code contextually. However, as data types become more complex, or potentially ambiguous, it is sometimes useful to be more _explicit_, and tell the compiler exactly what type of data it's dealing with. In order to do this, TypeScript provides us with **type annotations**. Type annotations are a way to tell the compiler what type of data to expect, and how to treat that data. \n\nThe syntax `:` \\+ `type name` is used to annotate variables and other parts of our programs. They look like this:\n\n```typescript\nconst name: string = \"Finn\"; \n// use a colon followed by a type to explicitly type something\n\n```\n\nThis is not always necessary, since TypeScript does have very powerful type inference, which goes far beyond inferring primitive data types. However, it sometimes _is necessary_, and is often helpful to other developers reading your code to allow them to quickly and easily understand how something is intended to work and/or be used.\n\n> **Tip**\n> Hover over variable names and other parts of your code in the Pairwise workspace to see their type annotations.\n\nUsing explicit types can also act as a safeguard for catching type\\-errors before your code is even compiled \\(if you're using something called a linter, which the Pairwise workspace uses, as you'll soon see\\). For example:\n\n```typescript\nconst theMeaningOfLife: string = 42; \n// Error! TypeScript will complain about this\n\n```\n\nSince we've told TypeScript that `theMeaningOfLife` should be a `string`, it will warn us that we've tried to assign it a number to \\(denoted by a squiggly red line, just like a spellchecker\\). This is called **type error**, and is something we want to avoid.\n\nLet's try this out."
        },
        {
          "id": "AB2T4DCt",
          "type": "typescript",
          "title": "Fix Me!",
          "instructions": "Hover over `theMeaningOfLife` to see a helpful linter error, and then fix the problem.",
          "testCode": "test('`theMeaningOfLife` should be of type `string`', () => expect(typeof theMeaningOfLife).toBe(\"string\"))",
          "videoUrl": "",
          "starterCode": "const theMeaningOfLife: string = 42;",
          "solutionCode": "const theMeaningOfLife: string = \"42\";",
          "content": "## What is a linter?\nA linter is a type of coding aid, which analyzes the code that you write, and in an integrated development environment (or in this case, an IDE-like environment), gives you realtime feedback about potential problems in your code, such as type incompatibilities (like in this case), or stylistic problems. Linters can be a very effective tool and help you write better, less error-prone code."
        },
        {
          "id": "VpxIs2a9",
          "type": "media",
          "title": "Type Inference vs. Explicit Types",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "TypeScript's type system is a large part of what makes it such a powerful language. While type inference can be very powerful, reach for explicit typing in more complex cases, or if the inferred type  is inconsistent with how you intend something to be used. In any case, being rigorous around types in your programs and using TypeScript's type engine to its fullest potential can help you avoid painful run\\-time errors in your code.\n\nIf these topics seem confusing right now, don't worry\\! Type inference and type annotations are both in\\-depth topics that we'll learn more about in an organic way throughout this course, but it's essential that you're introduced to the concepts and syntax early on. \n\nFor now, the main takeaway is that you learn the difference between type inference and explicit typing with type annotations, and learn to recognize the type annotation syntax.\n\nTo review:\n\n```typescript\nconst foo = \"foo is inferred to be a string\";\nconst bar: string = \"bar is explicitly typed as a string\";\n\n```\n\nWhile these examples are simple, and purposefully contrived for this introduction to types, as we begin learning about more complex data types and structures, we'll see less trivial examples and put these concepts into action. "
        },
        {
          "id": "xLJj8XiU",
          "type": "media",
          "title": "The Any Type",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In TypeScript, there's a basic type we have not explored yet called the `any` type\\. This is the only type we've learned about so far which is not a valid type in TypeScript's subset language, JavaScript. This is because `any` is _just a type_,\\_ \\_and JavaScript is not a statically typed language like its superset, TypeScript.\n\nIn other words, `any` cannot be expressed literally. It is not a primitive type, and has no actual value that corresponds to it, the way that integer literals can be assigned to the `number` type, and string literals can be assigned to `string`. Rather, _all values_ can be assigned to `any`. \n\n```typescript\nconst quux: any = \"foo bar baz\";\nconst quuz: any = 70000;\nconst corg: any = true;\nconst flob: any = undefined;\nconst glob: any = null;\n\n```\n\n`any` is sort of like a type check escape hatch. It basically lets TypeScript know _not_ to **type check** something at compile\\-time \\(before the code is executed, i.e. statically\\).\n\n> **Tip**\n> Type checking is the process of validating and enforcing the type constraints in our code. Static type checking \\(such as in TypeScript\\), happens at compile\\-time, and helps to greatly reduce the occurrence of run\\-time errors in our code.\n\nUsing `any` can be extremely useful when we simply don't know the type of data something will be until run\\-time \\(when the code is actually executed\\). This might be because the data is coming from some external source that we don't have knowledge of beforehand, such as a program's end\\-user, or an external library. \n\nThat said, it is generally considered best practice to avoid using `any` wherever possible. This is because `any` makes our code less _type safe_: anything labeled as `any` will be type checked only at run\\-time \\(i.e. dynamically\\) and if there's a type mismatch, an error will be thrown, and your users' experience may impacted. \n\n> If `any` is overused, many of the benefits of using a statically typed language will be lost, and the incidence of run\\-time errors \\(something we always want to avoid\\!\\) is likely to increase. \n\nThe takeaway: use `any` sparingly, only when it is absolutely necessary."
        },
        {
          "id": "KbkT6v8g",
          "type": "typescript",
          "title": "Any in Action",
          "instructions": "Change the values below to match their variable names. This is a simple challenge just to demonstrate that any type can be assigned to something annotated as `any`.",
          "testCode": "test('`iAmAString` should be of type `string`', () => expect(typeof iAmAString).toBe(\"string\"))\ntest('`iAmANumber` should be of type `number`', () => expect(typeof iAmANumber).toBe(\"number\"))\ntest('`iAmNull` should be `null`', () => expect(iAmNull).toBe(null))\ntest('`iAmUndefined` should be `undefined`', () => expect(iAmUndefined).toBe(undefined))\n",
          "videoUrl": "",
          "starterCode": "const iAmAString: any = undefined;\nconst iAmANumber: any = null;\nconst iAmNull: any = 71919;\nconst iAmUndefined: any = \"not undefined yet!\";",
          "solutionCode": "const iAmAString: any = \"undefined\";\nconst iAmANumber: any = 123;\nconst iAmNull: any = null;\nconst iAmUndefined: any = undefined;",
          "content": ""
        },
        {
          "id": "prlFliKCW",
          "type": "section",
          "title": "Collections: Arrays and Objects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "A bunch of values together in a bucket.\n\nCollections is a general term. When we talk about collections we're going to be talking about two data structures in TypeScript:\n\n* Array\n   * A list of things. Like a shopping list. \n   * You access things within the array using an index. Example: `myArray[2]`\n* Objects\n   * A group of things, usually related. Like a row in a spreadsheet.\n   * You access things using a property name, which is a string. Example: `myObject[\"name\"]`\n   * You can **also** access things using a dot, followed by the property name. Example: `myObject.name`\n      * This is more common, but only works if your property name doesn't have special symbols like hyphens.\n\n# The importance of collections\n\nCollections are yet another way of representing data. You've seen `string`, `number`, `boolean` but alone those types are insufficient to represent the data of the world. In order to represent real\\-world data we're going to need collections.\n\n## Why arrays are important\n\nList are _everywhere_. You may not have thought about it before, but there are list all over the place. It's wild\\!\n\n* This page is made up of a list of html tags like `p`, `h1`, etc. The text within those tags is also a list, a list of characters like `a`, `b`, `c`, `.`, etc.\n* Schools have lists of students and grades.\n* Companies have lists of employees, expenses, and customers.\n* If you wrote out everything you did today it would make a list.\n* A recipe contains a lists of ingredients and steps to complete a dish.\n* The contacts in your phone is a list.\n\n\nThe list goes on \\(pun very much intended\\). The point is if we want to represent any of these things digitally we need the concept of a list in our programs. In TypeScript this takes the form of the `Array`.\n\n## Why objects are important\n\nThe idea of an object is a \"thing\" that has properties. For example, you—being a person—probably have a name, a job, and a _list_ of favorite HTML colors:\n\n```typescript\nconst me = {\n  name: \"Ian\",\n  job: \"Building Pairwise\",\n  favoriteHTMLColors: [\"Salmon\", \"Tomato\", \"Lime\"],\n};\n\n```\n\nYou see what I did there? An object con contain a list and likewise a list can also contain an object. TypeScript is very flexible like this.\n\n```typescript\nconst people = [\n  {\n    name: \"Ian\",\n    job: \"Building Pairwise\",\n    favoriteHTMLColors: [\"Salmon\", \"Tomato\", \"Lime\"]\n  },\n  {\n    name: \"Sean\",\n    job: \"Building Pairwise\",\n    favoriteHTMLColors: [\"SeaShell\", \"Coral\", \"MediumSeaGreen\"]\n  }\n];\n\n```\n\\(Sean doesn't yet know he favors the \"beach theme\" of HTML colors 🤫\\)\n\nAnother way to visualize the data above in the `people` array is as a table. Consider this more familiar form: \n| **Name** | **Job** | **Favorite HTML Colors** |\n|:--- |:--- |:--- |\n| Ian | Building Pairwise | Salmon, Tomato, Lime |\n| Sean | Building Pairwise | SeaShell, Coral, MediumSeaGreen |\n\nLook at that\\! By adding arrays and objects to our arsenal we can suddenly represent tabular data, which means we can represent anything you can put into a spreadsheet \\(quite literally, just look at Google Sheets\\).\n\nWe can even build on top of objects and arrays to create new data structures. \n# Syntax\n\nOK, now that we  know _why_ let's talk about _how_. The syntax for arrays and objects is fairly simple, but it may not be intuitive.\n\n## Creating Arrays and Objects\n\n```typescript\nconst htmlColors = [\"Salmon\", \"Tomato\", \"Lime\"];\nconst cat = {\n  name: \"Maomi\",\n  job: \"Napping\",\n  favoriteHTMLColors: [\"LightSalmon\", \"Salmon\", \"DarkSalmon\"] // Yes, these are real colors\n};\n\n```\n\nWe've created a new array with three wonderful HTML color names inside it and we've created a new `cat` object with some cat\\-appropriate properties.\n\n> **Syntax Specifics**\n> To create an array place any valid values separated by `,`within `[` and `]`\n> To create an object\n> \n> \n>    * Open `{` and `}` brackets\n>    * With the brackets use a string, followed by `:` , followed by any valid value to create a key\\-value pair\n\n## Using Arrays and Objects\n\n```typescript\nconsole.log(htmlColors[1]); // => \"Tomato\"\nconsole.log(cat.job); // \"Napping\"\nconsole.log(cat.favoriteHTMLColors[0]); // \"LightSalmon\"\n\n```\n\nHere we log three things out to the console.\n\n1. Log the string at index `1` of the `htmlColors` array\\.\n1. Log the value associated with the key `job` on the `cat` object\\.\n1. Log the string at index `0` of the array at key `favoriteHTMLColors` on the `cat` object\\.\n\n\nThe third line is an example of using nested selectors. \n\n> **Syntax Specifics**\n> To access an element within an array use a number placed between `[` and `]` after the array\n> To access a value associated with a key on an object place the key after a the object and a `.`\n> Alternatively, objects can use the same syntax as arrays except rather than a number use a string: `console.log(cat[\"name\"]);`\n"
        },
        {
          "id": "UMroK7wKl",
          "type": "typescript",
          "title": "Create arrays",
          "instructions": "Create three arrays `stringArray`, `numArray`, and `boolArray`, each of which contains only strings, numbers, and booleans respectively.",
          "testCode": "test(\"`stringArray`, `numArray`, `boolArray` should not be null\", () => {\n  [stringArray, numArray, boolArray].forEach(x => {\n    expect(x).not.toBe(null);\n  });\n});\n\ntest(\"`stringArray`, `numArray`, `boolArray`  should be an arrays\", () => {\n  [stringArray, numArray, boolArray].forEach(x => {\n    expect(Array.isArray(x)).toBe(true);\n  });\n});\n\ntest(\"`stringArray` should be an array of strings\", () => {\n  expect(stringArray.length).toBeGreaterThan(0);\n  expect(stringArray.every(x => typeof x === \"string\")).toBe(true);\n});\ntest(\"`numArray` should be an array of numbers\", () => {\n  expect(numArray.length).toBeGreaterThan(0);\n  expect(numArray.every(x => typeof x === \"number\")).toBe(true);\n});\ntest(\"`boolArray` should be an array of booleans\", () => {\n  expect(boolArray.length).toBeGreaterThan(0);\n  expect(boolArray.every(x => typeof x === \"boolean\")).toBe(true);\n});",
          "videoUrl": "",
          "starterCode": "const stringArray: string[] = null;\nconst numArray: number[] = null;\nconst boolArray: boolean[] = null;\n",
          "solutionCode": "const stringArray: string[] = [\"hey\"];\nconst numArray: number[] = [1,2,3];\nconst boolArray: boolean[] = [true];\n",
          "content": ""
        },
        {
          "id": "KOlr7dhnP",
          "type": "typescript",
          "title": "Create Objects",
          "instructions": "Create a single object named `cat` based on the following table:\n| **name** | **job** | **favoriteSubreddit** |\n|:--- |:--- |:--- |\n| Maomi | Napping | https://www.reddit.com/r/cats |\n",
          "testCode": "// Write your tests here:\ntest(\"`cat` should not be null\", () => {\n  expect(cat).not.toBe(null);\n});\n\nconst x = {\n  name: \"Maomi\",\n  job: \"Napping\",\n  favoriteSubreddit: \"https://www.reddit.com/r/cats/\",\n};\n\nObject.keys(x).forEach((k) => {\n  test(`\\`cat\\` should have a \\`${k}\\` of \\`${x[k]}\\``, () => {\n    expect(cat[k]).toBe(x[k]);\n  });\n});\n",
          "videoUrl": "",
          "starterCode": "const cat = null;",
          "solutionCode": "const cat = {\n  name: \"Maomi\",\n  job: \"Napping\",\n  favoriteSubreddit: \"https://www.reddit.com/r/cats/\",\n};\n",
          "content": ""
        },
        {
          "id": "NEKvEvei4",
          "type": "typescript",
          "title": "Objects and arrays together",
          "instructions": "Create an array of objects to represent the following table. Name the array `catParty`.\n**NOTE**: The cat named Jello does not have a favorite subreddit. Use `null` to represent this.\n| **name** | **job** | **favoriteSubreddit** |\n|:--- |:--- |:--- |\n| Maomi | Napping | https://www.reddit.com/r/cats |\n| Jarbles | Sleeping | https://www.reddit.com/r/cute |\n| Jello | Playing |  |\n",
          "testCode": "// Write your tests here:\ntest(\"`catParty` should be an array\", () => {\n  expect(Array.isArray(catParty)).toBe(true);\n});\n\ntest(\"Every object in `catParty` should have `name`, `job`, `favoriteSubreddit` keys.\", () => {\n  catParty.forEach((x) => {\n    expect(x).toHaveProperty(\"name\");\n    expect(x).toHaveProperty(\"job\");\n    expect(x).toHaveProperty(\"favoriteSubreddit\");\n  });\n});\n\ntest(\"There should be three cats in the party\", () => {\n  expect(catParty.length).toBe(3);\n})\n\n// This test would do it, but the others give more context to the user\ntest(\"Jello should have a favoriteSubreddit of `null`\", () => {\n  expect(catParty).toHaveProperty([2, 'favoriteSubreddit'], null);\n})\n\n// This test would do it, but the others give more context to the user\ntest(\"The three objects should match the three rows in the table\", () => {\n  const _expected = [\n    {\n      name: \"Maomi\",\n      job: \"Napping\",\n      favoriteSubreddit: \"https://www.reddit.com/r/cats\",\n    },\n    {\n      name: \"Jarbles\",\n      job: \"Sleeping\",\n      favoriteSubreddit: \"https://www.reddit.com/r/cute\",\n    },\n    {\n      name: \"Jello\",\n      job: \"Playing\",\n      favoriteSubreddit: null,\n    },\n  ]\n\n  expect(catParty).toEqual(_expected);\n})",
          "videoUrl": "",
          "starterCode": "const catParty = null;",
          "solutionCode": "const catParty = [\n  {\n    name: \"Maomi\",\n    job: \"Napping\",\n    favoriteSubreddit: \"https://www.reddit.com/r/cats\",\n  },\n  {\n    name: \"Jarbles\",\n    job: \"Sleeping\",\n    favoriteSubreddit: \"https://www.reddit.com/r/cute\",\n  },\n  {\n    name: \"Jello\",\n    job: \"Playing\",\n    favoriteSubreddit: null,\n  },\n];\n",
          "content": ""
        },
        {
          "id": "UNWwhyHW",
          "type": "section",
          "title": "Variables & Assignment",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In our previous lessons, we've seen a lot of code that looks something like this:\n\n```typescript\nconst foo = 100;\n\n```\n\nLet's finally take a closer look at what's going on here.  \n\n## What is a Variable?\n\nIn this example, `foo`  is what's known as a variable. Variables store _references_ to data, or _values_, which we can use in our programs. Here, `foo`  is of the type `number` and has a value of `100`.  `100` is stored in memory, but the variable `foo` holds a reference to that memory, so it can be called up again and again, and used throughout the program. This is an important concept:\n\n> Variables store references to values stored in memory, and do not store the values themselves.\n\nIn TypeScript, to give meaning to a variable, it must be _declared_, _initialized_, and _assigned_ a value. Let's break this down.\n\n## Declaration & Initialization\n\nThroughout the next several lessons, we'll primarily be using they keywords `let`  and `const` to declare our variables. Each of these keywords has a slightly different behavior, which we'll explore in more detail later.\n\nThe syntax for variable declaration requires one of these keywords and an identifier, or name, to act as the variable's unique identifier.  When we declare a variable, it is automatically _initialized_, and memory is allocated for it. Once initialized, a variable will be `undefined` until we assign a value to it. \n\n```typescript\nlet baz; // baz is undefined\n\n```\n\n## Assignment\n\nThat's where the `=` operator comes in. Assignment is pretty intuitive: to the left of the `=` is the variable that we're assigning a value to \\(the left operand\\), and to the right of it is the value that we're assigning \\(the right operand\\).  In other words, the assignment operator gives the value of its right operand to its left operand. That's it\\!\n\nA variable can be declared and initialized first, and assigned a value later in the program. \n\n```typescript\nlet baz; // baz has been declared and intialized, and is undefined\n// do something...\nbaz = \"a string\"; // baz has been assigned a value\n\n```\n\nAlternatively, a variable can be declared, initialized, and given a value in a single statement.\n\n```typescript\nconst bar = \"cool!\"; // bar has been declared, initialized, and assigned a value\n\n```\n\nA quick note here: the process of assigning a variable a value for the first time \\(as in the above example\\) is also sometimes referred to as \"initialization\", since we're \"initializing\" the variable with a value. However, from a theoretical standpoint, true \"initialization\" happens when the variable is declared and the JavaScript engine \\(which ultimately runs all of our TypeScript code, since TypeScript is compiled to JavaScript before execution\\) allocates memory for it.\n\nWe're going to dive deeper into variables and assignment in the next few lessons.\n\nLet's go\\!"
        },
        {
          "id": "JALDb575",
          "type": "typescript",
          "title": "Declare a Variable",
          "instructions": "Ok, this challenge is pretty simple, but it's very important. Your first variable\\! \n\n* In the editor below, _declare_ a variable named `first`. Do not assign a value to it. Look back at the previous lesson if you get stuck.\n* Once the fist test has passed, repeat this a couple of times on the second and third lines with variables named `second` and `third` to help you get used to the syntax.\n* Remember to terminate each line with a semicolon, `;` \n\n\n> **Hint**\n> For this challenge, you need to use the keyword `let` \n",
          "testCode": "test('A variable named `first` should be declared (and assigned no value).', () => expect(first).toBe(undefined));\ntest('A variable named `second` should be declared (and assigned no value).', () => expect(second).toBe(undefined));\ntest('A variable named `third` should be declared (and assigned no value).', () => expect(third).toBe(undefined))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "let first;\nlet second;\nlet third;",
          "content": ""
        },
        {
          "id": "LyQWstvV",
          "type": "typescript",
          "title": "Declaring Typed Variables",
          "instructions": "In the previous lesson, we declared a few variables, as seen in the editor below.\n\nThis is perfectly valid, but it would be better if we gave these variables some types. As\\-is, each of these variables will be inferred as `any`. Especially when declaring variables without initial assignments, it is good practice to give your variables type annotations, even when you really intend their type to be `any` \\(which is generally discouraged, since we lose many of the benefits of a statically typed language when we use the `any` type\\).\n\n* Using type annotations, give `first` the type `string`, `second` the type `boolean`, and `third` the type `number`.\n\n\n> **Hint**\n> Type annotations follow the syntax `: <type>`, e.g. `let str: string;` \n",
          "testCode": "test(\"`first` should be given the type `string`\", () =>\n  expect(/let\\sfirst\\s?:\\s?string/.test(__user_code_string__)).toBe(true));\n\ntest(\"`second` should be given the type `boolean`\", () =>\n  expect(/let\\ssecond\\s?:\\s?boolean/.test(__user_code_string__)).toBe(\n    true\n  ));\n\ntest(\"`third` should be given the type `number`\", () =>\n  expect(/let\\sthird\\s?:\\s?number/.test(__user_code_string__)).toBe(true));\n",
          "videoUrl": "",
          "starterCode": "let first;\nlet second;\nlet third;",
          "solutionCode": "let first: string;\nlet second: boolean;\nlet third: number;",
          "content": ""
        },
        {
          "id": "bhxwOAx9",
          "type": "typescript",
          "title": "Your First Assignment",
          "instructions": "Now that we've practiced variable declaration a bit, let's get into a something a bit more exciting: giving our variables some values.\n\n* In the editor below, the variable `myName` is declared, but is not assigned a value. \n* `myName` is annotated with the type `string`, so we can only assign it a string value.\n* Remember, in TypeScript, strings are represented as literal text, wrapped with single or double quotes.\n* Assign your name to the variable to complete the challenge.\n\n",
          "testCode": "test('`myName` should be of type `string`', () => expect(typeof myName).toBe(\"string\"))",
          "videoUrl": "",
          "starterCode": "let myName: string;",
          "solutionCode": "let myName: string = \"Asher\";",
          "content": ""
        },
        {
          "id": "VppIs2a9",
          "type": "typescript",
          "title": "Reassignment with \"let\"",
          "instructions": "In the editor below, assign the new values `\"learn to code!\"`, `false` , and `100` to the appropriate variables. See [below](/scrollTarget/supplementary-content-container) for an example if you get stuck.\n",
          "testCode": "test(\"`foo` should be assigned a new value according to the challenge instructions\", () =>\n  expect(foo).toBe(100));\n\ntest(\"`baz` should be assigned a new value according to the challenge instructions\", () =>\n  expect(baz).toBe(\"learn to code!\"));\n\ntest(\"`iCanBeReassigned` should be assigned a new value according to the challenge instructions\", () =>\n  expect(iCanBeReassigned).toBe(false));\n",
          "videoUrl": "",
          "starterCode": "let foo: any = \"give me a new value!\";\nlet baz: string = \"me too!\";\nlet iCanBeReassigned = true;\n\n// write your code below!\n",
          "solutionCode": "let foo: any = \"give me a new value!\";\nlet baz: string = \"me too!\";\nlet iCanBeReassigned = true;\n\n// write your code below!\nfoo = 100;\nbaz = \"learn to code!\";\niCanBeReassigned = false;",
          "content": "Variables declared using the `let` keyword can be reassigned. In other words, a variable declared with `let`  can be assigned a new value any time after its been declared, initialized, and assigned an initial value:\n\n```\nlet x = \"I'm not constant.\";\nx = \"see!\";\n\n```\n\nIn TypeScript, however, unless a variable declared with `let` is given the type `any`, subsequent assignments must respect the variable's initial type, whether it was explicitly annotated or not.\n\nFor example:\n\n```typescript\nlet str = \"my string\";\nstr = \"another string\"; // ok\n\nlet num = 42;\nnum = \"the meaning of life\"; // not ok!\n\nlet iCanBeAnything: any = true;\niCanBeAnything = \"now I'm a string\"; // ok, but discouraged!\n\n```\n\n`any` tends to make our programs less safe, so try to avoid code like in this last example."
        },
        {
          "id": "g2CWrS2M",
          "type": "typescript",
          "title": "\"let\" vs. \"const\"",
          "instructions": "* Uncomment the code in the editor below, hover over `pairwise`, and note the error.\n* Fix the problem by assigning `pairwise` the string `\"pairwise\"`.\n* On line 2, try to assign `pairwise` a new value and see what happens.\n\n",
          "testCode": "test('`pairwise` should be equal to the string `\"pairwise\"`', () =>\n  expect(pairwise).toBe(\"pairwise\"));\n",
          "videoUrl": "",
          "starterCode": "// const pairwise: string;",
          "solutionCode": "const pairwise: string = \"pairwise\";",
          "content": "In addition to the `let` keyword, we've also seen variables declared with `const` throughout this section. `const` is short for \"constant\", and unlike variables declared with `let`, variables declared with `const` cannot be reassigned. Otherwise, they behave very similarly.\n\n> **Tip**\n> In general, when writing TypeScript, `const` is preferred over `let` unless your variable is going to be declared without an initial value, or will be reassigned later in the program. \n\n## Constant does not mean immutable\n\nWhile it is true that variables declared with `const` cannot be reassigned, this _does not_ mean that values assigned to them cannot change, or _mutate_ over time.\n\nFor primitive data types like the ones we've learned about so far, this nuance does not apply. In other words, if you assign the string `\"immutable\"` to a variable declared with `const`, you can always count on that variable being equal to the string `\"immutable\"`. Likewise, if you assign it a number, a boolean, null, or undefined. These types are immutable by nature, and values of these types cannot change over time \\(if a string or number appears to change over time, it is really a new instance of a string or number\\).\n\nFor more complex data types, though, `const` can trip you up if you're not careful. Check out the following examples using arrays:\n\n```\nconst arr = [1, 2, 3];\narr = [1, 2, 3, 4]; // error! arr cannot be reassigned\n\n```\n\nLike you would expect, you cannot assign `arr` a new array \\(or any other value\\). However:\n\n```\nconst arr = [1, 2, 3];\narr.push(4);\n// here, .push(4) adds the number 4 to the end of the list\n// the list now equals [1, 2, 3, 4]\n\n```\n\nAlthough we didn't assign `arr` a new value, its current value is different than the value we originally assigned to it. More precisely, the array that `arr` references has been _mutated_.\n\nWe will explore the concept of immutability more in future lessons, but for now, you should be aware that `const` only ensures that a variable cannot be reassigned, _not_ that the value it references is immutable."
        },
        {
          "id": "fvvYrahy",
          "type": "section",
          "title": "Arithmetic Operators",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Arithmetic operators in TypeScript are one of the primary ways in which we deal with numerical data. In programming in general, being able to perform simple and complex calculations on numbers is essential in many programs.\n\nThe operators we'll cover in this section give us the basic building blocks to be able to work with numbers in our code. We'll look at how to add, subtract, divide, and multiply numbers, as well as a few other operations that are incredibly useful.\n\nGo ahead to the next challenge and lets get started\\! "
        },
        {
          "id": "-jkgXsag",
          "type": "typescript",
          "title": "The Addition Operator",
          "instructions": "* Give `num1` and `num2` values so that their sum equals `100`.\n* On an empty line, declare a variable named `sum` and use the `+` operator to assign it `num1` plus `num2` .\n\n",
          "testCode": "test(\"A variable named `sum` should be declared and be of the type `number`.\", () =>\n  expect(typeof sum).toBe(\"number\"));\n\ntest(\"`sum` should equal `100`.\", () => expect(sum).toBe(100));\n",
          "videoUrl": "",
          "starterCode": "let num1: number;\nlet num2: number;\n\n",
          "solutionCode": "let num1: number = 30;\nlet num2: number = 70;\n\nconst sum = num1 + num2;",
          "content": "In TypeScript, the `+`, or addition operator, behaves much like you think it will. It operates on two numbers, or operands \\(which can be number literals, or variables that represent numbers\\), and adds the two operands together:\n\n```typescript\nconst num = 1 + 1; // num = 2\n\n```\n"
        },
        {
          "id": "H0MjLq1p",
          "type": "typescript",
          "title": "The Subtraction Operator",
          "instructions": "* On an empty line, declare a variable named `difference` and assign it an expression which subtracts a number from `twentyThree` so that `difference` equals `10`.\n* Feel free to subtract a number literal, or declare a new variable to subtract from `twentyThree`.\n\n",
          "testCode": "test(\"A variable named `difference` should be declared and be of the type `number`.\", () =>\n    expect(typeof difference).toBe(\"number\"));\n\ntest(\"`difference` should equal `10`.\", () => expect(difference).toBe(10));",
          "videoUrl": "",
          "starterCode": "const twentyThree = 23;",
          "solutionCode": "const twentyThree = 23;\n\nconst difference = twentyThree - 13;\n",
          "content": "Opposite to the addition operator, is the `-`, or subtraction operator. The subtraction operator takes two numbers as operands and subtracts them:\n\n```typescript\nconst num = 14 - 5; // 9\n\n```\n\nLike the addition operator \\(and all the arithmetic operators\\), the subtraction operator's operands can be number literals \\(like in the above example\\), or variables that represent numbers:\n\n```\nconst x = 92.42;\nconst y = 14.83;\nconst diff = y - x; // -77.59\n\n```\n"
        },
        {
          "id": "_gO2lskh",
          "type": "typescript",
          "title": "The Multipication Operator",
          "instructions": "* Declare two variables named `factor1` and `factor2` and assign them numbers whose product equals `63`.\n* Declare a variable named `product` and, using the `*` operator, assign it `factor1` multiplied by `factor2`.\n\n",
          "testCode": "test(\"A variable named `product` should be declared and be of the type `number`.\", () =>\n    expect(typeof product).toBe(\"number\"));\n\ntest(\"`product` should equal `63`.\", () => expect(product).toBe(63));",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "const factor1 = 9;\nconst factor2 = 7;\n\nconst product = factor1 * factor2;",
          "content": "For multiplication, we have the `*` operator\\. This binary operator \\(takes two operands\\) is straightforward, just like the addition and subtraction operator: it multiplies its two numeric operands.\n\n```\nconst x = 534;\nconst product = x * 23.24; // 12410.16\n\n```\n"
        },
        {
          "id": "fuZBwqNC",
          "type": "typescript",
          "title": "The Division Operator",
          "instructions": "In the editor below, declare a variable named `quotient` and use the `/` operator to assign it an expression which equals `243`.\n",
          "testCode": "test(\"A variable named `quotient` should be declared and be of the type `number`.\", () =>\n    expect(typeof quotient).toBe(\"number\"));\n\ntest(\"`quotient` should equal `243`.\", () => expect(quotient).toBe(243));",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "const quotient = 486 / 2;",
          "content": "Opposite the multiplication operator, is the division operator, or `/`. Like all of the basic arithmetic operators \\(`+`, `-`, `*`, `/`\\), the division operator is binary, and as you would expect, it divides its two operands:\n\n```typescript\nconst quotient = 98230 / 232; // 423.4051724137931\n\n```\n"
        },
        {
          "id": "Av840s7X",
          "type": "typescript",
          "title": "The Increment Operator",
          "instructions": "Uncomment line 2 and hover over `notCool`. This is very useful\\! See [below](/scrollTarget/supplementary-content-container) for an explanation.",
          "testCode": "test('`notCool` should be of type number', () => expect(typeof notCool).toBe(\"number\"));",
          "videoUrl": "",
          "starterCode": "const notCool = 3;\n// notCool++;",
          "solutionCode": "const notCool = 3;",
          "content": "The increment operator does exactly what its name promises it will do. It increments its operand\\! Unlike the operators we've seen so far, the `++` operator is a unary operator, meaning it only takes one operand:\n\n```\nlet x = 3;\nx++; // x = 4\n\n```\n\nSince variables declared with `const` cannot be reassigned, and incrementing a variable after its been assigned a value is tantamount to reassignment, only variables declared with `let` can be incremented in this way. \n\nThis is where TypeScript's type system shines\\! In a JavaScript program, the code in the example [above](/scrollTarget/root) would result in a run\\-time `TypeError`, meaning the error would occur during the program's execution, and users of the application would likely notice the problem. Not good\\! However, TypeScript _prevents_ this error at compile\\-time, and its linter warns us as we're coding."
        },
        {
          "id": "Ib5T7-Ll",
          "type": "typescript",
          "title": "The Increment and Decrement Operators",
          "instructions": "Ok, we took a little detour to drive home the point of why we write TypeScript instead of JavaScript in the first place. But now let's see the `++` operator in action.\n\n* Assign `b` an expression where `a` is incremented with the `++` operator _postfix_\n* Assign `c` an expression where `b`  is incremented with the `++` operator _prefix_\n\n",
          "testCode": "test('`a` should be of type `number`', () => expect(typeof a).toBe(\"number\"));\ntest('`b` should be of type `number`', () => expect(typeof b).toBe(\"number\"));\ntest('`c` should be of type `number`', () => expect(typeof c).toBe(\"number\"));\ntest('`a` should equal `101`', () => expect(a).toBe(101));\ntest('`b` should equal `101`', () => expect(a).toBe(101));\ntest('`c` should equal `101`', () => expect(a).toBe(101));\n",
          "videoUrl": "",
          "starterCode": "let a = 100;\nlet b: number;\nlet c: number;",
          "solutionCode": "let a = 100;\nlet b: number = a++;\nlet c: number = ++b;",
          "content": "## The Increment Operator\n\nThere are a couple of nuances to note about the increment operator. The increment operator can be used either _prefix_ or _postfix_, meaning either _before_, or _after_, its operand.\n\n```typescript\nlet a = 3;\nlet b = 3;\nlet c = ++a; // prefix usage\nlet d = b++; // postfix usage\n\n```\n\nWhile these expression look similar, their behavior is slightly different. The prefix operator increments its operand and returns its value _after being incremented_, while the postfix operator increments its operand and returns its value _before being incremented_. Let's take a look again with some results:\n\n```typescript\nlet a = 3;\nlet b = 3;\nlet c = ++a; // c = 4 prefix returned a after being incremented\nlet d = b++; // d = 3 postfix returned b before being incremented\n// a = 4, b = 4 both a and b were incremented\n\n```\n\n\n## The Decrement Operator\n\nSimilar to the increment operator, is the decrement, or `--` operator\\. It's a unary operator that behaves much the same way as the `++` operator, except that it decrements its numeric operand, rather than increments it. \n\n```\nlet x = 100;\nx--; // x = 99\n\n```\n\nLike the increment operator, `--` can only be used on variables declared with `let`. It also has identical prefix and postfix behaviors \\(if used prefix, it returns the value of its operand after being decremented, and vice versa if used postfix\\).\n\n```\nlet x = 100;\nlet q = 100;\nlet y = --x; // y = 99, x = 99\nlet z = q--; // z = 100, q = 99\n\n```\n\nWe're not going to cover this operator in a separate lesson, because its behavior is so similar to what we've covered here. But it can be a useful operator, so be aware of it\\!"
        },
        {
          "id": "ArSBMKtk",
          "type": "typescript",
          "title": "The Remainder Operator",
          "instructions": "A very common use\\-case for the `%` operator is to test whether or not a number is even or odd. We can accomplish this by comparing the result of `num % 2` with `0` , e.g. `num % 2 === 0`  \\(the `===` operator determines if two operands are equal, which we'll learn more about in a later section\\). If the remainder is `0` we know the number is even, if its not, we know its odd. Pretty handy\\! \n\n* Assign a number to `num` so that `isEven` evaluates to `true`.\n\n",
          "testCode": "test(\"`num` should be of type `number`\", () =>\n  expect(typeof num).toBe(\"number\"));\ntest(\"`isEven` should be of type `boolean`\", () =>\n  expect(typeof isEven).toBe(\"boolean\"));\ntest(\"`isEven` should be `true`\", () => expect(isEven).toBe(true));\n",
          "videoUrl": "",
          "starterCode": "const num = 5;\nconst isEven = num % 2 === 0;\n",
          "solutionCode": "const num = 6;\nconst isEven = num % 2 === 0;\n",
          "content": "The remainder, or `%`, operator \\(also known as the modulus or modulo operator\\) returns the remainder of its two operands' division:\n\n```\nconst remainder = 20 % 3; // 2\n\n```\n\nThe expression `20 % 3` can be thought of as \"the remainder of 20 divided by 3.\"  \n\nOne important note about the modulus operator is that the return value always takes on the sign of the dividend, or the left\\-hand operand \\(the right\\-hand operand is the divisor\\):\n\n```\nconst dividend = -17;\nconst divisor = 2;\ndividend % divisor; // -1\n\n```\n"
        },
        {
          "id": "WYcydtZx",
          "type": "media",
          "title": "Other Arithmetic Operators",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "There are a few other arithmetic operators to be aware of. Let's take a quick look.\n\n## The Exponentiation Operator\n\nThe exponentiation or, `**`, operator raises the left\\-hand operand to the power of the right hand operand:\n\n```\nconst fourCubed = 4 ** 3; // 64\n\n```\n\n## The Unary Plus Operator\n\nThe unary plus, or `+`, operator, as its name suggests, only takes a single operand, and is used _prefix_, or immediately before its operand. Its only purpose is to convert its operand to a number \\(if it isn't one already\\) and return the result. Note that the operand itself _is not_ affected\\.\n\n```\nconst fiveAsString = \"5\";\nconst fiveAsNumber = +fiveAsString;\n// fiveAsString = \"5\", fiveAsNumber = 5\n\n```\n\nTry this out in the [sandbox](/workspace/sandbox) on more complex string representations of numbers \\(e.g. `\"-23543.0274\"`\\), and on values other than strings and see what you get\\! For instance, what do you expect the result to be when you use the unary plus operator on booleans or on `null`?\n\n```\nconst isTrue = true;\n+isTrue // ??\n\n```\n\nExperimentation and fun aside, It should be noted here, however, that there are other, more preferred ways to convert values to numbers in TypeScript. The unary plus operator is borderline esoteric, but will work just fine for simple use\\-cases. For more complex cases, other methods are preferred:\n\n```\nconst notReallyPi = \"3.14IsPie...err...ImeanPi\";\nconst definitelyNotPi = +notReallyPi; // NaN (not a number)\nconst pi = parseFloat(notReallyPi); // 3.14\n\n```\n\nThis example is obviously contrived, but you get the picture.\n\n## The Unary Negation Operator\n\nThe unary negation, or `-`, operator negates the value of its operand. If its operand is not a number, it also converts it to a number before negating it.\n\n```\nconst threeAsNumber = 3;\nconst threeAsString = \"3\";\n-threeAsString; // -3\n-threeAsNumber; // -3\n\n```\n"
        },
        {
          "id": "6T3GXc4ap",
          "type": "typescript",
          "title": "Add Two Numbers",
          "instructions": "Complete the function body below. The function should receive two numbers as input arguments and return the result of adding these numbers together.",
          "starterCode": "const addTwoNumbers = (a: number, b: number) => {\n  // Your code here\n}\n\nconst result = addTwoNumbers(10, 20);\nconsole.log(result);\n",
          "solutionCode": "const addTwoNumbers = (a: number, b: number) => {\n  return a + b;\n}\n\nconst result = addTwoNumbers(10, 20);\nconsole.log(result);\n",
          "testCode": "const cases = [\n  { input: [1, 2], expected: 3 },\n  { input: [10, 50], expected: 60 },\n  { input: [-10, -50], expected: -60 },\n  { input: [100, 500], expected: 600 },\n  { input: [1123, 532142], expected: 533265 },\n  { input: [-10, 50], expected: 40 },\n  { input: [1, 500], expected: 501 },\n  { input: [842, 124], expected: 966 },\n  { input: [1000, 500], expected: 1500 },\n  { input: [-100, 100], expected: 0 },\n  { input: [2, 50234432], expected: 50234434 },\n];\n\ncases.forEach(x => {\n    const { input: [a, b], expected } = x;\n    test(`${x.input[0]} + ${x.input[1]}`, () => {\n        expect(addTwoNumbers(a,b)).toBe(expected)\n    })\n})",
          "content": "Placeholder supplementary content..."
        },
        {
          "id": "WUA8ezECU",
          "type": "typescript",
          "title": "Reverse a String",
          "instructions": "Complete the function body below. The function will receive a string and should return the same string in reverse order.",
          "starterCode": "const reverseString = (inputString: string) => {\n  // Edit code here\n}\n\nconst result = reverseString(\"hello\");\nconsole.log(result);\n",
          "solutionCode": "const reverseString = (inputString: string) => {\n  return inputString.split('').reverse().join('');\n}\n\nconst result = reverseString(\"hello\");\nconsole.log(result);\n",
          "testCode": "[\n  { input: [\"hello\"], expected: \"olleh\" },\n  { input: [\"fantastic\"], expected: \"citsatnaf\" },\n  { input: [\"superb\"], expected: \"brepus\" },\n  { input: [\"frustrating\"], expected: \"gnitartsurf\" },\n  { input: [\"exciting\"], expected: \"gniticxe\" },\n  { input: [\"happy\"], expected: \"yppah\" },\n  { input: [\"a\"], expected: \"a\" },\n  { input: [\"aaaaaaaaaaaaz\"], expected: \"zaaaaaaaaaaaa\" },\n  { input: [\"jumping\"], expected: \"gnipmuj\" },\n  { input: [\"silly\"], expected: \"yllis\" },\n  { input: [\"zombie\"], expected: \"eibmoz\" },\n].forEach(({ input, expected }) => {\n  test(`${input[0]} -> ${expected}`, () => {\n    expect(reverseString(...input)).toBe(expected);\n  })\n})\n",
          "content": "Placeholder supplementary content..."
        },
        {
          "id": "50fxTLRcV",
          "type": "typescript",
          "title": "Return the Length of an Array",
          "instructions": "Complete the function body below. The function will receive an array as input and should return the number of items in the array.",
          "starterCode": "const lengthOfArray = (array: any[]) => {\n  // Edit code here\n};\n\nconst result = lengthOfArray([\"a\", \"b\", \"c\"]);\nconsole.log(result);\n",
          "solutionCode": "\nconst lengthOfArray = (array: any[]) => {\n  return array.length;\n}\n\nconst result = lengthOfArray([\"a\", \"b\", \"c\"]);\nconsole.log(result);\n",
          "testCode": "[\n  { input: [[1, 2, 3, 4]], expected: 4 },\n  { input: [[]], expected: 0 },\n  { input: [[1, 1, 1, 1, 1, 1, 1, 1, 1]], expected: 9 },\n  { input: [[3, 3, 3]], expected: 3 },\n  { input: [[2]], expected: 1 },\n  { input: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], expected: 14 },\n].forEach(({ input, expected }) => {\n  test(input[0].join(\", \"), () => {\n    expect(lengthOfArray(...input)).toBe(expected);\n  });\n});\n",
          "content": "Placeholder supplementary content..."
        },
        {
          "id": "u5nA6qc6",
          "type": "section",
          "title": "Equality",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In programming, it is often helpful to compare two different values and determine if they are equal or not. You may think this is simple, and it usually is. However, there are some interesting nuances which are helpful to learn as well.\n\nIn this section you will learn the basics for how to determine equality between different values in TypeScript, and you will learn a few edge cases which can easily trip you up as well.\n\nComparing primitive values like strings or numbers is very straightforward, but comparing more complex data structures like arrays or objects is a little more tricky."
        },
        {
          "id": "mIj2Sy2B",
          "type": "typescript",
          "title": "Comparing String Values",
          "instructions": "The best way to compare two string values in TypeScript is to use the triple equals operator,\n`===`. The triple equal operator determines if two values are the same and can be applied directly to strings. Go ahead, take a look at the code in the editor and try it out\\!",
          "testCode": "test(\"The two fruit variables `fruit` and `otherFruit` should both be strings and they should be equal\", () => {\n    expect(fruit).toBe(otherFruit);\n    expect(typeof fruit).toBe(\"string\");\n    expect(typeof otherFruit).toBe(\"string\");\n});",
          "videoUrl": "",
          "starterCode": "const fruit: string = \"apple\";\nconst otherFruit: string = \"grape\";\n\nconst areFruitsEqual = fruit === otherFruit;\n\nif (areFruitsEqual) {\n    console.log(\"The fruits are equal!\");\n}",
          "solutionCode": "\nconst fruit: string = \"apple\";\nconst otherFruit: string = \"apple\";\n\nconst areFruitsEqual = fruit === otherFruit;\n\nif (areFruitsEqual) {\n    console.log(\"The fruits are equal!\");\n}",
          "content": ""
        },
        {
          "id": "9yEpUrhb",
          "type": "typescript",
          "title": "Comparing Number Values",
          "instructions": "Comparing strings is just like comparing numbers. Strings and numbers are primitive values in TypeScript, and can be compared directly against one another. Take a look at the code in the editor and give it a try\\!",
          "testCode": "test(\"The two values `someNumber` and `someCalculatedValue` should both be numbers and they should be equal\", () => {\n    expect(someNumber).toBe(someCalculatedValue);\n    expect(typeof someNumber).toBe(\"number\");\n    expect(typeof someCalculatedValue).toBe(\"number\");\n});",
          "videoUrl": "",
          "starterCode": "const someNumber = 102;\nconst someCalculatedValue = (250 + 250) / 5;\n\nif (someNumber === someCalculatedValue) {\n    console.log(\"The numbers are equal!\");\n}",
          "solutionCode": "const someNumber = 100;\nconst someCalculatedValue = (250 + 250) / 5;\n\nif (someNumber === someCalculatedValue) {\n    console.log(\"The numbers are equal!\");\n}",
          "content": ""
        },
        {
          "id": "6l0NR0XE",
          "type": "typescript",
          "title": "Comparing Null and Undefined Equality",
          "instructions": "You can compared `null` and `undefined` just like numbers and strings. They are all primitive values, a single `null` is identical to any other `null` value you may come across.",
          "testCode": "test(\"Both variables `anUndefinedVariable` and `explicitlyUndefined` should be equal to undefined\", () => {\n    expect(anUndefinedVariable).toBe(undefined);\n    expect(explicitlyUndefined).toBe(undefined);\n});",
          "videoUrl": "",
          "starterCode": "let anUndefinedVariable;\nconst explicitlyUndefined = \"a real value\";\n\nif (anUndefinedVariable === explicitlyUndefined) {\n    console.log(\"Both values are equal to undefined!\");\n}",
          "solutionCode": "let anUndefinedVariable;\nconst explicitlyUndefined = undefined;\n\nif (anUndefinedVariable === explicitlyUndefined) {\n    console.log(\"Both values are equal to undefined!\");\n}",
          "content": ""
        },
        {
          "id": "RqsAIW6D",
          "type": "typescript",
          "title": "Equality with Boolean Values",
          "instructions": "The boolean values `true` and `false` can also be applied directly in equality assertions like other primitive values. To see what we mean, take a look at the code in the editor below.",
          "testCode": "test(\"The `ageLimit` variable should be 18\", () => {\n    expect(ageLimit).toBe(18);\n});\n\ntest(\"The `age` variable should be greater than 18 so that `isOldEnough` is true\", () => {\n    expect(age > 18).toBe(true);\n    expect(isOldEnough).toBe(true);\n});",
          "videoUrl": "",
          "starterCode": "const age = 16;\nconst ageLimit = 18;\nconst isOldEnough = age > ageLimit;\n\nif (isOldEnough === true) {\n    console.log(\"You are old enough!\");\n}",
          "solutionCode": "const age = 25;\nconst ageLimit = 18;\nconst isOldEnough = age > ageLimit;\n\nif (isOldEnough === true) {\n    console.log(\"You are old enough!\");\n}",
          "content": ""
        },
        {
          "id": "yI82pwBw",
          "type": "typescript",
          "title": "Array Equality",
          "instructions": "Unlike primitive values, non\\-primitive values such as objects, arrays, and functions have different behavior when it comes to equality.\n\nFor example, in TypeScript `const list = [1,2,3]` creates a `list` variable which is a reference to an array of values in memory: `[1,2,3]` . The reference and the array itself are actually different. To see what we mean, dive into the code\\!",
          "testCode": "test(\"The two lists `oneList` and `anotherList` should reference the same value.\", () => {\n    expect(oneList).toBe(anotherList);\n});\n\ntest(\"`theListsAreTheSame` should evaluate to `true`.\", () => {\n    expect(theListsAreTheSame).toBe(true);\n});",
          "videoUrl": "",
          "starterCode": "const oneList = [1,2,3,4,5];\nconst anotherList = [1,2,3,4,5];\n\nconst theListsAreTheSame = oneList === anotherList;\n\nif (theListsAreTheSame) {\n    console.log(\"The lists are the same!\");\n}",
          "solutionCode": "const oneList = [1,2,3,4,5];\nconst anotherList = oneList;\n\nconst theListsAreTheSame = oneList === anotherList;\n\nif (theListsAreTheSame) {\n    console.log(\"The lists are the same!\");\n}",
          "content": "The triple equals operator when applied to objects or arrays compares the \\_references \\_not the object or array itself. Therefore, in the code above the `theListsAreTheSame` variable can become `true` if the two list variables reference the same list.\n\n**HINT: **You can define a new variable to reference another. In that case, they both share the same reference. For example:\n\n```typescript\nconst referenceOne = { a: true };\nconst referenceTwo = referenceOne;\n// referenceOne and referenceTwo are the same!\n\n```\n"
        },
        {
          "id": "wxWa6skK",
          "type": "typescript",
          "title": "Object Equality",
          "instructions": "Like arrays, comparing objects is more complicated than comparing primitive values like booleans, numbers, or strings. Objects behave just like arrays. For instance in the code:\n\n```typescript\nconst person = { name: \"Rob\", age: 23 }\n\n```\n\n`person` holds a _reference_ to the the object `{ name: \"Rob\", age: 23 }`. It is very important to understand that the _reference_ is different from the value itself. Variables hold references to values and using `===` on references just determines if the references point to the same value, not if two separate values _are equivalent_.",
          "testCode": "test(\"The `comparePeople` function should accept two `Person`s and return `true` if they have the same `name` and `age`\", () => {\n    const x = {\n        name: \"Rob\",\n        age: 23,\n    }\n\n    const y = {\n        name: \"Rob\",\n        age: 23,\n    }\n    expect(comparePeople(x, y)).toBe(true);\n});\n\ntest(\"The `comparePeople` function should accept two `Person`s and return `false` if they have a different `name` or `age`\", () => {\n    const x = {\n        name: \"Rob\",\n        age: 24,\n    }\n\n    const y = {\n        name: \"Rob\",\n        age: 23,\n    }\n\n    const z = {\n        name: \"Robz\",\n        age: 23,\n    }\n\n    expect(comparePeople(x, y)).toBe(false);\n    expect(comparePeople(y, z)).toBe(false);\n});",
          "videoUrl": "",
          "starterCode": "interface Person {\n    name: string;\n    age: number;\n}\n\nconst comparePeopleReferences = (referenceOne: Person, referenceTwo: Person) => {\n    return referenceOne === referenceTwo;\n}\n\nconst comparePeople = (personOne: Person, personTwo: Person) => {\n    // TODO: Fix the implementation of this function.\n    // HINT: Two people are equal if they have the same name and age!\n    return null;\n}\n\nconst Rob: Person = {\n    name: \"Rob\",\n    age: 23,\n}\n\nconst RobTwin: Person = {\n    name: \"Rob\",\n    age: 23,\n}\n\nconst areRobsReferencesTheSame = comparePeopleReferences(Rob, RobTwin);\nconst areRobsTheSame = comparePeople(Rob, RobTwin);\n\nconsole.log(`Are Rob references the same? -> ${areRobsReferencesTheSame}`);\nconsole.log(`Are Robs the same? -> ${areRobsTheSame}`);",
          "solutionCode": "interface Person {\n    name: string;\n    age: number;\n}\n\nconst comparePeopleReferences = (referenceOne: Person, referenceTwo: Person) => {\n    return referenceOne === referenceTwo;\n}\n\nconst comparePeople = (personOne: Person, personTwo: Person) => {\n    const agesEqual = personOne.age === personTwo.age;\n    const namesEqual = personOne.name === personTwo.name;\n    return agesEqual && namesEqual;\n}\n\nconst Rob: Person = {\n    name: \"Rob\",\n    age: 23,\n}\n\nconst RobTwin: Person = {\n    name: \"Rob\",\n    age: 23,\n}\n\nconst areRobsReferencesTheSame = comparePeopleReferences(Rob, RobTwin);\nconst areRobsTheSame = comparePeople(Rob, RobTwin);\n\nconsole.log(`Are Rob references the same? -> ${areRobsReferencesTheSame}`);\nconsole.log(`Are Robs the same? -> ${areRobsTheSame}`);",
          "content": ""
        },
        {
          "id": "wzTlMB2D",
          "type": "section",
          "title": "Loops",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Ever had to do anything tedious? Folding clothes? Inviting a bunch of people to the same event? When you have to do the same thing, over and over again, it can feel really tedious. Well, if you've ever thought to yourself \"There must be a better way\\! 😫\" then you're already thinking like a programmer.\n\nUnfortunately, at the time of this writing there's not yet an affordable robot that can fold your clothes \\(if you know of one, please tell me\\!\\). However, there _is_ a way to quickly send event invites to people. It's called adding a bunch of recipients to the same email. Imagine if you had to actually send each email 1\\-by\\-1.\n\nThe point is, if it's digital ++you can find a way to make a computer do repetitive tasks for you++. That's what we're going to talk about in this section: Telling a computer to do the same thing over and over and over again... until it's done \\(or maybe even forever\\).\n\n> \n> ### Story Time \\(feel free to skip this completely\\)\n> \n> Back in college, before I knew how to program _at all_, I had a job working at our IT department. It was a pretty sweet gig: The hours were easy, the pay was decent \\(for an on\\-campus job\\), and my coworkers were great. It was even a job I could claim gave me technical skills on a resume \\(hah\\!\\). There was just one problem...\n> \n> **The job was extremely tedious.**\n> \n> One of my core responsibilities on the job was renaming and reorganizing video files that were uploaded by professors through some obscure campus portal software. These videos would find their way into a shared network drive where I could then access them using my super admin powers. \n> \n> This was very easy. I would open the upload folder for a professor and rename each file to include the current date, the professors user id, and the original name of the file. However, as I mentioned earlier, _this was \\__**super** tedious\\. \\_So, like any future programmer I thought to myself \"There must be a better way\\! 😫\" and then proceeded to do nothing about it for a whole week.\n> \n> After a week though, I had had enough and I set out on a Google\\-searching mission that eventually lead me to loops\\! Well, loops and a bunch of cobbled together code that semi\\-sort\\-of automated some of my tedious task using shell scripts \\(a topic we'll cover another time\\). The point is my job became much more enjoyable because I learned about looping. \n# Looping\n\nLooping is conceptually simple—it's telling a computer to do the same thing repeatedly until some condition is met. Let's jump in with an example:\n\n```\nhey\n\n```\n# Why looping is important\n\n"
        },
        {
          "id": "Jy0Azabm",
          "type": "typescript",
          "title": "Get the index using a while loop",
          "instructions": "Use a `while` loop to find the index of `\"broom\"` in the `randomThings` array\\.",
          "testCode": "test(\"`result` should be defined\", () =>\n    expect(result).not.toBe(undefined));\ntest(\"`result` should be the index of \\\"broom\\\" in the `randomThings` array\", () =>\n    expect(result).toBe(randomThings.indexOf('broom')));\ntest('Solution should use a `while` loop', () => {\n    const reg = /while\\s+\\(.+\\)\\s+{/\n    expect(reg.test(__user_code_string__)).toBe(true);\n})",
          "videoUrl": "",
          "starterCode": "const randomThings = [\"chair\", \"bench\", \"broom\", \"sphere\", \"couch\"];\nlet result = -1;\n",
          "solutionCode": "const randomThings = [\"chair\", \"bench\", \"broom\", \"sphere\", \"couch\"];\nlet result = -1;\nlet i = 0;\nwhile (i < randomThings.length) {\n    if (randomThings[i] === \"broom\") {\n        result = i;\n    }\n    i ++;\n}",
          "content": ""
        },
        {
          "id": "xAggDM8Y",
          "type": "typescript",
          "title": "Get the index using a for loop get the loop a loop",
          "instructions": "Use a `for` loop to find the index of `\"mango\"` in the `randomThings` array\\.",
          "testCode": "test(\"`result` should be defined\", () => expect(result).not.toBe(undefined));\ntest('`result` should be the index of \"mango\" in the `randomThings` array', () =>\n  expect(result).toBe(randomThings.indexOf(\"mango\")));\ntest(\"Solution should use a `for` loop\", () => {\n  const reg = /for\\s+\\(.+\\)\\s+{/;\n  expect(reg.test(__user_code_string__)).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "const randomThings = [\"pineapple\", \"apple\", \"pen\", \"mango\", \"smoothie\"];\nlet result = -1;\n",
          "solutionCode": "const randomThings = [\"pineapple\", \"apple\", \"pen\", \"mango\", \"smoothie\"];\nlet result = -1;\n\nfor (let i = 0; i < randomThings.length; i ++) {\n    if (randomThings[i] === \"mango\") {\n        result = i;\n    }\n}",
          "content": ""
        },
        {
          "id": "mcGgTSjJa",
          "type": "typescript",
          "title": "Building an Array With a Loop",
          "instructions": "Use a `while` loop or a `for` loop to build an array of the numbers 1, 2, 3, 4, 5, ... etc up to _and including_ 100\\.",
          "testCode": "// Write your tests here:\ntest(\"The variable `result` should be an array\", () => {\n  expect(Array.isArray(result)).toBe(true);\n});\n\ntest(\"The `result` array should have all integers from 1 to 1000 in it\", () => {\n  const expected = Array(100).fill(null).map((_, i) => i + 1);\n  expect(result).toEqual(expected);\n})",
          "videoUrl": "",
          "starterCode": "const result: number[] = [];\n\n// Write some code to add items to the array\n\nconsole.log(result);\n",
          "solutionCode": "const result = [];\n\nlet i = 1;\n\nwhile (i < 101) {\n  result.push(i);\n  i++;\n}\n\nconsole.log(result);\n",
          "content": ""
        },
        {
          "id": "5gbtOWeTG",
          "type": "typescript",
          "title": "Breaking out of a loop",
          "instructions": "Use a `while` loop or a `for` loop to find the index in the `people` array of the person with the job `\"overriding the hard drive\"`. Once you find it `break` out of the loop to avoid doing more work.",
          "testCode": "// Write your tests here:\ntest(\"`people` should be an array\", () => {\n  expect(Array.isArray(people)).toBe(true);\n});\n\ntest(\"`index` should be a number\", () => expect(typeof index).toBe(\"number\"));\n\ntest('`index` should be be the index of the person with the job `\"overriding the hard drive\"`', () => {\n  expect(index).toBe(\n    people.findIndex((x) => x.job === \"overriding the hard drive\")\n  );\n});\n\ntest(\"Should use the `break` statement\", () => {\n  expect(__user_code_string__).toMatch(/break/g);\n});\n",
          "videoUrl": "",
          "starterCode": "const people = [\n  { name: \"Nichole Nienow\", job: \"transmitting the panel\" },\n  { name: \"Shanon Harris\", job: \"calculating the monitor\" },\n  { name: \"Lamar Heathcote\", job: \"navigating the transmitter\" },\n  { name: \"Alfred Jenkins\", job: \"compressing the microchip\" },\n  { name: \"Grayce Conroy\", job: \"indexing the hard drive\" },\n  { name: \"Garry Eichmann\", job: \"backing up the bandwidth\" },\n  { name: \"Colby Bradtke\", job: \"connecting the array\" },\n  { name: \"Kobe Carroll\", job: \"overriding the hard drive\" },\n  { name: \"Brian Miller\", job: \"connecting the transmitter\" },\n  { name: \"Alycia Schoen\", job: \"hacking the microchip\" },\n  { name: \"Wellington McCullough\", job: \"connecting the port\" },\n  { name: \"Jaylin Walsh\", job: \"indexing the microchip\" },\n];\n\n// This is the starting index to represent nothing found yet\nlet index = -1;\n\n// Your code here...",
          "solutionCode": "const people = [\n  { name: \"Nichole Nienow\", job: \"transmitting the panel\" },\n  { name: \"Shanon Harris\", job: \"calculating the monitor\" },\n  { name: \"Lamar Heathcote\", job: \"navigating the transmitter\" },\n  { name: \"Alfred Jenkins\", job: \"compressing the microchip\" },\n  { name: \"Grayce Conroy\", job: \"indexing the matrix\" },\n  { name: \"Garry Eichmann\", job: \"backing up the bandwidth\" },\n  { name: \"Colby Bradtke\", job: \"connecting the array\" },\n  { name: \"Kobe Carroll\", job: \"overriding the hard drive\" },\n  { name: \"Brian Miller\", job: \"connecting the transmitter\" },\n  { name: \"Alycia Schoen\", job: \"hacking the microchip\" },\n  { name: \"Wellington McCullough\", job: \"connecting the port\" },\n  { name: \"Jaylin Walsh\", job: \"indexing the microchip\" },\n];\n\n// This is the starting index to represent nothing found yet\nlet index = -1;\n\nfor (let i = 0; i < people.length; i ++) {\n  const person = people[i];\n  if (person.job === \"overriding the hard drive\") {\n    index = i;\n    break;\n  }\n}",
          "content": "Breaking out of a loop can be thought of as saying \"Stop iterating\\!\" It will completely stop looping.\n# Why is this useful?\n\nBreaking can be very useful to make your program run faster by avoiding doing additional iterations. Here's a real world example:\n\nYou're searching for you keys and you need to check a few places: Sock drawer, kitchen sink, balcony, couch cushions. If you first check your sock drawer and _find your keys_ would you keep on looking until you checked every place on your list? Of course not. The same can go for your code too.\n\n```typescript\nconst words = [\n  \"hey\",\n  \"some\",\n  \"of\",\n  \"these\",\n  \"words\",\n  \"have\",\n  \"the\",\n  \"wrong\",\n  \"length\",\n  \"right\",\n  \"?\",\n];\n\nlet foundIndex = -1;\nlet iterations = 0;\n\nfor (let i = 0; i < words.length; i++) {\n  // Record the number of iterations\n  iterations++;\n\n  if (words[i] === \"of\") {\n    foundIndex = i;\n    break; // Imporant! Without this break the loop will keep running until the end of the array\n  }\n}\n\nconsole.log(`Found \"of\" at index ${foundIndex}. Iterated ${iterations} times.`);\n\n```\n"
        },
        {
          "id": "3d0e8KsAI",
          "type": "typescript",
          "title": "Continuing a loop",
          "instructions": "Use a `while` loop or a `for` loop to fill the `result` array with ever person who's name starts with `\"G\"`.",
          "testCode": "// Write your tests here:\ntest(\"`people` should be an array\", () => {\n  expect(Array.isArray(people)).toBe(true);\n});\n\ntest(\"`result` should be an array\", () =>\n  expect(Array.isArray(result)).toBe(true));\n\ntest('`result` should contain all people whos name starts with \"G\"', () => {\n  const _result = people.filter((x) => x.name.startsWith(\"G\"));\n  expect(result).toEqual(_result);\n});\n\ntest(\"Should use the `continue` statement\", () => {\n  expect(__user_code_string__).toMatch(/continue/g);\n});\n",
          "videoUrl": "",
          "starterCode": "const people = [\n  { name: \"Nichole Nienow\", job: \"transmitting the panel\" },\n  { name: \"Shanon Harris\", job: \"calculating the monitor\" },\n  { name: \"Lamar Heathcote\", job: \"navigating the transmitter\" },\n  { name: \"Alfred Jenkins\", job: \"compressing the microchip\" },\n  { name: \"Grayce Conroy\", job: \"indexing the matrix\" },\n  { name: \"Garry Eichmann\", job: \"backing up the bandwidth\" },\n  { name: \"Colby Bradtke\", job: \"connecting the array\" },\n  { name: \"Kobe Carroll\", job: \"overriding the hard drive\" },\n  { name: \"Brian Miller\", job: \"connecting the transmitter\" },\n  { name: \"Alycia Schoen\", job: \"hacking the microchip\" },\n  { name: \"Wellington McCullough\", job: \"connecting the port\" },\n  { name: \"Jaylin Walsh\", job: \"indexing the microchip\" },\n];\n\nconst result = []\n\n// Your code here...",
          "solutionCode": "const people = [\n  { name: \"Nichole Nienow\", job: \"transmitting the panel\" },\n  { name: \"Shanon Harris\", job: \"calculating the monitor\" },\n  { name: \"Lamar Heathcote\", job: \"navigating the transmitter\" },\n  { name: \"Alfred Jenkins\", job: \"compressing the microchip\" },\n  { name: \"Grayce Conroy\", job: \"indexing the matrix\" },\n  { name: \"Garry Eichmann\", job: \"backing up the bandwidth\" },\n  { name: \"Colby Bradtke\", job: \"connecting the array\" },\n  { name: \"Kobe Carroll\", job: \"overriding the hard drive\" },\n  { name: \"Brian Miller\", job: \"connecting the transmitter\" },\n  { name: \"Alycia Schoen\", job: \"hacking the microchip\" },\n  { name: \"Wellington McCullough\", job: \"connecting the port\" },\n  { name: \"Jaylin Walsh\", job: \"indexing the microchip\" },\n];\n\nlet result = [];\n\nfor (let i = 0; i < people.length; i++) {\n  const person = people[i];\n  if (!person.name.startsWith(\"G\")) {\n    continue;\n  }\n  result.push(person);\n}\n",
          "content": "Continuing could also be thought of as skipping an iteration. Each time the code in your loop runs is one iteration. You can use `continue` to say \"Skip the rest of this iteration and start again at the top\".\n# Why is this useful?\n\nThe `continue` keyword is useful for avoiding doing some work. For example, if you want to `push` all the three\\-letter words on to a new array you could write a loop that pushes _all_ words and then add a `continue` keyword if the length is not what you want:\n\n```typescript\nconst words = [\n  \"hey\",\n  \"some\",\n  \"of\",\n  \"these\",\n  \"words\",\n  \"have\",\n  \"the\",\n  \"wrong\",\n  \"length\",\n  \"right\",\n  \"?\"\n];\n\nconst result = [];\n\nfor (let i = 0; i < words.length; i++) {\n  if (words[i].length !== 5) {\n    continue; // This is important! Skip the rest of the code in this loop\n  }\n  result.push(words[i]);\n}\n\nconsole.log(result); // => ['these', 'words', 'wrong', 'right']\n\n```\n"
        },
        {
          "id": "TJdUIaSo",
          "type": "section",
          "title": "Scopes",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "By now you have probably seen a lot of `{` and `}` in the code you've been writing. These curly braces are an important part of understanding how a computer program works. In this section, we will dive into the curly braces in more depth and introduce an important concept: _scopes_.\n\nIn TypeScript, a _scope_ refers to which variables are accessible within a specific piece of code. Curly braces `{...}` are used to denote different scopes, which can be used to limit variable accessibility within different parts of code.\n\nA variable which is accessible in one scope may not be accessible in another. This can useful for establishing boundaries between different parts of your program, organizing your code, encapsulation, and for many other reasons.\n\nWith that said, let's dive into the challenges\\!"
        },
        {
          "id": "wkp3YMTk",
          "type": "typescript",
          "title": "Global Scope",
          "instructions": "Values declared with global scope can be accessed _anywhere_ in the program. Create a variable called `myGlobalValue` at the top of the program and assign it to the string: `I am global!`. Take a look at the console output\\!",
          "testCode": "test(\"`myGlobalValue` exists in the global scope of the program\", () => {\n    expect(myGlobalValue).toBeDefined();\n});\n\ntest(\"`myGlobalValue` is the string `\\\"I am global!\\\"`\", () => {\n    expect(myGlobalValue).toBe(\"I am global!\");\n});",
          "videoUrl": "",
          "starterCode": "\n{\n  // Scope 1:\n  console.log(`Scope 1 myGlobalValue: ${myGlobalValue}`);\n  {\n    // Scope 2:\n    console.log(`Scope 2 myGlobalValue: ${myGlobalValue}`);\n    {\n      // Scope 3:\n      console.log(`Scope 3 myGlobalValue: ${myGlobalValue}`);\n    }\n  }\n}\n",
          "solutionCode": "const myGlobalValue = \"I am global!\";\n\n{\n  // Scope 1:\n  console.log(`Scope 1 myGlobalValue: ${myGlobalValue}`);\n  {\n    // Scope 2:\n    console.log(`Scope 2 myGlobalValue: ${myGlobalValue}`);\n    {\n      // Scope 3:\n      console.log(`Scope 3 myGlobalValue: ${myGlobalValue}`);\n    }\n  }\n}\n",
          "content": "You may observe the series of brackets in the code above, e.g. `{ ... }`. The brackets create a new _scope_ in TypeScript. A scope basically defines a private environment or namespace for values to exist.\n\nOther than a few exceptional cases, values defined within a scope _cannot be accessed from outside of that scope._\n\nAs you may imagine, values in the _global scope_ are global and can be accessed anywhere in the program\\! "
        },
        {
          "id": "$o6Oq$iq",
          "type": "typescript",
          "title": "The Global Scope Math Object",
          "instructions": "In TypeScript there are a variety of objects available in the global scope for you to use as a programmer, anywhere in your program. For instead, the `Math` object exists globally and provides methods such as `floor`, `ceil`, `round` and otherwise for performing useful operations with numbers.\n\nUse the `Math` object methods to assign the correct values to the variables `down`, `up`, and `rounded` below\\.",
          "testCode": "test(\"The results `down`, `up`, and `rounded` should all be numbers.\", () => {\n  expect(typeof down).toBe(\"number\");\n  expect(typeof up).toBe(\"number\");\n  expect(typeof rounded).toBe(\"number\");\n});\n\ntest(\"The `down` variable should apply `Math.floor` to the `testNumber` variable.\", () => {\n  expect(down).toBe(Math.floor(testNumber));\n});\n\ntest(\"The `up` variable should apply `Math.ceil` to the `testNumber` variable.\", () => {\n  expect(up).toBe(Math.ceil(testNumber));\n});\n\ntest(\"The `rounded` variable should apply `Math.round` to the `testNumber` variable.\", () => {\n  expect(rounded).toBe(Math.round(testNumber));\n});\n",
          "videoUrl": "",
          "starterCode": "// An example number\nconst testNumber = 10.325;\n\n// Round a decimal value down:\nconst down = undefined;\nconsole.log(`down: ${down}`);\n\n// Round a decimal value up:\nconst up = undefined;\nconsole.log(`up: ${up}`);\n\n// Round a decimal value:\nconst rounded = undefined;\nconsole.log(`rounded: ${rounded}`);",
          "solutionCode": "// An example number\nconst testNumber = 10.325;\n\n// Round a decimal value down:\nconst down = Math.floor(testNumber);\nconsole.log(`down: ${down}`);\n\n// Round a decimal value up:\nconst up = Math.ceil(testNumber);\nconsole.log(`up: ${up}`);\n\n// Round a decimal value:\nconst rounded = Math.round(testNumber);\nconsole.log(`rounded: ${rounded}`);",
          "content": "The `Math` object is just one globally available object for you to use in TypeScript. These may also be referred to as \"standard built\\-in\" objects.\n\nFor instance, global objects exist to instantiate the primitive data types you learned about previously: `String`, `Number`, and `Boolean` for instance.\n\nIn the following challenges we will experiment a little more with these global utility objects. Check out the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects) if you are curious to see a full list of what's available."
        },
        {
          "id": "aNx60YBP",
          "type": "typescript",
          "title": "More Math!",
          "instructions": "Let's play around more with the global `Math` object\\! It contains many other utilities to perform common math operations. In this challenge will implement a few functions for some simple math operations.\n\n**HINT: **If you want some help seeing which methods to use, take a look at the [Math object documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math). Also, don't forget that the editor can help make suggestions as you type. For example, try typing `Math.` in the editor somewhere\\!\n",
          "testCode": "\nconst inputs = [9, 25, 64, 100, 144, 225, 2025, 3136];\nconst runTest = (testFn, realFn) => inputs.forEach(i => expect(testFn(i)).toBe(realFn(i)));\n\ntest(\"The `squareRoot` function should return the square root of the `input` argument.\", () => {\n  runTest(squareRoot, Math.sqrt);\n});\n\ntest(\"The `absoluteValue` function should return the absolute of the `input` argument\", () => {\n  runTest(absoluteValue, Math.abs);\n});\n\ntest(\"The `logarithm` function should return the natural logarithm of the `input` argument.\", () => {\n  runTest(logarithm, Math.log);\n});\n\ntest(\"The `sign` function should return the sign of the `input` argument.\", () => {\n  runTest(sign, Math.sign);\n});\n\ntest(\"The `random` function should return a random number using the `Math` objects random utility.\", () => {\n  expect(typeof random()).toBe(\"number\");\n\n  let count = 0;\n  let results = [];\n  while (count < 500) {\n    results.push(random());\n    count++;\n  }\n  const unique = new Set(results);\n\n  // Blegh but it should work\n  expect(unique.size > 250).toBeTruthy();\n\n  // Search for the .random function in the user's code\n  expect(__user_code_string__.includes(\"Math.random(\")).toBeTruthy();\n});\n",
          "videoUrl": "",
          "starterCode": "const squareRoot = (input: number): number => {\n    // Use the Math object to return the square root of the input value!\n}\n\nconst absoluteValue = (input: number): number => {\n    // Use the Math object to return the absolute value of the input value!\n}\n\nconst logarithm = (input: number): number => {\n    // Use the Math object to return the natural logarithm of the input value!\n}\n\nconst sign = (input: number): number => {\n    // Use the Math object to return the sign on the input value!\n}\n\nconst random = (): number => {\n    // Use the Math object to return a random number!\n    return Math.random();\n}",
          "solutionCode": "const squareRoot = (input: number): number => {\n    // Use the Math object to return the square root of the input value!\n    return Math.sqrt(input);\n}\n\nconst absoluteValue = (input: number): number => {\n    // Use the Math object to return the absolute value of the input value!\n    return Math.abs(input);\n}\n\nconst logarithm = (input: number): number => {\n    // Use the Math object to return the natural logarithm of the input value!\n    return Math.log(input);\n}\n\nconst sign = (input: number): number => {\n    // Use the Math object to return the sign on the input value!\n    return Math.sign(input);\n}\n\nconst random = (): number => {\n    // Use the Math object to return a random number!\n    return Math.random();\n}",
          "content": ""
        },
        {
          "id": "NtvLmjdo",
          "type": "typescript",
          "title": "The Global Date Object",
          "instructions": "Another global object you will probably encounter frequently is the `Date` object\\. It is used to construct and work with dates and times. A new date can be created using the `Date` object and instantiating it with the `new` keyword\\.",
          "testCode": "\nconst checkTheDate = () => {\n  const now = new Date();\n  let result = whatIsTheDate();\n  const milli = now.getMilliseconds();\n  expect(result.getMilliseconds() - milli < 50).toBeTruthy();\n}\n\ntest(\"The `whatIsTheDate` function should return the current date as a new instance of the `Date` object.\", () => {\n  // Check the date a few times\n  let count = 0;\n  while (count < 25) {\n    checkTheDate();\n    count++;\n  }\n});\n",
          "videoUrl": "",
          "starterCode": "const whatIsTheDate = (): Date => {\n    // Create and return a new instance of Date\n}\n\nconst rightNow = whatIsTheDate();\n\n// Log the results\nconsole.log(rightNow);\nconsole.log(rightNow.toLocaleString());\n",
          "solutionCode": "const whatIsTheDate = (): Date => {\n    const date = new Date();\n    return date;\n}\n\nconst rightNow = whatIsTheDate();\nconsole.log(rightNow);\nconsole.log(rightNow.toLocaleString());\n",
          "content": ""
        },
        {
          "id": "UmvrXaKk",
          "type": "typescript",
          "title": "Learn about UNIX Epoch Time, now!",
          "instructions": "[Unix time](https://en.wikipedia.org/wiki/Unix_time) is a common date/time standard used in computing and operating systems. It describes a moment in time as the number of seconds which have passed since he Unix epoch which is the start of January 1, 1970 in UTC time. The current unix time can be retrieved from the `Date` object using a method called `now`. Take a look at the editor and try to convert dates to and from unix time\\!",
          "testCode": "const runChecks = (checkFn) => {\n  let count = 0;\n  while (count < 25) {\n    checkFn();\n    count++;\n  }\n}\n\ntest(\"The `getNowInUnixTime` function should return the current date in unix time.\", () => {\n  const check = () => {\n    const now = Date.now();\n    const result = getNowInUnixTime();\n    const diff = result - now;\n    expect(diff <= 50).toBeTruthy();\n    expect(diff >= 0).toBeTruthy();\n  }\n\n  runChecks(check);\n});\n\ntest(\"The `convertUnixTimeToDate` function should convert a unix timestamp number to a `Date` object.\", () => {\n  const check = () => {\n    const now = Date.now();\n    const result = convertUnixTimeToDate(now);\n    const expected = new Date(now).toUTCString();\n    expect(result.toUTCString()).toBe(expected);\n  }\n  \n  runChecks(check);\n});",
          "videoUrl": "",
          "starterCode": "const getNowInUnixTime = () => {\n    // Return the current unix timestamp\n}\n\nconst convertUnixTimeToDate = (unix: number): Date => {\n    // Convert and return a Date representing the input unix timestamp\n}\n\nconst unix = getNowInUnixTime();\nconsole.log(`unix: ${unix}`);\n\nconst date = convertUnixTimeToDate(unix);\nconsole.log(`date: ${date}`);\n\n",
          "solutionCode": "const getNowInUnixTime = () => {\n    return Date.now();\n}\n\nconst convertUnixTimeToDate = (unix: number): Date => {\n    return new Date(unix);\n}\n\nconst unix = getNowInUnixTime();\nconsole.log(`unix: ${unix}`);\n\nconst date = convertUnixTimeToDate(unix);\nconsole.log(`date: ${date}`);\n\n",
          "content": ""
        },
        {
          "id": "ld1zsdXb",
          "type": "typescript",
          "title": "Local Scope",
          "instructions": "Now that you have learned about global scope and some of the objects which are globally available for you to use, we will now take a look at _local scope_. Local scope refers to the ability to define a more restricted scope, or namespace, for values to exist in. Take a look at the editor to continue \\(it should look familiar from the earlier global scopes challenge\\!\\).",
          "testCode": "// A shitty test:\ntest(\"The `someVariable` variable should be redefined with a different value in each of the 4 scopes (global scope and 3 local scopes).\", () => {\n  let result;\n  let indices = []\n  const regex = /someVariable =/g;\n\n  // Match all the declarations of someVariable\n  while ((result = regex.exec(__user_code_string__))) {\n    indices.push(result.index);\n  }\n\n  let comparisons = new Set();\n  for (const index of indices) {\n    const substring = __user_code_string__.slice(index, index + 20);\n    comparisons.add(substring);\n  }\n\n  // Assert that the string declarations are not the same...\n  expect(indices.length).toBe(4);\n  expect(comparisons.size).toBe(indices.length);\n});\n",
          "videoUrl": "",
          "starterCode": "const someVariable = \"\";\n\n{\n  // Scope 1:\n  // const someVariable;\n  console.log(`Scope 1 someVariable: ${someVariable}`);\n  {\n    // Scope 2:\n    // const someVariable;\n    console.log(`Scope 2 someVariable: ${someVariable}`);\n    {\n      // Scope 3:\n      // const someVariable;\n      console.log(`Scope 3 someVariable: ${someVariable}`);\n    }\n  }\n}\n",
          "solutionCode": "// Global scope:\nconst someVariable = \"Global!\";\nconsole.log(`Global scope someVariable: ${someVariable}`);\n\n{\n  // Scope 1:\n  const someVariable = null;\n  console.log(`Scope 1 someVariable: ${someVariable}`);\n  {\n    // Scope 2:\n    const someVariable = \"A local value!\";\n    console.log(`Scope 2 someVariable: ${someVariable}`);\n    {\n      // Scope 3:\n      const someVariable = true;\n      console.log(`Scope 3 someVariable: ${someVariable}`);\n    }\n  }\n}\n",
          "content": "As you can see from this challenge, `{...}` can be used to create a new scope. The new local scope created by a pair of brackets can be used to redefine variables which exist in the outer scope, or it can be used to define values which _cannot_ be accessed by the outer scope. This is a very handy way to help you organize your code\\!\n\nHowever, as we will see next brackets are not the only way to create a new local scope."
        },
        {
          "id": "hyOjHRwi",
          "type": "typescript",
          "title": "Creating Local Scope with a Function",
          "instructions": "Function declarations also create a local scope owned by that function within the function body. This makes the function body a unique namespace where you can define values or change values which \\(usually\\) will not impact the outer scope. Dive into the code to see what we mean\\!",
          "testCode": "test(\"Change the value of the `outerValue` variable in the `aPrivateFunctionSpace` space to be `\\\"Hello, from the inner side!\\\"`.\", () => {\n  const result = aPrivateFunctionSpace();\n  expect(result).toBe(\"Hello, from the inner side!\");\n  expect(outerValue).toBe(\"Hello, from the outer side!\");\n});\n",
          "videoUrl": "",
          "starterCode": "const outerValue = \"Hello, from the outer side!\";\n\n// The function creates it's only private scope\nconst aPrivateFunctionSpace = () => {\n    // Change the code here!\n    const outerValue = \"\";\n    return outerValue;\n}\n\nconst innerValue = aPrivateFunctionSpace();\n\n// Log the results\nconsole.log(`innerValue: ${innerValue}`);\nconsole.log(`outerValue: ${outerValue}`);",
          "solutionCode": "const outerValue = \"Hello, from the outer side!\";\n\n// The function creates it's only private scope\nconst aPrivateFunctionSpace = () => {\n    // Change the code here!\n    const outerValue = \"Hello, from the inner side!\";\n    return outerValue;\n}\n\nconst innerValue = aPrivateFunctionSpace();\n\n// Log the results\nconsole.log(`innerValue: ${innerValue}`);\nconsole.log(`outerValue: ${outerValue}`);",
          "content": "Just like `{...}` brackets, functions can be nested. You can create functions within functions, or brackets within functions, or vice versus. All of these create new unique scopes. And they can be very nested\\! For instance, consider the following code:\n\n```typescript\nconst aVeryScopedWorld = () => {\n  // The main function scope\n\n  {\n    // Some brackets scope\n    const anotherFunction = () => {\n      // Now we are inside a new function and new scope\n      for (let i = 0; i < 10; i++) {\n        // A new scope, yet again!\n\n        const theForLoopFunction = () => {\n          // A function defined inside the for loop!\n          // Yes, it also creates a new scope!\n          return i;\n        }\n\n        const result = theForLoopFunction();\n        console.log(result);\n      }\n    }\n  }\n}\n\n```\n\nOk, this is a bit overkill\\! But it should get the idea across. Each of these new functions or brackets creates a new local scope\\!\n\nAlso, it's worth pointing out how flexible TypeScript is here. You can create and nest different constructs like this in very flexible ways. This gives you a lot of options as you craft programs to perform tasks and also as you think about the design, organization, and architecture of your programs.\n\nFor instance, should you create that new function right here, in the body of another function, or should you write outside in order to better separate your code?"
        },
        {
          "id": "Mpgh4e9m",
          "type": "media",
          "title": "A Final Note on Scope",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "So far we have seen some simple examples of what scope is in a computer program and how it is defined by functions and block statements of code.\n\nOne of the main ways scope is useful is by giving you the ability to create separations between pieces of code. This helps to improve the organization and readability of your program, and it may prevent bugs and problems as well.\n\nHowever, scope is not the only tool a programmer has to accomplish a goal like this.\n\nLater on, you will learn how to write programs and build apps using a real code environment \\(not this fun editor playground in a browser\\!\\). When you reach that stage, you will have a lot of other tools at your disposal.\n\nFor example, you can define parts of your program in different files, put related files in different folders, and then _import_ values from one file into another. You can also control what you _import_ and _export_. This is a very powerful capability for organizing software programs. These same skills will also allow you to download open source code other people have written and import this code in your own projects as well\\! This is incredibly useful and opens the doors to building a number of interesting applications\\!\n\nYou will learn the details of this later, but for now just keep it in mind as a short preview and extension of the ideas of scopes which will come in handy later\\!\n\nTake a look at this code snippet for a short teaser:\n\n```typescript\n// This imports the library \"request\", which is open source and written\n// and maintained by other developers.\nimport request from \"request\";\n\n// The request library lets you make HTTP requests to URLs!\nrequest(\"http://www.google.com\", (error, response, body) => {\n  if (error) {\n    throw error;\n  } else {\n    console.log(\"Success!, Response received: \", body);\n    // Do somethine else here...\n  }\n});\n\n```\n"
        },
        {
          "id": "Hvnu4UcaE",
          "type": "section",
          "title": "Algorithms",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now you have learned all the basics of a programming language\\! Now that you have a solid foundation it's time to put your skills to the test solving some algorithms. These will be simple, and increasingly more challenging, problems that require you to write a function to perform some specific operation or algorithm. To solve them, you will need to have a firm grasp of all the basic programming concepts: conditional statements, loops, data structures, functions, and so on.\n\nSolving a number of questions like this is the best way to build up your programming skills and become confident in your abilities."
        },
        {
          "id": "9wRw1y5V",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section, you will tackle building your first programs\\! Get ready for this important milestone\\!"
        },
        {
          "id": "zweKy6cg",
          "type": "typescript",
          "title": "Tic Tac Toe",
          "instructions": "In this project, we will build Tic\\-Tac\\-Toe as a simple TypeScript program.\n\nIn the editor, you will find several types defined which present the players and game classes for a Tic\\-Tac\\-Toe game. There are also two TypeScript classes `GamePlayer` and `Game` which contain partially implemented methods.\n\nYour job is to complete the implementation of these methods \\(use the type definitions and comments as a reference\\) so that the `Game` class method `playGame` can run an entire round of Tic\\-Tac\\-Toe\\!\n\nThe `playGame` method accepts the two players in the game and executes the game logic \\(this is what you have to implement\\!\\) until a winner is reached, or the game results in a tie. This method should return the game result.\n\nGood luck\\!",
          "testCode": "// test('message', () => expect(...))\ntest(\"The game should conclude and playGame should return the winner\", () => {\n    const board = [\n        [null, null, null],\n        [null, null, null],\n        [null, null, null],\n    ];\n\n    const human = new GamePlayer(\"human\");\n    const machine = new GamePlayer(\"machine\");\n    const game = new Game(board);\n    const winner = game.playGame(human, machine);\n    expect(winner).toBe(\"human\");\n});",
          "videoUrl": "",
          "starterCode": "// Player types\ntype Human = \"human\";\ntype Machine = \"machine\";\ntype Player = Machine | Human;\n\n// Game types\ntype Tile = Player | null;\ntype Board = Tile[][];\ntype GameResult = Player | \"tie\";\n\ninterface TicTacToePlayer {\n    play: (board: Board) => Board;\n}\n\nclass GamePlayer implements TicTacToePlayer {\n    player: Player;\n\n    constructor(player: Player) {\n        this.player = player;\n    }\n\n    play(board: Board): Board {\n        // This method takes a game board and makes a move. Where will you play?\n        // [TODO]: Your code here:\n        return [];\n    }\n}\n\ninterface TicTacToeGame {\n    board: Board;\n    checkBoard: (board: Board) => GameResult | null;\n    playGame: (humanPlayer: TicTacToePlayer, machinePlayer: TicTacToePlayer) => GameResult;\n}\n\nclass Game implements TicTacToeGame {\n    board: Board;\n    constructor(board: Board) {\n        this.board = board;\n    }\n\n    checkBoard(board: Board): GameResult | null {\n        // This method checks the game board and returns a GameResult when the game\n        // is concluded, or null if the game is still in progress.\n        // [TODO]: Your code here:\n        return null;\n    }\n\n    playGame(humanPlayer: TicTacToePlayer, machinePlayer: TicTacToePlayer): GameResult {\n        // This method executes the game logic!\n        // [TODO]: Your code here:\n        return \"tie\";\n    }\n\n    printBoard() {\n        for (const row of this.board) {\n            console.log(row);\n        }\n    }\n}\n",
          "solutionCode": "/**\n * Define Game Types:\n */\n\ntype Machine = \"machine\";\ntype Human = \"human\";\ntype Player = Machine | Human;\ntype Tile = Player | null;\ntype Board = Tile[][];\ntype GameResult = Player | \"tie\";\n\n/**\n * Create Player and Game classes:\n */\n\n\ninterface TicTacToePlayer {\n    play: (board: Board) => Board;\n}\n\nclass GamePlayer implements TicTacToePlayer {\n    player: Player;\n\n    constructor(player: Player) {\n        this.player = player;\n    }\n\n    play(board: Board): Board {\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board.length; j++) {\n                const tile = board[i][j];\n                if (tile === null) {\n                    board[i][j] = this.player;\n                    return board;\n                }\n            }\n        }\n    }\n}\n\ninterface TicTacToeGame {\n    board: Board;\n    checkBoard: (board: Board) => GameResult | null;\n    playGame: (humanPlayer: TicTacToePlayer, machinePlayer: TicTacToePlayer) => GameResult;\n}\n\nclass Game implements TicTacToeGame {\n    board: Board;\n    constructor(board: Board) {\n        this.board = board;\n    }\n\n    checkBoard(board: Board): GameResult | null {\n        const countNulls = (board: Board) => {\n            const nulls = board.reduce((nullCount, row) => row.reduce((c, x) => x === null ? c + 1 : c, 0), 0);\n            if (nulls === 0) {\n                return \"tie!\";\n            }\n        }\n\n        const checkRows = (rowIndex: number = 0) => {\n            const [left, middle, right] = board[rowIndex];\n            if (left === middle && middle === right) {\n                if (left !== null) {\n                    return left;\n                } else if (rowIndex < board.length - 1) {\n                    return checkRows(rowIndex + 1);\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        const checkColumns = (columnIndex: number = 0) => {\n            const top = board[0][columnIndex];\n            const middle = board[1][columnIndex];\n            const bottom = board[2][columnIndex];\n\n            if (top === middle && middle === bottom) {\n                if (top !== null) {\n                    return top;\n                } else if (columnIndex < board[0].length - 1) {\n                    return checkColumns(columnIndex + 1);\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        let winner = null;\n\n        // Check rows\n        winner = checkRows();\n        if (winner) {\n            return winner;\n        }\n\n        // Check columns\n        winner = checkColumns();\n        if (winner) {\n            return winner;\n        }\n\n        // Get coordinates for diagonal tiles\n        const topLeft = board[0][0];\n        const topRight = board[0][2];\n        const middle = board[0][0];\n        const bottomLeft = board[2][0];\n        const bottomRight = board[2][2];\n\n        // Check top left to bottom right diagonal\n        if (topLeft === middle && middle === bottomLeft) {\n            if (topLeft !== null) {\n                return topLeft;\n            }\n        }\n\n        // Check bottom left to top right diagonal\n        if (bottomLeft === middle && middle === topRight) {\n            if (bottomLeft !== null) {\n                return bottomLeft;\n            }\n        }\n\n        return null;\n    }\n\n    turn(player: TicTacToePlayer, nextPlayer: TicTacToePlayer): GameResult {\n        player.play(this.board);\n        const winner = this.checkBoard(this.board);\n        if (winner !== null) {\n            return winner;\n        } else {\n            return this.turn(nextPlayer, player);\n        }\n    }\n\n    playGame(humanPlayer: TicTacToePlayer, machinePlayer: TicTacToePlayer): GameResult {\n        return this.turn(humanPlayer, machinePlayer);\n    }\n\n    printBoard() {\n        for (const row of this.board) {\n            console.log(row);\n        }\n    }\n}\n\n/**\n * Instantiate game pieces:\n */\n\nconst board = [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n];\n\nconst human = new GamePlayer(\"human\");\nconst machine = new GamePlayer(\"machine\");\nconst game = new Game(board);\n\n/**\n * Play the game1\n */\n\nconst winner = game.playGame(human, machine);\ngame.printBoard();\n",
          "content": ""
        },
        {
          "id": "f6WLLWRXf",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section we will present guided project explanations for the programming project challenges. These are meant to serve as an illustration of what a solution to these projects can look like. Ideally, you should try to view these after solving the project yourself. However, if you have struggled with the project and cannot complete it after multiple attempts you are welcome to view the guided project to find a way to solve it."
        },
        {
          "id": "CktrOyVg",
          "type": "media",
          "title": "Tic Tac Toe Guided Project",
          "instructions": "ic",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will walk through an example of how the Tic Tac Toe project could be built."
        }
      ]
    },
    {
      "free": false,
      "id": "4IXSqQMi",
      "title": "Developer Workflow",
      "challenges": [
        {
          "free": true,
          "id": "3a4-HU8P",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module, you will learn about a standard developer workflow practices, tools, and techniques. You will learn how to use version control software such as Git, code editing tools like VS Code, and team collaboration tools like GitHub."
        },
        {
          "id": "$EcZq5Ecg",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section, you will learn how to build applications on your own computer\\! You will learn how to download the software you need, manage a codebase using version control, Git, and GitHub, and deploy your software projects for the world to see\\!"
        },
        {
          "id": "s2smKN6w6",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section we will present some guided explanations for building and deploying your own applications."
        },
        {
          "id": "l$ZcH5bp5",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here is the special topics section for Developer Workflow where we will cover some additional content you may find interesting. Remember, the special topics contain optional material, but are recommended\\!"
        }
      ]
    },
    {
      "free": false,
      "id": "N3xExLt4",
      "title": "Async Programming & APIs",
      "challenges": [
        {
          "free": true,
          "id": "SfvRE0Ai",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Asynchronous or \"async\" programming introduces the concept of _time_ into a computer program. Computer executes programs sequentially, line by line, in the exact order they were written. However, sometimes an operation has to make a request to some other software program, or another computer, and it must wait for the \"next instruction\" before it can continue.\n\nFor instance, perhaps a user submits an order to buy a product online. The order must be sent to a server and processed. It could fail\\! The client application \\(a webpage, a mobile app, etc.\\) must _wait for the response_ from the request before it can proceed. Depending on the response, the program may take different actions.\n\nThis is what \"async\" programming refers to. More generally, it refers to the concept in programming of allowing units of work to be separated and run in parallel. The e\\-commerce app in the above example could still function and perform other tasks if necessary while waiting for the transaction to succeed or fail.\n\nHere's an example of a simple asynchronous program in TypeScript:\n\n```typescript\n// Define an interface for products\ninterface Product {\n    id: string;\n    amount: number;\n}\n\n// Submit a transaction to buy a product\nconst submitTransaction = async (product: Product) => {\n    try {\n        // Send request to the server API\n        const result = await API.sendBuyRequestToServer(product);\n        return result;\n    } catch (err) {\n        return \"Request failed!\";\n    }\n};\n\n// Create a product\nconst pairwise: Product = {\n    id: \"sad98f7\",\n    amount: 5.00,\n}\n\n// Submit a purchase request for the product\nconst purchaseResult = submitTransaction(pairwise);\n\n// See the result\nconsole.log(purchaseResult);\n\n\n```\n\nTry to read through the code, but don't worry if you don't understand all of it\\!\n\nThe last thing to mention in this introduction is the idea of an _API\\._ This stands for \"Application Programming Interface\" and it's a big phrase to refer to something simple: the rules for talking to a program from the outside.\n\nProgramming languages define strict rules for how to communicate instructions to computers. Computer programs must also define strict rules if other computer programs can interact with them. That's all an API is. An API defines the rules for how you can make requests to another program.\n\nFor example, in our hypothetical e\\-commerce store above, the server presents some API which allows you to purchase a product. This API requires a `Product` with an `id` and `amount`, and in the example is represented by the function `API.sendBuyRequestToServer`. In a real program, this function would make a network request to a server. Some seconds would pass while this is happening, before the result comes back and the program continues executing.\n\nYou will find that APIs and asynchronous programming are indispensable for building modern software applications. Apps simply just have to talk to other apps to get data and perform actions\\! This module is all about teaching you how to write asynchronous code and interact with APIs. Let's get started\\!"
        },
        {
          "id": "Ak2JW7U45",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now we will build some simple projects which make use of your new asynchronous programming abilities\\!"
        },
        {
          "id": "zq3sEi606",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will walk through some guided explanations of building and working with APIs. This should give you a sense of how these skills can be applied in the real\\-world applications."
        },
        {
          "id": "WdG@C4ceE",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "As a programmer you will spend a lot of time working with and debugging asynchronous code. In these special topics, we will try to cover some more esoteric and advanced material related to writing asynchronous code and working with APIs to make you a more effective software developer."
        }
      ]
    },
    {
      "free": false,
      "id": "ZdkSjC9P",
      "title": "UI Programming",
      "challenges": [
        {
          "free": true,
          "id": "TpAkjWcr",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "### Congratulations\\!\n\nNow you have learned all of the fundamental basics of programming. You know the ins and outs of a popular programming language, you have a set of tools to work as a modern developer, and you understand how to write code which interacts with other computer systems. This is an important milestone in your learning journey\\!\n\nWhat you have learned so far will be transferrable to any other programming language you decide to learn in the future\\! Take a moment to congratulate yourself, and get ready to dive further down the rabbit hole.\n---\n\n### Enter React\n\nNow we will embark on the journey of the learning numerous tools, libraries, and frameworks which will equip you to build modern, real\\-world applications. Software engineers do not write everything from scratch. Instead, they use existing software as much as possible. React is the first tool like this for you to learn.\n\nReact is a library for building user interfaces.\n\nThe site you are looking at right now is built with React. React is built and open sourced by Facebook, and if you use any of the Facebook products you have used applications powered by React. React is very popular and the leading choice for building user interfaces. In the software development industry, React is one of the most in demand skills. In addition, it's very versatile. You can write web apps, mobile apps, and even desktop apps using React.\n\nBut what is a user interface library, exactly?\n\nIt's a tool which let's you build the frontend, or user interface, of an application very easily. It provides abstractions to handle common tasks and operations efficiently, safely, and easily. For example, consider this code:\n\n```typescript\nconst Greeting = (name?: string) => {\n    return (\n        <div>\n            <h1>\n                {name ? `Hello, ${name}` : \"Hello and welcome!\"}\n            </h1>\n        </div>\n    );\n};\n\n```\n\nThis code may look strange, and slightly \\(un\\)familiar to you. It may look like TypeScript. Or it may remind you of HTML. Or it may resemble a mishmash of both together. Well, it's exactly that\\! Another name for it is JSX \\(a syntax extension of JavaScript\\), but you will come to recognize this simply as _React\\._\n\nWhat it does is simple. It's a function which greets you by `name`, if you provide the function with a `name` argument, otherwise it displays a default greeting. React allows you to build HTML directly with the power of a programming language.\n\nIn this module, we will learn all about it\\!"
        },
        {
          "id": "50f7f8sUV",
          "type": "react",
          "title": "Create a Controlled Input",
          "instructions": "There is a React Component below. Complete it so in includes a controlled input which allows user's to type.",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface IState {\n  value: string;\n}\n\nclass App extends React.Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render(): JSX.Element {\n    const welcome: string = \"Hello, React!\";\n    console.log(\"Hello from the iframe!!!\");\n    return (\n      <div>\n        <h1>{welcome}</h1>\n        <input />\n      </div>\n    );\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface IState {\n  value: string;\n}\n\nclass App extends React.Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render(): JSX.Element {\n    const welcome: string = \"Hello, React!\";\n    console.log(\"Hello from the iframe!!!\");\n    return (\n      <div>\n        <h1>{welcome}</h1>\n        <input value={this.state.value} onChange={this.handleChange} />\n      </div>\n    );\n  }\n\n  handleChange = (e: any) => {\n    this.setState({ value: e.target.value });\n  };\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));",
          "testCode": "test(\"Renders a <h1> tag with the text 'Hello, React!'\", () => {\n  const container = document.createElement(\"div\");\n  ReactTestUtils.act(() => {\n    ReactDOM.render(<Main />, container);\n  });\n  const label = container.querySelector(\"h1\");\n  return label.textContent === \"Hello, React!\";\n});\n\ntest(\"Renders a controlled <input /> using React state\", () => {\n  const container = document.createElement(\"div\");\n  ReactTestUtils.act(() => {\n    ReactDOM.render(<Main />, container);\n  });\n  const inputEl = container.querySelector(\"input\");\n  const testValue = \"giraffe\";\n  ReactTestUtils.Simulate.change(inputEl, { target: { value: testValue } });\n  return inputEl.value === testValue;\n});\n",
          "content": "Placeholder supplementary content..."
        },
        {
          "id": "wmBDaJz5Q",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In the React projects section you will build some real\\-world projects using React. Get ready, this will be your first major projects to showcase in your portfolio\\!"
        },
        {
          "id": "O1AV1pQs@",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now that you've had some experience building UIs with React, we will walk through some example projects which use React to build complex frontend web applications. This should give you a sense of what production React applications look like and how more complex applications can be designed."
        },
        {
          "id": "iJAcbGybh",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "One of the reasons for React's success is its simplicity. Then again, over last few years React has become a broad topic. Even the React library itself has become more complicated with newer features like Hooks and Suspense.\n\nIn these special topics lessons, we will cover some of the more advanced features of React, in addition to other supplementary topics related to frontend app architecture and technology trends."
        }
      ]
    },
    {
      "free": false,
      "id": "EmSvFhW8",
      "title": "Server Programming",
      "challenges": [
        {
          "free": true,
          "id": "kUvFiQmw",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "To build a fullstack application you need two pieces: a frontend and backend. You've already learned how to build a frontend user interface with React \\- now we will dive into building servers on the backend.\n\nA server fulfills the role of handling requests from applications and storing application data. For instance, the server for Pairwise receives numerous requests as you work through the course. The client frontend sends updates on your progress which the server processes and records. When you signup and login the server handles these requests and creates a user entry for you in a database which the server can access. It stores your progress in association with this user. And, it does this for all the users who access Pairwise. The server is \\(should be\\) always available to handle requests from client applications.\n\nServers may seem daunting\\! But don't worry, they are just computer programs and you learned everything you need to write computer programs in the first course modules. Servers are just composed of functions, classes, and data structures.\n\nIn general, a typical server exposes an API for clients to send it requests. It then has a layer of business logic which handles processing client requests, storing and updating data. Then, finally, it has another layer which is responsible for interacting with a database and persisting or retrieving data.\n\nAs you might imagine, there are many tools and libraries for writing server applications which provide some of the common scaffolding and features modern servers require.\n\nIn this module, we will learn about some of these tools and get some practice building and thinking about some of the common components servers use. By the end you will be writing and deploying your own servers. Get excited, let's go\\!"
        },
        {
          "id": "WkU2mKHxZ",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "For these projects we will actually write and deploy a server application. Get ready, this is going to be fun\\!"
        },
        {
          "id": "OWwTKTH@c",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this section we will walk through some projects which illustrate the backend engineering principles you have learned in some sample production applications."
        },
        {
          "id": "hY2nZf$si",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The world of building severs is vast and fascinating. There are many topics to learn about, from design patterns to scaling to security and so on and so forth. We will try to give you a taste of some of these different topics here, to broaden your  knowledge and give you an idea of how diverse and deep the world of backend development is."
        }
      ]
    },
    {
      "free": false,
      "id": "f0pDYSOV",
      "title": "Databases",
      "challenges": [
        {
          "free": true,
          "id": "LO2nn_8O",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module you will learn about databases, the technology responsible for storing all of the data used by modern software applications. Databases are crucial to building modern software applications. They are responsible for storing and backing up the data which makes your applications valuable. Whether it's user profiles, chat messages, transaction records, inventory, or anything else, these are all stored and persisted in a database.\n\nAt a basic level, a database is just a hard disk on a computer where information is stored. As we will see, there are several different types of databases, which are all used for different purposes. Like many things in software engineering, there are tradeoffs to choosing one database type over another.\n\nThe two most common types of databases are relational and non\\-relational. SQL is the canonical relational database, which you may have heard of before.  A SQL database defines a strict schema for what data and relationships between data look like. If you are using a SQL database you can rely on the database schema to enforce integrity for your data.\n\nOn the other hand, a non\\-relational database doesn't have a strict schema like a SQL database does. Non\\-relational databases are great when you have unstructured data, data in inconsistent formats, data with an unknown format, or other types of flexible requirements. Common non\\-relational databases are MongoDB and Redis, along with several others.\n\nIn this module, we will learn the basics for these different types of databases and get some practice working directly writing, reading, and updating data. This will give you the core skillset required to build a CRUD app \\(Create Read Update Delete\\).\n\nLet's get started\\!"
        },
        {
          "id": "K9UYTfwcy",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "It's time to start using some real databases\\! In these projects you will build simple applications which interact with a real, live database\\!"
        },
        {
          "id": "gRGsfvdMM",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will see some examples of projects which use databases. This should give you some idea of the more complex applications of databases which can exist in real applications."
        },
        {
          "id": "qe2LFM0mp",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these special topics we will cover a lot of supplementary topics related to databases. As you might guess database engineering is a broad and vast topic, with a lot of room for specialization. Here, we will cover some other popular database technologies and discuss other topics such as performance and scalability."
        }
      ]
    },
    {
      "free": false,
      "id": "D1JR2EXa",
      "title": "Mobile",
      "challenges": [
        {
          "free": true,
          "id": "BfciawyS",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module you will learn the basics of programming mobile apps. Specifically, you will learn React Native, a cross\\-platform technology which allows developers to build iOS and Android apps with a single codebase.\n\n### The History\n\nFirst, a quick word of introduction and history about mobile apps.\n\nMobile apps began to exist with the invention of the iPhone in 2007. Since then, smart phones and mobile apps have grown tremendously. Traditionally mobile app development has required app developers to develop separate applications for different platforms. This is because the dominant platforms, iOS and Android, are totally different and therefore apps on these platforms are built using different technologies and programming languages which are specialized for those devices.\n\nTraditionally, \"native\" mobile apps are written using Objective\\-C or Swift on iOS, and Java or Kotlin on Android. However, product teams want their apps to provide a consistent experience across both platforms, but this can be challenging for engineering teams which must build and maintain completely separate codebases in different languages which attempt to duplicate the same features, functionality, and user experiences on multiple devices.\n\nIt breaks one of the fundamental rules of programming: **Don't Repeat Yourself.**\n\n### Cross Platform Mobile Frameworks\n\nIn the past few years, several \"cross\\-platform frameworks\" have emerged which allow developers to write mobile apps using a single codebase and language. These apps are then compiled to run on the specific target device, whether that is iOS or Android, or some other target.\n\nThis provides huge benefits: engineering teams can focus on maintaining a single codebase which runs on both platforms. Product teams can move more quickly iterating product ideas and building new features. However, the drawback is that these frameworks tend to experience some disadvantages compared to writing a native app. For instance, native apps tend to have better performance, more seamless user device interactions, and can use some native device APIs more effectively.\n\n### React Native\n\nThat being said, there is still a strong shift in the adoption of cross\\-platform frameworks for mobile app development. As you may know, there is a framework which allows you to write mobile apps using React called _React Native_. It works by running a JavaScript application \\(i.e. React\\) directly on the mobile device and then transforming React's UI updates to update the UI on the phone \\(instead of the HTML UI of a webpage\\). Don't worry about the complexities of how it works right now, we can cover that in a special topic lesson later. The beautiful thing is you don't have to understand the implementation details in order to use the framework effectively.\n\nThere are also a few other frameworks like React Native, another popular one is Flutter.\n\n### This Module\n\nHere, we will get some experience with React Native. You will find that writing React Native apps requires learning almost nothing new if you already know React\\! This is really powerful. There are some specific device APIs which exist for mobile apps which are not present on the web, but other than that your existing knowledge is fully transferrable to the world of mobile.\n\nLet's start writing some mobile apps\\!"
        },
        {
          "id": "6D9jc3AZi",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Now we will get some experience building and deploying your own mobile apps\\! You can install these on your own mobile phone and use them wherever you go. "
        },
        {
          "id": "fo@lZIRdV",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will walk through an example app build with React Native so you can see clearly what the full workflow looks like for building, developing, and deploying a mobile app built with React Native."
        },
        {
          "id": "YL1saaMKQ",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will cover some other topics related to mobile app development. For instance, we will discuss some details about how React Native works and also touch on other cross platform frameworks such as Flutter."
        }
      ]
    },
    {
      "free": false,
      "id": "ZzVuDVNP",
      "title": "Testing & Automation",
      "challenges": [
        {
          "free": true,
          "id": "s_p7YnS0",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module you will learn about how to test software and automate common tasks in order to improve productivity. The idea of testing software is to create automated tests which will verify your software performs correctly and provides the functionality users expect. The value of tests is to give teams confidence to ship changes to software projects and know that their changes did not break some existing behavior or feature.\n\n### Regressions\n\nRegressions occur when you change some code and something totally seemingly unrelated breaks. If you continue on your journey of learning to code you will definitely experience it one day. Regressions happen like this:\n\n* You spend 3 weeks building a new feature in a product to let users post comments on some posts.\n* You ship the feature.\n* The next day at work, someone asks \"Hey, is the user login broken?\"\n* You sit still and start listening and thinking, nervous.\n* You didn't touch the user login, you probably didn't break it.... you say to yourself.\n* Someone else confirms: \"Yes, it appears to be broken\".\n* \"What happened\"? Another person says.\n* ... You are frozen now.\n* A while later, it is discovered how your new feature inadvertently broke the user login.\n* You rush to try to fix the problem and deploy an update to production.\n\n\n### Best Practice Testing\n\nThis is a regression, is this is exactly the type of thing software testing is intended to prevent. Ideally, a best practice workflow would look like this:\n\n* You build the feature.\n* You open a pull request to merge your feature into the main branch of your team's codebase.\n* Automated tests run to check the code on your feature branch.\n* The tests check the user login feature, and the tests fail.\n* You immediately see feedback that the user login is broken on your branch.\n* You debug the problem and fix it.\n* You update your branch, the tests run again and pass.\n* All of this happens in a safe testing environment, doesn't impact any users, and doesn't require any manual human interaction.\n* You ship your feature, and this time sleep peacefully at night knowing the code works and will not cause any fires in production.\n\n\nThe hard part, of course, is writing tests which truly verify an application's intended functionality works correctly. You will find that it's impossible to test all the ways a user could think of to break an application. And, it's important that tests are easy to read, write, understand, in addition to being simple and fast to run. You don't want to spend more time working on tests than you do building the business logic which supports your product.\n\n### Automation\n\nThis module will walk through a lot of techniques for testing software and also touch on a related topic: automation. Automation is the powerful idea of making commands do mundane and repetitive tasks for you. It has endless advantages and software is a perfect tool for automation. Computers are just really good at doing the same thing over and over and following instructions perfectly\\!\n\nLearning how to automate tasks is a force\\-multiplier skill for software engineers and very important to learn. In this module we will get some practice automating tasks and learning about common ways automation is used in the software development process."
        },
        {
          "id": "Ov5j345Hw",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The projects for this module will give you some experience writing your own tests, debugging tests, and building some simple automation tools. Get ready, you will enjoy this\\!"
        },
        {
          "id": "Qb@0mALhz",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will show you how the Pairwise application is tested\\! We have built an extensive suite of tests which continuously run throughout our development workflow to ensure the important features of the platform continue working correctly. This allows us to confidently push updates and new features quickly and on a routine basis\\!"
        },
        {
          "id": "mqUy13W10",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these special topics we will cover some additional topics related to testing software and automation. There are many tools and skills which are useful to learn or be aware of in this area. Here we will cover some of these, and also present some fascinating debugging war stories."
        }
      ]
    },
    {
      "free": false,
      "id": "qV7cPqG1",
      "title": "Debugging & Refactoring",
      "challenges": [
        {
          "free": true,
          "id": "cBlWsqgO",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "You probably have some sense of how to debug and refactor code if you've made it this far in the course. Refactoring, if the term isn't familiar to you, is just the process of revisiting some previously written code and re\\-writing it to improve the organization, readability, or maintainability of the code \\- or, just to fix bugs or errors.\n\nAs you move forward as a developer, you will start to observe that code becomes legacy code immediately once it is written, and legacy is often prone to bugs and errors and in need of refactoring. As it terms out, the skills of debugging and refactoring are indispensable for software developers. They are as important as writing code correctly from scratch.\n\nIn this module, we will equip you with tools and techniques which will make you more effective at debugging code, and we will walk through some strategies for refactoring code as well. In addition, we will provide a number of challenges were there is some mistake in the code that you must find, debug and fix. There will be other challenges to give you specific practice refactoring existing code to change the design or organization.\n\nLet's dive in\\!"
        },
        {
          "id": "C3aOJmAu3",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "There are two projects for this section. The first will have you download the source code for a project and debug some failing tests. The second involves revisiting one of your previously completed projects and refactoring the code based on what you have learned so far in this module."
        },
        {
          "id": "5iJetMlK0",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here we will walk through a real\\-world example of debugging errors in production and refactoring an application to avoid the errors in the future."
        },
        {
          "id": "j@5yd8P9$",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these special topics, we will demonstrate some other techniques for debugging code and present some fascinating debugging war stories. We're sure you will enjoy\\!"
        }
      ]
    },
    {
      "free": false,
      "id": "G8v0iMpm",
      "title": "Delivery & Deployment",
      "challenges": [
        {
          "free": true,
          "id": "Vy435oZN",
          "type": "section",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this module, you will learn about how modern software is deployed and delivered to users. This is one of the last important topics on your journey to becoming a software engineer\\!\n\nIt's not enough to just write your apps, you have to still deploy them so users can access them\\! This can be a lot more complicated than you may think at first.\n\nYour client application must be hosted somewhere so it can be served quickly to your users when they visit a page and make a request for your app.\n\nYour server must be deployed in the cloud somewhere, possibly with multiple instances running. You need to have monitoring, alerting, and logging so you know if your server encounters any issues, failures, or errors. Maybe you also need rate limiting, caching, and other configuration and setup.\n\nYou database must be deployed, backed up, and possibly supplied with read replicas for performance. It should be secure and only accessible by your production server or possibly administrator users.\n\nAnd that's just a very simple setup\\!\n\nFinally, as your team makes changes to your applications updates should be delivered and deployed to your production system continuously. You never want to hit a big red \"Deploy the App\" button. Ideally, deployments ship continuously as you merge code, tests run automatically and stop deployments when they fail, and your technical team can focus their efforts on building business logic and features rather than fighting fires or troubleshooting manual deployment nightmare scenarios.\n\nAs you can start to see... this world of \"devops\" \\(developer operations\\) is a lot more complex than it may seem at first. That's why it is such an important skillset to be familiar with as a developer. Having an effective devops and infrastructure setup can make the difference between a team being agile, shipping quickly, and out\\-running their competition and a team which is constantly fighting fires and afraid to deploy any new code because of regressions and brittle build pipelines.\n\nLet's get started\\!"
        },
        {
          "id": "3odGQPJTI",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these projects we will put to practice some of the principles you have just learned. In fact, you already have experience with deploying software because you have been deploying your projects for your portfolio from the very beginning.\n\nHere, we will apply some of the devops best practices we have learned to some of your deployed projects."
        },
        {
          "id": "qVh4wMjVh",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In this guided project, we will walk through more complex examples of devops setups in production applications. This should illustrate some devops principles in practice and give you more familiarity with why devops is important for software developers to understand."
        },
        {
          "id": "GzyZTY8jb",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "In these special topics we will start to delve into the vast world of devops, infrastructure, and software deployment. Modern, secure, applications at scale require very complex infrastructure setups so they can be highly available, reliable, and fault\\-tolerant for users. In these lessons, we will try to illustrate what devops looks like for more complex systems and introduce some more advanced technologies, such as Docker, Kubernetes, Chef, Terraform, and others.\n\nDon't worry if these seem over your head\\! It's enough at this stage to just have a rough understanding of what these technologies are and why they are useful for production systems."
        }
      ]
    },
    {
      "free": false,
      "id": "GgP1rkAa",
      "title": "Capstone Project",
      "challenges": [
        {
          "free": true,
          "id": "Oe15TzrQ",
          "type": "media",
          "title": "Intro",
          "instructions": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Congratulations\\! You have completed all the course material and you're not ready to get your hands dirty building real world applications\\! You are definitely ready for a job, but you still need a portfolio of rockstar projects to prove it to your future employer. That's what this section is all about: letting you loose to build some amazing projects to impress everyone around you. Let's get started\\!"
        },
        {
          "id": "NTkZ2fFGp",
          "type": "section",
          "title": "Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "The projects in this final section are fullstack applications which will really test your abilities as a programmer\\! These projects are the culmination of all of the hard work and practice you have put in to work to this point.\n\nThese projects will be challenging, but if you can complete them they will give you a portfolio which will really standout and they will prove that you have acquired all the skills necessary to work as a software developer."
        },
        {
          "id": "379M1tAlW",
          "type": "section",
          "title": "Guided Projects",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Here, at the very end we present a guided walkthrough of a fullstack application which can illustrate how all the principles and skills you have learned in this course fit together to create a working product."
        },
        {
          "id": "DVy0PqE5j",
          "type": "section",
          "title": "Special Topics",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"Write your test assertion here\", () => {\n  expect(true).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "✨ Congratulations on making it this far\\!\\!\\! ✨\n\nIn this final special topics series we will present summary content, wisdom, reflections, meta\\-content, and other parting advice for you on your journey as a software developer.\n\nHere we will discuss how to get a job as a developer, how to navigate the application and interview process, how to negotiate and understand job offers, and the overall job market. We will also address some trends and predictions in the software industry, and touch on a few other skills and technologies that you might find interesting to extend your learning journey with.\n\nWith these lessons in hand, you will be 100% equipped to go out into the world and get your first job\\! Your first team will be impressed by the depth and breadth of your knowledge.\n\nSincere congratulations from all of us at Pairwise for reaching this point\\! 💫⭐️🌟"
        }
      ]
    }
  ]
}