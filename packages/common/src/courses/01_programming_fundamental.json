{
  "id": "fpvPtfu7s",
  "title": "Fullstack TypeScript",
  "description": "Learn how to build web and mobile apps using TypeScript, React, and NodeJS.",
  "modules": [
    {
      "free": true,
      "id": "mKcs4ySy",
      "title": "Welcome to Pairwise",
      "challenges": [
        {
          "id": "yxZjmD0o",
          "type": "media",
          "title": "Welcome to Pairwise",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "We're glad to have ya! We haven't written any content here yet so go ahead and jump to the next challenge."
        }
      ]
    },
    {
      "free": true,
      "id": "fpvPtNWkC",
      "title": "HTML & CSS",
      "challenges": [
        {
          "id": "IEC6FcKI",
          "type": "media",
          "title": "Introduction",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "Welcome to module 1\\! Where we'll be using HTML, CSS and TypeScript to dive into the basics of programming.\n# What you will learn\n\n* Foundational programming skills like\n   * Variables\n   * Functions\n   * How computers represent information and what _types_ of information you can represent\n   * Data structure\n   * Algorithms\n* How to build your own website\n* How to put a website online\n\n\nThe challenges in this module will move fast and include a lot of video content. These are your first steps into the world of programming, and if you continue along this path you'll look back some day and remember where it all started: Right here\\!\n\nOnward\\."
        },
        {
          "id": "5ziJI35f",
          "type": "section",
          "title": "HTML, the language of the web",
          "content": "",
          "testCode": "[]",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "HTML is the reason there is anything online to look at. It's ubiquitous online because without it there would be nothing. When you visit Facebook or Google or Reddit you're reading HTML. You're reading HTML right now.\n# What is HTML?\n\nHTML is a language for putting content into web browsers and telling browsers what content means what. Consider the following items:\n\n* Some plain text\n* Some _bold italic_ text\n* Some `code` text\n\nIt's easy to tell the difference and that's the point. Different parts of a webpage mean different things, and as programmers we need a way of telling a web browser what's what.\n\nLet's take another example. Consider the list above. Howe does the browser know that its' a list? How does it know to include a small dot in front of the text? The answer is HTML. \n\nConsider what that three\\-item list looks like to you, the reader, and also consider what it looks like in code:\n\n```html\n<ul>\n  <li>Some plain text</li>\n  <li>\n    Some <strong><em>bold italic</em></strong> text\n  </li>\n  <li>Some <code>code</code> text</li>\n</ul>\n\n```\n\nIt looks quite different\\! The code above is what the browser sees. A `ul` with some `li`s inside tell the browser we want a list. Putting some text inside a `strong` and an `em` will make the text **bold** and _italic_ respectively\\. \n# Why are we learning HTML?\n\nA few reasons: \n\n* It's visual\n* It gives you real skills, quickly\n* It's foundational\n\n\nHere's what this in more detail.\n\n## 1\\. It's visual\n\nWhat you write in code will appear on screen. This is hugely important when you're first learning. Programmers specialize in telling computers what to do, and computers don't always give you visual feedback to let you know that your commands are achieving the desired result.\n\nThink about the clock on your phone. Seem simple right? It shows the time. It also adjusts for daylight savings time, or if you physically enter a different timezone. It can display the time in 24\\-hour format or AM\\-PM format. Consider this:\n\n* How does your phone know the time? \n* How does the clock update when daylight savings time shifts or when you step off of a plan? \n\n\nThis functionality, which we all take for granted, was programmed by someone. Imagine you are that person. If you program the phone to update its time based on your GPS location, how do you know it worked? There's no immediate visual feedback to tell you whether your code worked or not.\n\nIf you're writing HTML there is visual feedback, so you will know immediately if your code is doing what you want it to.\n\n## 2\\. It gives you real skills, quickly\n\nIf you learn the basics of HTML, guess what? You can make your own website. In fact, in this course we'll walk you through creating a website from scratch and getting it online for free. \n\nAt the end of this module you will be able to build something real, that you can see online and show to other people. In fact, using just the skills in this first module you can even build websites for other people and **get paid to do it**. There are many people around the world who make a living this way. \n\nOf course our goal is to give you the skills to be a full software engineer so we will go well beyond HTML. Which brings us to the final point...\n\n## 3\\. It's foundational\n\nHTML is everywhere, and not just on the web.\n\nConsider Facebook, Twitter, Reddit, Google, Amazon, Netflix, etc. These massive companies all rely on HTML. They all have mobile apps too, but the web component is a significant part of their business.\n\nConsider also that the principles you learn while building HTML can translate into mobile app development as well. We will touch on this significantly in later parts of the course. For now, let's focus on HTML and dive in.\n# HTML Syntax\n\n\n## Tags\n\nAll those things you saw in the code at the beginning of the lesson, `<ul>`, `<li>`, `<strong>`, etc. are called tags. Don't worry, you don't have to remember this yet, but you will over time because this is how programmers talk about HTML and how we walk about it in our videos. \n\n### Anatomy of an HTML tag\n\nTags usually have two parts:\n\n* The opening tag\n* The closing tag\n\nOpening tags include a `<` symbol, followed by the name of the tag, followed by the `>` symbol\\. Closing tags are almost exactly the same. The only difference is that closing tags have a `/` symbol right after the `<`. Example:\n\n* `<p>I'm a paragraph</p>`\n\n\nReading through one character at a time, the opening \"P tag\" is `<` \\+ `p` \\+ `>`. The closing P tag is `<` \\+ `/` \\+ `p` \\+ `>`. You can use this rule for every tag you write. \n\nHere are a few more examples. Try to see the pattern of opening `<` \\+ tag name \\+ `>` and closing `</` \\+ tag name \\+ `>`.\n\n* `<a>Link</a>`\n* `<button>Click me</button>`\n* `<h1>Heading text</h1>`\n\n\n### Self\\-closing tags\n\nNot all tags have to correspond to a closing tags. Sometimes it wouldn't make sense to have any text inside the tag. For example, a `<p>` means a paragraph so you would expect some text inside. However, an `<img>` tag means an image and a `<video>` means a video. When you see one of these tags the browser knows to show the actual image or the actual video that the tag corresponds to, so there is no need to write additional text inside the tag. This is also true of input fields, where you can type things in to a webpage. Ever logged in to a site? Yeah, like that.\n\nHere are some common tags that are self\\-closing. \n\n* `<img />`\n* `<video />`\n* `<input />`\n\n\nNotice the syntax here. It's like the opening tag and closing tag got smushed together because there's nothing in between:\n\n* `<img></img>` becomes `<img />`\n* `<video></video>` becomes `<video />`\n* `<input></input>` becomes `<input />`\n\n\n## Properties\n\nThe final piece before we dive in to some code\\! Properties tell the browser things about the tag itself. This will become more clear with examples. Consider the `<img />` tag mentioned above. That points to an image, but how does the browser now what image? With a property.\n\n```markup\n<img src=\"https://placekitten.com/g/200/200\" />\n\n```\n\nThe key above is the `src` property\\. The syntax for properties looks like: property name \\+ `=` \\+ `\"` \\+ property value \\+ `\"`. All of this goes inside the opening tag, which is the only tag if it's self\\-closing like the `<img />` above\\.\n\nNow consider another example, perhaps the single most important property in all of HTML. The `href`:\n\n```markup\n<a href=\"https://www.reddit.com/r/ProgrammerHumor/\">Don't click me if you value your time...</a>\n\n```\n\nThe `a` tag is the \"link\" on the web. It's what you click when after searching for something, or when shopping, or when doing research. It's a fundamental part of the web. Web pages include `a` tags which link to other pages. Without links the internet would just be a bunch of disperate web pages that you had to visit directly by typing the address into your browser. OK, back on topic.\n\nThe `href` property of the `a` tag tells the browser where to send someone when they click the link. \n\nThese examples are just meant to be an overview, in the coming challenges you'll use all these tags directly. There's no substitute for hands\\-on practice. Onward\\!"
        },
        {
          "id": "9scykDold",
          "type": "markup",
          "title": "Add a h1 Tag in HTML",
          "content": "There is some HTML below. You should add an <h1> tag with the text \"Hello!\" inside it.",
          "starterCode": "<p>This is an HTML file. Add your code below this line</p>",
          "solutionCode": "<p>This is an HTML file. Add your code below this line</p>\n<h1>Hello!</h1>",
          "testCode": "test(\"There should be an h1 tag with the text 'Hello!'\", () => {\n  expect(get(\"h1\").innerHTML).toBe(\"Hello!\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/LMrZDCjO_60",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "9scykdziW",
          "type": "markup",
          "title": "HTML Heading Tags",
          "content": "In the last challenge you added an h1 tag, which represents a \"heading 1\" tag in HTML. In total, there are six tags like this. As you might guess, the second heading tag looks like this: `<h2>`. In the editor below, add one of each heading tag. Each tag should contain some text, feel free to add any text you feel like inside the tags! When you are finished, take a look at the preview to the right to see the results!",
          "starterCode": "<h1>This is a heading 1 tag</h1>",
          "solutionCode": "<h1>This is a heading 1 tag</h1>\n<h2>This is a heading 1 tag</h2>\n<h3>This is a heading 1 tag</h3>\n<h4>This is a heading 1 tag</h4>\n<h5>This is a heading 1 tag</h5>\n<h6>This is a heading 1 tag</h6>",
          "testCode": "['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(tag => {\n    test(`There should be an ${tag} with text inside`, () => {\n        expect(typeof get(tag).innerHTML).toBe(\"string\")\n    })\n})\n",
          "videoUrl": "",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "9scykuYtf",
          "type": "markup",
          "title": "Nesting Tags",
          "content": "So far we have learned how to add some HTML tags to a document. HTML is pretty flexible, and you can also nest tags inside one another. Another tag we have not seen yet is the <b> tag, which makes text... bold! In the editor below, create a <p> tag with some text inside. Then, choose some part of the text and enclose it in a <b> tag to make it bold.",
          "starterCode": "",
          "solutionCode": "<p>This is a paragraph tag, <b>this is bold text inside it!</b></p>\n",
          "testCode": "test(\"There should be an p tag with text inside.\", () => {\n  const element = get(\"p\");\n  return typeof element.innerHTML === \"string\";\n});\n\ntest(\"There should be an b tag with text inside.\", () => {\n  const element = get(\"b\");\n  return typeof element.innerHTML === \"string\";\n});\n\ntest(\"The p tag should contain a b tag with text inside.\", () => {\n  expect(typeof get(\"p b\").innerHTML).toBe(\"string\");\n});\n",
          "videoUrl": "",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "ny51KoEI",
          "type": "markup",
          "title": "Style some text",
          "content": "* Change the color of the `<p>` tag to `red`\n* Change its text to `Exciting red text`\n\n\nIf you're unsure how to style things, that's fine\\! Check out the supplemental content for help.",
          "starterCode": "<style>\n  /* Your code here */\n</style>\n<p>Just plain text</p>\n",
          "solutionCode": "<!DOCTYPE html>\n<style>\n  p {\n    color: red;\n  }\n</style>\n<p>Exciting red text</p>\n",
          "testCode": "test(\"There should be a p tag with red text\", () => {\n  const el = get(\"p\");\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"red\"));\n});\n\ntest(\"There should be a <p> tag with the text 'Exciting red text'\", () => {\n  const el = get(\"p\");\n  expect(el.innerHTML).toBe(\"Exciting red text\");\n});\n",
          "videoUrl": "https://www.youtube.com/embed/MsaKKxVTsEk",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "CuwykKRM",
          "type": "media",
          "title": "Enter CSS",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "CSS stands for Cascading Style Sheets, but that's unimportant. What matters here is that what CSS is how you change the way things _look_ on the web.\n\nWhere HTML is the \"stuff\", the actual content on a webpage, CSS is how all that stuff looks. Is the background dark with light text \\(like what you're reading right now\\)? Is there a menu bar near the top? How does the form on screen try to grab your attention with color and positioning? These are all questions CSS can answer.\n\nTo be specific, CSS tells the browser two things:\n\n* What we want to style\n* What we want it to look like\n\n# Selectors\n\nSelectors tell the browser what you want to style.\n\nFor example, you might say to yourself \"I want all the paragraphs on my site to be red\\!\" A very elegant design decision. In order to communicate this to the browser we can use CSS:\n\n```css\np {\n  color: red;\n}\n\n```\n\nRemember the `<p>` tag from earlier lessons? Using the tagname, `p`, we were able to \"select\" every paragraph on the page and make them all red. In this example `p` is the selector. Now let's talk about what's inside those brackets.\n# Properties\n\nCSS properties tell the browser how you want something to look. Let's say you're tired of drab white\\-background websites and want to mix it up with a `teal` background\\.\n\n```css\nbody {\n  background: teal;\n}\n\n```\n\n`body` will select the entire visible area of the web page, but we will touch on that more later. Focus on `background: teal;`. Here we have another CSS property `background` with a value of `teal`.\n\n> CSS properties take the form: property name \\+ `:` \\+ property value \\+ `;`.\n\n`background` and `color` are just two examples. There are quite a few CSS properties you can use, and the combination of them is responsible for styling every site you use on the internet.\n\nIf you're curious you can skim through [the full list of CSS properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference), but we don't recommend it. It's a very dry read and by itself won't tell you what you really want to know which is what each property does. Furthermore, some CSS properties are so obscure that you can go your entire career without learning them on the job because they are just not useful in most context.\n# Blocks\n\nA \"block\" of CSS is simply the combination of selectors and properties. All the examples above are CSS blocks.\n\n> CSS blocks take the form: Selectors \\+ `{` \\+ properties \\+ `}`\n\nThese terms are not important for their own sake, but so that you aren't lost when you're working outside of this course. \n# The <style\\> tag connects HTML and CSS\n\nYou can't just write CSS anywhere in an HTML document and expect it to work. You have to write it **within a \\*\\***`style`**\\*\\* tag**. Like this:\n\n```html\n<style>\n  p { color: red; }\n</style>\n<p>Red text!</p>\n\n```\n\nIf you write that without the `style` tag the browser will literally put `p { color: red; }` on the page for everyone to see. By putting that CSS code within a `style` tag you are telling the browser to treat it as CSS rather than HTML.\n# Specificity and the HTML class and id props\n\nImagine you have two paragraphs, and you want one to be `red` and the other to be `blue`. How would you select just one? Here's the HTML:\n\n```html\n<p>I want a blue background</p>\n<p>I want a red background</p>\n\n```\n\nYou might try the following CSS:\n\n```\np { background: red; }\np { background: blue; }\n\n```\n\nHowever, both paragraphs will be `blue`\\! Why? Two things are happening here:\n\n1. `p` selects every `<p>` tag, not just the first or the second.\n1. When you have two identical selectors \\(`p` and `p` above\\) and two identical property names \\(`background` and `background` above\\) whichever one comes last wins.\n\nPoint 1 can be addressed with IDs and classes, which we will discuss shortly.\n\nPoint 2, how conflicting styles get applied by the browser, is called \"specificity\". As in, the second CSS block is considered more _specific_ than the first, and therefore it wins and gets applied.\n\n## IDs\n\nAn ID is a unique identifier in the browser and it can be used as a selector. \n\n* There should only be 1 of any ID on a web page.\n* IDs are very specific, meaning if you select an ID in your CSS that CSS will most likely win over other styles\n* HTML uses the `id` property, CSS uses the `#` selector\\.\n\n\n```html\n<style>\n  #my-paragraph { color: red; }\n  p { color: blue; }\n</style>\n<p id=\"my-paragraph\">Red text!</p>\n\n```\n\nEven though the `p` styles come last, the `#my-paragraph` styles get applied because they are more specific.\n\n> In general don't use IDs, use classes.\n\n## Classes\n\n* A class can be applied to as many things as you want.\n* Classes are more specific than tag names\n* HTML uses the `class` property, CSS uses the `.` selector\\.\n\n\n```markup\n<style>\n  .red-text { color: red; }\n  p { color: blue; }\n</style>\n<p class=\"red-text\">Red text!</p>\n\n```\n\nThe text is again red because classes are more specific than tag names.\n\n> Classes are extremely useful and flexible. Use them a lot.\n# More to come...\n\nThat's a lot of information, and mostly meaningless without practice. There's more to CSS which we will dive into later, but for now let's practice everything we just talked about."
        },
        {
          "id": "KlxN3f11",
          "type": "markup",
          "title": "Changing colors",
          "content": "* Change the background color so that it is `black`.\n* Change the text color of the `<p>` tags and the `<h1>` tag so that it is `white`.\n\nYour challenge is to invert the colors of the page. Instead of having black text on a white background let's have some white text on a black background. You will find the `background-color` and `color` CSS properties useful.",
          "testCode": "// test(\"The page background should be black.\", () => {\n//   const el = get(\"body\");\n//   expect(getStyle(el, \"background-color\")).toBe(cssColor(\"black\"));\n// });\n\ntest(\"The `<h1>` tag should be white.\", () => {\n  const el = get(\"h1\");\n  expect(el).toBeTruthy();\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"white\"));\n});\n\ntest(\"The `<p>` tag should be white.\", () => {\n  const els = getAll(\"p\");\n  els.forEach((el) => expect(getStyle(el, \"color\")).toBe(cssColor(\"white\")));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/7Xl0Acybsq8",
          "starterCode": "<!-- Put your code up here, above everything else. You will need a <style> tag -->\n<h1>Welcome to some text!</h1>\n<p>\n  Now we start the paragraphs! As you do more and more development you will\n  discover that there is a surprising amount of Latin online.\n</p>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nunc erat,\n  aliquet sed pellentesque ut, feugiat non orci. Nam consectetur egestas odio,\n  sed rutrum diam condimentum et. Nulla at cursus ante. Proin mollis lorem mi,\n  sit amet malesuada sem convallis sed. Nullam at lacus eget arcu facilisis\n  tempus vel viverra mauris. Nulla facilisi. Proin hendrerit ante a diam\n  sagittis, quis tristique sem facilisis. Sed sed viverra ante, in dignissim\n  neque.\n</p>\n\n<p>\n  Nullam id eros nec nunc euismod condimentum. Pellentesque habitant morbi\n  tristique senectus et netus et malesuada fames ac turpis egestas. Praesent sit\n  amet nulla libero. Pellentesque diam augue, condimentum eu convallis eu,\n  porttitor nec neque. Sed fringilla ipsum felis, ut rutrum lacus vehicula vel.\n  Nam et porta mauris. Suspendisse gravida ligula nec elit faucibus, et\n  ultricies lorem fermentum. Aliquam in erat a orci maximus aliquet vel id\n  risus. In tincidunt diam non lectus consequat, eu cursus nunc molestie. Duis\n  euismod turpis urna, a volutpat lorem condimentum ac. Suspendisse nec orci\n  dolor. Mauris eget pretium nulla. Donec convallis, elit a pellentesque\n  convallis, elit elit efficitur est, ut molestie justo sapien sed ligula.\n</p>\n",
          "solutionCode": "<style>\n    body {\n        background: #000000;\n    }\n    h1, p {\n        color: white;\n    }\n</style>\n<h1>Welcome to some text!</h1>\n<p>\n  Now we start the paragraphs! As you do more and more development you will\n  discover that there is a surprising amount of Latin online.\n</p>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nunc erat,\n  aliquet sed pellentesque ut, feugiat non orci. Nam consectetur egestas odio,\n  sed rutrum diam condimentum et. Nulla at cursus ante. Proin mollis lorem mi,\n  sit amet malesuada sem convallis sed. Nullam at lacus eget arcu facilisis\n  tempus vel viverra mauris. Nulla facilisi. Proin hendrerit ante a diam\n  sagittis, quis tristique sem facilisis. Sed sed viverra ante, in dignissim\n  neque.\n</p>\n\n<p>\n  Nullam id eros nec nunc euismod condimentum. Pellentesque habitant morbi\n  tristique senectus et netus et malesuada fames ac turpis egestas. Praesent sit\n  amet nulla libero. Pellentesque diam augue, condimentum eu convallis eu,\n  porttitor nec neque. Sed fringilla ipsum felis, ut rutrum lacus vehicula vel.\n  Nam et porta mauris. Suspendisse gravida ligula nec elit faucibus, et\n  ultricies lorem fermentum. Aliquam in erat a orci maximus aliquet vel id\n  risus. In tincidunt diam non lectus consequat, eu cursus nunc molestie. Duis\n  euismod turpis urna, a volutpat lorem condimentum ac. Suspendisse nec orci\n  dolor. Mauris eget pretium nulla. Donec convallis, elit a pellentesque\n  convallis, elit elit efficitur est, ut molestie justo sapien sed ligula.\n</p>\n",
          "supplementaryContent": "# The <body\\> tag\n\nI this lesson we touched on the `<body>` tag, which the browser will insert into the document for you if you don't do it yourself.\n# HTML colors\n\nIn HTML there are several ways to define colors. The most simple is what we've been doing so far, which is using colors that have names like `blue`, `red`, `black`, `green`, etc. However, if you had to rely on colors that have names you would be quite limited. HTML let's you define any custom color you want using some different syntax, namely HEX codes. For example, the color `white` can also be written `#ffffff`. Likewise `black` is `#000000` and `blue` is `#0000ff`. \n\nIn the meantime you can use named colors. There are quite a few, and often if you guess a color it will exist. You can see the full list here: <https://www.w3schools.com/colors/colors\\_names.asp\\>"
        },
        {
          "id": "wCrQh1f4",
          "type": "markup",
          "title": "Highlighting text",
          "content": "Use the `<span>` tag to highlight some text within the paragraph.\n\nSometimes you want to style parts of text _inside_ a paragraph or a heading. You can accomplish this with the span tag.",
          "starterCode": "<style>\n  span {\n    /* hm... need some styling in here */\n  }\n</style>\n<p>\n  What a paragraph this is! Let's highlight something.\n</p>",
          "solutionCode": "<style>\n  span {\n    background: yellow;\n  }\n</style>\n<p>What a paragraph this is! Let's <span>highlight</span> something.</p>",
          "testCode": "test(\"There should be a <span> tag with a yellow background wrapping some text\", function() {\n  const el = get(\"span\");\n  expect(el).toBeTruthy();\n  expect(el.innerHTML).not.toBe(\"\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"yellow\"));\n});\n",
          "videoUrl": "https://www.youtube.com/embed/fapBaduhIiY",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "5oqm6GmH",
          "type": "markup",
          "title": "The <div> tag — Putting Things in Boxes",
          "content": "* Give the page an `orange` background\n* Wrap the existing `<h1>` and `<p>` tags in a `<div>`\n* Style the div to have a `teal` background",
          "testCode": "test(\"There should be a div\", () => {\n  expect(get(\"div\")).toBeTruthy();\n});\n\ntest(\"The h1 and p tags are within the div\", () => {\n  expect(get(\"div h1\")).toBeTruthy();\n  expect(get(\"div p\")).toBeTruthy();\n});\n\ntest(\"Body should have orange background\", () => {\n  const body = get(\"body\");\n  const bg = getStyle(body, \"background-color\");\n  expect(\"rgb(255, 165, 0)\").toBe(bg);\n});\n\ntest(\"Div should have a teal background\", () => {\n  const el = get(\"div\");\n  const bg = getStyle(el, \"background-color\");\n  expect(\"rgb(0, 128, 128)\").toBe(bg);\n});\n",
          "videoUrl": "",
          "starterCode": "<h1>Oh what a day</h1>\n<p>\n  A wonderful day to start wrapping some divs!\n</p>\n",
          "solutionCode": "<style>\n  body {\n    background: rgb(255, 165, 0);\n  }\n  div {\n    background: rgb(0, 128, 128);\n  }\n</style>\n<div>\n  <h1>Oh what a day</h1>\n  <p>\n    A wonderful day to start wrapping some divs!\n  </p>\n</div>\n",
          "supplementaryContent": ""
        },
        {
          "id": "2kQ6adnb",
          "type": "markup",
          "title": "CSS Classes",
          "content": "* Create a `highlight` class to style and apply it to one of the span tags\n* Create a `highlight-blue` class and apply it to one of the span tags\n* Style the `highlight` so that it has a `yellow` background\n* Style the `highlight-blue` tag so that it has a `skyblue` background\n\nThis lesson is all about CSS class names and how they can be used to style different things. Check out the supplemental content area below for more.",
          "testCode": "test(\"At least one span should have the highlight class\", () => {\n  const spans = getAll(\"span\");\n  const hasClass = spans.some((x) => x.classList.contains(\"highlight\"));\n  expect(hasClass).toBe(true);\n});\ntest(\"At least one span should have the highlight-blue class\", () => {\n  const spans = getAll(\"span\");\n  const hasClass = spans.some((x) => x.classList.contains(\"highlight-blue\"));\n  expect(hasClass).toBe(true);\n});\ntest(\"The `.highlight` class should have a `yellow` background\", () => {\n  const el = get(\".highlight\");\n  const bg = getStyle(el, \"background-color\");\n  expect(bg).toBe(\"rgb(255, 255, 0)\");\n});\ntest(\"The `.highlight-blue` class should have a `skyblue` background\", () => {\n  const el = get(\".highlight-blue\");\n  const bg = getStyle(el, \"background-color\");\n  expect(bg).toBe(\"rgb(135, 206, 235)\");\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  span {\n    background: pink;\n  }\n  /* Your code here *?\n</style>\n<p>\n  What if <span>we</span> wanted to <span>highlight</span> different text with\n  different <span>colors</span>?\n</p>\n",
          "solutionCode": "<style>\n  span {\n    background: pink;\n  }\n  .highlight {\n    background: rgb(255, 255, 0);\n  }\n  .highlight-blue {\n    background: rgb(135, 206, 235);\n  }\n</style>\n<p>\n  What if <span>we</span> wanted to <span class=\"highlight\">highlight</span> different\n  text with different <span class=\"highlight-blue\">colors</span>?\n</p>\n",
          "supplementaryContent": "# To style many things\n\nCSS classes give you a ton of flexibility when styling your HTML. You can utilize classes to style one type of tag in many different ways. You can also utilize CSS classes to overwrite default styles since they have greater specificity.\n\nThe CSS lesson includes more information."
        },
        {
          "id": "za5KHMo7",
          "type": "markup",
          "title": "Styles within styles",
          "content": "* Style the `<a>` tags _within_ the `.menu` div so that they appear vertically\n",
          "testCode": "test(\"The <a> tags _within .menu_ should have display block\", () => {\n  const els = getAll(\".menu a\");\n  expect(els.every((x) => getStyle(x, \"display\") === \"block\")).toBe(true);\n});\n",
          "videoUrl": "https://www.youtube.com/embed/LcayPfQGrwM",
          "starterCode": "<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"content\">\n  <p>\n    Welcome to my blog! If you ever want to get in touch I'd love to hear from\n    you. You can contact me using the <a href=\"#\">Contact Page</a>. Cheers!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .menu a {\n    display: block;\n  }\n</style>\n<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"content\">\n  <p>\n    Welcome to my blog! If you ever want to get in touch I'd love to hear from\n    you. You can contact me using the <a href=\"#\">Contact Page</a>. Cheers!\n  </p>\n</div>\n",
          "supplementaryContent": ""
        },
        {
          "id": "HAYX_rRa",
          "type": "media",
          "title": "The Box Model",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "I'm no fan of jargon, but sometimes you just gotta learn it. The \"box model\" is one such case because the concepts that fall under the box model are vital to being fluent in CSS.\n# What is the box model?\n\nThe official CSS documentation gives a nice overview:\n\n>  Everything in CSS has a box around it, and understanding these boxes is key to being able to create layouts with CSS, or to align items with other items.\n\nTo put this another way, the box model is how elements are visually arranged on a web page. Now let's get a bit more concrete. There are a number of CSS properties that fall under the banner of the box model that we will be concerned with:\n\n* `width` and `height`: How wide or tall an element is.\n* `margin`: Visual space between elements.\n* `border`: Space around an element between it's `margin` and `padding`.\n* `display`: How an element interacts with other elements on the page. \n\n# The first line of all your CSS: border\\-box\n\nUtilizing the box model with regard to `width`,`height`, `margin`, `border`, and `padding` used to be tricky. The _visual_ size of an element—how large it looks to your eyes on screen—would be calculated as the sum of `width` or `height` \\+ `margin` \\+ `border` \\+ `padding`. This was unintuitive. When you say `width: 300px` you generally expect the element to be `300px` wide\\. \n\nIn fact, that behavior is still the default in browsers, which can make it difficult or time consuming to style your applications. However, **there is a better way**\\! Enter `box-sizing: border-box`.\n\n```css\n* {\n    box-sizing: border-box;\n}\n\n```\n\nWhat is this line doing?\n* `*` is selecting **everything** on the page. Every element. It's a special selector.\n* `box-sizing: border-box` Tells the browser that we want the `width` and `height` properties to determine the _visual_ width and _visual_ height of elements on the page.\n\n\n## A concrete example\n\nThis is all fairly abstract, so here's some code to help. You can drop this into the Sandbox and compare the visual difference between the two `div` elements\\. If you run this code in the sandbox you will notice that the content of the first `div` has the exact same width as the entire second `div`. \n\n```markup\n<style>\n  strong {\n    display: block;\n    text-align: center;\n  }\n  div {\n    background: white;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n  .outer {\n    background: lightblue;\n    width: 300px;\n    padding: 20px;\n    border: 5px solid tomato;\n  }\n  .border-box {\n    box-sizing: border-box;\n  }\n</style>\n<div class=\"outer\">\n  <div>\n    <h3>Standard Box Model</h3>\n    <p>\n      This div shows how the box model works by default. The border, padding and\n      width are all added together to get the visual width of the element.\n    </p>\n  </div>\n</div>\n<div class=\"outer border-box\">\n  <div>\n    <h3>Border Box</h3>\n    <p>\n      This div uses the super fun and interesting\n      <code>box-sizing: border-box;</code> property. You can control it's visual\n      <code>width</code> and <code>height</code> directly without calculation.\n    </p>\n  </div>\n</div>\n<script>\n  // This code just calculates the visual width and display is in each div\n  for (let el of document.querySelectorAll('.outer')) {\n      const rect = el.getBoundingClientRect();\n      const label = document.createElement('strong');\n      label.textContent = 'Visual Width: ' + rect.width + 'px';\n      el.insertAdjacentElement('afterend', label);\n  }\n</script>\n\n```\n# External Resources\n\n* [The CSS box model docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model)\n\n"
        },
        {
          "id": "nel5ggJ1",
          "type": "markup",
          "title": "Box Sizing Border Box",
          "content": "* Update the `box-sizing` property of the div so that it's visual width is the same as it's `width` property\\.\n\n\nThe div already has a `width` property set, but the visual width of the element is still wider as you can see. Using the `box-model` property we can tell the browser to use the `width` to control the visual width.",
          "testCode": "test(\"Should make use of border-box\", () => {\n  const el = get(\"div\");\n  expect(getStyle(el, \"box-sizing\")).toBe(\"border-box\");\n});\n\n// NOTE The aux div is created so that we're consistent across envs, including JSDOM env\ntest(\"Should have a visual width equal to the `width` property\", () => {\n  const el = get(\"div\");\n  const widthStyle = getStyle(el, \"width\");\n  const box = el.getBoundingClientRect();\n  const aux = document.createElement(\"div\");\n  aux.style.boxSizing = \"border-box\";\n  aux.style.width = widthStyle;\n  document.body.appendChild(aux);\n  const auxBox = aux.getBoundingClientRect();\n  expect(auxBox.width).toBe(box.width);\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  /* Your code here ... */\n  \n  /* You can ignore the styles below here */\n  strong {\n    display: block;\n    text-align: center;\n  }\n  div {\n    background: white;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n  .outer {\n    background: lightblue;\n    width: 300px;\n    padding: 18px;\n    border: 5px solid tomato;\n  }\n</style>\n<div class=\"outer\">\n  <div>\n    <h3>Border Box</h3>\n    <p>\n      The content within this inner area is white to show the difference between\n      the content area and the div's padding, which is blue.\n    </p>\n  </div>\n</div>\n<script>\n  // This code just calculates the visual width and displays it in the div\n  for (let el of document.querySelectorAll('.outer')) {\n      const rect = el.getBoundingClientRect();\n      const label = document.createElement('strong');\n      label.textContent = 'Visual Width: ' + rect.width.toFixed() + 'px';\n      el.insertAdjacentElement('afterend', label);\n  }\n</script>\n",
          "solutionCode": "<style>\n  div {\n    box-sizing: border-box;\n  }\n  \n  /* You can ignore the styles below here */\n  strong {\n    display: block;\n    text-align: center;\n  }\n  div {\n    background: white;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n  .outer {\n    background: lightblue;\n    width: 300px;\n    padding: 18px;\n    border: 5px solid tomato;\n  }\n</style>\n<div class=\"outer\">\n  <div>\n    <h3>Border Box</h3>\n    <p>\n      The content within this inner area is white to show the difference between\n      the content area and the div's padding, which is blue.\n    </p>\n  </div>\n</div>\n<script>\n  // This code just calculates the visual width and displays it in the div\n  for (let el of document.querySelectorAll('.outer')) {\n      const rect = el.getBoundingClientRect();\n      const label = document.createElement('strong');\n      label.textContent = 'Visual Width: ' + rect.width.toFixed(0) + 'px';\n      el.insertAdjacentElement('afterend', label);\n  }\n</script>\n",
          "supplementaryContent": "The purpose of `box-sizing: border-box;` is to change how the browser uses the `width` property\\. Although it may not be clear now, this simple property will make your journey as developer _much_ easier\\.  \n\nThis is why you will often find some CSS like the following at the very top of many CSS files:\n\n```css\n* { box-sizing: border-box; }\n\n```\n"
        },
        {
          "id": "WqwXPsOO",
          "type": "markup",
          "title": "Margins and centering things on the page",
          "content": "* Push the rest of the content away from `.menu` with a bottom margin of `40px`\n* Put `20px` of space between the `<a>` tags in the `.menu` using margins\n* Center `.centered` on the page using margins",
          "testCode": "test(\"The menu should have a bottom margin of 40px\", () => {\n  const el = get(\".menu\");\n  expect(getStyle(el, \"margin-bottom\")).toBe(\"40px\");\n});\n\ntest(\"The `<a>` tags in the `.menu` should have a right margin of 20px\", () => {\n  const els = getAll(\".menu a\");\n  expect(els.length).toBeTruthy(); // Ensure there aren't zero\n  expect(els.every((x) => getStyle(x, \"margin-right\") === \"20px\")).toBe(true);\n});\n\n// NOTE: The browser will translate margin: auto into a pixel value,\n// so we can't test directly for 'auto'\ntest(\"The `.centered` div should be centered on the page\", () => {\n  const el = get(\".centered\");\n  const right = getStyle(el, \"margin-right\");\n  const left = getStyle(el, \"margin-left\");\n  expect(right).not.toBe(\"0px\");\n  expect(right).toBe(left);\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  /* \n   * We've added a gray background so that it's easier to see if the div is \n   * centered or not \n   */\n  .centered {\n    width: 300px;\n    background: #dadada; /* Light gray */\n  }\n\n  /* Your code here */\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .menu {\n    margin-bottom: 40px;\n  }\n  .menu a {\n    margin-right: 20px;\n  }\n  .centered {\n      width: 300px;\n      background: #dadada; /* Light gray */\n      margin: 0 auto;\n  }\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "supplementaryContent": "# What are margins?\n\n> A margin is the visual space between one HTML element and another.\n\nUsing margins you can move elements away from each other to create visual space. However, you can also do this with `padding` and `border` so let's look at the differences between the three concepts. \n\n## How is this difference with padding ?\n\n* Padding is the visual space between an elements _content_ and it's edges\n* In other words, `padding` is visual space within an element while `margin` is visual space around \\(outside\\) an element.\n\n\n## How does margin relate to border ?\n\n* The `border` is between an elements `margin` and `padding` , and it usually has a color applied to it.\n\n# Beware, margins will \"collapse\"\n\nThere's a trick margins do that might confuse you when you first come across it: Margins will _collapse\\. _\n\nWhat this means is:\n\n> If two margins touch each other, they will _not combine_ but instead will collapse in to each other. This means the visual margin will only be as big as the larger of the two, not the combination of the two.\n\nFor now it's enough to know that this quirk exists. There's no good way to learn about this quirk other than to have it bite you while building an application. \n# When should I use margins?\n\nGenerally, when you want to move one element away from another element. Some examples:\n\n* You have a navigation menu of links and you want space between them\n* You want space between paragraphs in a blog post\n   * Consider the space between the paragraphs you're reading right now. You could do that with margins.\n* When you want to center something on the page \\(see below\\)\n\n\nUsing margins for centering is a special use case, which might not be obvious but is extremely common.\n# Margin auto\n\nThere's a special value you can use for margins called `auto`. For example:\n\n```css\n.centered {\n    margin-left: auto;\n    margin-right: auto;\n}\n\n```\n\nWhat `auto` does is it tells the browser to \\_auto\\_matically use as much space as possible given all other margins. So, what the code above does is it moves anything with the `.centered` class to the center of the page.\n\nAs with most CSS properties, `margin` has a shorthand syntax that is commonly used for centering something on the page:\n\n```css\n.centered {\n    margin: 0 auto;\n}\n\n```\n\nThis example is equivalent to the long\\-hand version:\n\n```css\n.centered {\n    margin-top: 0;\n    margin-bottom: 0;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n```\n"
        },
        {
          "id": "Ojsg01Bi",
          "type": "markup",
          "title": "Padding and inline-blocks",
          "content": "* Style the `<a>` tag with the `inline-block` display property. This will keep the `<a>` tags from overflowing their container. \n* Add padding of 20px to the `<a>` tag.\n* Change the background of the `<p>` tag. This will make the padding more obvious.\n* Give the `<p>` tag 20px of padding.\n",
          "testCode": "test(\"The `<a>` tags should use the inline-block display property\", () => {\n  const els = getAll(\".menu a\");\n  expect(els.every((x) => getStyle(x, \"display\") === \"inline-block\")).toBe(\n    true\n  );\n});\n\ntest(\"The `<a>` tags should have 20px of padding\", () => {\n    const els = getAll(\".menu a\");\n    expect(els.every((x) => getStyle(x, \"padding\") === \"20px\")).toBe(\n        true\n    );\n})\n\ntest(\"The `<p>` tag should have a different background than the rest of the page\", () => {\n  const el = get('p');\n  const bodyBg = getStyle(get('body'), 'background-color');\n  expect(getStyle(el, 'background-color')).not.toBe(bodyBg);\n})\n\ntest(\"The `<p>` tag should have padding of 20px\", () => {\n  expect(getStyle(get('p'), 'padding')).toBe('20px');\n})",
          "videoUrl": "",
          "starterCode": "<style>\n  .centered {\n    width: 300px;\n    background: #dadada; /* Light gray */\n  }\n\n  /* Your code here */\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .centered {\n    width: 300px;\n    background: #dadada;\n  }\n  .menu a {\n    display: inline-block;\n    padding: 20px;\n  }\n  .menu a:hover {\n    background: tomato;\n    color: white;\n  }\n  p {\n    background: skyblue;\n    margin: 0;\n    padding: 20px;\n  }\n\n  /* Your code here */\n</style>\n<div class=\"centered\">\n  <div class=\"menu\">\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n  </div>\n  <p>\n    Here's some glorious page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "supplementaryContent": "# Padding\n\nPadding means \"space inside\" of something. This is why we had you change some background colors in this challenge. Without a background color it's hard to tell where the padding is. Of course you don't always want to show how wide or slim something is, so it's up to you whether or not you use padding with a background or without.\n\nPadding without a background color can be used just like margin to separate things, however, visual space created by padding is only visual space. The element with padding itself becomes wider. This can be very useful for things like menus and buttons, where you want something to have a large clickable area even if the element itself isn't very large on screen.\n# The Display Property\n\nThe `display` property is very important in CSS. It determines how HTML elements interact with each other on the page. For example, `<a>` tags have a default display property of `inline`, which means other components can ignore their vertical padding. However, `inline-block` means their padding cannot be ignored, and you will get the results you see in this challenge.\n\nSome important display properties:\n\n* `display: block;` This is the default for most elements \\(`div`, `p`, `h1`, etc\\) and puts things on their own line.\n* `display: inline-block;` This is useful when you want things to line up horizontally \\(`a` tags in a horizontal menu for example\\) and you also want to add margins or padding.\n* `display: flex;` This is useful when you want child elements to expand or contract to fit available space. This display property is super flexible, and you might find yourself using it all the time once you know it.\n\n\nThese display properties will make up most of your UI. The web app you're using right now was built with only these display properties."
        },
        {
          "id": "0fCd6MkU",
          "type": "markup",
          "title": "Borders",
          "content": "* Add 20px of margin and padding on right of the `<a>` tags in the `.menu`\n* Give the `<a>` tags a 1px border on the right\n* Give the `.content` div some padding. This will make adding a border look much better\n* Add a 1px border to the content div\n* Give the `<p>` tags a margin of `0px`. By default `<p>` tags have margin so the challenge here is to remove it.\n* Add a `1px` border bottom to the span tag, so that it appears underlined",
          "testCode": "const as = getAll('.menu a');\nconst content = get('.content');\nconst ps = getAll('.content p');\nconst spans = getAll('.content span');\n\ntest(\"<a> tags have 20px of margin and padding on the right\", () => {\n    expect(as.every(x => getStyle(x, 'margin-right') === '20px')).toBe(true);\n    expect(as.every(x => getStyle(x, 'padding-right') === '20px')).toBe(true);\n});\n\ntest(\"<a> tags have a right border of 1px\", () => {\n    expect(as.every(x => getStyle(x, 'border-right-width') === '1px')).toBe(true);\n});\n\ntest('.content has some padding', () => {\n    expect(getStyle(content, 'padding')).not.toBe('0px');\n});\n\ntest('.content has a 1px border', () => {\n    expect(getStyle(content, 'border-width')).toBe('1px');\n});\n\ntest('<p> tags have no margin', () => {\n    expect(ps.every(x => getStyle(x, 'margin') === \"0px\")).toBe(true);\n})\n\ntest(\"<span> tags are underlined using a 1px border-bottom\", () => {\n    expect(spans.every(x => getStyle(x, 'border-bottom-width') === '1px')).toBe(true);\n})",
          "videoUrl": "",
          "starterCode": "<style>\n  /* Your code here */\n</style>\n<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n<div class=\"content\">\n  <p>\n    Here's some <span>glorious</span> page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "solutionCode": "<style>\n  .menu a {\n    margin-right: 20px;\n    padding-right: 20px;\n    border-right: 1px solid;\n  }\n  .content {\n    border: 1px solid black;\n    padding: 10px;\n    margin-top: 20px;\n  }\n  .content p {\n    margin: 0;\n  }\n  .content span {\n    border-bottom: 1px solid black;\n  }\n</style>\n<div class=\"menu\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n<div class=\"content\">\n  <p>\n    Here's some <span>glorious</span> page content! If only it was not so close to the top\n    menu!\n  </p>\n</div>\n",
          "supplementaryContent": ""
        },
        {
          "id": "N-LLBkoL",
          "type": "markup",
          "title": "Multiple Selectors -- Styling many things",
          "content": "* Give both the `<h1>` and `<p>` tags a background of `green`\n* Give both the `<h1>` and `<p>` tags a color of `red`\n\n**NOTE:** This challenge is all about using multiple selectors so that you don't have to repeat yourself when writing CSS. You should only have to write the `background` and `color` properties once to make the tests pass.",
          "testCode": "test(\"The `h1` should have a green background and a red color\", () => {\n  const el = get(\"h1\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"green\"));\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"red\"));\n});\n\ntest(\"The `p` should have a green background and a red color\", () => {\n  const el = get(\"p\");\n  expect(getStyle(el, \"background-color\")).toBe(cssColor(\"green\"));\n  expect(getStyle(el, \"color\")).toBe(cssColor(\"red\"));\n});\n",
          "videoUrl": "",
          "starterCode": "<h1>Welcome</h1>\n<p>This is a paragraph</p>",
          "solutionCode": "<style>\n  h1,\n  p {\n    color: red;\n    background: green;\n  }\n</style>\n<h1>Welcome</h1>\n<p>This is a paragraph</p>\n",
          "supplementaryContent": ""
        },
        {
          "id": "s8be1H0U",
          "type": "markup",
          "title": "Columns and Rows -- The display property",
          "content": "* Make the `.horizontal-nav` links have a bottom margin of `20px`.\n* Make the `.vertical-nav` links stack one on top of another using the `display` property. I.e. make it into a vertical nav.\n\nBy default `<a>` tags have `display: inline`, however you can change this.\n* If you need a **row**, try `display: inline-block`.\n* If you need a **column**, try `display: block`.\n",
          "testCode": "test(\".horizontal-nav should have a bottom margin of 20px\", () => {\n  const els = getAll(\".horizontal-nav a\");\n  const result = els.every(\n    (x) =>\n      getStyle(x, \"margin-bottom\") === \"20px\" &&\n      getStyle(x, \"display\") !== \"inline\"\n  );\n  expect(result).toBe(true);\n});\n\ntest(\".vertical-nav links should be vertical\", () => {\n  const els = getAll(\".vertical-nav a\");\n  const result = els.every((x) => getStyle(x, \"display\") === \"block\");\n  expect(result).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  /* Code here... */\n</style>\n\n<div class=\"horizontal-nav\">\n  <p>A horizontal nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"vertical-nav\">\n  <p>A vertical-nav nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "solutionCode": "<style>\n  .horizontal-nav a {\n    display: inline-block;\n    margin-bottom: 20px;\n  }\n  .vertical-nav a {\n    display: block;\n  }\n</style>\n\n<div class=\"horizontal-nav\">\n  <p>A horizontal nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n\n<div class=\"vertical-nav\">\n  <p>A vertical-nav nav</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "supplementaryContent": "Every HTML element has a default `display` property. This can be confusing since it's easy to forget what the default is for a given tag. But there's a trick: \n\n**Don't worry about what the default is**. \n\nRather than try to remember what the default display property for an element is just look at it and adjust accordingly. If you want something to line up in a row you can set `display: inline-block` and if you want things to stack on top of each other use `display: block`.\n\nThere are other display values besides `block` and `inline-block` but you won't use most of them very often. There is however one more very important display property called `flex`, which we will cover in another challenge."
        },
        {
          "id": "iFvzasqW",
          "type": "markup",
          "title": "Flexbox -- Creating an evenly-spaced nav menu",
          "content": "* Use the `display` property and `justify-content` property to evenly space the links in `.mobile-nav`",
          "testCode": "test('.mobile-nav should use flexbox', () => {\n    expect(getStyle(get('.mobile-nav'), 'display')).toBe('flex')\n})\n\ntest('.mobile-nav should use the justify-content property', () => {\n    expect(getStyle(get('.mobile-nav'), 'justify-content')).toBe('space-between')\n})",
          "videoUrl": "",
          "starterCode": "<style>\n  /* Your code here... */\n\n  /* You can ignore these styles. This is just to make the link placement more obvious */\n  .mobile-nav a {\n    padding: 10px;\n    background: tomato;\n  }\n</style>\n<div class=\"mobile-nav\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "solutionCode": "<style>\n  .mobile-nav {\n    display: flex;\n    justify-content: space-between;\n  }\n  .mobile-nav a {\n    padding: 10px;\n    background: tomato;\n  }\n</style>\n<div class=\"mobile-nav\">\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "supplementaryContent": "Ever notice how mobile nav menus on a phone are often spaced perfectly so that the icons fill the space on screen? \n\nThis effect is quite simple to accomplish with CSS and Flexbox. \n\nFlexbox is the general term for CSS that utilizes the `display: flex` property. Display `flex` lets you do a lot of things that used to be very difficult in web browsers. Things like:\n\n* Create equal spacing between elements (this challenge!)\n* Create equal space around elements\n* Vertically or horizontally center elements\n\nThere are other uses for Flexbox but these are some of the most common."
        },
        {
          "id": "iZ6nlkiQ",
          "type": "media",
          "title": "The hover state",
          "content": "# [INCOMPLETE CHALLENGE]\nFor now this is a media challenge since there seems to be no good way to test hover states programatically\n\n* Invert the appearance of the links when hovered. In other words when you hover a link make it's background `tomato` and it's color `blue`.\n\n**NOTE**: You will need the `:hover` selector.",
          "testCode": "test(\"Nav links should have inverted hover styles\", () => {\n  const els = getAll(\".nav a\");\n  const hasInvertedStyles = (el) => {\n    return (\n      getStyle(el, \"color\", \":hover\") === cssColor(\"tomato\") &&\n      getStyle(el, \"background-color\", \":hover\") === cssColor(\"blue\")\n    );\n  };\n  expect(getStyle(els[0], 'color')).toBe(cssColor('tomato'))\n  expect(els.every(hasInvertedStyles)).toBe(true);\n});\n",
          "videoUrl": "",
          "starterCode": "<style>\n  /* Your code here */\n\n  /* You can ignore these styles. This is just to make the link placement more obvious */\n  .nav a {\n    padding: 10px;\n    background: tomato;\n    text-decoration: none; /* This removes teh link underline */\n  }\n</style>\n<div class=\"nav\">\n  <p>Hover the mouse to see the effect</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "solutionCode": "<style>\n  .nav a:hover {\n    background: blue;\n    color: tomato;\n  }\n  /* You can ignore these styles. This is just to make the link placement more obvious */\n  .nav a {\n    background: tomato;\n    color: blue;\n    padding: 10px;\n    text-decoration: none; /* This removes teh link underline */\n  }\n</style>\n<div class=\"nav\">\n  <p>Hover the mouse to see the effect</p>\n  <a href=\"#\">Home</a>\n  <a href=\"#\">About</a>\n  <a href=\"#\">Contact</a>\n</div>\n",
          "supplementaryContent": "You've probably noticed that when you hover over a link in a browser it will change somehow. You can customize this!\n\nThis is called a hover state, and you can style a hover state just like you can style any other CSS. The main difference is the selector.\n\n```css\n/* Style the hover state for all links on the site */\na:hover {\n  text-decoration: underline;\n}\n\n/* Style just the nav links */\n.nav a:hover {\n  color: tomato;\n}\n\n/* Style the entire nav div when it's hovered */\n.nav:hover {\n  background: gray;\n}\n```\n\nTo style how something looks when the mouse hovers over it you use `:hover`. Specifically, you just put `:hover` after the selector you want to style. It's important not to put a space in front of `:hover`."
        }
      ]
    },
    {
      "free": true,
      "id": "lzTzpPcS",
      "title": "TypeScript",
      "challenges": [
        {
          "id": "2qKcNab8",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module, you will learn all of the basic fundamentals of computer programming using a popular language TypeScript. You may not have heard of TypeScript before, but you have probably heard of JavaScript. TypeScript is simply JavaScript with a type system \\- don't worry if you won't know what that means yet\\!"
        },
        {
          "id": "0gih2c1M",
          "type": "media",
          "title": "Types and Type Primitives",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "Central to every TypeScript program is the data that it concerns, operates on, and manipulates. But what exactly is that data? How can it be described, and what are its properties?\n\nWell, TypeScript, like every programming language, has different _types_ of data. The number of types that can be created by a programming language’s users is infinite, however all languages, including TypeScript, have a set of built-in types, the lowest level of which are called **primitives**. These types can be operated on and manipulated by themselves, or be composed with other types to form more complex types, but this is a topic we’ll cover in more detail later. For now, let’s focus on TypeScript's most common **primitive data types**.\n\nFirst, though, let’s clear something up. \n\n## What exactly is a type?\nAt its most basic, a type describes a particular piece of data. A piece of data’s type lets us (and more importantly, the TypeScript compiler!) know how this particular piece of data can be used and what kind of operations can be performed on it. For example, something with the type `number`, should be able to be added, subtracted, divided, and multiplied with other pieces of data that also have the type `number`. Makes sense, right!?\n\nIn fact, you just learned your first type: `number`! As you might have guessed, this is one of TypeScript's primitive data types; one of the basic building blocks of the data found within a TypeScript program.\n\n> **Tip:** A compiler is responsible for translating code written in one programming language into another language. In many cases, compilers are responsible for translating human-readable source code into something called machine-code, which is highly optimized and only intended to be interpreted by computers. In the case of TypeScript, the compiler is responsible for translating TypeScript into JavaScript that can be executed anywhere JavaScript can be.\n\n## TypeScript Primitive Types\nTypeScript supports several primitive data types, including:\n\n- `number`\n- `string`\n- `boolean`\n- `null`\n- `undefined`\n\nWhile this list is not exhaustive, for the purpose of the next several lessons, these are the types you'll need to know. Let's take a closer look at each one in the next few challenges."
        },
        {
          "id": "w3bc0PeO",
          "type": "typescript",
          "title": "Numbers",
          "content": "In TypeScript, numbers are expressed literally, and are given the type `number` (not to be confused with `Number`, with a capital \"N\"). As you might expect, numbers can be operated on mathematically, and are used for representing numeric values in our programs.\n\nIn TypeScript, numbers can be whole, or fractional (i.e. have one or more decimal places).\n\n- Modify the code below so that `whole` is equal to `1` and `half` is equal to `.5`.",
          "testCode": "test('`whole` should be equal to `1`', () => expect(whole).toBe(1));\ntest('`half` should be equal to `.5`', () => expect(half).toBe(.5));",
          "videoUrl": "",
          "starterCode": "let whole = 0;\nlet half = 0;",
          "solutionCode": "let whole = 1;\nlet half = .5;",
          "supplementaryContent": "## `number` _not_ `Number`\nThis is an important distinction. In TypeScript, _`number`_ refers to the data type, while `Number` refers to the  __global__, and more concrete, `Number` object, a concept that goes beyond the scope of this lesson. For now, it's just important that you understand the distinction, and that TypeScript is a case-sensitive programming language. While this may seem like a small difference, remember: in the case of `number` vs. `Number`, case matters!\n\n## Just one `number`\nIn the challenge above, we discussed that data with the type `number` in TypeScript can represent both whole and fractional values. While it is not important in the context of this course, you might find it interesting to know that commonly, in other program languages, fractional values, or _floating point_ values, are represented by another data type. TypeScript is unique in that all numbers are considered floating point values."
        },
        {
          "id": "UnMCiU0Z",
          "type": "typescript",
          "title": "Strings",
          "content": "In TypeScript, strings are used to represent text, or data that can be represented by text, and are given the type `string` (not to be confused with `String` – noticing a pattern here?). Strings are expressed as a string of characters surrounded by single or double quotes, `\"like this\"`.\n\n- Modify `greeting` below so that it says \"Hello, my name is \" followed by your name",
          "testCode": "test('`greeting` should equal the string `\"Hello, my name is {your name here}\"`', () => assert(/hello, my name is \\w+/i.test(greeting)))",
          "videoUrl": "",
          "starterCode": "let greeting = \"\";",
          "solutionCode": "let greeting = \"Hello, my name is Pete\";",
          "supplementaryContent": "## `string` not `String`\nOk, last warning! Like `number` and `Number`, `string` and `String` is an important distinction. What `String` refers to is outside the scope of this discussion, and we don't want you to get bogged down in that; the important takeaway: TypeScript is a **case-sensitive** language, and it is **_not_** safe to assume that `something` and `SomeThing` are the same, whatever that something is.\n\n> **Tip:** TypeScript is a case sensitive language, and primitive types are always referred to in all lowercase, e.g. `string`, `number`, `boolean`, etc."
        },
        {
          "id": "aKi_ySGP",
          "type": "typescript",
          "title": "Booleans",
          "content": "Booleans, are perhaps the simplest of the primitive data types, and in TypeScript,  can be expressed as either `true` or `false`. They are given the type `boolean`. Booleans are the primary way that we handle \"logical\" decision making, and, in fact, many expressions can be _evaluated_ as booleans, but we'll get into this more later.\n\n- Look at the following example, and change `false` to `true`.\n- Notice what happens!\n\nDon't worry, there's a lot going on here that we haven't covered yet. For now, just focus on the challenge at hand.",
          "testCode": "test('`str` should be equal to `\"Hello, TypeScript!\"`', () =>\n  expect(str).toBe(\"Hello, TypeScript!\"));\ntest(\"`isTrue` should be of type `boolean`\", () =>\n  expect(typeof isTrue).toBe(\"boolean\"));\n",
          "videoUrl": "",
          "starterCode": "let str;\nlet isTrue = false;\n\nif (isTrue) {\n    str = \"Hello, TypeScript!\";\n}\n\nconsole.log(str);",
          "solutionCode": "let str;\nlet isTrue = true;\n\nif (isTrue) {\n    str = \"Hello, TypeScript!\";\n}\n\nconsole.log(str);",
          "supplementaryContent": ""
        },
        {
          "id": "CRg_eu1t",
          "type": "media",
          "title": "Null and Undefined",
          "content": "",
          "testCode": "",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "`null` and `undefined` are similar in that they both represent the absence of value. They are both expressed literally, and in TypeScript are given the types `null` and `undefined` (i.e. the values and the types are the same, but are used in different contexts).\n\n`null` differs from `undefined` in that it is typically _intentionally_ used to represent the absence of value, while `undefined` is assigned to variables that have not yet been initialized.\n\n```typescript\nlet n; // n's value is currently undefined\nlet x = null; // x has been assigned a value of null\n```\nThis is not to say that `undefined` cannot be explicitly assigned to a variable, it is just less common, and almost certainly a mistake.\n```typescript\nlet dontDoThis = undefined;\n```\nMuch more commonly, we're checking if something _is_ `undefined`, rather than _making something_ `undefined`."
        },
        {
          "id": "B6sT0T6q",
          "type": "typescript",
          "title": "Null and Undefined in Action",
          "content": "Take a look at the code in the editor below. You'll probably notice some syntax here that you haven't seen before; `: string` and `: number` are called type annotations. They indicate to TypeScript what type of data can be assigned to the variables they annotate, and how that data should be treated. We'll cover this in more detail in the coming challenges. For now, we just want you to start getting familiar with what the syntax looks like.\n\n- Change the `undefined` variable `iShouldBeAString` to a string\n- Change the `null` variable `iShouldBeANumber` to a number\n\nRemember, `null` and `undefined` are valid subtypes of all other types, so we can assign them to variables TypeScript expects to be other types.\n",
          "testCode": "test('`iShouldBeAString` should be of type `string`', () => expect(typeof iShouldBeAString).toBe(\"string\"))\ntest('`iShouldBeANumber` should be of type `number`', () => expect(typeof iShouldBeANumber).toBe(\"number\"))",
          "videoUrl": "",
          "starterCode": "let iShouldBeAString: string = undefined; // undefined is a valid subtype of string\nlet iShouldBeANumber: number = null; // null is a valid subtype of number",
          "solutionCode": "let iShouldBeAString: string = \"undefined\"; // undefined is a valid subtype of string\nlet iShouldBeANumber: number = 100; // null is a valid subtype of number",
          "supplementaryContent": "We've covered a decent amount of ground talking about primitive types. We've talked about how they're expressed, and what their types are. For instance, numbers are expressed literally, e.g. `1`, `75`, `2.064`, and their type is `number`. Until now, though, we haven't haven't used the types themselves in our code. But we haven't been introducing you to these for no reason! \n\nIn the above challenge, we've introduced the concept of type annotations. This is a simple example of how we use types in our code. We want to draw your attention to this, as you'll see this concept come up a lot more throughout this course.\n\n> **Tip:** Type annotations, using the syntax `: ` + `type name`, indicate to TypeScript what kind of data can be assigned to the variables they annotate, and how that data should treated."
        },
        {
          "id": "7CDlUIz9",
          "type": "media",
          "title": "Type Inference",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "By now, you know that all data in a TypeScript program has a type. But how does the compiler know what types of data it's dealing with? Well, TypeScript is a pretty smart language, and in many cases, it can effectively use _type inference_ to determine type information about a piece of data. For example, when a variable is initialized with a string of text surrounded by quotes, TypeScript can _infer_ that that variable is of the type `string`.\n\n```typescript\nlet foo = \"this is a string\";\n// TypeScript infers that foo is a string\n```\nTypeScript can easily accomplish this with primitive data types:\n\n```typescript\nlet bar = true; // inferred to be boolean\nlet baz = 100; // inferred to be number\nlet qux = null; // inferred to be null\nlet qaz = undefined; // inferred to be undefined\n```\nLet's see this in action in the next challenge!"
        },
        {
          "id": "Q2hgPS5P",
          "type": "typescript",
          "title": "Inference in Action",
          "content": "Consider the code snippet from the last challenge. Don't just take our word for it, hover over the variable names and notice what you see.\n\nWithout being explicit, TypeScript's type engine can successfully infer the types of data that we've assigned to our rather arbitrary variables.",
          "testCode": "\ntest('`bar` should be of type `boolean`', () => expect(typeof bar).toBe(\"boolean\"))\ntest('`baz` should be of type `number`', () => expect(typeof baz).toBe(\"number\"))\ntest('`qux` should be `null`', () => expect(qux).toBe(null))\ntest('`qaz` should be `undefined`', () => expect(qaz).toBe(undefined))",
          "videoUrl": "",
          "starterCode": "let bar = true; // inferred to be boolean\nlet baz = 100; // inferred to be number\nlet qux = null; // inferred to be null\nlet qaz = undefined; // inferred to be undefined",
          "solutionCode": "let bar = true; // inferred to be boolean\nlet baz = 100; // inferred to be number\nlet qux = null; // inferred to be null\nlet qaz = undefined; // inferred to be undefined",
          "supplementaryContent": "## TypeScript Configuration\nA topic that we won't be covering here, but is worth mentioning, is TypeScript configuration. Some of the behavior we see in these challenges depends on how the TypeScript compiler is configured in the Pairwise workspace.\n\nWe only mention this so that you're aware that it's possible you'll see slightly different behavior in your own workspace should the configuration options you choose differ. This is something you won't have to deal with while working in the Pairwise workspace, but you should be aware of it all the same.\n\nIf you're setting up you're own project in the future, see TypeScript's \"Project Configuration\" documentation for additional information on this topic."
        },
        {
          "id": "zSYT-6Vr",
          "type": "media",
          "title": "Being Explicit with Type Annotations",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "We've seen that TypeScript can infer type information from our code contextually. However, as data types become more complex, or potentially ambiguous, it is sometimes useful to be more _explicit_, and tell the compiler exactly what type of data it's dealing with. In order to do this, TypeScript provides us with **type annotations**. Type annotations are a way to tell the compiler what type of data to expect, and how to treat that data. \n\nThe syntax `:` + `type name` is used to annotate variables and other parts of our programs. They look like this:\n\n```typescript\nlet name: string = \"Finn\"; \n// use a colon followed by a type to explicitly type something\n```\n\nThis is not always necessary, since TypeScript does have very powerful type inference, which goes far beyond inferring primitive data types. However, it sometimes _is necessary_, and is often helpful to other developers reading your code to allow them to quickly and easily understand how something is intended to work and/or be used.\n\n> **Tip**: Hover over variable names and other parts of your code in the Pairwise workspace to see their type annotations.\n\nUsing explicit types can also act as a safeguard for catching type-errors before your code is even compiled (if you're using something called a linter, which the Pairwise workspace uses, as you'll soon see). For example:\n\n```typescript\nlet theMeaningOfLife: string = 42; \n// Error! TypeScript will complain about this\n```\n\nSince we've told TypeScript that `theMeaningOfLife` should be a `string`, it will warn us that we've tried to assign it a number to (denoted by a squiggly red line, just like a spellchecker). This is called **type error**, and is something we want to avoid.\n\nLet's try this out."
        },
        {
          "id": "AB2T4DCt",
          "type": "typescript",
          "title": "Fix Me!",
          "content": "Hover over `theMeaningOfLife` to see a helpful linter error, and then fix the problem.",
          "testCode": "test('`theMeaningOfLife` should be of type `string`', () => expect(typeof theMeaningOfLife).toBe(\"string\"))",
          "videoUrl": "",
          "starterCode": "let theMeaningOfLife: string = 42;",
          "solutionCode": "let theMeaningOfLife: string = \"42\";",
          "supplementaryContent": "## What is a linter?\nA linter is a type of coding aid, which analyzes the code that you write, and in an integrated development environment (or in this case, an IDE-like environment), gives you realtime feedback about potential problems in your code, such as type incompatibilities (like in this case), or stylistic problems. Linters can be a very effective tool and help you write better, less error-prone code."
        },
        {
          "id": "m4K09_cW",
          "type": "media",
          "title": "Type Inference vs. Explicit Types",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "TypeScript's type system is a large part of what makes it such a powerful language. While type inference can be very powerful, reach for explicit typing in more complex cases, or if the inferred type  is inconsistent with how you intend something to be used. In any case, being rigorous around types in your programs and using TypeScript's type engine to its fullest potential can help you avoid painful run-time errors in your code.\n\nIf these topics seem confusing right now, don't worry! Type inference and type annotations are both in-depth topics that we'll learn more about in an organic way throughout this course, but it's essential that you're introduced to the concepts and syntax early on. \n\nFor now, the main takeaway is that you learn the difference between type inference and explicit typing with type annotations, and learn to recognize the type annotation syntax.\n\nTo review:\n```typescript\nlet foo = \"foo is inferred to be a string\";\nlet bar: string = \"bar is explicitly typed as a string\";\n```\nWhile these examples are simple, and purposefully contrived for this introduction to types, as we begin learning about more complex data types and structures, we'll see less trivial examples and put these concepts into action. "
        },
        {
          "id": "xLJj8XiU",
          "type": "media",
          "title": "The Any Type",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In TypeScript, there's a basic type we have not explored yet called the `any` type. This is the only type we've learned about so far which is not a valid type in its subset language, JavaScript. This is because `any` is _just a type_, and JavaScript is not a statically typed language like its superset, TypeScript.\n\nIn other words, `any` cannot be expressed literally. It is not a primitive type, and has no actual value that corresponds to it, the way that integer literals can be assigned to the `number` type, and string literals can be assigned to `string`. Rather, _all values_ can be assigned to `any`. \n\n```typescript\nlet quux: any = \"foo bar baz\";\nlet quuz: any = 70000;\nlet corg: any = true;\nlet flob: any = undefined;\nlet glob: any = null;\n```\n`any` is sort of like a type check escape hatch. It basically lets TypeScript know _not_ to **type check** something at compile-time (before the code is executed, i.e. statically).\n\n> **Tip:** Type checking is the process of validating and enforcing the type constraints in our code. Static type checking (such as in TypeScript), happens at compile-time, and helps to greatly reduce the occurrence of run-time errors in our code.\n\nUsing `any` can be extremely useful when we simply don't know the type of data something will be until run-time (when the code is actually executed). This might be because the data is coming from some external source that we don't have knowledge of beforehand, such as a program's end-user, or an external library. \n\nThat said, it is generally considered best practice to avoid using `any` wherever possible. This is because `any` makes our code less _type safe_: anything labeled as `any` will be type checked only at run-time (i.e. dynamically) and if there's a type mismatch, an error will be thrown, and your users' experience may impacted. \n\n> If `any` is overused, many of the benefits of using a statically typed language will be lost, and the incidence of run-time errors (something we always want to avoid!) is likely to increase. \n\nThe takeaway: use `any` sparingly, only when it is absolutely necessary."
        },
        {
          "id": "KbkT6v8g",
          "type": "typescript",
          "title": "Any in Action",
          "content": "Change the values below to match their variable names. This is a simple challenge just to demonstrate that any type can be assigned to something annotated as `any`.",
          "testCode": "test('`iAmAString` should be of type `string`', () => expect(typeof iAmAString).toBe(\"string\"))\ntest('`iAmANumber` should be of type `number`', () => expect(typeof iAmANumber).toBe(\"number\"))\ntest('`iAmNull` should be `null`', () => expect(iAmNull).toBe(null))\ntest('`iAmUndefined` should be `undefined`', () => expect(iAmUndefined).toBe(undefined))\n",
          "videoUrl": "",
          "starterCode": "let iAmAString: any = undefined;\nlet iAmANumber: any = null;\nlet iAmNull: any = 71919;\nlet iAmUndefined: any = \"not undefined yet!\";",
          "solutionCode": "let iAmAString: any = \"undefined\";\nlet iAmANumber: any = 71919;\nlet iAmNull: any = null;\nlet iAmUndefined: any = undefined;",
          "supplementaryContent": ""
        },
        {
          "id": "6T3GXc4ap",
          "type": "typescript",
          "title": "Add Two Numbers",
          "content": "Complete the function body below. The function should receive two numbers as input arguments and return the result of adding these numbers together.",
          "starterCode": "const addTwoNumbers = (a: number, b: number) => {\n  // Your code here\n}\n\nconst result = addTwoNumbers(10, 20);\nconsole.log(result);\n",
          "solutionCode": "const addTwoNumbers = (a: number, b: number) => {\n  return a + b;\n}\n\nconst result = addTwoNumbers(10, 20);\nconsole.log(result);\n",
          "testCode": "const cases = [\n  { input: [1, 2], expected: 3 },\n  { input: [10, 50], expected: 60 },\n  { input: [-10, -50], expected: -60 },\n  { input: [100, 500], expected: 600 },\n  { input: [1123, 532142], expected: 533265 },\n  { input: [-10, 50], expected: 40 },\n  { input: [1, 500], expected: 501 },\n  { input: [842, 124], expected: 966 },\n  { input: [1000, 500], expected: 1500 },\n  { input: [-100, 100], expected: 0 },\n  { input: [2, 50234432], expected: 50234434 },\n];\n\ncases.forEach(x => {\n    const { input: [a, b], expected } = x;\n    test(`${x.input[0]} + ${x.input[1]}`, () => {\n        expect(addTwoNumbers(a,b)).toBe(expected)\n    })\n})",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "WUA8ezECU",
          "type": "typescript",
          "title": "Reverse a String",
          "content": "Complete the function body below. The function will receive a string and should return the same string in reverse order.",
          "starterCode": "const reverseString = (inputString) => {\n  // Edit code here\n}\n\nconst result = reverseString(\"hello\");\nconsole.log(result);\n",
          "solutionCode": "const reverseString = (inputString) => {\n  return inputString.split('').reverse().join('');\n}\n\nconst result = reverseString(\"hello\");\nconsole.log(result);\n",
          "testCode": "[\n  { input: [\"hello\"], expected: \"olleh\" },\n  { input: [\"fantastic\"], expected: \"citsatnaf\" },\n  { input: [\"superb\"], expected: \"brepus\" },\n  { input: [\"frustrating\"], expected: \"gnitartsurf\" },\n  { input: [\"exciting\"], expected: \"gniticxe\" },\n  { input: [\"happy\"], expected: \"yppah\" },\n  { input: [\"a\"], expected: \"a\" },\n  { input: [\"aaaaaaaaaaaaz\"], expected: \"zaaaaaaaaaaaa\" },\n  { input: [\"jumping\"], expected: \"gnipmuj\" },\n  { input: [\"silly\"], expected: \"yllis\" },\n  { input: [\"zombie\"], expected: \"eibmoz\" },\n].forEach(({ input, expected }) => {\n  test(`${input[0]} -> ${expected}`, () => {\n    expect(reverseString(...input)).toBe(expected);\n  })\n})\n",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "50fxTLRcV",
          "type": "typescript",
          "title": "Return the Length of an Array",
          "content": "Complete the function body below. The function will receive an array as input and should return the number of items in the array.",
          "starterCode": "const lengthOfArray = (array) => {\n  // Edit code here\n};\n\nconst result = lengthOfArray([\"a\", \"b\", \"c\"]);\nconsole.log(result);\n",
          "solutionCode": "\nconst lengthOfArray = (array) => {\n  return array.length;\n}\n\nconst result = lengthOfArray([\"a\", \"b\", \"c\"]);\nconsole.log(result);\n",
          "testCode": "[\n  { input: [[1, 2, 3, 4]], expected: 4 },\n  { input: [[]], expected: 0 },\n  { input: [[1, 1, 1, 1, 1, 1, 1, 1, 1]], expected: 9 },\n  { input: [[3, 3, 3]], expected: 3 },\n  { input: [[2]], expected: 1 },\n  { input: [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], expected: 14 },\n].forEach(({ input, expected }) => {\n  test(input[0].join(\", \"), () => {\n    expect(lengthOfArray(...input)).toBe(expected);\n  });\n});\n",
          "supplementaryContent": "Placeholder supplementary content..."
        },
        {
          "id": "9wRw1y5V",
          "type": "section",
          "title": "Programming Projects",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this section, you will tackle building your first real program."
        },
        {
          "id": "zweKy6cg",
          "type": "typescript",
          "title": "Tic Tac Toe",
          "content": "In this project, we will build Tic\\-Tac\\-Toe as a simple TypeScript program.\n\nIn the editor, you will find several types defined which present the players and game classes for a Tic\\-Tac\\-Toe game. There are also two TypeScript classes `GamePlayer` and `Game` which contain partially implemented methods.\n\nYour job is to complete the implementation of these methods \\(use the type definitions and comments as a reference\\) so that the `Game` class method `playGame` can run an entire round of Tic\\-Tac\\-Toe\\!\n\nThe `playGame` method accepts the two players in the game and executes the game logic \\(this is what you have to implement\\!\\) until a winner is reached, or the game results in a tie. This method should return the game result.\n\nGood luck\\!",
          "testCode": "// test('message', () => expect(...))\ntest(\"The game should conclude and playGame should return the winner\", () => {\n    const board = [\n        [null, null, null],\n        [null, null, null],\n        [null, null, null],\n    ];\n\n    const human = new GamePlayer(\"human\");\n    const machine = new GamePlayer(\"machine\");\n    const game = new Game(board);\n    const winner = game.playGame(human, machine);\n    expect(winner).toBe(\"human\");\n});",
          "videoUrl": "",
          "starterCode": "// Player types\ntype Human = \"human\";\ntype Machine = \"machine\";\ntype Player = Machine | Human;\n\n// Game types\ntype Tile = Player | null;\ntype Board = Tile[][];\ntype GameResult = Player | \"tie\";\n\ninterface TicTacToePlayer {\n    play: (board: Board) => Board;\n}\n\nclass GamePlayer implements TicTacToePlayer {\n    player: Player;\n\n    constructor(player: Player) {\n        this.player = player;\n    }\n\n    play(board: Board): Board {\n        // This method takes a game board and makes a move. Where will you play?\n        // [TODO]: Your code here:\n        return [];\n    }\n}\n\ninterface TicTacToeGame {\n    board: Board;\n    checkBoard: (board: Board) => GameResult | null;\n    playGame: (humanPlayer: TicTacToePlayer, machinePlayer: TicTacToePlayer) => GameResult;\n}\n\nclass Game implements TicTacToeGame {\n    board: Board;\n    constructor(board: Board) {\n        this.board = board;\n    }\n\n    checkBoard(board: Board): GameResult | null {\n        // This method checks the game board and returns a GameResult when the game\n        // is concluded, or null if the game is still in progress.\n        // [TODO]: Your code here:\n        return null;\n    }\n\n    playGame(humanPlayer: TicTacToePlayer, machinePlayer: TicTacToePlayer): GameResult {\n        // This method executes the game logic!\n        // [TODO]: Your code here:\n        return \"tie\";\n    }\n\n    printBoard() {\n        for (const row of this.board) {\n            console.log(row);\n        }\n    }\n}\n",
          "solutionCode": "/**\n * Define Game Types:\n */\n\ntype Machine = \"machine\";\ntype Human = \"human\";\ntype Player = Machine | Human;\ntype Tile = Player | null;\ntype Board = Tile[][];\ntype GameResult = Player | \"tie\";\n\n/**\n * Create Player and Game classes:\n */\n\n\ninterface TicTacToePlayer {\n    play: (board: Board) => Board;\n}\n\nclass GamePlayer implements TicTacToePlayer {\n    player: Player;\n\n    constructor(player: Player) {\n        this.player = player;\n    }\n\n    play(board: Board): Board {\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board.length; j++) {\n                const tile = board[i][j];\n                if (tile === null) {\n                    board[i][j] = this.player;\n                    return board;\n                }\n            }\n        }\n    }\n}\n\ninterface TicTacToeGame {\n    board: Board;\n    checkBoard: (board: Board) => GameResult | null;\n    playGame: (humanPlayer: TicTacToePlayer, machinePlayer: TicTacToePlayer) => GameResult;\n}\n\nclass Game implements TicTacToeGame {\n    board: Board;\n    constructor(board: Board) {\n        this.board = board;\n    }\n\n    checkBoard(board: Board): GameResult | null {\n        const countNulls = (board: Board) => {\n            const nulls = board.reduce((nullCount, row) => row.reduce((c, x) => x === null ? c + 1 : c, 0), 0);\n            if (nulls === 0) {\n                return \"tie!\";\n            }\n        }\n\n        const checkRows = (rowIndex: number = 0) => {\n            const [left, middle, right] = board[rowIndex];\n            if (left === middle && middle === right) {\n                if (left !== null) {\n                    return left;\n                } else if (rowIndex < board.length - 1) {\n                    return checkRows(rowIndex + 1);\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        const checkColumns = (columnIndex: number = 0) => {\n            const top = board[0][columnIndex];\n            const middle = board[1][columnIndex];\n            const bottom = board[2][columnIndex];\n\n            if (top === middle && middle === bottom) {\n                if (top !== null) {\n                    return top;\n                } else if (columnIndex < board[0].length - 1) {\n                    return checkColumns(columnIndex + 1);\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        let winner = null;\n\n        // Check rows\n        winner = checkRows();\n        if (winner) {\n            return winner;\n        }\n\n        // Check columns\n        winner = checkColumns();\n        if (winner) {\n            return winner;\n        }\n\n        // Get coordinates for diagonal tiles\n        const topLeft = board[0][0];\n        const topRight = board[0][2];\n        const middle = board[0][0];\n        const bottomLeft = board[2][0];\n        const bottomRight = board[2][2];\n\n        // Check top left to bottom right diagonal\n        if (topLeft === middle && middle === bottomLeft) {\n            if (topLeft !== null) {\n                return topLeft;\n            }\n        }\n\n        // Check bottom left to top right diagonal\n        if (bottomLeft === middle && middle === topRight) {\n            if (bottomLeft !== null) {\n                return bottomLeft;\n            }\n        }\n\n        return null;\n    }\n\n    turn(player: TicTacToePlayer, nextPlayer: TicTacToePlayer): GameResult {\n        player.play(this.board);\n        const winner = this.checkBoard(this.board);\n        if (winner !== null) {\n            return winner;\n        } else {\n            return this.turn(nextPlayer, player);\n        }\n    }\n\n    playGame(humanPlayer: TicTacToePlayer, machinePlayer: TicTacToePlayer): GameResult {\n        return this.turn(humanPlayer, machinePlayer);\n    }\n\n    printBoard() {\n        for (const row of this.board) {\n            console.log(row);\n        }\n    }\n}\n\n/**\n * Instantiate game pieces:\n */\n\nconst board = [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n];\n\nconst human = new GamePlayer(\"human\");\nconst machine = new GamePlayer(\"machine\");\nconst game = new Game(board);\n\n/**\n * Play the game1\n */\n\nconst winner = game.playGame(human, machine);\ngame.printBoard();\n",
          "supplementaryContent": ""
        },
        {
          "id": "CktrOyVg",
          "type": "media",
          "title": "Tic Tac Toe Guided Project",
          "content": "ic",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "Here we will walk through an example of how the Tic Tac Toe project could be built."
        },
        {
          "id": "u5nA6qc6",
          "type": "section",
          "title": "Equality",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In programming, it is often helpful to compare two different values and determine if they are equal or not. You may think this is simple, and it usually is. However, there are some interesting nuances which are helpful to learn as well.\n\nIn this section you will learn the basics for how to determine equality between different values in TypeScript, and you will learn a few edge cases which can easily trip you up as well.\n\nComparing primitive values like strings or numbers is very straightforward, but comparing more complex data structures like arrays or objects is a little more tricky."
        },
        {
          "id": "mIj2Sy2B",
          "type": "typescript",
          "title": "Comparing String Values",
          "content": "The best way to compare two string values in TypeScript is to use the triple equals operator,\n`===`. The triple equal operator determines if two values are the same and can be applied directly to strings. Go ahead, take a look at the code in the editor and try it out\\!",
          "testCode": "test(\"The two fruit variables `fruit` and `otherFruit` should both be strings and they should be equal\", () => {\n    expect(fruit).toBe(otherFruit);\n    expect(typeof fruit).toBe(\"string\");\n    expect(typeof otherFruit).toBe(\"string\");\n});",
          "videoUrl": "",
          "starterCode": "const fruit: string = \"apple\";\nconst otherFruit: string = \"grape\";\n\nconst areFruitsEqual = fruit === otherFruit;\n\nif (areFruitsEqual) {\n    console.log(\"The fruits are equal!\");\n}",
          "solutionCode": "\nconst fruit: string = \"apple\";\nconst otherFruit: string = \"apple\";\n\nconst areFruitsEqual = fruit === otherFruit;\n\nif (areFruitsEqual) {\n    console.log(\"The fruits are equal!\");\n}",
          "supplementaryContent": ""
        },
        {
          "id": "9yEpUrhb",
          "type": "typescript",
          "title": "Comparing Number Values",
          "content": "Comparing strings is just like comparing numbers. Strings and numbers are primitive values in TypeScript, and can be compared directly against one another. Take a look at the code in the editor and give it a try\\!",
          "testCode": "test(\"The two values `someNumber` and `someCalculatedValue` should both be numbers and they should be equal\", () => {\n    expect(someNumber).toBe(someCalculatedValue);\n    expect(typeof someNumber).toBe(\"number\");\n    expect(typeof someCalculatedValue).toBe(\"number\");\n});",
          "videoUrl": "",
          "starterCode": "const someNumber = 102;\nconst someCalculatedValue = (250 + 250) / 5;\n\nif (someNumber === someCalculatedValue) {\n    console.log(\"The numbers are equal!\");\n}",
          "solutionCode": "const someNumber = 100;\nconst someCalculatedValue = (250 + 250) / 5;\n\nif (someNumber === someCalculatedValue) {\n    console.log(\"The numbers are equal!\");\n}",
          "supplementaryContent": ""
        },
        {
          "id": "6l0NR0XE",
          "type": "typescript",
          "title": "Comparing Null and Undefined Equality",
          "content": "You can compared `null` and `undefined` just like numbers and strings. They are all primitive values, a single `null` is identical to any other `null` value you may come across.",
          "testCode": "test(\"Both variables `anUndefinedVariable` and `explicitlyUndefined` should be equal to undefined\", () => {\n    expect(anUndefinedVariable).toBe(undefined);\n    expect(explicitlyUndefined).toBe(undefined);\n});",
          "videoUrl": "",
          "starterCode": "let anUndefinedVariable;\nconst explicitlyUndefined = \"a real value\";\n\nif (anUndefinedVariable === explicitlyUndefined) {\n    console.log(\"Both values are equal to undefined!\");\n}",
          "solutionCode": "let anUndefinedVariable;\nconst explicitlyUndefined = undefined;\n\nif (anUndefinedVariable === explicitlyUndefined) {\n    console.log(\"Both values are equal to undefined!\");\n}",
          "supplementaryContent": ""
        },
        {
          "id": "T5-BAT-r",
          "type": "typescript",
          "title": "Equality with Boolean Values",
          "content": "The boolean values `true` and `false` can also be applied directly in equality assertions like other primitive values. To see what we mean, take a look at the code in the editor below.",
          "testCode": "test(\"The `ageLimit` variable should be 18\", () => {\n    expect(ageLimit).toBe(18);\n});\n\ntest(\"The `age` variable should be greater than 18 so that `isOldEnough` is true\", () => {\n    expect(age > 18).toBe(true);\n    expect(isOldEnough).toBe(true);\n});",
          "videoUrl": "",
          "starterCode": "const age = 16;\nconst ageLimit = 18;\nconst isOldEnough = age > ageLimit;\n\nif (isOldEnough === true) {\n    console.log(\"You are old enough!\");\n}",
          "solutionCode": "const age = 25;\nconst ageLimit = 18;\nconst isOldEnough = age > ageLimit;\n\nif (isOldEnough === true) {\n    console.log(\"You are old enough!\");\n}",
          "supplementaryContent": ""
        },
        {
          "id": "yI82pwBw",
          "type": "typescript",
          "title": "Array Equality",
          "content": "Unlike primitive values, non\\-primitive values such as objects, arrays, and functions have different behavior when it comes to equality.\n\nFor example, in TypeScript `const list = [1,2,3]` creates a `list` variable which is a reference to an array of values in memory: `[1,2,3]` . The reference and the array itself are actually different. To see what we mean, dive into the code\\!",
          "testCode": "test(\"The two lists `oneList` and `anotherList` should reference the same value.\", () => {\n    expect(oneList).toBe(anotherList);\n});\n\ntest(\"`theListsAreTheSame` should evaluate to `true`.\", () => {\n    expect(theListsAreTheSame).toBe(true);\n});",
          "videoUrl": "",
          "starterCode": "const oneList = [1,2,3,4,5];\nconst anotherList = [1,2,3,4,5];\n\nconst theListsAreTheSame = oneList === anotherList;\n\nif (theListsAreTheSame) {\n    console.log(\"The lists are the same!\");\n}",
          "solutionCode": "const oneList = [1,2,3,4,5];\nconst anotherList = oneList;\n\nconst theListsAreTheSame = oneList === anotherList;\n\nif (theListsAreTheSame) {\n    console.log(\"The lists are the same!\");\n}",
          "supplementaryContent": "The triple equals operator when applied to objects or arrays compares the \\_references \\_not the object or array itself. Therefore, in the code above the `theListsAreTheSame` variable can become `true` if the two list variables reference the same list.\n\n**HINT: **You can define a new variable to reference another. In that case, they both share the same reference. For example:\n\n```typescript\nconst referenceOne = { a: true };\nconst referenceTwo = referenceOne;\n// referenceOne and referenceTwo are the same!\n\n```\n"
        }
      ]
    },
    {
      "id": "4IXSqQMi",
      "title": "Developer Workflow",
      "challenges": [
        {
          "id": "3a4-HU8P",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module, you will learn about a standard developer workflow practices, tools, and techniques. You will learn how to use version control software such as Git, code editing tools like VS Code, and team collaboration tools like GitHub."
        }
      ],
      "free": false
    },
    {
      "id": "N3xExLt4",
      "title": "Async Programming & APIs",
      "challenges": [
        {
          "id": "SfvRE0Ai",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module you will learn how different programs communicate with each."
        }
      ],
      "free": false
    },
    {
      "id": "_tllrvtp",
      "title": "UI Programming",
      "challenges": [
        {
          "id": "-pAkjWcr",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module you will learn how to build frontend user interfaces \\(UIs\\). Specifically, will learn a popular library called React."
        },
        {
          "id": "50f7f8sUV",
          "type": "react",
          "title": "Create a Controlled Input",
          "content": "There is a React Component below. Complete it so in includes a controlled input which allows user's to type.",
          "starterCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface IState {\n  value: string;\n}\n\nclass App extends React.Component<IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render(): JSX.Element {\n    const welcome: string = \"Hello, React!\";\n    console.log(\"Hello from the iframe!!!\");\n    return (\n      <div>\n        <h1>{welcome}</h1>\n        <input />\n      </div>\n    );\n  }\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n",
          "solutionCode": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface IState {\n  value: string;\n}\n\nclass App extends React.Component<IState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  render(): JSX.Element {\n    const welcome: string = \"Hello, React!\";\n    console.log(\"Hello from the iframe!!!\");\n    return (\n      <div>\n        <h1>{welcome}</h1>\n        <input value={this.state.value} onChange={this.handleChange} />\n      </div>\n    );\n  }\n\n  handleChange = (e) => {\n    this.setState({ value: e.target.value });\n  };\n}\n\n// Do not edit code below this line\nconst Main = App;\nReactDOM.render(<Main />, document.querySelector(\"#root\"));",
          "testCode": "test(\"Renders a <h1> tag with the text 'Hello, React!'\", () => {\n  const container = document.createElement(\"div\");\n  ReactTestUtils.act(() => {\n    ReactDOM.render(<Main />, container);\n  });\n  const label = container.querySelector(\"h1\");\n  return label.textContent === \"Hello, React!\";\n});\n\ntest(\"Renders a controlled <input /> using React state\", () => {\n  const container = document.createElement(\"div\");\n  ReactTestUtils.act(() => {\n    ReactDOM.render(<Main />, container);\n  });\n  const inputEl = container.querySelector(\"input\");\n  const testValue = \"giraffe\";\n  ReactTestUtils.Simulate.change(inputEl, { target: { value: testValue } });\n  return inputEl.value === testValue;\n});\n",
          "supplementaryContent": "Placeholder supplementary content..."
        }
      ],
      "free": false
    },
    {
      "id": "xdu5gf3-",
      "title": "Server Programming",
      "challenges": [
        {
          "id": "kUvFiQmw",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module you will learn about backend engineering: how to write servers."
        }
      ],
      "free": false
    },
    {
      "id": "f0pDYSOV",
      "title": "Databases",
      "challenges": [
        {
          "id": "LO2nn_8O",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module you will learn about databases, the technology responsible for storing all of the data used by modern software applications."
        }
      ],
      "free": false
    },
    {
      "id": "D1JR2EXa",
      "title": "Mobile",
      "challenges": [
        {
          "id": "BfciawyS",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module you will learn the basics of programming mobile apps. Specifically, you will learn React Native, a cross\\-platform technology which allows developers to build iOS and Android apps using a single codebase."
        }
      ],
      "free": false
    },
    {
      "id": "ZzVuDVNP",
      "title": "Testing & Automation",
      "challenges": [
        {
          "id": "s_p7YnS0",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module you will learn about how to test software and automate common tasks in order to improve productivity."
        }
      ],
      "free": false
    },
    {
      "id": "qV7cPqG1",
      "title": "Debugging & Refactoring",
      "challenges": [
        {
          "id": "cBlWsqgO",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module you will learn the vital skills of debugging and refactoring software. Once software is written, it will inevitably have problems and errors. Debugging is the process of tracking down, understanding, and fixing errors in the code. Refactoring, it is the process of revisiting old code and writing it to improve the code quality and hopefully reduce the chances of bugs and errors."
        }
      ],
      "free": false
    },
    {
      "id": "G8v0iMpm",
      "title": "Delivery & Deployment",
      "challenges": [
        {
          "id": "Vy435o_N",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "In this module, you will learn about how modern software is deployed and delivered to users. This is one of the last important topics on your journey to becoming a software engineer\\!"
        }
      ],
      "free": false
    },
    {
      "id": "GgP1rkAa",
      "title": "Capstone Project",
      "challenges": [
        {
          "id": "Oe15TzrQ",
          "type": "section",
          "title": "Intro",
          "content": "",
          "testCode": "// test('message', () => expect(...))",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "supplementaryContent": "Congratulations\\! You have completed all the course material and you're not ready to get your hands dirty building real world applications\\! You are definitely ready for a job, but you still need a portfolio of rockstar projects to prove it to your future employer. That's what this section is all about: letting you loose to build some amazing projects to impress everyone around you. Let's get started\\!"
        }
      ],
      "free": false
    }
  ]
}