{
  "price": 0,
  "free": true,
  "id": "aiqu278z9",
  "title": "Golang",
  "description": "Golang is a statically typed, compiled language with memory safety and garbage collection.",
  "modules": [
    {
      "id": "aslloqpsI",
      "title": "Golang Basics",
      "challenges": [
        {
          "id": "YdWT7tP3H",
          "type": "section",
          "title": "Golang Programming",
          "instructions": "",
          "testCode": "// Write your tests here:\ntest(\"`variable` should be defined.\", () => {\n  expect(variable).toBeDefined();\n});\n",
          "videoUrl": "",
          "starterCode": "",
          "solutionCode": "",
          "content": "Golang, or simply Go, is a statically typed, compiled language originally developed at Google. Go was intended to preserve several advantages found in other languages, e.g. the speed and static typing of languages like C and the usability and productivity of languages like Python or JavaScript.\n\nThese Go challenges in Pairwise are very introductory and experimental. They may be expanded in the future into a more complete course on programming in Go.\n---\n\n++NOTE:++ In the Golang challenges if you want to run and preview your own code you will have to add a `main` function in the editor, which will be run to generate output in the preview panel on the right. This is not necessary in order to complete the challenge, but may be useful if you are debugging or want to view output from your code as you are working on a solution. For example:\n\n```\n// Your function\nfunc myFunction(input string) string {\n    return input\n}\n\n// Add a main function if you want to test executing the code\n// and preview any output in the preview panel on the right\n// side of the workspace.\n// This is not necessary to complete the challenge.\nfunc main() {\n    result := myFunction(\"Hello, Go!\")\n    fmt.Println(result) // This will be printed in the console preview\n}\n\n```\n"
        },
        {
          "id": "sEI9mXJbt",
          "type": "golang",
          "title": "Intro to Golang",
          "instructions": "Write a function `add` using Go which takes two numbers and adds them together. [Golang](https://golang.org/) is an open source programming language that makes it easy to build simple, reliable, and efficient software.",
          "testCode": "test(\"The `add` function should be defined and add two numbers together.\", async () => {\n  const CODE = __user_code_string__;\n  const TEST_STRING = `\n    func test() bool {\n      result := add(2, 3)\n      if result == 5 {\n        return true\n      } else {\n        return false\n      }\t\n    }\n  `;\n\n  const result = await executeGolangChallengeTests(CODE, TEST_STRING);\n  handleAlternateLanguageTestResult(result, console.log);\n});\n",
          "videoUrl": "",
          "starterCode": "// Write your function here\n",
          "solutionCode": "// Write your function here\nfunc add(x int, y int) int {\n  return x + y\n}",
          "content": ""
        },
        {
          "id": "$AwWGU3$h",
          "type": "golang",
          "title": "Capitalize a String",
          "instructions": "Write a function `capitalize` which accepts a string and returns the capitalized version, i.e. a new string with only the first letter capitalized. For instance `capitalize(hello, world) // -> \"Hello, world\"`. You can assume the first letter of the string input will either be a valid letter or empty string.",
          "testCode": "const TEST_STRING = `\n  func test() bool {\n    result_one := capitalize(\"hello\")\n    if result_one != \"Hello\" {\n      return false\n    }\n\n    result_two := capitalize(\"hello, world\")\n    if result_two != \"Hello, world\" {\n      return false\n    }\n\n    result_three := capitalize(\"\")\n    if result_three != \"\" {\n      return false\n    }\n\n    result_four := capitalize(\"saodfosauyfoasydfosa\")\n    if result_four != \"Saodfosauyfoasydfosa\" {\n      return false\n    }\n\n    result_five := capitalize(\"what is your name?\")\n    if result_five != \"What is your name?\" {\n      return false\n    }\n\n    result_six := capitalize(\"What is your name?\")\n    if result_six != \"What is your name?\" {\n      return false\n    }\n\n    return true\n  }\n`;\n\ntest(\"The `capitalize` function should be defined and return the capitalized version of any string passed to it.\", async () => {\n  const CODE = __user_code_string__;\n  const result = await executeGolangChallengeTests(CODE, TEST_STRING);\n  handleAlternateLanguageTestResult(result, console.log);\n});\n",
          "videoUrl": "",
          "starterCode": "// Write your code here\n",
          "solutionCode": "// Capitalize a string\nfunc capitalize(str string) string {\n  fields := strings.Fields(str)\n  result := \"\"\n  for index, word := range fields {\n    if index == 0 {\n      result += strings.Title(strings.ToLower(word))\n    } else {\n      result += \" \"\n      result += word\n    }\n  }\n  return result\n}\n",
          "content": ""
        },
        {
          "id": "qe@9JGnF8",
          "type": "golang",
          "title": "Find in List",
          "instructions": "You are given a list of numbers and a target number. Write a function `findInList` which returns the first index the target element can be found at, or `-1` if the target cannot be found.",
          "testCode": "const TEST_STRING = `\n  func test() bool {\n    if findInList([]int{2, 4, 6, 8, 10}, 10) != 4  {\n      return false\n    }\n\n    if findInList([]int{2, 4, 6, 8, 10}, 12) != -1  {\n      return false\n    }\n\n    if findInList([]int{2, 4, 6, 8, 10}, 2) != 0  {\n      return false\n    }\n\n    if findInList([]int{2, 4, 6, 8, 10}, 8) != 3  {\n      return false\n    }\n\n    if findInList([]int{2, 4, 6, 8, 10}, 4) != 1  {\n      return false\n    }\n\n    if findInList([]int{}, 10) != -1  {\n      return false\n    }\n    \n    return true\n  }\n`;\n\ntest(\"The `findInList` function should accept a list of integers and a target integer, and return the first index of the target integer in the list if it can be found, or `-1` if it cannot be found.\", async () => {\n  const CODE = __user_code_string__;\n  const result = await executeGolangChallengeTests(CODE, TEST_STRING);\n  handleAlternateLanguageTestResult(result, console.log);\n});\n",
          "videoUrl": "",
          "starterCode": "// Write your code here\n",
          "solutionCode": "// Find a targey element in an array\nfunc findInList(list []int, target int) int {\n  for i := 0; i < len(list); i++ {\n    element := list[i]\n    if element == target {\n      return i\n    }\n  }\n\n  return -1;\n}\n",
          "content": ""
        },
        {
          "id": "xxzI3@MaV",
          "type": "golang",
          "title": "Filter Matrix",
          "instructions": "You are given a two\\-dimensional grid of integers and a target integer. Return a new grid which excludes any items from the original input grid which match the provided target integer. For instance:\n\n```\n// Pseudocode:\nfilterMatrix([[1,2,3],[4,5,6]], 5) // -> [[1,2,3],[4,6]]\n\n```\n",
          "testCode": "const TEST_STRING = `\nfunc compareMatrix(a [][]int, b [][]int) bool {\n  for y := 0; y < len(a); y++ {\n    for x := 0; x < len(a[y]); x++ {\n      if a[y][x] != b[y][x] {\n        return false\n      }\n    }\n  }\n\n  return true\n}\n\nfunc test() bool {    \n  var matrix = [][]int{\n    {1,2,3},\n    {5,5,5},\n    {4,5,6},\n    {5,5,7},\n    {5,5,5},\n  }\n  var expected = [][]int{\n    {1,2,3},\n    {4,6},\n    {7},\n  }\n  var result = filterMatrix(matrix, 5)\n  var equal = compareMatrix(result, expected)\n  if equal != true {\n    return false\n  }\n\n  matrix = [][]int{\n    {1,2,3},\n    {5,5,5},\n    {4,5,6},\n    {5,5,7},\n    {5,5,5},\n  }\n  expected = [][]int{\n    {1,2,3},\n    {5,5,5},\n    {4,5,6},\n    {5,5,7},\n    {5,5,5},\n  }\n  result = filterMatrix(matrix, 50)\n  equal = compareMatrix(result, expected)\n  if equal != true {\n    return false\n  }\n\n  matrix = [][]int{\n    {1,2,3},\n    {5,5,5},\n    {4,5,6},\n    {5,5,7},\n    {5,5,5},\n  }\n  expected = [][]int{\n    {1,2,3},\n    {5,5,5},\n    {4,5,6},\n    {5,5},\n    {5,5,5},\n  }\n  result = filterMatrix(matrix, 7)\n  equal = compareMatrix(result, expected)\n  if equal != true {\n    return false\n  }\n\n  matrix = [][]int{{}}\n  expected = [][]int{{}}\n  result = filterMatrix(matrix, 50)\n  equal = compareMatrix(result, expected)\n  if equal != true {\n    return false\n  }\n\n  matrix = [][]int{\n    {1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1},\n  }\n  expected = [][]int{{}}\n  result = filterMatrix(matrix, 1)\n  equal = compareMatrix(result, expected)\n  if equal != true {\n    return false\n  }\n\n  matrix = [][]int{\n    {1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,100,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1},\n  }\n  expected = [][]int{\n    {100},\n  }\n  result = filterMatrix(matrix, 1)\n  equal = compareMatrix(result, expected)\n  if equal != true {\n    return false\n  }\n  \n  return true\n}\n`;\n\ntest(\"The `filterMatrix` function should accept a matrix of integers and a target integer, and return a new matrix which excludes the target from the input matrix.\", async () => {\n  const CODE = __user_code_string__;\n  const result = await executeGolangChallengeTests(CODE, TEST_STRING);\n  handleAlternateLanguageTestResult(result, console.log);\n});\n",
          "videoUrl": "",
          "starterCode": "// Write your code here\n",
          "solutionCode": "// Write your code here\nfunc filterMatrix(matrix [][]int, target int) [][]int {\n  var filtered [][]int\n\n  // Build a new matrix excluding all target elements\n  for y := 0; y < len(matrix); y++ {\n    filtered = append(filtered, []int{})\n    for x := 0; x < len(matrix[y]); x++ {\n      item := matrix[y][x]\n      if item != target {\n        filtered[y] = append(filtered[y], item)\n      }\n    }\n  }\n\n  var result [][]int\n\n  // Remove empty rows\n  for i := 0; i < len(filtered); i++ {\n    row := filtered[i]\n    if len(row) > 0 {\n      result = append(result, row)\n    }\n  }\n\n  return result\n}\n",
          "content": ""
        },
        {
          "id": "kAoyRO9Sq",
          "type": "golang",
          "title": "Count Letters",
          "instructions": "Write a function `countLetters` which takes a string and returns a map key value pairs which count all of the letters in the input string. For instance, the input `\"app\"` would return a map like this: `{ \"a\": 1, \"p\": 2 }`.",
          "testCode": "const TEST_STRING = `\nfunc countLettersSolution(text string) map[string]int {\n  lettersMap := make(map[string]int)\n  for _, character := range text {\n    key := string(character)\n    value, ok := lettersMap[key]\n    if ok {\n      lettersMap[key] = value + 1\n    } else {\n      lettersMap[key] = 1\n    }\n  }\n\n  return lettersMap\n}\n\nfunc equalMaps(a map[string]int, b map[string]int) bool {\n  for key, value := range a {\n    if value != b[key] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunc test() bool {\n  var input = \"Hello\"\n  var result = countLetters(input)\n  var expected = countLettersSolution(input)\n  var equal = equalMaps(result, expected)\n  if equal != true {\n    return false\n  }\n\n  input = \"asdfasdfoasuidyfoasydfoasydfsaSDFASDFAFDSFAFASDFA\"\n  result = countLetters(input)\n  expected = countLettersSolution(input)\n  equal = equalMaps(result, expected)\n  if equal != true {\n    return false\n  }\n\n  input = \"aslfjkads;fSADFSAFasoudfasdfasdfSADFwae89a7f0aw7f0asfdsaFASDFafasdfasdfaudf6a9s7d6f9asf#RQ#rAWETWERFAsfda\"\n  result = countLetters(input)\n  expected = countLettersSolution(input)\n  equal = equalMaps(result, expected)\n  if equal != true {\n    return false\n  }\n\n  input = \"\"\n  result = countLetters(input)\n  expected = countLettersSolution(input)\n  equal = equalMaps(result, expected)\n  if equal != true {\n    return false\n  }\n  \n  return true\n}\n`;\n\ntest(\"The `countLetters` function should accept a string and return a map which maps letters to number of occurrences in the input string.\", async () => {\n  const CODE = __user_code_string__;\n  const result = await executeGolangChallengeTests(CODE, TEST_STRING);\n  handleAlternateLanguageTestResult(result, console.log);\n});\n",
          "videoUrl": "",
          "starterCode": "// Write your code here",
          "solutionCode": "// Write your code here\nfunc countLetters(text string) map[string]int {\n  lettersMap := make(map[string]int)\n  for _, character := range text {\n    key := string(character)\n    value, ok := lettersMap[key]\n    if ok {\n      lettersMap[key] = value + 1\n    } else {\n      lettersMap[key] = 1\n    }\n  }\n\n  return lettersMap\n}\n",
          "content": ""
        }
      ]
    }
  ]
}