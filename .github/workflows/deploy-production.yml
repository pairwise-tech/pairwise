# This is the production deploy workflow which builds and tests all the
# packages and then deploys all of the services in parallel:
#
# - Server: Deployed to Google Cloud Run
# - Client Workspace: Deployed with Netlify
# - Admin UI: Deployed with Netlify
#
# Reference docs:
# https://github.com/GoogleCloudPlatform/github-actions/blob/master/example-workflows/cloud-run/.github/workflows/cloud-run.yml
# https://cloud.google.com/run/docs/building/containers

name: Deploy Production

# Only deploy on commits to the main branch
on:
  push:
    branches:
      - main

# Environment variables available to all jobs and steps in this workflow
env:
  CI: true
  RUN_REGION: us-central1
  CLOUD_RUN_SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE_NAME }}
  CLOUD_RUN_PROJECT_ID: ${{ secrets.CLOUD_RUN_PROJECT_ID }}
  GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
  GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
  PRODUCTION_SERVER_URL: ${{ secrets.PRODUCTION_SERVER_URL }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_WORKSPACE_SITE_ID }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_WORKSPACE_AUTH_TOKEN }}
  NETLIFY_ADMIN_SITE_ID: ${{ secrets.NETLIFY_ADMIN_SITE_ID }}
  STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
  CLIENT_SENTRY_DSN: ${{ secrets.CLIENT_SENTRY_DSN }}
  SLACK_STATUS_BOT_ACCESS_TOKEN: ${{ secrets.SLACK_STATUS_BOT_ACCESS_TOKEN }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      # Setup NodeJS
      - name: Setup NodeJS Environment
        uses: actions/setup-node@v1
        with:
          node-version: 10.x

      # Install dependencies, if any package.json or lock files have changed
      - name: Install and cache dependencies
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: bonham000
          password: "${{ secrets.GITHUB_TOKEN }}"
          registry: docker.pkg.github.com
          dockerfile: Dependencies.Dockerfile
          image_name: pairwise-dependencies

      # Build the application
      - name: Build all packages
        run: yarn docker:build:ci_deploy

      # Run all package unit tests
      - name: Run static and unit tests
        run: yarn docker:test

      # Run e2e tests
      - name: Run e2e tests
        run: yarn e2e

      # Run Cypress tests
      - name: Run Cypress tests
        run: yarn cypress

      # Send Slack notification if workflow fails
      - name: Notify Slack on workflow failure
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_STATUS_BOT_ACCESS_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          color: danger
          status: FAILED
          channel_id: CTBG8AT0B

  server-deploy:
    name: Server Deploy
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      # Install dependencies, if any package.json or lock files have changed
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: bonham000
          password: "${{ secrets.GITHUB_TOKEN }}"

      # Setup gcloud CLI
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          service_account_email: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}

      # Configure gcloud CLI
      - name: Set gcloud project ID
        run: |
          gcloud config set project $CLOUD_RUN_PROJECT_ID

      # Configure Docker to use gcloud
      - name: Configure Docker with gcloud
        run: gcloud auth configure-docker

      # Build the server application directly (instead of using Google Cloud Build)
      - name: Build the server application
        run: |
          docker build \
            --tag gcr.io/$CLOUD_RUN_PROJECT_ID/$CLOUD_RUN_SERVICE_NAME:$GITHUB_SHA \
            -t pairwise-production \
            -f packages/server/Dockerfile .

      # Push the server image to gcloud
      - name: Push the server image to GCR
        run: docker push gcr.io/$CLOUD_RUN_PROJECT_ID/$CLOUD_RUN_SERVICE_NAME:$GITHUB_SHA

      # Deploy the image to Cloud Run
      - name: Deploy the server to Google Cloud Run
        run: |
          gcloud run deploy $CLOUD_RUN_SERVICE_NAME \
            --region $RUN_REGION \
            --image gcr.io/$CLOUD_RUN_PROJECT_ID/$CLOUD_RUN_SERVICE_NAME:$GITHUB_SHA \
            --platform managed

      # Send Slack notification if workflow fails
      - name: Notify Slack on workflow failure
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_STATUS_BOT_ACCESS_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          color: danger
          status: FAILED
          channel_id: CTBG8AT0B

  client-deploy:
    name: Client Deploy
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      # Install dependencies, if any package.json or lock files have changed
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: bonham000
          password: "${{ secrets.GITHUB_TOKEN }}"

      # Build the client application directly (instead of using Netlify)
      - name: Build the client workspace application
        run: |
          docker build \
            --build-arg REACT_APP_HOST=$PRODUCTION_SERVER_URL \
            --build-arg REACT_APP_STRIPE_API_KEY=$STRIPE_PUBLISHABLE_KEY \
            --build-arg REACT_APP_SENTRY_DSN=$CLIENT_SENTRY_DSN \
            -t pairwise-production-client \
            -f packages/client/Dockerfile .

      # Deploy client workspace on Netlify (no builds occur on Netlify)
      # (docs: https://github.com/netlify/cli/blob/master/docs/commands/deploy.md)
      # Note that in Netlify the production branch is set to some non-existent
      # branch, "master-x", to prevent automatically publishing. The only path to
      # publish the production client is this step right here:
      - name: Deploy the client workspace to Netlify
        run: |
          docker run \
            --env GITHUB_SHA=$GITHUB_SHA \
            --env NETLIFY_SITE_ID=$NETLIFY_SITE_ID \
            --env NETLIFY_AUTH_TOKEN=$NETLIFY_AUTH_TOKEN \
            -t pairwise-production-client

      # Send Slack notification if workflow fails
      - name: Notify Slack on workflow failure
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_STATUS_BOT_ACCESS_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          color: danger
          status: FAILED
          channel_id: CTBG8AT0B

  admin-deploy:
    name: Admin Deploy
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      # Install dependencies, if any package.json or lock files have changed
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: bonham000
          password: "${{ secrets.GITHUB_TOKEN }}"

      # Same setup as workspace client
      - name: Build the admin client application
        run: |
          docker build \
            --build-arg REACT_APP_HOST=$PRODUCTION_SERVER_URL \
            -t pairwise-admin-client \
            -f packages/admin/Dockerfile .

      # Same setup as workspace client
      - name: Deploy the admin client to Netlify
        run: |
          docker run \
            --env GITHUB_SHA=$GITHUB_SHA \
            --env NETLIFY_SITE_ID=$NETLIFY_ADMIN_SITE_ID \
            --env NETLIFY_AUTH_TOKEN=$NETLIFY_AUTH_TOKEN \
            -t pairwise-admin-client

      # Send Slack notification if workflow fails
      - name: Notify Slack on workflow failure
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_STATUS_BOT_ACCESS_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          color: danger
          status: FAILED
          channel_id: CTBG8AT0B

  # Provide a success confirmation to Slack when all the jobs pass
  deploy-success-notification:
    name: Deploy Success Notification
    needs: ["server-deploy", "client-deploy", "admin-deploy"]
    runs-on: ubuntu-latest

    steps:
      - name: Placeholder job step
        run: |
          echo "All jobs passed"

      # Send Slack notification
      # (docs: https://github.com/voxmedia/github-action-slack-notify-build)
      - name: Notify Slack on workflow success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_STATUS_BOT_ACCESS_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel_id: CTBG8AT0B
          status: SUCCESS
          color: good
